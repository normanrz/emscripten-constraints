// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB;
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (typeof _sbrk !== 'undefined' && !_sbrk.called) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the a given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);

HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;

// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 11056;
  /* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__sub_I_binding_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } });
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,88,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,248,255,255,255,88,0,0,0,7,0,0,0,8,0,0,0,78,52,114,104,101,97,49,52,115,105,109,112,108,101,120,95,115,111,108,118,101,114,69,0,120,35,0,0,64,0,0,0,0,0,0,0,2,0,0,0,48,3,0,0,2,0,0,0,56,3,0,0,2,8,0,0,115,117,98,115,116,105,116,117,116,101,32,118,97,114,105,97,98,108,101,32,105,115,32,110,111,116,32,112,97,114,116,32,111,102,32,116,104,101,32,101,120,112,114,101,115,115,105,111,110,0,0,0,0,0,0,0,0,0,0,0,16,8,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,208,7,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,40,1,0,0,27,0,0,0,28,0,0,0,29,0,0,0,0,0,0,0,24,35,0,0,128,7,0,0,96,4,0,0,0,0,0,0,0,0,0,0,32,7,0,0,30,0,0,0,31,0,0,0,32,0,0,0,12,0,0,0,33,0,0,0,0,0,0,0,0,0,0,0,240,6,0,0,14,0,0,0,34,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,216,5,0,0,39,0,0,0,40,0,0,0,41,0,0,0,12,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,128,5,0,0,14,0,0,0,43,0,0,0,16,0,0,0,17,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,48,0,0,0,0,0,0,0,240,34,0,0,96,5,0,0,24,35,0,0,64,5,0,0,144,3,0,0,0,0,0,0,24,35,0,0,40,5,0,0,96,4,0,0,0,0,0,0,24,35,0,0,8,5,0,0,96,4,0,0,0,0,0,0,0,0,0,0,72,2,0,0,49,0,0,0,50,0,0,0,51,0,0,0,0,0,0,0,24,35,0,0,216,4,0,0,32,2,0,0,0,0,0,0,0,0,0,0,112,2,0,0,27,0,0,0,52,0,0,0,53,0,0,0,0,0,0,0,24,35,0,0,128,4,0,0,96,4,0,0,0,0,0,0,100,117,97,108,95,111,112,116,105,109,105,122,101,58,32,110,111,32,112,105,118,111,116,32,102,111,117,110,100,0,0,0,0,0,0,0,184,2,0,0,54,0,0,0,55,0,0,0,56,0,0,0,0,0,0,0,24,35,0,0,72,4,0,0,96,4,0,0,0,0,0,0,111,98,106,101,99,116,105,118,101,32,102,117,110,99,116,105,111,110,32,105,115,32,117,110,98,111,117,110,100,101,100,0,0,0,0,0,32,2,0,0,27,0,0,0,57,0,0,0,51,0,0,0,0,0,0,0,110,111,116,101,95,114,101,109,111,118,101,100,95,118,97,114,105,97,98,108,101,58,32,115,117,98,106,101,99,116,32,110,111,116,32,105,110,32,99,111,108,117,109,110,0,0,0,0,240,34,0,0,80,3,0,0,240,34,0,0,64,3,0,0,78,52,114,104,101,97,55,116,97,98,108,101,97,117,69,0,78,52,114,104,101,97,54,115,111,108,118,101,114,69,0,0,97,32,114,101,113,117,105,114,101,100,32,99,111,110,115,116,114,97,105,110,116,32,99,97,110,110,111,116,32,98,101,32,115,97,116,105,115,102,105,101,100,0,0,0,0,0,0,0,24,35,0,0,160,3,0,0,248,1,0,0,0,0,0,0,78,52,114,104,101,97,50,51,101,100,105,116,95,111,114,95,115,116,97,121,95,99,111,110,115,116,114,97,105,110,116,69,0,0,0,0,0,0,0,0,24,35,0,0,216,3,0,0,128,41,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,115,104,97,114,101,100,95,112,116,114,95,101,109,112,108,97,99,101,73,78,52,114,104,101,97,49,53,101,100,105,116,95,99,111,110,115,116,114,97,105,110,116,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,0,240,34,0,0,48,4,0,0,78,52,114,104,101,97,56,115,116,114,101,110,103,116,104,69,0,0,0,0,0,0,0,0,78,52,114,104,101,97,49,52,105,110,116,101,114,110,97,108,95,101,114,114,111,114,69,0,24,35,0,0,112,4,0,0,248,31,0,0,0,0,0,0,78,52,114,104,101,97,53,101,114,114,111,114,69,0,0,0,78,52,114,104,101,97,50,48,99,111,110,115,116,114,97,105,110,116,95,110,111,116,95,102,111,117,110,100,69,0,0,0,116,114,105,101,100,32,116,111,32,114,101,109,111,118,101,32,97,32,99,111,110,115,116,114,97,105,110,116,32,116,104,97,116,32,119,97,115,32,110,101,118,101,114,32,97,100,100,101,100,0,0,0,0,0,0,0,78,52,114,104,101,97,51,51,114,101,113,117,105,114,101,100,95,102,97,105,108,117,114,101,95,119,105,116,104,95,101,120,112,108,97,110,97,116,105,111,110,69,0,0,0,0,0,0,78,52,114,104,101,97,49,54,114,101,113,117,105,114,101,100,95,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,78,52,114,104,101,97,49,49,101,100,105,116,95,109,105,115,117,115,101,69,0,0,0,0,78,52,114,104,101,97,49,53,101,100,105,116,95,99,111,110,115,116,114,97,105,110,116,69,0,0,0,0,0,0,0,0,78,52,114,104,101,97,49,57,97,98,115,116,114,97,99,116,95,99,111,110,115,116,114,97,105,110,116,69,0,0,0,0,24,35,0,0,152,5,0,0,176,5,0,0,0,0,0,0,100,117,109,109,121,0,0,0,78,52,114,104,101,97,49,52,100,117,109,109,121,95,118,97,114,105,97,98,108,101,69,0,240,34,0,0,184,5,0,0,78,52,114,104,101,97,49,55,97,98,115,116,114,97,99,116,95,118,97,114,105,97,98,108,101,69,0,0,0,0,0,0,24,35,0,0,232,5,0,0,128,41,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,115,104,97,114,101,100,95,112,116,114,95,101,109,112,108,97,99,101,73,78,52,114,104,101,97,49,52,100,117,109,109,121,95,118,97,114,105,97,98,108,101,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,0,0,24,35,0,0,72,6,0,0,96,6,0,0,0,0,0,0,78,52,114,104,101,97,49,52,102,108,111,97,116,95,118,97,114,105,97,98,108,101,69,0,24,35,0,0,112,6,0,0,176,5,0,0,0,0,0,0,78,52,114,104,101,97,49,50,112,111,100,95,118,97,114,105,97,98,108,101,73,100,69,69,0,0,0,0,0,0,0,0,24,35,0,0,160,6,0,0,128,41,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,115,104,97,114,101,100,95,112,116,114,95,101,109,112,108,97,99,101,73,78,52,114,104,101,97,49,52,102,108,111,97,116,95,118,97,114,105,97,98,108,101,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,0,0,24,35,0,0,8,7,0,0,176,5,0,0,0,0,0,0,115,108,97,99,107,0,0,0,78,52,114,104,101,97,49,52,115,108,97,99,107,95,118,97,114,105,97,98,108,101,69,0,24,35,0,0,48,7,0,0,128,41,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,115,104,97,114,101,100,95,112,116,114,95,101,109,112,108,97,99,101,73,78,52,114,104,101,97,49,52,115,108,97,99,107,95,118,97,114,105,97,98,108,101,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,0,0,78,52,114,104,101,97,49,51,114,111,119,95,110,111,116,95,102,111,117,110,100,69,0,0,114,111,119,32,100,111,101,115,32,110,111,116,32,101,120,105,115,116,0,0,0,0,0,0,240,34,0,0,184,7,0,0,78,52,114,104,101,97,49,48,99,111,110,115,116,114,97,105,110,116,69,0,0,0,0,0,24,35,0,0,240,7,0,0,176,5,0,0,0,0,0,0,111,98,106,101,99,116,105,118,101,0,0,0,0,0,0,0,78,52,114,104,101,97,49,56,111,98,106,101,99,116,105,118,101,95,118,97,114,105,97,98,108,101,69,0,0,0,0,0,24,35,0,0,32,8,0,0,128,41,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,115,104,97,114,101,100,95,112,116,114,95,101,109,112,108,97,99,101,73,78,52,114,104,101,97,49,56,111,98,106,101,99,116,105,118,101,95,118,97,114,105,97,98,108,101,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,0,0,144,6,0,0,58,0,0,0,59,0,0,0,60,0,0,0,12,0,0,0,61,0,0,0,0,0,0,0,0,0,0,0,56,6,0,0,62,0,0,0,63,0,0,0,64,0,0,0,17,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,0,0,0,0,0,0,0,0,40,4,0,0,74,0,0,0,0,0,0,0,0,0,0,0,248,1,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,16,2,0,0,83,0,0,0,84,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0,176,7,0,0,86,0,0,0,87,0,0,0,0,0,0,0,144,3,0,0,88,0,0,0,89,0,0,0,90,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,200,3,0,0,91,0,0,0,92,0,0,0,93,0,0,0,12,0,0,0,94,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,95,0,0,0,96,0,0,0,90,0,0,0,97,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,56,3,0,0,99,0,0,0,100,0,0,0,43,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,60,61,0,0,0,0,0,0,62,61,0,0,0,0,0,0,86,101,99,116,111,114,68,111,117,98,108,101,0,0,0,0,116,101,115,116,0,0,0,0,99,114,101,97,116,101,69,120,112,114,101,115,115,105,111,110,86,97,114,86,97,114,0,0,99,114,101,97,116,101,69,120,112,114,101,115,115,105,111,110,86,97,114,67,111,110,115,116,0,0,0,0,0,0,0,0,99,114,101,97,116,101,69,120,112,114,101,115,115,105,111,110,67,111,110,115,116,86,97,114,0,0,0,0,0,0,0,0,99,114,101,97,116,101,69,113,117,97,116,105,111,110,69,120,112,86,97,114,0,0,0,0,99,114,101,97,116,101,69,113,117,97,116,105,111,110,69,120,112,69,120,112,0,0,0,0,99,114,101,97,116,101,69,113,117,97,116,105,111,110,86,97,114,69,120,112,0,0,0,0,99,114,101,97,116,101,69,113,117,97,116,105,111,110,86,97,114,86,97,114,0,0,0,0,99,114,101,97,116,101,69,113,117,97,116,105,111,110,86,97,114,67,111,110,115,116,0,0,99,114,101,97,116,101,73,110,101,113,117,97,108,105,116,121,69,120,112,69,120,112,0,0,99,114,101,97,116,101,73,110,101,113,117,97,108,105,116,121,86,97,114,69,120,112,0,0,99,114,101,97,116,101,73,110,101,113,117,97,108,105,116,121,86,97,114,86,97,114,0,0,99,114,101,97,116,101,73,110,101,113,117,97,108,105,116,121,86,97,114,67,111,110,115,116,0,0,0,0,0,0,0,0,99,114,101,97,116,101,67,111,110,115,116,114,97,105,110,116,69,113,0,0,0,0,0,0,99,114,101,97,116,101,67,111,110,115,116,114,97,105,110,116,73,110,101,113,0,0,0,0,86,97,114,105,97,98,108,101,0,0,0,0,0,0,0,0,118,97,108,117,101,0,0,0,115,101,116,95,118,97,108,117,101,0,0,0,0,0,0,0,67,111,110,115,116,114,97,105,110,116,0,0,0,0,0,0,105,115,95,115,97,116,105,115,102,105,101,100,0,0,0,0,76,105,110,101,97,114,69,120,112,114,101,115,115,105,111,110,0,0,0,0,0,0,0,0,101,118,97,108,117,97,116,101,0,0,0,0,0,0,0,0,76,105,110,101,97,114,69,113,117,97,116,105,111,110,0,0,76,105,110,101,97,114,73,110,101,113,117,97,108,105,116,121,0,0,0,0,0,0,0,0,83,105,109,112,108,101,120,83,111,108,118,101,114,0,0,0,97,100,100,95,99,111,110,115,116,114,97,105,110,116,0,0,97,100,100,95,115,116,97,121,0,0,0,0,0,0,0,0,97,100,100,95,101,100,105,116,95,118,97,114,0,0,0,0,115,117,103,103,101,115,116,0,115,117,103,103,101,115,116,95,118,97,108,117,101,0,0,0,115,111,108,118,101,0,0,0,98,101,103,105,110,95,101,100,105,116,0,0,0,0,0,0,101,110,100,95,101,100,105,116,0,0,0,0,0,0,0,0,118,97,114,0,0,0,0,0,102,97,108,115,101,0,0,0,46,47,114,104,101,97,47,97,98,115,116,114,97,99,116,95,118,97,114,105,97,98,108,101,46,104,112,112,0,0,0,0,99,104,97,110,103,101,95,118,97,108,117,101,0,0,0,0,101,100,105,116,32,112,114,111,116,111,99,111,108,32,117,115,97,103,101,32,118,105,111,108,97,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,99,111,110,115,116,114,97,105,110,116,32,119,101,105,103,104,116,32,99,97,110,110,111,116,32,98,101,32,122,101,114,111,0,0,0,0,0,0,0,0,105,105,105,0,0,0,0,0,88,0,0,0,40,13,0,0,216,35,0,0,56,13,0,0,0,0,0,0,88,0,0,0,80,78,52,114,104,101,97,49,52,115,105,109,112,108,101,120,95,115,111,108,118,101,114,69,0,0,0,0,0,0,0,0,0,0,0,0,48,3,0,0,101,0,0,0,102,0,0,0,77,0,0,0,77,0,0,0,77,0,0,0,77,0,0,0,118,105,105,0,0,0,0,0,16,34,0,0,88,0,0,0,118,105,105,105,100,0,0,0,16,34,0,0,88,0,0,0,160,13,0,0,224,34,0,0,240,34,0,0,168,13,0,0,78,52,114,104,101,97,56,118,97,114,105,97,98,108,101,69,0,0,0,0,0,0,0,0,118,105,105,105,0,0,0,0,16,34,0,0,88,0,0,0,160,13,0,0,0,0,0,0,118,105,105,105,0,0,0,0,16,34,0,0,88,0,0,0,176,7,0,0,0,0,0,0,105,105,0,0,0,0,0,0,40,13,0,0,0,0,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,216,35,0,0,32,14,0,0,1,0,0,0,88,0,0,0,80,75,78,52,114,104,101,97,49,52,115,105,109,112,108,101,120,95,115,111,108,118,101,114,69,0,0,0,0,0,0,0,105,105,105,0,0,0,0,0,48,34,0,0,80,14,0,0,24,35,0,0,96,14,0,0,128,14,0,0,0,0,0,0,78,52,114,104,101,97,49,55,108,105,110,101,97,114,95,105,110,101,113,117,97,108,105,116,121,69,0,0,0,0,0,0,24,35,0,0,144,14,0,0,248,1,0,0,0,0,0,0,78,52,114,104,101,97,49,55,108,105,110,101,97,114,95,99,111,110,115,116,114,97,105,110,116,69,0,0,0,0,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,216,35,0,0,208,14,0,0,1,0,0,0,80,14,0,0,80,75,78,52,114,104,101,97,49,55,108,105,110,101,97,114,95,105,110,101,113,117,97,108,105,116,121,69,0,0,0,0,216,35,0,0,0,15,0,0,0,0,0,0,80,14,0,0,80,78,52,114,104,101,97,49,55,108,105,110,101,97,114,95,105,110,101,113,117,97,108,105,116,121,69,0,0,0,0,0,105,105,105,0,0,0,0,0,48,34,0,0,48,15,0,0,24,35,0,0,64,15,0,0,128,14,0,0,0,0,0,0,78,52,114,104,101,97,49,53,108,105,110,101,97,114,95,101,113,117,97,116,105,111,110,69,0,0,0,0,0,0,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,216,35,0,0,128,15,0,0,1,0,0,0,48,15,0,0,80,75,78,52,114,104,101,97,49,53,108,105,110,101,97,114,95,101,113,117,97,116,105,111,110,69,0,0,0,0,0,0,216,35,0,0,176,15,0,0,0,0,0,0,48,15,0,0,80,78,52,114,104,101,97,49,53,108,105,110,101,97,114,95,101,113,117,97,116,105,111,110,69,0,0,0,0,0,0,0,100,105,105,0,0,0,0,0,224,34,0,0,224,15,0,0,216,35,0,0,240,15,0,0,1,0,0,0,16,16,0,0,80,75,78,52,114,104,101,97,49,55,108,105,110,101,97,114,95,101,120,112,114,101,115,115,105,111,110,69,0,0,0,0,240,34,0,0,24,16,0,0,78,52,114,104,101,97,49,55,108,105,110,101,97,114,95,101,120,112,114,101,115,115,105,111,110,69,0,0,0,0,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,216,35,0,0,88,16,0,0,0,0,0,0,16,16,0,0,80,78,52,114,104,101,97,49,55,108,105,110,101,97,114,95,101,120,112,114,101,115,115,105,111,110,69,0,0,0,0,0,105,105,105,0,0,0,0,0,48,34,0,0,176,7,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,216,35,0,0,168,16,0,0,1,0,0,0,176,7,0,0,80,75,78,52,114,104,101,97,49,48,99,111,110,115,116,114,97,105,110,116,69,0,0,0,216,35,0,0,208,16,0,0,0,0,0,0,176,7,0,0,80,78,52,114,104,101,97,49,48,99,111,110,115,116,114,97,105,110,116,69,0,0,0,0,118,105,105,100,0,0,0,0,16,34,0,0,0,17,0,0,224,34,0,0,0,0,0,0,216,35,0,0,16,17,0,0,0,0,0,0,160,13,0,0,80,78,52,114,104,101,97,56,118,97,114,105,97,98,108,101,69,0,0,0,0,0,0,0,100,105,105,0,0,0,0,0,224,34,0,0,56,17,0,0,216,35,0,0,72,17,0,0,1,0,0,0,160,13,0,0,80,75,78,52,114,104,101,97,56,118,97,114,105,97,98,108,101,69,0,0,0,0,0,0,105,105,100,0,0,0,0,0,0,17,0,0,224,34,0,0,105,105,0,0,0,0,0,0,0,17,0,0,0,0,0,0,118,105,0,0,0,0,0,0,118,0,0,0,0,0,0,0,105,105,0,0,0,0,0,0,105,105,105,0,0,0,0,0,176,7,0,0,80,14,0,0,105,105,105,0,0,0,0,0,176,7,0,0,48,15,0,0,105,105,105,105,100,0,0,0,80,14,0,0,160,13,0,0,208,17,0,0,224,34,0,0,120,35,0,0,232,17,0,0,0,0,0,0,1,0,0,0,40,18,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,240,34,0,0,48,18,0,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,0,0,0,0,0,0,80,14,0,0,103,0,0,0,104,0,0,0,105,0,0,0,78,0,0,0,106,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,107,0,0,0,0,0,0,0,0,0,0,0,128,14,0,0,108,0,0,0,109,0,0,0,105,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,77,0,0,0,0,0,0,0,105,105,105,105,105,0,0,0,80,14,0,0,160,13,0,0,208,17,0,0,160,13,0,0,105,105,105,105,105,0,0,0,80,14,0,0,160,13,0,0,208,17,0,0,16,16,0,0,105,105,105,105,105,0,0,0,80,14,0,0,16,16,0,0,208,17,0,0,16,16,0,0,105,105,105,100,0,0,0,0,48,15,0,0,160,13,0,0,224,34,0,0,0,0,0,0,0,0,0,0,48,15,0,0,110,0,0,0,111,0,0,0,105,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,112,0,0,0,0,0,0,0,105,105,105,105,0,0,0,0,48,15,0,0,160,13,0,0,160,13,0,0,0,0,0,0,105,105,105,105,0,0,0,0,48,15,0,0,160,13,0,0,16,16,0,0,0,0,0,0,105,105,105,105,0,0,0,0,48,15,0,0,16,16,0,0,16,16,0,0,0,0,0,0,105,105,105,105,0,0,0,0,48,15,0,0,16,16,0,0,160,13,0,0,0,0,0,0,105,105,100,105,105,0,0,0,16,16,0,0,224,34,0,0,208,17,0,0,160,13,0,0,105,105,105,105,100,0,0,0,16,16,0,0,160,13,0,0,208,17,0,0,224,34,0,0,105,105,105,105,105,0,0,0,16,16,0,0,160,13,0,0,208,17,0,0,160,13,0,0,105,105,0,0,0,0,0,0,0,20,0,0,0,0,0,0,120,35,0,0,24,20,0,0,0,0,0,0,1,0,0,0,64,20,0,0,0,0,0,0,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,100,78,83,95,57,97,108,108,111,99,97,116,111,114,73,100,69,69,69,69,0,0,0,0,0,120,35,0,0,88,20,0,0,0,0,0,0,1,0,0,0,136,20,0,0,0,0,0,0,78,83,116,51,95,95,49,49,51,95,95,118,101,99,116,111,114,95,98,97,115,101,73,100,78,83,95,57,97,108,108,111,99,97,116,111,114,73,100,69,69,69,69,0,0,0,0,0,240,34,0,0,144,20,0,0,78,83,116,51,95,95,49,50,48,95,95,118,101,99,116,111,114,95,98,97,115,101,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,0,0,0,112,117,115,104,95,98,97,99,107,0,0,0,0,0,0,0,114,101,115,105,122,101,0,0,115,105,122,101,0,0,0,0,103,101,116,0,0,0,0,0,115,101,116,0,0,0,0,0,105,105,105,105,100,0,0,0,48,34,0,0,0,20,0,0,160,34,0,0,224,34,0,0,105,105,105,105,0,0,0,0,24,21,0,0,0,20,0,0,160,34,0,0,0,0,0,0,240,34,0,0,32,21,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,0,0,0,0,0,105,105,105,0,0,0,0,0,160,34,0,0,72,21,0,0,216,35,0,0,88,21,0,0,1,0,0,0,0,20,0,0,80,75,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,100,78,83,95,57,97,108,108,111,99,97,116,111,114,73,100,69,69,69,69,0,0,0,118,105,105,105,100,0,0,0,16,34,0,0,152,21,0,0,160,34,0,0,224,34,0,0,216,35,0,0,168,21,0,0,0,0,0,0,0,20,0,0,80,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,100,78,83,95,57,97,108,108,111,99,97,116,111,114,73,100,69,69,69,69,0,0,0,0,118,105,105,100,0,0,0,0,16,34,0,0,152,21,0,0,224,34,0,0,0,0,0,0,105,105,0,0,0,0,0,0,152,21,0,0,0,0,0,0,118,105,0,0,0,0,0,0,105,105,0,0,0,0,0,0,33,105,115,95,110,105,108,40,41,0,0,0,0,0,0,0,46,47,114,104,101,97,47,118,97,114,105,97,98,108,101,46,104,112,112,0,0,0,0,0,0,0,0,0,96,6,0,0,113,0,0,0,114,0,0,0,16,0,0,0,17,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,22,0,0,0,23,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,0,0,0,0,0,0,0,0,176,5,0,0,14,0,0,0,115,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,116,0,0,0,117,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,118,0,0,0,0,0,0,0,97,98,115,116,114,97,99,116,0,0,0,0,0,0,0,0,118,97,114,105,97,98,108,101,32,110,111,116,32,117,115,97,98,108,101,32,105,110,115,105,100,101,32,115,105,109,112,108,101,120,95,115,111,108,118,101,114,0,0,0,0,0,0,0,24,35,0,0,72,23,0,0,96,4,0,0,0,0,0,0,0,0,0,0,240,22,0,0,119,0,0,0,120,0,0,0,121,0,0,0,0,0,0,0,116,104,101,32,99,111,110,115,116,114,97,105,110,116,115,32,97,114,101,32,116,111,111,32,100,105,102,102,105,99,117,108,116,32,116,111,32,115,111,108,118,101,0,0,0,0,0,0,78,52,114,104,101,97,49,51,116,111,111,95,100,105,102,102,105,99,117,108,116,69,0,0,0,0,0,0,96,4,0,0,122,0,0,0,123,0,0,0,124,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,16,24,0,0,125,0,0,0,126,0,0,0,127,0,0,0,12,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,224,23,0,0,129,0,0,0,130,0,0,0,90,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,131,0,0,0,82,0,0,0,132,0,0,0,0,0,0,0,24,35,0,0,240,23,0,0,144,3,0,0,0,0,0,0,78,52,114,104,101,97,49,53,115,116,97,121,95,99,111,110,115,116,114,97,105,110,116,69,0,0,0,0,0,0,0,0,24,35,0,0,32,24,0,0,128,41,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,115,104,97,114,101,100,95,112,116,114,95,101,109,112,108,97,99,101,73,78,52,114,104,101,97,49,53,115,116,97,121,95,99,111,110,115,116,114,97,105,110,116,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,0,0,0,0,0,144,24,0,0,133,0,0,0,134,0,0,0,135,0,0,0,12,0,0,0,136,0,0,0,0,0,0,0,24,35,0,0,160,24,0,0,128,41,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,115,104,97,114,101,100,95,112,116,114,95,101,109,112,108,97,99,101,73,78,52,114,104,101,97,49,55,108,105,110,101,97,114,95,105,110,101,113,117,97,108,105,116,121,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,0,0,0,16,25,0,0,137,0,0,0,138,0,0,0,139,0,0,0,12,0,0,0,140,0,0,0,0,0,0,0,24,35,0,0,32,25,0,0,128,41,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,115,104,97,114,101,100,95,112,116,114,95,101,109,112,108,97,99,101,73,78,52,114,104,101,97,49,53,108,105,110,101,97,114,95,101,113,117,97,116,105,111,110,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,50,95,69,69,69,69,0,0,0,0,0,118,111,105,100,0,0,0,0,98,111,111,108,0,0,0,0,99,104,97,114,0,0,0,0,115,105,103,110,101,100,32,99,104,97,114,0,0,0,0,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,0,0,115,104,111,114,116,0,0,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,0,105,110,116,0,0,0,0,0,117,110,115,105,103,110,101,100,32,105,110,116,0,0,0,0,108,111,110,103,0,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,0,0,102,108,111,97,116,0,0,0,100,111,117,98,108,101,0,0,115,116,100,58,58,115,116,114,105,110,103,0,0,0,0,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,0,0,0,0,0,0,0,115,116,100,58,58,119,115,116,114,105,110,103,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95,116,62,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,0,0,0,240,34,0,0,248,28,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,101,69,69,0,0,240,34,0,0,32,29,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,100,69,69,0,0,240,34,0,0,72,29,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,102,69,69,0,0,240,34,0,0,112,29,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,109,69,69,0,0,240,34,0,0,152,29,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,108,69,69,0,0,240,34,0,0,192,29,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,106,69,69,0,0,240,34,0,0,232,29,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,105,69,69,0,0,240,34,0,0,16,30,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,116,69,69,0,0,240,34,0,0,56,30,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,115,69,69,0,0,240,34,0,0,96,30,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,104,69,69,0,0,240,34,0,0,136,30,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,97,69,69,0,0,240,34,0,0,176,30,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,99,69,69,0,0,120,35,0,0,232,30,0,0,0,0,0,0,1,0,0,0,40,18,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,0,120,35,0,0,64,31,0,0,0,0,0,0,1,0,0,0,40,18,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,0,0,0,0,0,0,0,0,0,141,0,0,0,0,0,0,0,0,0,0,0,184,31,0,0,142,0,0,0,143,0,0,0,144,0,0,0,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,24,35,0,0,168,31,0,0,248,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,31,0,0,27,0,0,0,145,0,0,0,146,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,240,34,0,0,232,31,0,0,0,0,0,0,48,32,0,0,147,0,0,0,148,0,0,0,149,0,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,24,35,0,0,24,32,0,0,248,31,0,0,0,0,0,0,0,0,0,0,112,32,0,0,147,0,0,0,150,0,0,0,149,0,0,0,0,0,0,0,83,116,49,52,111,118,101,114,102,108,111,119,95,101,114,114,111,114,0,0,0,0,0,0,24,35,0,0,88,32,0,0,48,32,0,0,0,0,0,0,0,0,0,0,192,32,0,0,151,0,0,0,152,0,0,0,153,0,0,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,240,34,0,0,152,32,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,24,35,0,0,176,32,0,0,248,31,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,24,35,0,0,208,32,0,0,168,32,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,24,35,0,0,8,33,0,0,248,32,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,24,35,0,0,104,33,0,0,248,32,0,0,0,0,0,0,24,35,0,0,64,33,0,0,144,33,0,0,0,0,0,0,0,0,0,0,248,33,0,0,154,0,0,0,155,0,0,0,156,0,0,0,157,0,0,0,158,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,24,35,0,0,208,33,0,0,248,32,0,0,0,0,0,0,118,0,0,0,0,0,0,0,184,33,0,0,8,34,0,0,68,110,0,0,0,0,0,0,184,33,0,0,24,34,0,0,98,0,0,0,0,0,0,0,184,33,0,0,40,34,0,0,99,0,0,0,0,0,0,0,184,33,0,0,56,34,0,0,104,0,0,0,0,0,0,0,184,33,0,0,72,34,0,0,97,0,0,0,0,0,0,0,184,33,0,0,88,34,0,0,115,0,0,0,0,0,0,0,184,33,0,0,104,34,0,0,116,0,0,0,0,0,0,0,184,33,0,0,120,34,0,0,105,0,0,0,0,0,0,0,184,33,0,0,136,34,0,0,106,0,0,0,0,0,0,0,184,33,0,0,152,34,0,0,108,0,0,0,0,0,0,0,184,33,0,0,168,34,0,0,109,0,0,0,0,0,0,0,184,33,0,0,184,34,0,0,102,0,0,0,0,0,0,0,184,33,0,0,200,34,0,0,100,0,0,0,0,0,0,0,184,33,0,0,216,34,0,0,0,0,0,0,48,33,0,0,154,0,0,0,159,0,0,0,156,0,0,0,157,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,163,0,0,0,0,0,0,0,96,35,0,0,154,0,0,0,164,0,0,0,156,0,0,0,157,0,0,0,160,0,0,0,165,0,0,0,166,0,0,0,167,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,24,35,0,0,56,35,0,0,48,33,0,0,0,0,0,0,0,0,0,0,192,35,0,0,154,0,0,0,168,0,0,0,156,0,0,0,157,0,0,0,160,0,0,0,169,0,0,0,170,0,0,0,171,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,24,35,0,0,152,35,0,0,48,33,0,0,0,0,0,0,0,0,0,0,160,33,0,0,154,0,0,0,172,0,0,0,156,0,0,0,157,0,0,0,173,0,0,0,0,0,0,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,0,47,117,115,114,47,108,111,99,97,108,47,67,101,108,108,97,114,47,101,109,115,99,114,105,112,116,101,110,47,49,46,51,51,46,48,47,108,105,98,101,120,101,99,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,118,101,99,116,111,114,0,0,0,0,0,0,0,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,115,116,100,58,58,101,120,99,101,112,116,105,111,110,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,67,101,108,108,97,114,47,101,109,115,99,114,105,112,116,101,110,47,49,46,51,51,46,48,47,108,105,98,101,120,101,99,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,115,116,114,105,110,103,0,0,0,0,0,0,0,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,111,117,116,95,111,102,95,114,97,110,103,101,34,0,0,0,0,95,95,116,104,114,111,119,95,111,117,116,95,111,102,95,114,97,110,103,101,0,0,0,0,0,39,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,117,110,99,97,117,103,104,116], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([56,41,0,0,174,0,0,0,175,0,0,0,77,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,240,34,0,0,24,41,0,0,0,0,0,0,128,41,0,0,174,0,0,0,176,0,0,0,77,0,0,0,12,0,0,0,77,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,115,104,97,114,101,100,95,119,101,97,107,95,99,111,117,110,116,69,0,0,0,120,35,0,0,96,41,0,0,0,0,0,0,1,0,0,0,56,41,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,7,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,211,0,0,0,95,95,110,101,120,116,95,112,114,105,109,101,32,111,118,101,114,102,108,111,119,0,0,0,1,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,121,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,143,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,169,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,187,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,209,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10492);




/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }function ___errno_location() {
      return ___errno_state;
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  var _emscripten_landingpad=true;

  function _abort() {
      Module['abort']();
    }

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }


  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          });
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  
  function runDestructor(handle) {
      var $$ = handle.$$;
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      this.$$.count.value -= 1;
      var toDelete = 0 === this.$$.count.value;
      if (toDelete) {
          runDestructor(this);
      }
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              var ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  
  var _throwInternalError=undefined;function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return Object.create(prototype, {
          $$: {
              value: record,
          },
      });
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
      }
    }
  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = asm['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = asm['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = requireFunction(downcastSignature, downcast);
      }
      rawDestructor = requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

   
  Module["_strlen"] = _strlen;

  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _emscripten_postinvoke=true;

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 1; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](argv);
      return __emval_register(v);
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
      
      var fromWireType = function(value) {
          return value;
      };
      
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return value | 0;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  var _ceilf=Math_ceil;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = requireFunction(invokerSignature, invoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  var destructors = [];
                  var args = new Array(argCount);
                  args[0] = rawConstructor;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  var _llvm_ctlz_i32=true;

  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  var _emscripten_resume=true;

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
      
      rawInvoker = requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  
  
  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 7) === 0);
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function _llvm_eh_typeid_for(type) {
      return type;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  var _emscripten_preinvoke=true;

  function ___gxx_personality_v0() {
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = EXCEPTIONS.caught.pop();
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

embind_init_charCodes()
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
init_ClassHandle()
init_RegisteredPointer()
init_embind();
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });
init_emval();
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viidd(x) { Module["printErr"]("Invalid function pointer called with signature 'viidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidii(x) { Module["printErr"]("Invalid function pointer called with signature 'vidii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dd(x) { Module["printErr"]("Invalid function pointer called with signature 'dd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iid(x) { Module["printErr"]("Invalid function pointer called with signature 'iid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iidii(x) { Module["printErr"]("Invalid function pointer called with signature 'iidii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viidd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viidd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_vidii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiid(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dd(index,a1) {
  try {
    return Module["dynCall_dd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iid(index,a1,a2) {
  try {
    return Module["dynCall_iid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iidii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iidii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiid(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiid"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiid(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiid"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vid": nullFunc_vid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viidd": nullFunc_viidd, "nullFunc_vidii": nullFunc_vidii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiid": nullFunc_viiiiid, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iiid": nullFunc_iiid, "nullFunc_di": nullFunc_di, "nullFunc_dd": nullFunc_dd, "nullFunc_iid": nullFunc_iid, "nullFunc_iii": nullFunc_iii, "nullFunc_dii": nullFunc_dii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iidii": nullFunc_iidii, "nullFunc_viiid": nullFunc_viiid, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_viid": nullFunc_viid, "nullFunc_iiiid": nullFunc_iiiid, "nullFunc_viiii": nullFunc_viiii, "invoke_viiiii": invoke_viiiii, "invoke_vid": invoke_vid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viidd": invoke_viidd, "invoke_vidii": invoke_vidii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiid": invoke_viiiiid, "invoke_viiiiii": invoke_viiiiii, "invoke_iiid": invoke_iiid, "invoke_di": invoke_di, "invoke_dd": invoke_dd, "invoke_iid": invoke_iid, "invoke_iii": invoke_iii, "invoke_dii": invoke_dii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_iidii": invoke_iidii, "invoke_viiid": invoke_viiid, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_iiiid": invoke_iiiid, "invoke_viiii": invoke_viiii, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "RegisteredPointer_getPointee": RegisteredPointer_getPointee, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "getLiveInheritedInstances": getLiveInheritedInstances, "__emval_register": __emval_register, "___assert_fail": ___assert_fail, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "ClassHandle": ClassHandle, "getShiftFromSize": getShiftFromSize, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_ceilf": _ceilf, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "runDestructor": runDestructor, "_sysconf": _sysconf, "throwInstanceAlreadyDeleted": throwInstanceAlreadyDeleted, "RegisteredPointer_fromWireType": RegisteredPointer_fromWireType, "init_RegisteredPointer": init_RegisteredPointer, "ClassHandle_isAliasOf": ClassHandle_isAliasOf, "flushPendingDeletes": flushPendingDeletes, "makeClassHandle": makeClassHandle, "_write": _write, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "__embind_register_class_constructor": __embind_register_class_constructor, "___cxa_rethrow": ___cxa_rethrow, "init_ClassHandle": init_ClassHandle, "ClassHandle_clone": ClassHandle_clone, "_send": _send, "RegisteredClass": RegisteredClass, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "embind_init_charCodes": embind_init_charCodes, "___setErrNo": ___setErrNo, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "createNamedFunction": createNamedFunction, "__embind_register_emval": __embind_register_emval, "__emval_decref": __emval_decref, "_pthread_once": _pthread_once, "__embind_register_class": __embind_register_class, "constNoSmartPtrRawPointerToWireType": constNoSmartPtrRawPointerToWireType, "heap32VectorToArray": heap32VectorToArray, "ClassHandle_delete": ClassHandle_delete, "getInheritedInstanceCount": getInheritedInstanceCount, "RegisteredPointer_destructor": RegisteredPointer_destructor, "ensureOverloadTable": ensureOverloadTable, "_time": _time, "_fprintf": _fprintf, "new_": new_, "downcastPointer": downcastPointer, "replacePublicSymbol": replacePublicSymbol, "init_embind": init_embind, "ClassHandle_deleteLater": ClassHandle_deleteLater, "integerReadValueFromPointer": integerReadValueFromPointer, "RegisteredPointer_deleteObject": RegisteredPointer_deleteObject, "ClassHandle_isDeleted": ClassHandle_isDeleted, "_vfprintf": _vfprintf, "__embind_register_integer": __embind_register_integer, "___cxa_allocate_exception": ___cxa_allocate_exception, "__emval_take_value": __emval_take_value, "_pwrite": _pwrite, "___cxa_end_catch": ___cxa_end_catch, "_embind_repr": _embind_repr, "_pthread_getspecific": _pthread_getspecific, "__embind_register_class_function": __embind_register_class_function, "throwUnboundTypeError": throwUnboundTypeError, "craftInvokerFunction": craftInvokerFunction, "runDestructors": runDestructors, "requireRegisteredType": requireRegisteredType, "makeLegalFunctionName": makeLegalFunctionName, "_pthread_key_create": _pthread_key_create, "upcastPointer": upcastPointer, "init_emval": init_emval, "shallowCopyInternalPointer": shallowCopyInternalPointer, "nonConstNoSmartPtrRawPointerToWireType": nonConstNoSmartPtrRawPointerToWireType, "_fputc": _fputc, "_abort": _abort, "throwBindingError": throwBindingError, "getTypeName": getTypeName, "exposePublicSymbol": exposePublicSymbol, "__embind_register_std_string": __embind_register_std_string, "___cxa_pure_virtual": ___cxa_pure_virtual, "__embind_register_memory_view": __embind_register_memory_view, "getInheritedInstance": getInheritedInstance, "setDelayFunction": setDelayFunction, "___gxx_personality_v0": ___gxx_personality_v0, "extendError": extendError, "_fwrite": _fwrite, "__embind_register_void": __embind_register_void, "_fflush": _fflush, "__reallyNegative": __reallyNegative, "_llvm_eh_typeid_for": _llvm_eh_typeid_for, "__embind_register_std_wstring": __embind_register_std_wstring, "_fileno": _fileno, "__emval_incref": __emval_incref, "RegisteredPointer": RegisteredPointer, "readLatin1String": readLatin1String, "getBasestPointer": getBasestPointer, "_mkport": _mkport, "__embind_register_float": __embind_register_float, "_sbrk": _sbrk, "__embind_register_function": __embind_register_function, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_pthread_setspecific": _pthread_setspecific, "genericPointerToWireType": genericPointerToWireType, "registerType": registerType, "___cxa_throw": ___cxa_throw, "count_emval_handles": count_emval_handles, "requireFunction": requireFunction, "__formatString": __formatString, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "_stderr": _stderr };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var _stderr=env._stderr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viidd=env.nullFunc_viidd;
  var nullFunc_vidii=env.nullFunc_vidii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiid=env.nullFunc_viiiiid;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iiid=env.nullFunc_iiid;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_dd=env.nullFunc_dd;
  var nullFunc_iid=env.nullFunc_iid;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iidii=env.nullFunc_iidii;
  var nullFunc_viiid=env.nullFunc_viiid;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viid=env.nullFunc_viid;
  var nullFunc_iiiid=env.nullFunc_iiiid;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vid=env.invoke_vid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viidd=env.invoke_viidd;
  var invoke_vidii=env.invoke_vidii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iiid=env.invoke_iiid;
  var invoke_di=env.invoke_di;
  var invoke_dd=env.invoke_dd;
  var invoke_iid=env.invoke_iid;
  var invoke_iii=env.invoke_iii;
  var invoke_dii=env.invoke_dii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iidii=env.invoke_iidii;
  var invoke_viiid=env.invoke_viiid;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viid=env.invoke_viid;
  var invoke_iiiid=env.invoke_iiiid;
  var invoke_viiii=env.invoke_viiii;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var RegisteredPointer_getPointee=env.RegisteredPointer_getPointee;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var getLiveInheritedInstances=env.getLiveInheritedInstances;
  var __emval_register=env.__emval_register;
  var ___assert_fail=env.___assert_fail;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ClassHandle=env.ClassHandle;
  var getShiftFromSize=env.getShiftFromSize;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _ceilf=env._ceilf;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var runDestructor=env.runDestructor;
  var _sysconf=env._sysconf;
  var throwInstanceAlreadyDeleted=env.throwInstanceAlreadyDeleted;
  var RegisteredPointer_fromWireType=env.RegisteredPointer_fromWireType;
  var init_RegisteredPointer=env.init_RegisteredPointer;
  var ClassHandle_isAliasOf=env.ClassHandle_isAliasOf;
  var flushPendingDeletes=env.flushPendingDeletes;
  var makeClassHandle=env.makeClassHandle;
  var _write=env._write;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var __embind_register_class_constructor=env.__embind_register_class_constructor;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var init_ClassHandle=env.init_ClassHandle;
  var ClassHandle_clone=env.ClassHandle_clone;
  var _send=env._send;
  var RegisteredClass=env.RegisteredClass;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var embind_init_charCodes=env.embind_init_charCodes;
  var ___setErrNo=env.___setErrNo;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var createNamedFunction=env.createNamedFunction;
  var __embind_register_emval=env.__embind_register_emval;
  var __emval_decref=env.__emval_decref;
  var _pthread_once=env._pthread_once;
  var __embind_register_class=env.__embind_register_class;
  var constNoSmartPtrRawPointerToWireType=env.constNoSmartPtrRawPointerToWireType;
  var heap32VectorToArray=env.heap32VectorToArray;
  var ClassHandle_delete=env.ClassHandle_delete;
  var getInheritedInstanceCount=env.getInheritedInstanceCount;
  var RegisteredPointer_destructor=env.RegisteredPointer_destructor;
  var ensureOverloadTable=env.ensureOverloadTable;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var new_=env.new_;
  var downcastPointer=env.downcastPointer;
  var replacePublicSymbol=env.replacePublicSymbol;
  var init_embind=env.init_embind;
  var ClassHandle_deleteLater=env.ClassHandle_deleteLater;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var RegisteredPointer_deleteObject=env.RegisteredPointer_deleteObject;
  var ClassHandle_isDeleted=env.ClassHandle_isDeleted;
  var _vfprintf=env._vfprintf;
  var __embind_register_integer=env.__embind_register_integer;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __emval_take_value=env.__emval_take_value;
  var _pwrite=env._pwrite;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _embind_repr=env._embind_repr;
  var _pthread_getspecific=env._pthread_getspecific;
  var __embind_register_class_function=env.__embind_register_class_function;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var craftInvokerFunction=env.craftInvokerFunction;
  var runDestructors=env.runDestructors;
  var requireRegisteredType=env.requireRegisteredType;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var _pthread_key_create=env._pthread_key_create;
  var upcastPointer=env.upcastPointer;
  var init_emval=env.init_emval;
  var shallowCopyInternalPointer=env.shallowCopyInternalPointer;
  var nonConstNoSmartPtrRawPointerToWireType=env.nonConstNoSmartPtrRawPointerToWireType;
  var _fputc=env._fputc;
  var _abort=env._abort;
  var throwBindingError=env.throwBindingError;
  var getTypeName=env.getTypeName;
  var exposePublicSymbol=env.exposePublicSymbol;
  var __embind_register_std_string=env.__embind_register_std_string;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var getInheritedInstance=env.getInheritedInstance;
  var setDelayFunction=env.setDelayFunction;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var extendError=env.extendError;
  var _fwrite=env._fwrite;
  var __embind_register_void=env.__embind_register_void;
  var _fflush=env._fflush;
  var __reallyNegative=env.__reallyNegative;
  var _llvm_eh_typeid_for=env._llvm_eh_typeid_for;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var _fileno=env._fileno;
  var __emval_incref=env.__emval_incref;
  var RegisteredPointer=env.RegisteredPointer;
  var readLatin1String=env.readLatin1String;
  var getBasestPointer=env.getBasestPointer;
  var _mkport=env._mkport;
  var __embind_register_float=env.__embind_register_float;
  var _sbrk=env._sbrk;
  var __embind_register_function=env.__embind_register_function;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var _pthread_setspecific=env._pthread_setspecific;
  var genericPointerToWireType=env.genericPointerToWireType;
  var registerType=env.registerType;
  var ___cxa_throw=env.___cxa_throw;
  var count_emval_handles=env.count_emval_handles;
  var requireFunction=env.requireFunction;
  var __formatString=env.__formatString;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN4rhea17linear_expressionC2Ed($this,$constant) {
 $this = $this|0;
 $constant = +$constant;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[$this>>3] = $constant;
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 16|0);
 HEAP32[$2>>2] = 0;
 return;
}
function __ZN4rhea17linear_expressionC2ERKNS_8variableEdd($this,$v,$mul,$constant) {
 $this = $this|0;
 $v = $v|0;
 $mul = +$mul;
 $constant = +$constant;
 var $$pre$i = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[$this>>3] = $constant;
 $0 = ((($this)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($this)) + 12|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 16|0);
 HEAP32[$2>>2] = 0;
 __THREW__ = 0;
 $3 = (invoke_iii(177,($0|0),($v|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  HEAPF64[$3>>3] = $mul;
  return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $8 = HEAP32[$0>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  ___resumeException($6|0);
  // unreachable;
 }
 $10 = HEAP32[$1>>2]|0;
 $11 = ($10|0)==($8|0);
 if ($11) {
  $19 = $8;
 } else {
  $13 = $10;
  while(1) {
   $12 = ((($13)) + -16|0);
   HEAP32[$1>>2] = $12;
   $14 = ((($13)) + -12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   if ($16) {
    $18 = $12;
   } else {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($15);
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $18 = $$pre$i$i$i;
   }
   $17 = ($18|0)==($8|0);
   if ($17) {
    break;
   } else {
    $13 = $18;
   }
  }
  $$pre$i = HEAP32[$0>>2]|0;
  $19 = $$pre$i;
 }
 __ZdlPv($19);
 ___resumeException($6|0);
 // unreachable;
}
function __ZN4rhea17linear_expressionmLEd($this,$x) {
 $this = $this|0;
 $x = +$x;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[$this>>3];
 $1 = $0 * $x;
 HEAPF64[$this>>3] = $1;
 $2 = ((($this)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($this)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  return ($this|0);
 } else {
  $8 = $3;
 }
 while(1) {
  $7 = ((($8)) + 8|0);
  $9 = +HEAPF64[$7>>3];
  $10 = $9 * $x;
  HEAPF64[$7>>3] = $10;
  $11 = ((($8)) + 16|0);
  $12 = ($11|0)==($5|0);
  if ($12) {
   break;
  } else {
   $8 = $11;
  }
 }
 return ($this|0);
}
function __ZN4rhea17linear_expressionpLERKS0_($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[$x>>3];
 $1 = +HEAPF64[$this>>3];
 $2 = $0 + $1;
 HEAPF64[$this>>3] = $2;
 $3 = ((($x)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($x)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  return ($this|0);
 } else {
  $8 = $4;
 }
 while(1) {
  (__ZN4rhea17linear_expressionpLERKNSt3__14pairINS_8variableEdEE($this,$8)|0);
  $9 = ((($8)) + 16|0);
  $10 = ($9|0)==($6|0);
  if ($10) {
   break;
  } else {
   $8 = $9;
  }
 }
 return ($this|0);
}
function __ZN4rhea17linear_expressionpLERKNSt3__14pairINS_8variableEdEE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i3 = 0, $$0$in$i$i = 0.0, $$0$in$i$i2 = 0.0, $$0$lcssa$i$i$i$i = 0, $$012$i$i$i$i = 0, $$03$i$i$i$i = 0, $$neg2$i$i$i$i = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$sum$i$i = 0, $$sum$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $__first5$i$i$i$i = 0, $__len$0$be$i$i$i$i = 0, $__len$03$i$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep7$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 $5 = $1;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 4;
 $8 = ($7|0)==(0);
 if ($8) {
  $23 = $1;
 } else {
  $9 = HEAP32[$x>>2]|0;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $1;$__len$03$i$i$i$i = $7;
  while(1) {
   $12 = (($__len$03$i$i$i$i|0) / 2)&-1;
   $13 = (($14) + ($12<<4)|0);
   $15 = HEAP32[$13>>2]|0;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17>>>0)<($11>>>0);
   if ($18) {
    $$sum$i$i$i$i = (($12) + 1)|0;
    $19 = (($14) + ($$sum$i$i$i$i<<4)|0);
    $$neg2$i$i$i$i = (($__len$03$i$i$i$i) + -1)|0;
    $20 = (($$neg2$i$i$i$i) - ($12))|0;
    $76 = $19;$__len$0$be$i$i$i$i = $20;
   } else {
    $76 = $14;$__len$0$be$i$i$i$i = $12;
   }
   $21 = ($__len$0$be$i$i$i$i|0)==(0);
   if ($21) {
    $23 = $76;
    break;
   } else {
    $14 = $76;$__len$03$i$i$i$i = $__len$0$be$i$i$i$i;
   }
  }
 }
 $22 = ($23|0)==($3|0);
 if ($22) {
  $24 = ((($x)) + 8|0);
  $25 = +HEAPF64[$24>>3];
  $37 = $25;
 } else {
  $26 = HEAP32[$x>>2]|0;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$23>>2]|0;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($28>>>0)<($31>>>0);
  $$ = $32 ? $3 : $23;
  $33 = ($$|0)==($3|0);
  $34 = ((($x)) + 8|0);
  $35 = +HEAPF64[$34>>3];
  if ($33) {
   $37 = $35;
  } else {
   $40 = ((($$)) + 8|0);
   $41 = +HEAPF64[$40>>3];
   $42 = $35 + $41;
   HEAPF64[$40>>3] = $42;
   $43 = $42 > 0.0;
   $44 = 0.0 - $42;
   $$0$in$i$i = $43 ? $42 : $44;
   $$0$i$i = $$0$in$i$i < 1.0E-8;
   if (!($$0$i$i)) {
    return ($this|0);
   }
   $45 = $$;
   $46 = (($45) - ($5))|0;
   $47 = $46 >> 4;
   $$sum$i$i = (($47) + 1)|0;
   $48 = (($1) + ($$sum$i$i<<4)|0);
   $49 = HEAP32[$2>>2]|0;
   $50 = ($48|0)==($49|0);
   if ($50) {
    $$0$lcssa$i$i$i$i = $$;$68 = $48;
   } else {
    $scevgep$i$i$i$i = ((($49)) + -16|0);
    $$012$i$i$i$i = $48;$$03$i$i$i$i = $$;
    while(1) {
     $51 = HEAP32[$$012$i$i$i$i>>2]|0;
     $52 = ((($$012$i$i$i$i)) + 4|0);
     $53 = HEAP32[$52>>2]|0;
     HEAP32[$$012$i$i$i$i>>2] = 0;
     HEAP32[$52>>2] = 0;
     HEAP32[$$03$i$i$i$i>>2] = $51;
     $54 = ((($$03$i$i$i$i)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     HEAP32[$54>>2] = $53;
     $56 = ($55|0)==(0|0);
     if (!($56)) {
      __ZNSt3__119__shared_weak_count16__release_sharedEv($55);
     }
     $57 = ((($$012$i$i$i$i)) + 8|0);
     $58 = +HEAPF64[$57>>3];
     $59 = ((($$03$i$i$i$i)) + 8|0);
     HEAPF64[$59>>3] = $58;
     $60 = ((($$012$i$i$i$i)) + 16|0);
     $61 = ((($$03$i$i$i$i)) + 16|0);
     $62 = ($60|0)==($49|0);
     if ($62) {
      break;
     } else {
      $$012$i$i$i$i = $60;$$03$i$i$i$i = $61;
     }
    }
    $63 = $scevgep$i$i$i$i;
    $__first5$i$i$i$i = $48;
    $64 = (($63) - ($__first5$i$i$i$i))|0;
    $65 = $64 >>> 4;
    $66 = (($65) + 1)|0;
    $scevgep7$i$i$i$i = (($$) + ($66<<4)|0);
    $$pre$i$i = HEAP32[$2>>2]|0;
    $$0$lcssa$i$i$i$i = $scevgep7$i$i$i$i;$68 = $$pre$i$i;
   }
   $67 = ($68|0)==($$0$lcssa$i$i$i$i|0);
   if ($67) {
    return ($this|0);
   } else {
    $70 = $68;
   }
   while(1) {
    $69 = ((($70)) + -16|0);
    HEAP32[$2>>2] = $69;
    $71 = ((($70)) + -12|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)==(0|0);
    if ($73) {
     $75 = $69;
    } else {
     __ZNSt3__119__shared_weak_count16__release_sharedEv($72);
     $$pre$i$i$i$i = HEAP32[$2>>2]|0;
     $75 = $$pre$i$i$i$i;
    }
    $74 = ($75|0)==($$0$lcssa$i$i$i$i|0);
    if ($74) {
     break;
    } else {
     $70 = $75;
    }
   }
   return ($this|0);
  }
 }
 $36 = $37 > 0.0;
 $38 = 0.0 - $37;
 $$0$in$i$i2 = $36 ? $37 : $38;
 $$0$i$i3 = $$0$in$i$i2 < 1.0E-8;
 if ($$0$i$i3) {
  return ($this|0);
 }
 $39 = (__ZN4rhea8flat_mapINS_8variableEdNSt3__14lessIS1_EENS2_9allocatorINS2_4pairIS1_dEEEEEixERKS1_($0,$x)|0);
 HEAPF64[$39>>3] = $37;
 return ($this|0);
}
function __ZN4rhea17linear_expressionmIERKS0_($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[$x>>3];
 $1 = +HEAPF64[$this>>3];
 $2 = $1 - $0;
 HEAPF64[$this>>3] = $2;
 $3 = ((($x)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($x)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  return ($this|0);
 } else {
  $8 = $4;
 }
 while(1) {
  (__ZN4rhea17linear_expressionmIERKNSt3__14pairINS_8variableEdEE($this,$8)|0);
  $9 = ((($8)) + 16|0);
  $10 = ($9|0)==($6|0);
  if ($10) {
   break;
  } else {
   $8 = $9;
  }
 }
 return ($this|0);
}
function __ZN4rhea17linear_expressionmIERKNSt3__14pairINS_8variableEdEE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i3 = 0, $$0$in$i$i = 0.0, $$0$in$i$i2 = 0.0, $$0$lcssa$i$i$i$i = 0, $$012$i$i$i$i = 0, $$03$i$i$i$i = 0, $$neg2$i$i$i$i = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$sum$i$i = 0, $$sum$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $__first5$i$i$i$i = 0, $__len$0$be$i$i$i$i = 0, $__len$03$i$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep7$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 $5 = $1;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 4;
 $8 = ($7|0)==(0);
 if ($8) {
  $23 = $1;
 } else {
  $9 = HEAP32[$x>>2]|0;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $1;$__len$03$i$i$i$i = $7;
  while(1) {
   $12 = (($__len$03$i$i$i$i|0) / 2)&-1;
   $13 = (($14) + ($12<<4)|0);
   $15 = HEAP32[$13>>2]|0;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17>>>0)<($11>>>0);
   if ($18) {
    $$sum$i$i$i$i = (($12) + 1)|0;
    $19 = (($14) + ($$sum$i$i$i$i<<4)|0);
    $$neg2$i$i$i$i = (($__len$03$i$i$i$i) + -1)|0;
    $20 = (($$neg2$i$i$i$i) - ($12))|0;
    $77 = $19;$__len$0$be$i$i$i$i = $20;
   } else {
    $77 = $14;$__len$0$be$i$i$i$i = $12;
   }
   $21 = ($__len$0$be$i$i$i$i|0)==(0);
   if ($21) {
    $23 = $77;
    break;
   } else {
    $14 = $77;$__len$03$i$i$i$i = $__len$0$be$i$i$i$i;
   }
  }
 }
 $22 = ($23|0)==($3|0);
 if ($22) {
  $24 = ((($x)) + 8|0);
  $25 = +HEAPF64[$24>>3];
  $37 = $25;
 } else {
  $26 = HEAP32[$x>>2]|0;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$23>>2]|0;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($28>>>0)<($31>>>0);
  $$ = $32 ? $3 : $23;
  $33 = ($$|0)==($3|0);
  $34 = ((($x)) + 8|0);
  $35 = +HEAPF64[$34>>3];
  if ($33) {
   $37 = $35;
  } else {
   $41 = ((($$)) + 8|0);
   $42 = +HEAPF64[$41>>3];
   $43 = $42 - $35;
   HEAPF64[$41>>3] = $43;
   $44 = $43 > 0.0;
   $45 = 0.0 - $43;
   $$0$in$i$i = $44 ? $43 : $45;
   $$0$i$i = $$0$in$i$i < 1.0E-8;
   if (!($$0$i$i)) {
    return ($this|0);
   }
   $46 = $$;
   $47 = (($46) - ($5))|0;
   $48 = $47 >> 4;
   $$sum$i$i = (($48) + 1)|0;
   $49 = (($1) + ($$sum$i$i<<4)|0);
   $50 = HEAP32[$2>>2]|0;
   $51 = ($49|0)==($50|0);
   if ($51) {
    $$0$lcssa$i$i$i$i = $$;$69 = $49;
   } else {
    $scevgep$i$i$i$i = ((($50)) + -16|0);
    $$012$i$i$i$i = $49;$$03$i$i$i$i = $$;
    while(1) {
     $52 = HEAP32[$$012$i$i$i$i>>2]|0;
     $53 = ((($$012$i$i$i$i)) + 4|0);
     $54 = HEAP32[$53>>2]|0;
     HEAP32[$$012$i$i$i$i>>2] = 0;
     HEAP32[$53>>2] = 0;
     HEAP32[$$03$i$i$i$i>>2] = $52;
     $55 = ((($$03$i$i$i$i)) + 4|0);
     $56 = HEAP32[$55>>2]|0;
     HEAP32[$55>>2] = $54;
     $57 = ($56|0)==(0|0);
     if (!($57)) {
      __ZNSt3__119__shared_weak_count16__release_sharedEv($56);
     }
     $58 = ((($$012$i$i$i$i)) + 8|0);
     $59 = +HEAPF64[$58>>3];
     $60 = ((($$03$i$i$i$i)) + 8|0);
     HEAPF64[$60>>3] = $59;
     $61 = ((($$012$i$i$i$i)) + 16|0);
     $62 = ((($$03$i$i$i$i)) + 16|0);
     $63 = ($61|0)==($50|0);
     if ($63) {
      break;
     } else {
      $$012$i$i$i$i = $61;$$03$i$i$i$i = $62;
     }
    }
    $64 = $scevgep$i$i$i$i;
    $__first5$i$i$i$i = $49;
    $65 = (($64) - ($__first5$i$i$i$i))|0;
    $66 = $65 >>> 4;
    $67 = (($66) + 1)|0;
    $scevgep7$i$i$i$i = (($$) + ($67<<4)|0);
    $$pre$i$i = HEAP32[$2>>2]|0;
    $$0$lcssa$i$i$i$i = $scevgep7$i$i$i$i;$69 = $$pre$i$i;
   }
   $68 = ($69|0)==($$0$lcssa$i$i$i$i|0);
   if ($68) {
    return ($this|0);
   } else {
    $71 = $69;
   }
   while(1) {
    $70 = ((($71)) + -16|0);
    HEAP32[$2>>2] = $70;
    $72 = ((($71)) + -12|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)==(0|0);
    if ($74) {
     $76 = $70;
    } else {
     __ZNSt3__119__shared_weak_count16__release_sharedEv($73);
     $$pre$i$i$i$i = HEAP32[$2>>2]|0;
     $76 = $$pre$i$i$i$i;
    }
    $75 = ($76|0)==($$0$lcssa$i$i$i$i|0);
    if ($75) {
     break;
    } else {
     $71 = $76;
    }
   }
   return ($this|0);
  }
 }
 $36 = $37 > 0.0;
 $38 = 0.0 - $37;
 $$0$in$i$i2 = $36 ? $37 : $38;
 $$0$i$i3 = $$0$in$i$i2 < 1.0E-8;
 if ($$0$i$i3) {
  return ($this|0);
 }
 $39 = -$37;
 $40 = (__ZN4rhea8flat_mapINS_8variableEdNSt3__14lessIS1_EENS2_9allocatorINS2_4pairIS1_dEEEEEixERKS1_($0,$x)|0);
 HEAPF64[$40>>3] = $39;
 return ($this|0);
}
function __ZN4rhea17linear_expression3addERKS0_RKNS_8variableERNS_7tableauE($this,$x,$subject,$solver) {
 $this = $this|0;
 $x = $x|0;
 $subject = $subject|0;
 $solver = $solver|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[$x>>3];
 $1 = +HEAPF64[$this>>3];
 $2 = $0 + $1;
 HEAPF64[$this>>3] = $2;
 $3 = ((($x)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($x)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)==($6|0);
 if ($7) {
  return ($this|0);
 } else {
  $9 = $4;
 }
 while(1) {
  $8 = ((($9)) + 8|0);
  $10 = +HEAPF64[$8>>3];
  (__ZN4rhea17linear_expression3addERKNS_8variableEdS3_RNS_7tableauE($this,$9,$10,$subject,$solver)|0);
  $11 = ((($9)) + 16|0);
  $12 = ($11|0)==($6|0);
  if ($12) {
   break;
  } else {
   $9 = $11;
  }
 }
 return ($this|0);
}
function __ZN4rhea17linear_expression3addERKNS_8variableEdS3_RNS_7tableauE($this,$v,$c,$subject,$solver) {
 $this = $this|0;
 $v = $v|0;
 $c = +$c;
 $subject = $subject|0;
 $solver = $solver|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i3 = 0, $$0$in$i$i = 0.0, $$0$in$i$i2 = 0.0, $$0$lcssa$i$i$i$i = 0, $$012$i$i$i$i = 0, $$03$i$i$i$i = 0, $$neg2$i$i$i$i = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$sum$i$i = 0, $$sum$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $__first5$i$i$i$i = 0, $__len$0$be$i$i$i$i = 0, $__len$03$i$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep7$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 $5 = $1;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 4;
 $8 = ($7|0)==(0);
 if ($8) {
  $23 = $1;
 } else {
  $9 = HEAP32[$v>>2]|0;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $1;$__len$03$i$i$i$i = $7;
  while(1) {
   $12 = (($__len$03$i$i$i$i|0) / 2)&-1;
   $13 = (($14) + ($12<<4)|0);
   $15 = HEAP32[$13>>2]|0;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17>>>0)<($11>>>0);
   if ($18) {
    $$sum$i$i$i$i = (($12) + 1)|0;
    $19 = (($14) + ($$sum$i$i$i$i<<4)|0);
    $$neg2$i$i$i$i = (($__len$03$i$i$i$i) + -1)|0;
    $20 = (($$neg2$i$i$i$i) - ($12))|0;
    $71 = $19;$__len$0$be$i$i$i$i = $20;
   } else {
    $71 = $14;$__len$0$be$i$i$i$i = $12;
   }
   $21 = ($__len$0$be$i$i$i$i|0)==(0);
   if ($21) {
    $23 = $71;
    break;
   } else {
    $14 = $71;$__len$03$i$i$i$i = $__len$0$be$i$i$i$i;
   }
  }
 }
 $22 = ($23|0)==($3|0);
 if (!($22)) {
  $24 = HEAP32[$v>>2]|0;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$23>>2]|0;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($26>>>0)<($29>>>0);
  $$ = $30 ? $3 : $23;
  $31 = ($$|0)==($3|0);
  if (!($31)) {
   $35 = ((($$)) + 8|0);
   $36 = +HEAPF64[$35>>3];
   $37 = $36 + $c;
   HEAPF64[$35>>3] = $37;
   $38 = $37 > 0.0;
   $39 = 0.0 - $37;
   $$0$in$i$i = $38 ? $37 : $39;
   $$0$i$i = $$0$in$i$i < 1.0E-8;
   if (!($$0$i$i)) {
    return ($this|0);
   }
   $40 = $$;
   $41 = (($40) - ($5))|0;
   $42 = $41 >> 4;
   $$sum$i$i = (($42) + 1)|0;
   $43 = (($1) + ($$sum$i$i<<4)|0);
   $44 = HEAP32[$2>>2]|0;
   $45 = ($43|0)==($44|0);
   if ($45) {
    $$0$lcssa$i$i$i$i = $$;$63 = $43;
   } else {
    $scevgep$i$i$i$i = ((($44)) + -16|0);
    $$012$i$i$i$i = $43;$$03$i$i$i$i = $$;
    while(1) {
     $46 = HEAP32[$$012$i$i$i$i>>2]|0;
     $47 = ((($$012$i$i$i$i)) + 4|0);
     $48 = HEAP32[$47>>2]|0;
     HEAP32[$$012$i$i$i$i>>2] = 0;
     HEAP32[$47>>2] = 0;
     HEAP32[$$03$i$i$i$i>>2] = $46;
     $49 = ((($$03$i$i$i$i)) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     HEAP32[$49>>2] = $48;
     $51 = ($50|0)==(0|0);
     if (!($51)) {
      __ZNSt3__119__shared_weak_count16__release_sharedEv($50);
     }
     $52 = ((($$012$i$i$i$i)) + 8|0);
     $53 = +HEAPF64[$52>>3];
     $54 = ((($$03$i$i$i$i)) + 8|0);
     HEAPF64[$54>>3] = $53;
     $55 = ((($$012$i$i$i$i)) + 16|0);
     $56 = ((($$03$i$i$i$i)) + 16|0);
     $57 = ($55|0)==($44|0);
     if ($57) {
      break;
     } else {
      $$012$i$i$i$i = $55;$$03$i$i$i$i = $56;
     }
    }
    $58 = $scevgep$i$i$i$i;
    $__first5$i$i$i$i = $43;
    $59 = (($58) - ($__first5$i$i$i$i))|0;
    $60 = $59 >>> 4;
    $61 = (($60) + 1)|0;
    $scevgep7$i$i$i$i = (($$) + ($61<<4)|0);
    $$pre$i$i = HEAP32[$2>>2]|0;
    $$0$lcssa$i$i$i$i = $scevgep7$i$i$i$i;$63 = $$pre$i$i;
   }
   $62 = ($63|0)==($$0$lcssa$i$i$i$i|0);
   if (!($62)) {
    $65 = $63;
    while(1) {
     $64 = ((($65)) + -16|0);
     HEAP32[$2>>2] = $64;
     $66 = ((($65)) + -12|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(0|0);
     if ($68) {
      $70 = $64;
     } else {
      __ZNSt3__119__shared_weak_count16__release_sharedEv($67);
      $$pre$i$i$i$i = HEAP32[$2>>2]|0;
      $70 = $$pre$i$i$i$i;
     }
     $69 = ($70|0)==($$0$lcssa$i$i$i$i|0);
     if ($69) {
      break;
     } else {
      $65 = $70;
     }
    }
   }
   __ZN4rhea7tableau21note_removed_variableERKNS_8variableES3_($solver,$v,$subject);
   return ($this|0);
  }
 }
 $32 = $c > 0.0;
 $33 = 0.0 - $c;
 $$0$in$i$i2 = $32 ? $c : $33;
 $$0$i$i3 = $$0$in$i$i2 < 1.0E-8;
 if ($$0$i$i3) {
  return ($this|0);
 }
 $34 = (__ZN4rhea8flat_mapINS_8variableEdNSt3__14lessIS1_EENS2_9allocatorINS2_4pairIS1_dEEEEEixERKS1_($0,$v)|0);
 HEAPF64[$34>>3] = $c;
 __ZN4rhea7tableau19note_added_variableERKNS_8variableES3_($solver,$v,$subject);
 return ($this|0);
}
function __ZNK4rhea17linear_expression23find_pivotable_variableEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__first$02$lcssa$i$ph = 0, $__first$023$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  $13 = $agg$result;
 } else {
  $__first$023$i = $1;
  while(1) {
   $5 = HEAP32[$__first$023$i>>2]|0;
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($6)) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (FUNCTION_TABLE_ii[$8 & 511]($5)|0);
   if ($9) {
    $__first$02$lcssa$i$ph = $__first$023$i;
    break;
   }
   $10 = ((($__first$023$i)) + 16|0);
   $11 = ($10|0)==($3|0);
   if ($11) {
    $__first$02$lcssa$i$ph = $3;
    break;
   } else {
    $__first$023$i = $10;
   }
  }
  $$pre = HEAP32[$2>>2]|0;
  $12 = ($__first$02$lcssa$i$ph|0)==($$pre|0);
  if ($12) {
   $13 = $agg$result;
  } else {
   $15 = HEAP32[$__first$02$lcssa$i$ph>>2]|0;
   HEAP32[$agg$result>>2] = $15;
   $16 = ((($agg$result)) + 4|0);
   $17 = ((($__first$02$lcssa$i$ph)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   HEAP32[$16>>2] = $18;
   $19 = ($18|0)==(0|0);
   if ($19) {
    return;
   }
   __ZNSt3__119__shared_weak_count12__add_sharedEv($18);
   return;
  }
 }
 HEAP32[$13>>2] = 0;
 $14 = ((($agg$result)) + 4|0);
 HEAP32[$14>>2] = 0;
 return;
}
function __ZNK4rhea17linear_expression8evaluateEv($this) {
 $this = $this|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result$0$lcssa = 0.0, $result$01 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[$this>>3];
 $1 = ((($this)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  $result$0$lcssa = $0;
  return (+$result$0$lcssa);
 } else {
  $7 = $2;$result$01 = $0;
 }
 while(1) {
  $6 = HEAP32[$7>>2]|0;
  $8 = HEAP32[$6>>2]|0;
  $9 = ((($8)) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (+FUNCTION_TABLE_di[$10 & 511]($6));
  $12 = ((($7)) + 8|0);
  $13 = +HEAPF64[$12>>3];
  $14 = $11 * $13;
  $15 = $result$01 + $14;
  $16 = ((($7)) + 16|0);
  $17 = ($16|0)==($4|0);
  if ($17) {
   $result$0$lcssa = $15;
   break;
  } else {
   $7 = $16;$result$01 = $15;
  }
 }
 return (+$result$0$lcssa);
}
function __ZN4rhea17linear_expression11new_subjectERKNS_8variableE($this,$subj) {
 $this = $this|0;
 $subj = $subj|0;
 var $$ = 0, $$0$lcssa$i$i$i$i = 0, $$012$i$i$i$i = 0, $$03$i$i$i$i = 0, $$neg2$i$i$i$i = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$sum$i$i = 0, $$sum$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $__first5$i$i$i$i = 0, $__len$0$be$i$i$i$i = 0, $__len$03$i$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep7$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 $5 = $1;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 4;
 $8 = ($7|0)==(0);
 if ($8) {
  $23 = $1;
 } else {
  $9 = HEAP32[$subj>>2]|0;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $1;$__len$03$i$i$i$i = $7;
  while(1) {
   $12 = (($__len$03$i$i$i$i|0) / 2)&-1;
   $13 = (($14) + ($12<<4)|0);
   $15 = HEAP32[$13>>2]|0;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17>>>0)<($11>>>0);
   if ($18) {
    $$sum$i$i$i$i = (($12) + 1)|0;
    $19 = (($14) + ($$sum$i$i$i$i<<4)|0);
    $$neg2$i$i$i$i = (($__len$03$i$i$i$i) + -1)|0;
    $20 = (($$neg2$i$i$i$i) - ($12))|0;
    $77 = $19;$__len$0$be$i$i$i$i = $20;
   } else {
    $77 = $14;$__len$0$be$i$i$i$i = $12;
   }
   $21 = ($__len$0$be$i$i$i$i|0)==(0);
   if ($21) {
    $23 = $77;
    break;
   } else {
    $14 = $77;$__len$03$i$i$i$i = $__len$0$be$i$i$i$i;
   }
  }
 }
 $22 = ($23|0)==($3|0);
 if ($22) {
  $32 = $3;
 } else {
  $24 = HEAP32[$subj>>2]|0;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$23>>2]|0;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($26>>>0)<($29>>>0);
  $$ = $30 ? $3 : $23;
  $32 = $$;
 }
 $31 = ((($32)) + 8|0);
 $33 = +HEAPF64[$31>>3];
 $34 = 1.0 / $33;
 $35 = $32;
 $36 = (($35) - ($5))|0;
 $37 = $36 >> 4;
 $$sum$i$i = (($37) + 1)|0;
 $38 = (($1) + ($$sum$i$i<<4)|0);
 $39 = ($38|0)==($3|0);
 if ($39) {
  $$0$lcssa$i$i$i$i = $32;$57 = $3;
 } else {
  $scevgep$i$i$i$i = ((($3)) + -16|0);
  $$012$i$i$i$i = $38;$$03$i$i$i$i = $32;
  while(1) {
   $40 = HEAP32[$$012$i$i$i$i>>2]|0;
   $41 = ((($$012$i$i$i$i)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   HEAP32[$$012$i$i$i$i>>2] = 0;
   HEAP32[$41>>2] = 0;
   HEAP32[$$03$i$i$i$i>>2] = $40;
   $43 = ((($$03$i$i$i$i)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   HEAP32[$43>>2] = $42;
   $45 = ($44|0)==(0|0);
   if (!($45)) {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($44);
   }
   $46 = ((($$012$i$i$i$i)) + 8|0);
   $47 = +HEAPF64[$46>>3];
   $48 = ((($$03$i$i$i$i)) + 8|0);
   HEAPF64[$48>>3] = $47;
   $49 = ((($$012$i$i$i$i)) + 16|0);
   $50 = ((($$03$i$i$i$i)) + 16|0);
   $51 = ($49|0)==($3|0);
   if ($51) {
    break;
   } else {
    $$012$i$i$i$i = $49;$$03$i$i$i$i = $50;
   }
  }
  $52 = $scevgep$i$i$i$i;
  $__first5$i$i$i$i = $38;
  $53 = (($52) - ($__first5$i$i$i$i))|0;
  $54 = $53 >>> 4;
  $55 = (($54) + 1)|0;
  $scevgep7$i$i$i$i = (($32) + ($55<<4)|0);
  $$pre$i$i = HEAP32[$2>>2]|0;
  $$0$lcssa$i$i$i$i = $scevgep7$i$i$i$i;$57 = $$pre$i$i;
 }
 $56 = ($57|0)==($$0$lcssa$i$i$i$i|0);
 if ($56) {
  $70 = $57;
 } else {
  $59 = $57;
  while(1) {
   $58 = ((($59)) + -16|0);
   HEAP32[$2>>2] = $58;
   $60 = ((($59)) + -12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==(0|0);
   if ($62) {
    $64 = $58;
   } else {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($61);
    $$pre$i$i$i$i = HEAP32[$2>>2]|0;
    $64 = $$pre$i$i$i$i;
   }
   $63 = ($64|0)==($$0$lcssa$i$i$i$i|0);
   if ($63) {
    $70 = $$0$lcssa$i$i$i$i;
    break;
   } else {
    $59 = $64;
   }
  }
 }
 $65 = -$34;
 $66 = +HEAPF64[$this>>3];
 $67 = $66 * $65;
 HEAPF64[$this>>3] = $67;
 $68 = HEAP32[$0>>2]|0;
 $69 = ($68|0)==($70|0);
 if ($69) {
  return (+$34);
 } else {
  $72 = $68;
 }
 while(1) {
  $71 = ((($72)) + 8|0);
  $73 = +HEAPF64[$71>>3];
  $74 = $73 * $65;
  HEAPF64[$71>>3] = $74;
  $75 = ((($72)) + 16|0);
  $76 = ($75|0)==($70|0);
  if ($76) {
   break;
  } else {
   $72 = $75;
  }
 }
 return (+$34);
}
function __ZN4rhea17linear_expression14change_subjectERKNS_8variableES3_($this,$old_subj,$new_subj) {
 $this = $this|0;
 $old_subj = $old_subj|0;
 $new_subj = $new_subj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$old_subj>>2]|0;
 $1 = HEAP32[$new_subj>>2]|0;
 $2 = ($0|0)==($1|0);
 if ($2) {
  return;
 }
 $3 = (+__ZN4rhea17linear_expression11new_subjectERKNS_8variableE($this,$new_subj));
 $4 = ((($this)) + 8|0);
 $5 = (__ZN4rhea8flat_mapINS_8variableEdNSt3__14lessIS1_EENS2_9allocatorINS2_4pairIS1_dEEEEEixERKS1_($4,$old_subj)|0);
 HEAPF64[$5>>3] = $3;
 return;
}
function __ZN4rhea17linear_expression14substitute_outERKNS_8variableERKS0_S3_RNS_7tableauE($this,$var,$expr,$subj,$solver) {
 $this = $this|0;
 $var = $var|0;
 $expr = $expr|0;
 $subj = $subj|0;
 $solver = $solver|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i11 = 0, $$0$in$i$i = 0.0, $$0$in$i$i10 = 0.0, $$0$lcssa$i$i$i$i = 0, $$0$lcssa$i$i$i$i23 = 0, $$012$i$i$i$i = 0, $$012$i$i$i$i17 = 0, $$03$i$i$i$i = 0, $$03$i$i$i$i16 = 0, $$34 = 0, $$neg2$i$i$i$i = 0, $$neg2$i$i$i$i5 = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i27 = 0, $$pre$i$i21 = 0, $$sum$i$i = 0;
 var $$sum$i$i$i$i = 0, $$sum$i$i$i$i4 = 0, $$sum$i$i13 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__first5$i$i$i$i = 0, $__first5$i$i$i$i19 = 0, $__len$0$be$i$i$i$i = 0, $__len$0$be$i$i$i$i6 = 0, $__len$03$i$i$i$i = 0, $__len$03$i$i$i$i3 = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i14 = 0, $scevgep7$i$i$i$i = 0, $scevgep7$i$i$i$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 $5 = $1;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 4;
 $8 = ($7|0)==(0);
 if ($8) {
  $23 = $1;
 } else {
  $9 = HEAP32[$var>>2]|0;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $1;$__len$03$i$i$i$i = $7;
  while(1) {
   $12 = (($__len$03$i$i$i$i|0) / 2)&-1;
   $13 = (($14) + ($12<<4)|0);
   $15 = HEAP32[$13>>2]|0;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17>>>0)<($11>>>0);
   if ($18) {
    $$sum$i$i$i$i = (($12) + 1)|0;
    $19 = (($14) + ($$sum$i$i$i$i<<4)|0);
    $$neg2$i$i$i$i = (($__len$03$i$i$i$i) + -1)|0;
    $20 = (($$neg2$i$i$i$i) - ($12))|0;
    $155 = $19;$__len$0$be$i$i$i$i = $20;
   } else {
    $155 = $14;$__len$0$be$i$i$i$i = $12;
   }
   $21 = ($__len$0$be$i$i$i$i|0)==(0);
   if ($21) {
    $23 = $155;
    break;
   } else {
    $14 = $155;$__len$03$i$i$i$i = $__len$0$be$i$i$i$i;
   }
  }
 }
 $22 = ($23|0)==($3|0);
 if (!($22)) {
  $24 = HEAP32[$var>>2]|0;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$23>>2]|0;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($26>>>0)<($29>>>0);
  $$ = $30 ? $3 : $23;
  $31 = ($$|0)==($3|0);
  if (!($31)) {
   $37 = ((($$)) + 8|0);
   $38 = +HEAPF64[$37>>3];
   $39 = $$;
   $40 = (($39) - ($5))|0;
   $41 = $40 >> 4;
   $$sum$i$i13 = (($41) + 1)|0;
   $42 = (($1) + ($$sum$i$i13<<4)|0);
   $43 = ($42|0)==($3|0);
   if ($43) {
    $$0$lcssa$i$i$i$i23 = $$;$61 = $3;
   } else {
    $scevgep$i$i$i$i14 = ((($3)) + -16|0);
    $$012$i$i$i$i17 = $42;$$03$i$i$i$i16 = $$;
    while(1) {
     $44 = HEAP32[$$012$i$i$i$i17>>2]|0;
     $45 = ((($$012$i$i$i$i17)) + 4|0);
     $46 = HEAP32[$45>>2]|0;
     HEAP32[$$012$i$i$i$i17>>2] = 0;
     HEAP32[$45>>2] = 0;
     HEAP32[$$03$i$i$i$i16>>2] = $44;
     $47 = ((($$03$i$i$i$i16)) + 4|0);
     $48 = HEAP32[$47>>2]|0;
     HEAP32[$47>>2] = $46;
     $49 = ($48|0)==(0|0);
     if (!($49)) {
      __ZNSt3__119__shared_weak_count16__release_sharedEv($48);
     }
     $50 = ((($$012$i$i$i$i17)) + 8|0);
     $51 = +HEAPF64[$50>>3];
     $52 = ((($$03$i$i$i$i16)) + 8|0);
     HEAPF64[$52>>3] = $51;
     $53 = ((($$012$i$i$i$i17)) + 16|0);
     $54 = ((($$03$i$i$i$i16)) + 16|0);
     $55 = ($53|0)==($3|0);
     if ($55) {
      break;
     } else {
      $$012$i$i$i$i17 = $53;$$03$i$i$i$i16 = $54;
     }
    }
    $56 = $scevgep$i$i$i$i14;
    $__first5$i$i$i$i19 = $42;
    $57 = (($56) - ($__first5$i$i$i$i19))|0;
    $58 = $57 >>> 4;
    $59 = (($58) + 1)|0;
    $scevgep7$i$i$i$i20 = (($$) + ($59<<4)|0);
    $$pre$i$i21 = HEAP32[$2>>2]|0;
    $$0$lcssa$i$i$i$i23 = $scevgep7$i$i$i$i20;$61 = $$pre$i$i21;
   }
   $60 = ($61|0)==($$0$lcssa$i$i$i$i23|0);
   if ($60) {
    $156 = $61;
   } else {
    $63 = $61;
    while(1) {
     $62 = ((($63)) + -16|0);
     HEAP32[$2>>2] = $62;
     $64 = ((($63)) + -12|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = ($65|0)==(0|0);
     if ($66) {
      $68 = $62;
     } else {
      __ZNSt3__119__shared_weak_count16__release_sharedEv($65);
      $$pre$i$i$i$i27 = HEAP32[$2>>2]|0;
      $68 = $$pre$i$i$i$i27;
     }
     $67 = ($68|0)==($$0$lcssa$i$i$i$i23|0);
     if ($67) {
      $156 = $$0$lcssa$i$i$i$i23;
      break;
     } else {
      $63 = $68;
     }
    }
   }
   $69 = $38 > 0.0;
   $70 = 0.0 - $38;
   $$0$in$i$i10 = $69 ? $38 : $70;
   $$0$i$i11 = $$0$in$i$i10 < 1.0E-8;
   if ($$0$i$i11) {
    return;
   }
   $71 = +HEAPF64[$expr>>3];
   $72 = $38 * $71;
   $73 = +HEAPF64[$this>>3];
   $74 = $73 + $72;
   HEAPF64[$this>>3] = $74;
   $75 = ((($expr)) + 8|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ((($expr)) + 12|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($76|0)==($78|0);
   if ($79) {
    return;
   } else {
    $81 = $76;$86 = $156;
   }
   while(1) {
    $80 = ((($81)) + 8|0);
    $82 = +HEAPF64[$80>>3];
    $83 = $38 * $82;
    $84 = HEAP32[$0>>2]|0;
    $85 = $86;
    $87 = $84;
    $88 = (($85) - ($87))|0;
    $89 = $88 >> 4;
    $90 = ($89|0)==(0);
    if ($90) {
     $105 = $84;
    } else {
     $91 = HEAP32[$81>>2]|0;
     $92 = ((($91)) + 4|0);
     $93 = HEAP32[$92>>2]|0;
     $96 = $84;$__len$03$i$i$i$i3 = $89;
     while(1) {
      $94 = (($__len$03$i$i$i$i3|0) / 2)&-1;
      $95 = (($96) + ($94<<4)|0);
      $97 = HEAP32[$95>>2]|0;
      $98 = ((($97)) + 4|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ($99>>>0)<($93>>>0);
      if ($100) {
       $$sum$i$i$i$i4 = (($94) + 1)|0;
       $101 = (($96) + ($$sum$i$i$i$i4<<4)|0);
       $$neg2$i$i$i$i5 = (($__len$03$i$i$i$i3) + -1)|0;
       $102 = (($$neg2$i$i$i$i5) - ($94))|0;
       $157 = $101;$__len$0$be$i$i$i$i6 = $102;
      } else {
       $157 = $96;$__len$0$be$i$i$i$i6 = $94;
      }
      $103 = ($__len$0$be$i$i$i$i6|0)==(0);
      if ($103) {
       $105 = $157;
       break;
      } else {
       $96 = $157;$__len$03$i$i$i$i3 = $__len$0$be$i$i$i$i6;
      }
     }
    }
    $104 = ($105|0)==($86|0);
    if ($104) {
     label = 41;
    } else {
     $106 = HEAP32[$81>>2]|0;
     $107 = ((($106)) + 4|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = HEAP32[$105>>2]|0;
     $110 = ((($109)) + 4|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ($108>>>0)<($111>>>0);
     $$34 = $112 ? $86 : $105;
     $113 = ($$34|0)==($86|0);
     if ($113) {
      label = 41;
     } else {
      $114 = ((($$34)) + 8|0);
      $115 = +HEAPF64[$114>>3];
      $116 = $83 + $115;
      HEAPF64[$114>>3] = $116;
      $117 = $116 > 0.0;
      $118 = 0.0 - $116;
      $$0$in$i$i = $117 ? $116 : $118;
      $$0$i$i = $$0$in$i$i < 1.0E-8;
      if ($$0$i$i) {
       __ZN4rhea7tableau21note_removed_variableERKNS_8variableES3_($solver,$$34,$subj);
       $119 = HEAP32[$0>>2]|0;
       $120 = $$34;
       $121 = $119;
       $122 = (($120) - ($121))|0;
       $123 = $122 >> 4;
       $$sum$i$i = (($123) + 1)|0;
       $124 = (($119) + ($$sum$i$i<<4)|0);
       $125 = HEAP32[$2>>2]|0;
       $126 = ($124|0)==($125|0);
       if ($126) {
        $$0$lcssa$i$i$i$i = $$34;$144 = $124;
       } else {
        $scevgep$i$i$i$i = ((($125)) + -16|0);
        $$012$i$i$i$i = $124;$$03$i$i$i$i = $$34;
        while(1) {
         $127 = HEAP32[$$012$i$i$i$i>>2]|0;
         $128 = ((($$012$i$i$i$i)) + 4|0);
         $129 = HEAP32[$128>>2]|0;
         HEAP32[$$012$i$i$i$i>>2] = 0;
         HEAP32[$128>>2] = 0;
         HEAP32[$$03$i$i$i$i>>2] = $127;
         $130 = ((($$03$i$i$i$i)) + 4|0);
         $131 = HEAP32[$130>>2]|0;
         HEAP32[$130>>2] = $129;
         $132 = ($131|0)==(0|0);
         if (!($132)) {
          __ZNSt3__119__shared_weak_count16__release_sharedEv($131);
         }
         $133 = ((($$012$i$i$i$i)) + 8|0);
         $134 = +HEAPF64[$133>>3];
         $135 = ((($$03$i$i$i$i)) + 8|0);
         HEAPF64[$135>>3] = $134;
         $136 = ((($$012$i$i$i$i)) + 16|0);
         $137 = ((($$03$i$i$i$i)) + 16|0);
         $138 = ($136|0)==($125|0);
         if ($138) {
          break;
         } else {
          $$012$i$i$i$i = $136;$$03$i$i$i$i = $137;
         }
        }
        $139 = $scevgep$i$i$i$i;
        $__first5$i$i$i$i = $124;
        $140 = (($139) - ($__first5$i$i$i$i))|0;
        $141 = $140 >>> 4;
        $142 = (($141) + 1)|0;
        $scevgep7$i$i$i$i = (($$34) + ($142<<4)|0);
        $$pre$i$i = HEAP32[$2>>2]|0;
        $$0$lcssa$i$i$i$i = $scevgep7$i$i$i$i;$144 = $$pre$i$i;
       }
       $143 = ($144|0)==($$0$lcssa$i$i$i$i|0);
       if (!($143)) {
        $146 = $144;
        while(1) {
         $145 = ((($146)) + -16|0);
         HEAP32[$2>>2] = $145;
         $147 = ((($146)) + -12|0);
         $148 = HEAP32[$147>>2]|0;
         $149 = ($148|0)==(0|0);
         if ($149) {
          $151 = $145;
         } else {
          __ZNSt3__119__shared_weak_count16__release_sharedEv($148);
          $$pre$i$i$i$i = HEAP32[$2>>2]|0;
          $151 = $$pre$i$i$i$i;
         }
         $150 = ($151|0)==($$0$lcssa$i$i$i$i|0);
         if ($150) {
          break;
         } else {
          $146 = $151;
         }
        }
       }
      }
     }
    }
    if ((label|0) == 41) {
     label = 0;
     $152 = (__ZN4rhea8flat_mapINS_8variableEdNSt3__14lessIS1_EENS2_9allocatorINS2_4pairIS1_dEEEEEixERKS1_($0,$81)|0);
     HEAPF64[$152>>3] = $83;
     __ZN4rhea7tableau19note_added_variableERKNS_8variableES3_($solver,$81,$subj);
    }
    $153 = ((($81)) + 16|0);
    $154 = ($153|0)==($78|0);
    if ($154) {
     break;
    }
    $$pre = HEAP32[$2>>2]|0;
    $81 = $153;$86 = $$pre;
   }
   return;
  }
 }
 $32 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(178,($32|0),(120|0));
 $33 = __THREW__; __THREW__ = 0;
 $34 = $33&1;
 if ($34) {
  $35 = ___cxa_find_matching_catch()|0;
  $36 = tempRet0;
  ___cxa_free_exception(($32|0));
  ___resumeException($35|0);
  // unreachable;
 } else {
  ___cxa_throw(($32|0),(8240|0),(147|0));
  // unreachable;
 }
}
function __ZN4rhea14simplex_solverC2Ev($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $$01$i$i$i = 0, $$01$i$i$i11 = 0, $$neg2$i$i$i = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i4 = 0, $$pre$i6 = 0, $$pre1$i$i = 0, $$pre2$i$i = 0, $$pre3$i$i = 0, $$pre4$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($this)) + 8|0);
 $2 = ((($this)) + 12|0);
 $3 = ((($this)) + 28|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 HEAPF32[$3>>2] = 1.0;
 $4 = ((($this)) + 32|0);
 $5 = ((($this)) + 48|0);
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 HEAPF32[$5>>2] = 1.0;
 $6 = ((($this)) + 52|0);
 $7 = ((($this)) + 68|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;
 HEAPF32[$7>>2] = 1.0;
 $8 = ((($this)) + 72|0);
 $9 = ((($this)) + 88|0);
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;
 HEAPF32[$9>>2] = 1.0;
 $10 = ((($this)) + 92|0);
 $11 = ((($this)) + 108|0);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;HEAP32[$10+12>>2]=0|0;
 HEAPF32[$11>>2] = 1.0;
 HEAP32[$this>>2] = (24);
 HEAP32[$1>>2] = (56);
 $12 = ((($this)) + 112|0);
 $13 = ((($this)) + 128|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($this)) + 136|0);
 $15 = ((($this)) + 152|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($this)) + 160|0);
 $17 = ((($this)) + 164|0);
 $18 = ((($this)) + 172|0);
 $19 = ((($this)) + 176|0);
 $20 = ((($this)) + 184|0);
 $21 = ((($this)) + 200|0);
 dest=$16; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAPF32[$21>>2] = 1.0;
 $22 = ((($this)) + 204|0);
 $23 = ((($this)) + 220|0);
 ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;HEAP32[$22+12>>2]=0|0;
 HEAPF32[$23>>2] = 1.0;
 $24 = ((($this)) + 224|0);
 $25 = ((($this)) + 240|0);
 ;HEAP32[$24>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;HEAP32[$24+12>>2]=0|0;
 HEAPF32[$25>>2] = 1.0;
 $26 = ((($this)) + 244|0);
 __THREW__ = 0;
 $27 = (invoke_ii(179,20)|0);
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $78 = ___cxa_find_matching_catch()|0;
  $79 = tempRet0;
  $$0 = $79;$$01 = $78;
 } else {
  $30 = ((($27)) + 4|0);
  HEAP32[$30>>2] = 0;
  $31 = ((($27)) + 8|0);
  HEAP32[$31>>2] = 0;
  HEAP32[$27>>2] = (184);
  $32 = ((($27)) + 12|0);
  $33 = ((($27)) + 16|0);
  $34 = HEAP32[8>>2]|0;
  $35 = (($34) + 1)|0;
  HEAP32[8>>2] = $35;
  HEAP32[$33>>2] = $35;
  HEAP32[$32>>2] = (216);
  HEAP32[$26>>2] = $32;
  $36 = ((($this)) + 248|0);
  HEAP32[$36>>2] = $27;
  $37 = ((($this)) + 252|0);
  HEAP32[$37>>2] = $37;
  $38 = ((($this)) + 256|0);
  HEAP32[$38>>2] = $37;
  $39 = ((($this)) + 260|0);
  HEAP32[$39>>2] = 0;
  $40 = ((($this)) + 264|0);
  HEAP8[$40>>0] = 1;
  $41 = ((($this)) + 265|0);
  HEAP8[$41>>0] = 0;
  $42 = ((($this)) + 266|0);
  HEAP8[$42>>0] = 0;
  $43 = ((($this)) + 268|0);
  ;HEAP32[$43>>2]=0|0;HEAP32[$43+4>>2]=0|0;HEAP32[$43+8>>2]=0|0;HEAP32[$43+12>>2]=0|0;HEAP32[$43+16>>2]=0|0;HEAP32[$43+20>>2]=0|0;
  __THREW__ = 0;
  (invoke_iii(180,($4|0),($26|0))|0);
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  do {
   if (!($45)) {
    $46 = ((($this)) + 276|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ((($this)) + 272|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($47|0)==($49|0);
    if ($50) {
     $60 = 0;
    } else {
     $51 = $47;
     $52 = $49;
     $53 = (($51) - ($52))|0;
     $54 = $53 << 8;
     $55 = (($54) + -1)|0;
     $60 = $55;
    }
    $56 = ((($this)) + 284|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ((($this)) + 288|0);
    $59 = HEAP32[$58>>2]|0;
    $$neg2$i$i$i = (($60) - ($57))|0;
    $61 = ($$neg2$i$i$i|0)==($59|0);
    if ($61) {
     __THREW__ = 0;
     invoke_vi(181,($43|0));
     $62 = __THREW__; __THREW__ = 0;
     $63 = $62&1;
     if ($63) {
      break;
     }
     $$pre$i$i = HEAP32[$58>>2]|0;
     $$pre1$i$i = HEAP32[$56>>2]|0;
     $$pre2$i$i = HEAP32[$48>>2]|0;
     $$pre3$i$i = HEAP32[$46>>2]|0;
     $65 = $$pre$i$i;$66 = $$pre1$i$i;$68 = $$pre3$i$i;$69 = $$pre2$i$i;
    } else {
     $65 = $59;$66 = $57;$68 = $47;$69 = $49;
    }
    $64 = (($65) + ($66))|0;
    $67 = ($68|0)==($69|0);
    if ($67) {
     $77 = $65;
     $76 = (($77) + 1)|0;
     HEAP32[$58>>2] = $76;
     return;
    }
    $70 = $64 >>> 10;
    $71 = (($69) + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $64 & 1023;
    $74 = (($72) + ($73<<2)|0);
    $75 = ($74|0)==(0|0);
    if ($75) {
     $77 = $65;
     $76 = (($77) + 1)|0;
     HEAP32[$58>>2] = $76;
     return;
    }
    HEAP32[$74>>2] = 0;
    $$pre4$i$i = HEAP32[$58>>2]|0;
    $77 = $$pre4$i$i;
    $76 = (($77) + 1)|0;
    HEAP32[$58>>2] = $76;
    return;
   }
  } while(0);
  $80 = ___cxa_find_matching_catch()|0;
  $81 = tempRet0;
  __ZNSt3__15stackIjNS_5dequeIjNS_9allocatorIjEEEEED2Ev($43);
  __ZNSt3__110__list_impIN4rhea14simplex_solver9edit_infoENS_9allocatorIS3_EEE5clearEv($37);
  $82 = HEAP32[$36>>2]|0;
  $83 = ($82|0)==(0|0);
  if ($83) {
   $$0 = $81;$$01 = $80;
  } else {
   __ZNSt3__119__shared_weak_count16__release_sharedEv($82);
   $$0 = $81;$$01 = $80;
  }
 }
 $84 = ((($this)) + 232|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85|0)==(0|0);
 if (!($86)) {
  $$01$i$i$i11 = $85;
  while(1) {
   $87 = HEAP32[$$01$i$i$i11>>2]|0;
   $88 = ((($$01$i$i$i11)) + 16|0);
   HEAP32[$88>>2] = (2352);
   $89 = ((($$01$i$i$i11)) + 24|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = ($90|0)==(0|0);
   if (!($91)) {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($90);
   }
   $92 = ((($$01$i$i$i11)) + 12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($93|0)==(0|0);
   if (!($94)) {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($93);
   }
   __ZdlPv($$01$i$i$i11);
   $95 = ($87|0)==(0|0);
   if ($95) {
    break;
   } else {
    $$01$i$i$i11 = $87;
   }
  }
 }
 $96 = HEAP32[$24>>2]|0;
 HEAP32[$24>>2] = 0;
 $97 = ($96|0)==(0|0);
 if (!($97)) {
  __ZdlPv($96);
 }
 $98 = ((($this)) + 212|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ($99|0)==(0|0);
 if (!($100)) {
  $$01$i$i$i = $99;
  while(1) {
   $101 = HEAP32[$$01$i$i$i>>2]|0;
   $102 = ((($$01$i$i$i)) + 8|0);
   $103 = ((($$01$i$i$i)) + 24|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ($104|0)==(0|0);
   if (!($105)) {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($104);
   }
   HEAP32[$102>>2] = (2352);
   $106 = ((($$01$i$i$i)) + 16|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = ($107|0)==(0|0);
   if (!($108)) {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($107);
   }
   __ZdlPv($$01$i$i$i);
   $109 = ($101|0)==(0|0);
   if ($109) {
    break;
   } else {
    $$01$i$i$i = $101;
   }
  }
 }
 $110 = HEAP32[$22>>2]|0;
 HEAP32[$22>>2] = 0;
 $111 = ($110|0)==(0|0);
 if (!($111)) {
  __ZdlPv($110);
 }
 $112 = ((($this)) + 192|0);
 $113 = HEAP32[$112>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEE12__deallocateEPNS_11__hash_nodeISD_PvEE($20,$113);
 $114 = HEAP32[$20>>2]|0;
 HEAP32[$20>>2] = 0;
 $115 = ($114|0)==(0|0);
 if (!($115)) {
  __ZdlPv($114);
 }
 $116 = HEAP32[$18>>2]|0;
 $117 = ($116|0)==(0|0);
 if (!($117)) {
  $118 = HEAP32[$19>>2]|0;
  $119 = ($118|0)==($116|0);
  if ($119) {
   $127 = $116;
  } else {
   $121 = $118;
   while(1) {
    $120 = ((($121)) + -8|0);
    HEAP32[$19>>2] = $120;
    $122 = ((($121)) + -4|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = ($123|0)==(0|0);
    if ($124) {
     $126 = $120;
    } else {
     __ZNSt3__119__shared_weak_count16__release_sharedEv($123);
     $$pre$i$i$i4 = HEAP32[$19>>2]|0;
     $126 = $$pre$i$i$i4;
    }
    $125 = ($126|0)==($116|0);
    if ($125) {
     break;
    } else {
     $121 = $126;
    }
   }
   $$pre$i6 = HEAP32[$18>>2]|0;
   $127 = $$pre$i6;
  }
  __ZdlPv($127);
 }
 $128 = HEAP32[$16>>2]|0;
 $129 = ($128|0)==(0|0);
 if (!($129)) {
  $130 = HEAP32[$17>>2]|0;
  $131 = ($130|0)==($128|0);
  if ($131) {
   $139 = $128;
  } else {
   $133 = $130;
   while(1) {
    $132 = ((($133)) + -8|0);
    HEAP32[$17>>2] = $132;
    $134 = ((($133)) + -4|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ($135|0)==(0|0);
    if ($136) {
     $138 = $132;
    } else {
     __ZNSt3__119__shared_weak_count16__release_sharedEv($135);
     $$pre$i$i$i = HEAP32[$17>>2]|0;
     $138 = $$pre$i$i$i;
    }
    $137 = ($138|0)==($128|0);
    if ($137) {
     break;
    } else {
     $133 = $138;
    }
   }
   $$pre$i = HEAP32[$16>>2]|0;
   $139 = $$pre$i;
  }
  __ZdlPv($139);
 }
 $140 = HEAP32[$15>>2]|0;
 $141 = ($140|0)==($14|0);
 if ($141) {
  $142 = HEAP32[$140>>2]|0;
  $143 = ((($142)) + 16|0);
  $144 = HEAP32[$143>>2]|0;
  FUNCTION_TABLE_vi[$144 & 511]($140);
 } else {
  $145 = ($140|0)==(0|0);
  if (!($145)) {
   $146 = HEAP32[$140>>2]|0;
   $147 = ((($146)) + 20|0);
   $148 = HEAP32[$147>>2]|0;
   FUNCTION_TABLE_vi[$148 & 511]($140);
  }
 }
 $149 = HEAP32[$13>>2]|0;
 $150 = ($149|0)==($12|0);
 if ($150) {
  $151 = HEAP32[$149>>2]|0;
  $152 = ((($151)) + 16|0);
  $153 = HEAP32[$152>>2]|0;
  FUNCTION_TABLE_vi[$153 & 511]($149);
  __ZN4rhea7tableauD2Ev($1);
  ___resumeException($$01|0);
  // unreachable;
 }
 $154 = ($149|0)==(0|0);
 if ($154) {
  __ZN4rhea7tableauD2Ev($1);
  ___resumeException($$01|0);
  // unreachable;
 }
 $155 = HEAP32[$149>>2]|0;
 $156 = ((($155)) + 20|0);
 $157 = HEAP32[$156>>2]|0;
 FUNCTION_TABLE_vi[$157 & 511]($149);
 __ZN4rhea7tableauD2Ev($1);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZN4rhea14simplex_solver15make_expressionERKNS_10constraintE($agg$result,$this,$c) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $c = $c|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$i152 = 0, $$0$in$i$i$i = 0.0, $$0$in$i$i$i151 = 0.0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$3 = 0, $$34 = 0, $$4 = 0, $$45 = 0, $$5 = 0, $$56 = 0, $$ph$i = 0, $$ph$i142 = 0, $$ph$i72 = 0, $$pn$i$i$i = 0;
 var $$pn$i$i$i$i = 0, $$pn$i$i$i136 = 0, $$pn$i$i$i66 = 0, $$pn$us$i$i$i = 0, $$pn$us$i$i$i$i = 0, $$pn$us$i$i$i131 = 0, $$pn$us$i$i$i61 = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i$i = 0, $$pre$i$i$i$i172 = 0, $$pre$i$i$i$i20 = 0, $$pre$i$i$i$i28 = 0, $$pre$i$i$i$i36 = 0, $$pre$i$i$i$i44 = 0, $$pre$i$i$i$i9 = 0, $$pre$i$i$i$i98 = 0, $$pre$i$i100 = 0;
 var $$pre$i$i11 = 0, $$pre$i$i174 = 0, $$pre$i$i22 = 0, $$pre$i$i30 = 0, $$pre$i$i38 = 0, $$pre$i$i46 = 0, $$pre$i88 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0;
 var $506 = 0.0, $507 = 0, $508 = 0.0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0.0, $513 = 0, $514 = 0, $515 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0, $520 = 0, $521 = 0.0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0.0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0.0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0.0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0;
 var $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $__nd$0$i$i$i = 0, $__nd$0$i$i$i$i = 0, $__nd$0$i$i$i138 = 0, $__nd$0$i$i$i68 = 0, $__nd$0$us$i$i$i = 0, $__nd$0$us$i$i$i$i = 0, $__nd$0$us$i$i$i133 = 0, $__nd$0$us$i$i$i63 = 0, $cexpr = 0, $dum = 0, $eminus = 0, $eminus1 = 0;
 var $eplus = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $slack = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 160|0;
 $1 = sp + 152|0;
 $2 = sp + 136|0;
 $cexpr = sp + 112|0;
 $3 = sp + 48|0;
 $4 = sp;
 $slack = sp + 168|0;
 $eminus = sp + 192|0;
 $5 = sp + 96|0;
 $dum = sp + 144|0;
 $6 = sp + 24|0;
 $eplus = sp + 176|0;
 $eminus1 = sp + 184|0;
 $7 = sp + 72|0;
 __ZN4rhea17linear_expressionC2Ed($agg$result,0.0);
 $8 = ((($agg$result)) + 24|0);
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;HEAP32[$8+16>>2]=0|0;HEAP32[$8+20>>2]=0|0;
 $9 = ((($c)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 __THREW__ = 0;
 invoke_vii($13|0,($cexpr|0),($10|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $128 = ___cxa_find_matching_catch()|0;
  $129 = tempRet0;
  $$5 = $128;$$56 = $129;
 } else {
  $16 = +HEAPF64[$cexpr>>3];
  HEAPF64[$agg$result>>3] = $16;
  $17 = ((($cexpr)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($cexpr)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($18|0)==($20|0);
  L4: do {
   if ($21) {
    label = 67;
   } else {
    $22 = ((($this)) + 36|0);
    $23 = ((($this)) + 32|0);
    $24 = ((($4)) + 8|0);
    $25 = ((($3)) + 8|0);
    $26 = ((($3)) + 8|0);
    $27 = ((($4)) + 8|0);
    $28 = ((($4)) + 12|0);
    $29 = ((($3)) + 12|0);
    $31 = $18;
    L6: while(1) {
     $30 = HEAP32[$31>>2]|0;
     $32 = ((($30)) + 4|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = HEAP32[$22>>2]|0;
     $35 = ($34|0)==(0);
     L8: do {
      if ($35) {
       label = 65;
      } else {
       $36 = (($34) + -1)|0;
       $37 = $36 & $34;
       $38 = ($37|0)==(0);
       if ($38) {
        $39 = $36 & $33;
        $43 = $39;
       } else {
        $40 = (($33>>>0) % ($34>>>0))&-1;
        $43 = $40;
       }
       $41 = HEAP32[$23>>2]|0;
       $42 = (($41) + ($43<<2)|0);
       $44 = HEAP32[$42>>2]|0;
       $45 = ($44|0)==(0|0);
       if ($45) {
        label = 65;
       } else {
        if ($38) {
         $$pn$us$i$i$i$i = $44;
         while(1) {
          $__nd$0$us$i$i$i$i = HEAP32[$$pn$us$i$i$i$i>>2]|0;
          $46 = ($__nd$0$us$i$i$i$i|0)==(0|0);
          if ($46) {
           label = 65;
           break L8;
          }
          $47 = ((($__nd$0$us$i$i$i$i)) + 4|0);
          $48 = HEAP32[$47>>2]|0;
          $49 = $48 & $36;
          $50 = ($49|0)==($43|0);
          if (!($50)) {
           label = 65;
           break L8;
          }
          $51 = ((($__nd$0$us$i$i$i$i)) + 8|0);
          $52 = HEAP32[$51>>2]|0;
          $53 = ($52|0)==($30|0);
          if ($53) {
           break;
          } else {
           $$pn$us$i$i$i$i = $__nd$0$us$i$i$i$i;
          }
         }
        } else {
         $$pn$i$i$i$i = $44;
         while(1) {
          $__nd$0$i$i$i$i = HEAP32[$$pn$i$i$i$i>>2]|0;
          $54 = ($__nd$0$i$i$i$i|0)==(0|0);
          if ($54) {
           label = 65;
           break L8;
          }
          $55 = ((($__nd$0$i$i$i$i)) + 4|0);
          $56 = HEAP32[$55>>2]|0;
          $57 = (($56>>>0) % ($34>>>0))&-1;
          $58 = ($57|0)==($43|0);
          if (!($58)) {
           label = 65;
           break L8;
          }
          $59 = ((($__nd$0$i$i$i$i)) + 8|0);
          $60 = HEAP32[$59>>2]|0;
          $61 = ($60|0)==($30|0);
          if ($61) {
           break;
          } else {
           $$pn$i$i$i$i = $__nd$0$i$i$i$i;
          }
         }
        }
        if ($38) {
         $62 = $36 & $33;
         $65 = $62;
        } else {
         $63 = (($33>>>0) % ($34>>>0))&-1;
         $65 = $63;
        }
        $64 = (($41) + ($65<<2)|0);
        $66 = HEAP32[$64>>2]|0;
        $67 = ($66|0)==(0|0);
        if ($67) {
         label = 27;
         break L6;
        }
        if ($38) {
         $$pn$us$i$i$i = $66;
         while(1) {
          $__nd$0$us$i$i$i = HEAP32[$$pn$us$i$i$i>>2]|0;
          $68 = ($__nd$0$us$i$i$i|0)==(0|0);
          if ($68) {
           label = 27;
           break L6;
          }
          $69 = ((($__nd$0$us$i$i$i)) + 4|0);
          $70 = HEAP32[$69>>2]|0;
          $71 = $70 & $36;
          $72 = ($71|0)==($65|0);
          if (!($72)) {
           label = 27;
           break L6;
          }
          $73 = ((($__nd$0$us$i$i$i)) + 8|0);
          $74 = HEAP32[$73>>2]|0;
          $75 = ($74|0)==($30|0);
          if ($75) {
           $$ph$i = $__nd$0$us$i$i$i;
           break;
          } else {
           $$pn$us$i$i$i = $__nd$0$us$i$i$i;
          }
         }
        } else {
         $$pn$i$i$i = $66;
         while(1) {
          $__nd$0$i$i$i = HEAP32[$$pn$i$i$i>>2]|0;
          $76 = ($__nd$0$i$i$i|0)==(0|0);
          if ($76) {
           label = 27;
           break L6;
          }
          $77 = ((($__nd$0$i$i$i)) + 4|0);
          $78 = HEAP32[$77>>2]|0;
          $79 = (($78>>>0) % ($34>>>0))&-1;
          $80 = ($79|0)==($65|0);
          if (!($80)) {
           label = 27;
           break L6;
          }
          $81 = ((($__nd$0$i$i$i)) + 8|0);
          $82 = HEAP32[$81>>2]|0;
          $83 = ($82|0)==($30|0);
          if ($83) {
           $$ph$i = $__nd$0$i$i$i;
           break;
          } else {
           $$pn$i$i$i = $__nd$0$i$i$i;
          }
         }
        }
        $86 = ((($$ph$i)) + 16|0);
        $87 = +HEAPF64[$86>>3];
        HEAPF64[$4>>3] = $87;
        $88 = ((($$ph$i)) + 24|0);
        __THREW__ = 0;
        invoke_vii(183,($24|0),($88|0));
        $89 = __THREW__; __THREW__ = 0;
        $90 = $89&1;
        if ($90) {
         label = 47;
         break L6;
        }
        $91 = +HEAPF64[$86>>3];
        HEAPF64[$4>>3] = $91;
        $92 = ((($31)) + 8|0);
        $93 = +HEAPF64[$92>>3];
        __THREW__ = 0;
        $94 = (invoke_iid(184,($4|0),(+$93))|0);
        $95 = __THREW__; __THREW__ = 0;
        $96 = $95&1;
        if ($96) {
         label = 50;
         break L6;
        }
        $97 = +HEAPF64[$94>>3];
        HEAPF64[$3>>3] = $97;
        $98 = ((($94)) + 8|0);
        __THREW__ = 0;
        invoke_vii(183,($25|0),($98|0));
        $99 = __THREW__; __THREW__ = 0;
        $100 = $99&1;
        if ($100) {
         label = 50;
         break L6;
        }
        $101 = +HEAPF64[$94>>3];
        HEAPF64[$3>>3] = $101;
        __THREW__ = 0;
        (invoke_iii(185,($agg$result|0),($3|0))|0);
        $102 = __THREW__; __THREW__ = 0;
        $103 = $102&1;
        if ($103) {
         label = 51;
         break L6;
        }
        $104 = HEAP32[$26>>2]|0;
        $105 = ($104|0)==(0|0);
        if (!($105)) {
         $106 = HEAP32[$29>>2]|0;
         $107 = ($106|0)==($104|0);
         if ($107) {
          $115 = $104;
         } else {
          $109 = $106;
          while(1) {
           $108 = ((($109)) + -16|0);
           HEAP32[$29>>2] = $108;
           $110 = ((($109)) + -12|0);
           $111 = HEAP32[$110>>2]|0;
           $112 = ($111|0)==(0|0);
           if ($112) {
            $114 = $108;
           } else {
            __ZNSt3__119__shared_weak_count16__release_sharedEv($111);
            $$pre$i$i$i$i20 = HEAP32[$29>>2]|0;
            $114 = $$pre$i$i$i$i20;
           }
           $113 = ($114|0)==($104|0);
           if ($113) {
            break;
           } else {
            $109 = $114;
           }
          }
          $$pre$i$i22 = HEAP32[$26>>2]|0;
          $115 = $$pre$i$i22;
         }
         __ZdlPv($115);
        }
        $116 = HEAP32[$27>>2]|0;
        $117 = ($116|0)==(0|0);
        if (!($117)) {
         $118 = HEAP32[$28>>2]|0;
         $119 = ($118|0)==($116|0);
         if ($119) {
          $127 = $116;
         } else {
          $121 = $118;
          while(1) {
           $120 = ((($121)) + -16|0);
           HEAP32[$28>>2] = $120;
           $122 = ((($121)) + -12|0);
           $123 = HEAP32[$122>>2]|0;
           $124 = ($123|0)==(0|0);
           if ($124) {
            $126 = $120;
           } else {
            __ZNSt3__119__shared_weak_count16__release_sharedEv($123);
            $$pre$i$i$i$i28 = HEAP32[$28>>2]|0;
            $126 = $$pre$i$i$i$i28;
           }
           $125 = ($126|0)==($116|0);
           if ($125) {
            break;
           } else {
            $121 = $126;
           }
          }
          $$pre$i$i30 = HEAP32[$27>>2]|0;
          $127 = $$pre$i$i30;
         }
         __ZdlPv($127);
        }
       }
      }
     } while(0);
     if ((label|0) == 65) {
      label = 0;
      __THREW__ = 0;
      (invoke_iii(186,($agg$result|0),($31|0))|0);
      $162 = __THREW__; __THREW__ = 0;
      $163 = $162&1;
      if ($163) {
       label = 47;
       break;
      }
     }
     $164 = ((($31)) + 16|0);
     $165 = ($164|0)==($20|0);
     if ($165) {
      label = 67;
      break L4;
     } else {
      $31 = $164;
     }
    }
    if ((label|0) == 27) {
     $84 = (___cxa_allocate_exception(4)|0);
     HEAP32[$84>>2] = (280);
     __THREW__ = 0;
     invoke_viii(182,($84|0),(296|0),(27|0));
     $85 = __THREW__; __THREW__ = 0;
     label = 48;
     break;
    }
    else if ((label|0) == 47) {
     $130 = ___cxa_find_matching_catch()|0;
     $131 = tempRet0;
     $lpad$phi$index = $130;$lpad$phi$index2 = $131;
     label = 49;
     break;
    }
    else if ((label|0) == 50) {
     $134 = ___cxa_find_matching_catch()|0;
     $135 = tempRet0;
     $$0 = $134;$$01 = $135;
    }
    else if ((label|0) == 51) {
     $136 = ___cxa_find_matching_catch()|0;
     $137 = tempRet0;
     $138 = HEAP32[$26>>2]|0;
     $139 = ($138|0)==(0|0);
     if ($139) {
      $$0 = $136;$$01 = $137;
     } else {
      $140 = HEAP32[$29>>2]|0;
      $141 = ($140|0)==($138|0);
      if ($141) {
       $149 = $138;
      } else {
       $143 = $140;
       while(1) {
        $142 = ((($143)) + -16|0);
        HEAP32[$29>>2] = $142;
        $144 = ((($143)) + -12|0);
        $145 = HEAP32[$144>>2]|0;
        $146 = ($145|0)==(0|0);
        if ($146) {
         $148 = $142;
        } else {
         __ZNSt3__119__shared_weak_count16__release_sharedEv($145);
         $$pre$i$i$i$i36 = HEAP32[$29>>2]|0;
         $148 = $$pre$i$i$i$i36;
        }
        $147 = ($148|0)==($138|0);
        if ($147) {
         break;
        } else {
         $143 = $148;
        }
       }
       $$pre$i$i38 = HEAP32[$26>>2]|0;
       $149 = $$pre$i$i38;
      }
      __ZdlPv($149);
      $$0 = $136;$$01 = $137;
     }
    }
    $150 = HEAP32[$27>>2]|0;
    $151 = ($150|0)==(0|0);
    if ($151) {
     $$4 = $$0;$$45 = $$01;
    } else {
     $152 = HEAP32[$28>>2]|0;
     $153 = ($152|0)==($150|0);
     if ($153) {
      $161 = $150;
     } else {
      $155 = $152;
      while(1) {
       $154 = ((($155)) + -16|0);
       HEAP32[$28>>2] = $154;
       $156 = ((($155)) + -12|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = ($157|0)==(0|0);
       if ($158) {
        $160 = $154;
       } else {
        __ZNSt3__119__shared_weak_count16__release_sharedEv($157);
        $$pre$i$i$i$i44 = HEAP32[$28>>2]|0;
        $160 = $$pre$i$i$i$i44;
       }
       $159 = ($160|0)==($150|0);
       if ($159) {
        break;
       } else {
        $155 = $160;
       }
      }
      $$pre$i$i46 = HEAP32[$27>>2]|0;
      $161 = $$pre$i$i46;
     }
     __ZdlPv($161);
     $$4 = $$0;$$45 = $$01;
    }
   }
  } while(0);
  L91: do {
   if ((label|0) == 67) {
    $166 = HEAP32[$9>>2]|0;
    $167 = HEAP32[$166>>2]|0;
    $168 = ((($167)) + 16|0);
    $169 = HEAP32[$168>>2]|0;
    __THREW__ = 0;
    $170 = (invoke_ii($169|0,($166|0))|0);
    $171 = __THREW__; __THREW__ = 0;
    $172 = $171&1;
    if ($172) {
     label = 48;
    } else {
     L94: do {
      if ($170) {
       __THREW__ = 0;
       $173 = (invoke_ii(179,20)|0);
       $174 = __THREW__; __THREW__ = 0;
       $175 = $174&1;
       if ($175) {
        label = 48;
        break L91;
       }
       $176 = ((($173)) + 4|0);
       HEAP32[$176>>2] = 0;
       $177 = ((($173)) + 8|0);
       HEAP32[$177>>2] = 0;
       HEAP32[$173>>2] = (320);
       $178 = ((($173)) + 12|0);
       $179 = ((($173)) + 16|0);
       $180 = HEAP32[8>>2]|0;
       $181 = (($180) + 1)|0;
       HEAP32[8>>2] = $181;
       HEAP32[$179>>2] = $181;
       HEAP32[$178>>2] = (352);
       HEAP32[$slack>>2] = $178;
       $182 = ((($slack)) + 4|0);
       HEAP32[$182>>2] = $173;
       $183 = ((($agg$result)) + 8|0);
       __THREW__ = 0;
       $184 = (invoke_iii(177,($183|0),($slack|0))|0);
       $185 = __THREW__; __THREW__ = 0;
       $186 = $185&1;
       L251: do {
        if ($186) {
         label = 107;
        } else {
         HEAPF64[$184>>3] = -1.0;
         $187 = ((($this)) + 204|0);
         __THREW__ = 0;
         $188 = (invoke_iii(187,($187|0),($c|0))|0);
         $189 = __THREW__; __THREW__ = 0;
         $190 = $189&1;
         if ($190) {
          label = 107;
         } else {
          __ZNSt3__119__shared_weak_count12__add_sharedEv($173);
          HEAP32[$188>>2] = $178;
          $191 = ((($188)) + 4|0);
          $192 = HEAP32[$191>>2]|0;
          HEAP32[$191>>2] = $173;
          $193 = ($192|0)==(0|0);
          if (!($193)) {
           __ZNSt3__119__shared_weak_count16__release_sharedEv($192);
          }
          $194 = ((($this)) + 224|0);
          __THREW__ = 0;
          $195 = (invoke_iii(188,($194|0),($slack|0))|0);
          $196 = __THREW__; __THREW__ = 0;
          $197 = $196&1;
          if ($197) {
           label = 107;
          } else {
           $198 = HEAP32[$9>>2]|0;
           $199 = ((($c)) + 8|0);
           $200 = HEAP32[$199>>2]|0;
           $201 = ($200|0)==(0|0);
           if (!($201)) {
            __ZNSt3__119__shared_weak_count12__add_sharedEv($200);
           }
           $202 = ((($195)) + 4|0);
           HEAP32[$202>>2] = $198;
           $203 = ((($195)) + 8|0);
           $204 = HEAP32[$203>>2]|0;
           HEAP32[$203>>2] = $200;
           $205 = ($204|0)==(0|0);
           if (!($205)) {
            __ZNSt3__119__shared_weak_count16__release_sharedEv($204);
           }
           $206 = HEAP32[$9>>2]|0;
           $207 = HEAP32[$206>>2]|0;
           $208 = ((($207)) + 20|0);
           $209 = HEAP32[$208>>2]|0;
           __THREW__ = 0;
           $210 = (invoke_ii($209|0,($206|0))|0);
           $211 = __THREW__; __THREW__ = 0;
           $212 = $211&1;
           if ($212) {
            label = 107;
           } else {
            L265: do {
             if (!($210)) {
              __THREW__ = 0;
              $213 = (invoke_ii(179,20)|0);
              $214 = __THREW__; __THREW__ = 0;
              $215 = $214&1;
              if ($215) {
               label = 107;
               break L251;
              }
              $216 = ((($213)) + 4|0);
              HEAP32[$216>>2] = 0;
              $217 = ((($213)) + 8|0);
              HEAP32[$217>>2] = 0;
              HEAP32[$213>>2] = (320);
              $218 = ((($213)) + 12|0);
              $219 = ((($213)) + 16|0);
              $220 = HEAP32[8>>2]|0;
              $221 = (($220) + 1)|0;
              HEAP32[8>>2] = $221;
              HEAP32[$219>>2] = $221;
              HEAP32[$218>>2] = (352);
              HEAP32[$eminus>>2] = $218;
              $222 = ((($eminus)) + 4|0);
              HEAP32[$222>>2] = $213;
              __THREW__ = 0;
              $223 = (invoke_iii(177,($183|0),($eminus|0))|0);
              $224 = __THREW__; __THREW__ = 0;
              $225 = $224&1;
              L268: do {
               if ($225) {
                label = 108;
               } else {
                HEAPF64[$223>>3] = 1.0;
                $226 = ((($this)) + 8|0);
                $227 = ((($this)) + 244|0);
                $228 = HEAP32[$227>>2]|0;
                $229 = ((($228)) + 4|0);
                $230 = HEAP32[$229>>2]|0;
                $231 = ((($this)) + 36|0);
                $232 = HEAP32[$231>>2]|0;
                $233 = ($232|0)==(0);
                L270: do {
                 if (!($233)) {
                  $234 = (($232) + -1)|0;
                  $235 = $234 & $232;
                  $236 = ($235|0)==(0);
                  if ($236) {
                   $237 = $234 & $230;
                   $242 = $237;
                  } else {
                   $238 = (($230>>>0) % ($232>>>0))&-1;
                   $242 = $238;
                  }
                  $239 = ((($this)) + 32|0);
                  $240 = HEAP32[$239>>2]|0;
                  $241 = (($240) + ($242<<2)|0);
                  $243 = HEAP32[$241>>2]|0;
                  $244 = ($243|0)==(0|0);
                  if ($244) {
                   break;
                  }
                  if ($236) {
                   $$pn$us$i$i$i61 = $243;
                   while(1) {
                    $__nd$0$us$i$i$i63 = HEAP32[$$pn$us$i$i$i61>>2]|0;
                    $245 = ($__nd$0$us$i$i$i63|0)==(0|0);
                    if ($245) {
                     break L270;
                    }
                    $246 = ((($__nd$0$us$i$i$i63)) + 4|0);
                    $247 = HEAP32[$246>>2]|0;
                    $248 = $247 & $234;
                    $249 = ($248|0)==($242|0);
                    if (!($249)) {
                     break L270;
                    }
                    $250 = ((($__nd$0$us$i$i$i63)) + 8|0);
                    $251 = HEAP32[$250>>2]|0;
                    $252 = ($251|0)==($228|0);
                    if ($252) {
                     $$ph$i72 = $__nd$0$us$i$i$i63;
                     break;
                    } else {
                     $$pn$us$i$i$i61 = $__nd$0$us$i$i$i63;
                    }
                   }
                  } else {
                   $$pn$i$i$i66 = $243;
                   while(1) {
                    $__nd$0$i$i$i68 = HEAP32[$$pn$i$i$i66>>2]|0;
                    $253 = ($__nd$0$i$i$i68|0)==(0|0);
                    if ($253) {
                     break L270;
                    }
                    $254 = ((($__nd$0$i$i$i68)) + 4|0);
                    $255 = HEAP32[$254>>2]|0;
                    $256 = (($255>>>0) % ($232>>>0))&-1;
                    $257 = ($256|0)==($242|0);
                    if (!($257)) {
                     break L270;
                    }
                    $258 = ((($__nd$0$i$i$i68)) + 8|0);
                    $259 = HEAP32[$258>>2]|0;
                    $260 = ($259|0)==($228|0);
                    if ($260) {
                     $$ph$i72 = $__nd$0$i$i$i68;
                     break;
                    } else {
                     $$pn$i$i$i66 = $__nd$0$i$i$i68;
                    }
                   }
                  }
                  $263 = ((($$ph$i72)) + 16|0);
                  $264 = HEAP32[$9>>2]|0;
                  $265 = ((($264)) + 16|0);
                  $266 = +HEAPF64[$265>>3];
                  $267 = ((($264)) + 24|0);
                  $268 = +HEAPF64[$267>>3];
                  $269 = ((($264)) + 32|0);
                  $270 = +HEAPF64[$269>>3];
                  $271 = HEAP32[$264>>2]|0;
                  $272 = ((($271)) + 28|0);
                  $273 = HEAP32[$272>>2]|0;
                  __THREW__ = 0;
                  $274 = (+invoke_di($273|0,($264|0)));
                  $275 = __THREW__; __THREW__ = 0;
                  $276 = $275&1;
                  if ($276) {
                   label = 108;
                   break L268;
                  }
                  $277 = $266 * 1.0E+7;
                  $278 = $268 * 1.0E+4;
                  $279 = $270 + $278;
                  $280 = $277 + $279;
                  $281 = $280 * $274;
                  $282 = HEAP32[$eminus>>2]|0;
                  HEAP32[$5>>2] = $282;
                  $283 = ((($5)) + 4|0);
                  $284 = HEAP32[$222>>2]|0;
                  HEAP32[$283>>2] = $284;
                  $285 = ($284|0)==(0|0);
                  if (!($285)) {
                   __ZNSt3__119__shared_weak_count12__add_sharedEv($284);
                  }
                  $286 = ((($5)) + 8|0);
                  HEAPF64[$286>>3] = $281;
                  __THREW__ = 0;
                  (invoke_iii(186,($263|0),($5|0))|0);
                  $287 = __THREW__; __THREW__ = 0;
                  $288 = $287&1;
                  if ($288) {
                   $305 = ___cxa_find_matching_catch()|0;
                   $306 = tempRet0;
                   $307 = HEAP32[$283>>2]|0;
                   $308 = ($307|0)==(0|0);
                   if ($308) {
                    $$1 = $305;$$12 = $306;
                    break L268;
                   }
                   __ZNSt3__119__shared_weak_count16__release_sharedEv($307);
                   $$1 = $305;$$12 = $306;
                   break L268;
                  }
                  $289 = HEAP32[$283>>2]|0;
                  $290 = ($289|0)==(0|0);
                  if (!($290)) {
                   __ZNSt3__119__shared_weak_count16__release_sharedEv($289);
                  }
                  $291 = ((($this)) + 184|0);
                  __THREW__ = 0;
                  $292 = (invoke_iii(189,($291|0),($c|0))|0);
                  $293 = __THREW__; __THREW__ = 0;
                  $294 = $293&1;
                  if ($294) {
                   label = 108;
                   break L268;
                  }
                  __THREW__ = 0;
                  invoke_viii(190,($2|0),($292|0),($eminus|0));
                  $295 = __THREW__; __THREW__ = 0;
                  $296 = $295&1;
                  if ($296) {
                   label = 108;
                   break L268;
                  }
                  __THREW__ = 0;
                  invoke_viii(191,($226|0),($eminus|0),($227|0));
                  $297 = __THREW__; __THREW__ = 0;
                  $298 = $297&1;
                  if ($298) {
                   label = 108;
                   break L268;
                  }
                  $299 = HEAP32[$222>>2]|0;
                  $300 = ($299|0)==(0|0);
                  if ($300) {
                   break L265;
                  }
                  __ZNSt3__119__shared_weak_count16__release_sharedEv($299);
                  break L265;
                 }
                } while(0);
                $261 = (___cxa_allocate_exception(4)|0);
                HEAP32[$261>>2] = (280);
                __THREW__ = 0;
                invoke_viii(182,($261|0),(296|0),(27|0));
                $262 = __THREW__; __THREW__ = 0;
                label = 108;
               }
              } while(0);
              if ((label|0) == 108) {
               $303 = ___cxa_find_matching_catch()|0;
               $304 = tempRet0;
               $$1 = $303;$$12 = $304;
              }
              $309 = HEAP32[$222>>2]|0;
              $310 = ($309|0)==(0|0);
              if ($310) {
               $$2 = $$1;$$23 = $$12;
               break L251;
              }
              __ZNSt3__119__shared_weak_count16__release_sharedEv($309);
              $$2 = $$1;$$23 = $$12;
              break L251;
             }
            } while(0);
            __ZNSt3__119__shared_weak_count16__release_sharedEv($173);
            break L94;
           }
          }
         }
        }
       } while(0);
       if ((label|0) == 107) {
        $301 = ___cxa_find_matching_catch()|0;
        $302 = tempRet0;
        $$2 = $301;$$23 = $302;
       }
       __ZNSt3__119__shared_weak_count16__release_sharedEv($173);
       $$4 = $$2;$$45 = $$23;
       break L91;
      } else {
       $311 = HEAP32[$9>>2]|0;
       $312 = HEAP32[$311>>2]|0;
       $313 = ((($312)) + 20|0);
       $314 = HEAP32[$313>>2]|0;
       __THREW__ = 0;
       $315 = (invoke_ii($314|0,($311|0))|0);
       $316 = __THREW__; __THREW__ = 0;
       $317 = $316&1;
       if ($317) {
        label = 48;
        break L91;
       }
       __THREW__ = 0;
       $318 = (invoke_ii(179,20)|0);
       $319 = __THREW__; __THREW__ = 0;
       $320 = $319&1;
       if ($315) {
        if ($320) {
         label = 48;
         break L91;
        }
        $321 = ((($318)) + 4|0);
        HEAP32[$321>>2] = 0;
        $322 = ((($318)) + 8|0);
        HEAP32[$322>>2] = 0;
        HEAP32[$318>>2] = (416);
        $323 = ((($318)) + 12|0);
        $324 = ((($318)) + 16|0);
        $325 = HEAP32[8>>2]|0;
        $326 = (($325) + 1)|0;
        HEAP32[8>>2] = $326;
        HEAP32[$324>>2] = $326;
        HEAP32[$323>>2] = (448);
        HEAP32[$dum>>2] = $323;
        $327 = ((($dum)) + 4|0);
        HEAP32[$327>>2] = $318;
        $328 = HEAP32[$9>>2]|0;
        $329 = HEAP32[$328>>2]|0;
        $330 = ((($329)) + 24|0);
        $331 = HEAP32[$330>>2]|0;
        __THREW__ = 0;
        $332 = (invoke_ii($331|0,($328|0))|0);
        $333 = __THREW__; __THREW__ = 0;
        $334 = $333&1;
        L100: do {
         if (!($334)) {
          do {
           if ($332) {
            $335 = ((($this)) + 176|0);
            $336 = HEAP32[$335>>2]|0;
            $337 = ((($this)) + 180|0);
            $338 = HEAP32[$337>>2]|0;
            $339 = ($336|0)==($338|0);
            if ($339) {
             $344 = ((($this)) + 172|0);
             __THREW__ = 0;
             invoke_vii(192,($344|0),($dum|0));
             $345 = __THREW__; __THREW__ = 0;
             $346 = $345&1;
             if ($346) {
              break L100;
             }
            } else {
             $340 = ($336|0)==(0|0);
             if ($340) {
              $343 = 0;
             } else {
              HEAP32[$336>>2] = $323;
              $341 = ((($336)) + 4|0);
              HEAP32[$341>>2] = $318;
              __ZNSt3__119__shared_weak_count12__add_sharedEv($318);
              $$pre$i = HEAP32[$335>>2]|0;
              $343 = $$pre$i;
             }
             $342 = ((($343)) + 8|0);
             HEAP32[$335>>2] = $342;
            }
            $347 = ((($this)) + 164|0);
            $348 = HEAP32[$347>>2]|0;
            $349 = ((($this)) + 168|0);
            $350 = HEAP32[$349>>2]|0;
            $351 = ($348|0)==($350|0);
            if ($351) {
             $356 = ((($this)) + 160|0);
             __THREW__ = 0;
             invoke_vii(192,($356|0),($dum|0));
             $357 = __THREW__; __THREW__ = 0;
             $358 = $357&1;
             if ($358) {
              break L100;
             } else {
              break;
             }
            }
            $352 = ($348|0)==(0|0);
            if ($352) {
             $355 = 0;
            } else {
             HEAP32[$348>>2] = $323;
             $353 = ((($348)) + 4|0);
             HEAP32[$353>>2] = $318;
             __ZNSt3__119__shared_weak_count12__add_sharedEv($318);
             $$pre$i88 = HEAP32[$347>>2]|0;
             $355 = $$pre$i88;
            }
            $354 = ((($355)) + 8|0);
            HEAP32[$347>>2] = $354;
           } else {
            $361 = HEAP32[$9>>2]|0;
            $362 = HEAP32[$361>>2]|0;
            $363 = ((($362)) + 12|0);
            $364 = HEAP32[$363>>2]|0;
            __THREW__ = 0;
            $365 = (invoke_ii($364|0,($361|0))|0);
            $366 = __THREW__; __THREW__ = 0;
            $367 = $366&1;
            if ($367) {
             break L100;
            }
            if ($365) {
             $368 = HEAP32[$9>>2]|0;
             $369 = HEAP32[$368>>2]|0;
             $370 = ((($369)) + 8|0);
             $371 = HEAP32[$370>>2]|0;
             __THREW__ = 0;
             invoke_vii($371|0,($6|0),($368|0));
             $372 = __THREW__; __THREW__ = 0;
             $373 = $372&1;
             if ($373) {
              break L100;
             }
             $374 = +HEAPF64[$6>>3];
             $375 = ((($agg$result)) + 40|0);
             HEAPF64[$375>>3] = $374;
             $376 = ((($6)) + 8|0);
             $377 = HEAP32[$376>>2]|0;
             $378 = ($377|0)==(0|0);
             if (!($378)) {
              $379 = ((($6)) + 12|0);
              $380 = HEAP32[$379>>2]|0;
              $381 = ($380|0)==($377|0);
              if ($381) {
               $389 = $377;
              } else {
               $383 = $380;
               while(1) {
                $382 = ((($383)) + -16|0);
                HEAP32[$379>>2] = $382;
                $384 = ((($383)) + -12|0);
                $385 = HEAP32[$384>>2]|0;
                $386 = ($385|0)==(0|0);
                if ($386) {
                 $388 = $382;
                } else {
                 __ZNSt3__119__shared_weak_count16__release_sharedEv($385);
                 $$pre$i$i$i$i98 = HEAP32[$379>>2]|0;
                 $388 = $$pre$i$i$i$i98;
                }
                $387 = ($388|0)==($377|0);
                if ($387) {
                 break;
                } else {
                 $383 = $388;
                }
               }
               $$pre$i$i100 = HEAP32[$376>>2]|0;
               $389 = $$pre$i$i100;
              }
              __ZdlPv($389);
             }
             __ZNSt3__119__shared_weak_count12__add_sharedEv($318);
             $390 = ((($agg$result)) + 32|0);
             HEAP32[$390>>2] = $323;
             $391 = ((($agg$result)) + 36|0);
             $392 = HEAP32[$391>>2]|0;
             HEAP32[$391>>2] = $318;
             $393 = ($392|0)==(0|0);
             if (!($393)) {
              __ZNSt3__119__shared_weak_count16__release_sharedEv($392);
             }
             __ZNSt3__119__shared_weak_count12__add_sharedEv($318);
             HEAP32[$8>>2] = $323;
             $394 = ((($agg$result)) + 28|0);
             $395 = HEAP32[$394>>2]|0;
             HEAP32[$394>>2] = $318;
             $396 = ($395|0)==(0|0);
             if ($396) {
              break;
             }
             __ZNSt3__119__shared_weak_count16__release_sharedEv($395);
            }
           }
          } while(0);
          $397 = ((($agg$result)) + 8|0);
          __THREW__ = 0;
          $398 = (invoke_iii(177,($397|0),($dum|0))|0);
          $399 = __THREW__; __THREW__ = 0;
          $400 = $399&1;
          if (!($400)) {
           HEAPF64[$398>>3] = 1.0;
           $401 = ((($this)) + 204|0);
           __THREW__ = 0;
           $402 = (invoke_iii(187,($401|0),($c|0))|0);
           $403 = __THREW__; __THREW__ = 0;
           $404 = $403&1;
           if (!($404)) {
            __ZNSt3__119__shared_weak_count12__add_sharedEv($318);
            HEAP32[$402>>2] = $323;
            $405 = ((($402)) + 4|0);
            $406 = HEAP32[$405>>2]|0;
            HEAP32[$405>>2] = $318;
            $407 = ($406|0)==(0|0);
            if (!($407)) {
             __ZNSt3__119__shared_weak_count16__release_sharedEv($406);
            }
            $408 = ((($this)) + 224|0);
            __THREW__ = 0;
            $409 = (invoke_iii(188,($408|0),($dum|0))|0);
            $410 = __THREW__; __THREW__ = 0;
            $411 = $410&1;
            if (!($411)) {
             $412 = HEAP32[$9>>2]|0;
             $413 = ((($c)) + 8|0);
             $414 = HEAP32[$413>>2]|0;
             $415 = ($414|0)==(0|0);
             if (!($415)) {
              __ZNSt3__119__shared_weak_count12__add_sharedEv($414);
             }
             $416 = ((($409)) + 4|0);
             HEAP32[$416>>2] = $412;
             $417 = ((($409)) + 8|0);
             $418 = HEAP32[$417>>2]|0;
             HEAP32[$417>>2] = $414;
             $419 = ($418|0)==(0|0);
             if (!($419)) {
              __ZNSt3__119__shared_weak_count16__release_sharedEv($418);
             }
             __ZNSt3__119__shared_weak_count16__release_sharedEv($318);
             break L94;
            }
           }
          }
         }
        } while(0);
        $359 = ___cxa_find_matching_catch()|0;
        $360 = tempRet0;
        __ZNSt3__119__shared_weak_count16__release_sharedEv($318);
        $$4 = $359;$$45 = $360;
        break L91;
       }
       if ($320) {
        label = 48;
        break L91;
       }
       $420 = ((($318)) + 4|0);
       HEAP32[$420>>2] = 0;
       $421 = ((($318)) + 8|0);
       HEAP32[$421>>2] = 0;
       HEAP32[$318>>2] = (320);
       $422 = ((($318)) + 12|0);
       $423 = ((($318)) + 16|0);
       $424 = HEAP32[8>>2]|0;
       $425 = (($424) + 1)|0;
       HEAP32[8>>2] = $425;
       HEAP32[$423>>2] = $425;
       HEAP32[$422>>2] = (352);
       HEAP32[$eplus>>2] = $422;
       $426 = ((($eplus)) + 4|0);
       HEAP32[$426>>2] = $318;
       __THREW__ = 0;
       $427 = (invoke_ii(179,20)|0);
       $428 = __THREW__; __THREW__ = 0;
       $429 = $428&1;
       if ($429) {
        $579 = ___cxa_find_matching_catch()|0;
        $580 = tempRet0;
        $$3 = $579;$$34 = $580;
       } else {
        $430 = ((($427)) + 4|0);
        HEAP32[$430>>2] = 0;
        $431 = ((($427)) + 8|0);
        HEAP32[$431>>2] = 0;
        HEAP32[$427>>2] = (320);
        $432 = ((($427)) + 12|0);
        $433 = ((($427)) + 16|0);
        $434 = (($424) + 2)|0;
        HEAP32[8>>2] = $434;
        HEAP32[$433>>2] = $434;
        HEAP32[$432>>2] = (352);
        HEAP32[$eminus1>>2] = $432;
        $435 = ((($eminus1)) + 4|0);
        HEAP32[$435>>2] = $427;
        $436 = ((($agg$result)) + 8|0);
        __THREW__ = 0;
        $437 = (invoke_iii(177,($436|0),($eplus|0))|0);
        $438 = __THREW__; __THREW__ = 0;
        $439 = $438&1;
        L155: do {
         if (!($439)) {
          HEAPF64[$437>>3] = -1.0;
          __THREW__ = 0;
          $440 = (invoke_iii(177,($436|0),($eminus1|0))|0);
          $441 = __THREW__; __THREW__ = 0;
          $442 = $441&1;
          if (!($442)) {
           HEAPF64[$440>>3] = 1.0;
           $443 = ((($this)) + 204|0);
           __THREW__ = 0;
           $444 = (invoke_iii(187,($443|0),($c|0))|0);
           $445 = __THREW__; __THREW__ = 0;
           $446 = $445&1;
           if (!($446)) {
            $447 = HEAP32[$eplus>>2]|0;
            $448 = HEAP32[$426>>2]|0;
            $449 = ($448|0)==(0|0);
            if (!($449)) {
             __ZNSt3__119__shared_weak_count12__add_sharedEv($448);
            }
            HEAP32[$444>>2] = $447;
            $450 = ((($444)) + 4|0);
            $451 = HEAP32[$450>>2]|0;
            HEAP32[$450>>2] = $448;
            $452 = ($451|0)==(0|0);
            if (!($452)) {
             __ZNSt3__119__shared_weak_count16__release_sharedEv($451);
            }
            $453 = ((($this)) + 224|0);
            __THREW__ = 0;
            $454 = (invoke_iii(188,($453|0),($eplus|0))|0);
            $455 = __THREW__; __THREW__ = 0;
            $456 = $455&1;
            if (!($456)) {
             $457 = HEAP32[$9>>2]|0;
             $458 = ((($c)) + 8|0);
             $459 = HEAP32[$458>>2]|0;
             $460 = ($459|0)==(0|0);
             if (!($460)) {
              __ZNSt3__119__shared_weak_count12__add_sharedEv($459);
             }
             $461 = ((($454)) + 4|0);
             HEAP32[$461>>2] = $457;
             $462 = ((($454)) + 8|0);
             $463 = HEAP32[$462>>2]|0;
             HEAP32[$462>>2] = $459;
             $464 = ($463|0)==(0|0);
             if (!($464)) {
              __ZNSt3__119__shared_weak_count16__release_sharedEv($463);
             }
             $465 = ((($this)) + 8|0);
             $466 = ((($this)) + 244|0);
             $467 = HEAP32[$466>>2]|0;
             $468 = ((($467)) + 4|0);
             $469 = HEAP32[$468>>2]|0;
             $470 = ((($this)) + 36|0);
             $471 = HEAP32[$470>>2]|0;
             $472 = ($471|0)==(0);
             L172: do {
              if (!($472)) {
               $473 = (($471) + -1)|0;
               $474 = $473 & $471;
               $475 = ($474|0)==(0);
               if ($475) {
                $476 = $473 & $469;
                $481 = $476;
               } else {
                $477 = (($469>>>0) % ($471>>>0))&-1;
                $481 = $477;
               }
               $478 = ((($this)) + 32|0);
               $479 = HEAP32[$478>>2]|0;
               $480 = (($479) + ($481<<2)|0);
               $482 = HEAP32[$480>>2]|0;
               $483 = ($482|0)==(0|0);
               if ($483) {
                break;
               }
               if ($475) {
                $$pn$us$i$i$i131 = $482;
                while(1) {
                 $__nd$0$us$i$i$i133 = HEAP32[$$pn$us$i$i$i131>>2]|0;
                 $484 = ($__nd$0$us$i$i$i133|0)==(0|0);
                 if ($484) {
                  break L172;
                 }
                 $485 = ((($__nd$0$us$i$i$i133)) + 4|0);
                 $486 = HEAP32[$485>>2]|0;
                 $487 = $486 & $473;
                 $488 = ($487|0)==($481|0);
                 if (!($488)) {
                  break L172;
                 }
                 $489 = ((($__nd$0$us$i$i$i133)) + 8|0);
                 $490 = HEAP32[$489>>2]|0;
                 $491 = ($490|0)==($467|0);
                 if ($491) {
                  $$ph$i142 = $__nd$0$us$i$i$i133;
                  break;
                 } else {
                  $$pn$us$i$i$i131 = $__nd$0$us$i$i$i133;
                 }
                }
               } else {
                $$pn$i$i$i136 = $482;
                while(1) {
                 $__nd$0$i$i$i138 = HEAP32[$$pn$i$i$i136>>2]|0;
                 $492 = ($__nd$0$i$i$i138|0)==(0|0);
                 if ($492) {
                  break L172;
                 }
                 $493 = ((($__nd$0$i$i$i138)) + 4|0);
                 $494 = HEAP32[$493>>2]|0;
                 $495 = (($494>>>0) % ($471>>>0))&-1;
                 $496 = ($495|0)==($481|0);
                 if (!($496)) {
                  break L172;
                 }
                 $497 = ((($__nd$0$i$i$i138)) + 8|0);
                 $498 = HEAP32[$497>>2]|0;
                 $499 = ($498|0)==($467|0);
                 if ($499) {
                  $$ph$i142 = $__nd$0$i$i$i138;
                  break;
                 } else {
                  $$pn$i$i$i136 = $__nd$0$i$i$i138;
                 }
                }
               }
               $502 = HEAP32[$9>>2]|0;
               $503 = ((($502)) + 16|0);
               $504 = +HEAPF64[$503>>3];
               $505 = ((($502)) + 24|0);
               $506 = +HEAPF64[$505>>3];
               $507 = ((($502)) + 32|0);
               $508 = +HEAPF64[$507>>3];
               $509 = HEAP32[$502>>2]|0;
               $510 = ((($509)) + 28|0);
               $511 = HEAP32[$510>>2]|0;
               __THREW__ = 0;
               $512 = (+invoke_di($511|0,($502|0)));
               $513 = __THREW__; __THREW__ = 0;
               $514 = $513&1;
               if ($514) {
                break L155;
               }
               $515 = $504 * 1.0E+7;
               $516 = $506 * 1.0E+4;
               $517 = $508 + $516;
               $518 = $515 + $517;
               $519 = $518 * $512;
               $520 = $519 > 0.0;
               $521 = 0.0 - $519;
               $$0$in$i$i$i = $520 ? $519 : $521;
               $$0$i$i$i = $$0$in$i$i$i < 1.0E-8;
               if (!($$0$i$i$i)) {
                $522 = ((($$ph$i142)) + 24|0);
                __THREW__ = 0;
                $523 = (invoke_iii(177,($522|0),($eplus|0))|0);
                $524 = __THREW__; __THREW__ = 0;
                $525 = $524&1;
                if ($525) {
                 break L155;
                }
                HEAPF64[$523>>3] = $519;
               }
               __THREW__ = 0;
               invoke_viii(191,($465|0),($eplus|0),($466|0));
               $526 = __THREW__; __THREW__ = 0;
               $527 = $526&1;
               if ($527) {
                break L155;
               }
               $528 = ((($this)) + 184|0);
               __THREW__ = 0;
               $529 = (invoke_iii(189,($528|0),($c|0))|0);
               $530 = __THREW__; __THREW__ = 0;
               $531 = $530&1;
               if ($531) {
                break L155;
               }
               __THREW__ = 0;
               invoke_viii(190,($1|0),($529|0),($eplus|0));
               $532 = __THREW__; __THREW__ = 0;
               $533 = $532&1;
               if ($533) {
                break L155;
               }
               $534 = 0.0 - $519;
               $$0$in$i$i$i151 = $520 ? $519 : $534;
               $$0$i$i$i152 = $$0$in$i$i$i151 < 1.0E-8;
               if (!($$0$i$i$i152)) {
                $535 = ((($$ph$i142)) + 24|0);
                __THREW__ = 0;
                $536 = (invoke_iii(177,($535|0),($eminus1|0))|0);
                $537 = __THREW__; __THREW__ = 0;
                $538 = $537&1;
                if ($538) {
                 break L155;
                }
                HEAPF64[$536>>3] = $519;
               }
               __THREW__ = 0;
               invoke_viii(191,($465|0),($eminus1|0),($466|0));
               $539 = __THREW__; __THREW__ = 0;
               $540 = $539&1;
               if ($540) {
                break L155;
               }
               __THREW__ = 0;
               $541 = (invoke_iii(189,($528|0),($c|0))|0);
               $542 = __THREW__; __THREW__ = 0;
               $543 = $542&1;
               if ($543) {
                break L155;
               }
               __THREW__ = 0;
               invoke_viii(190,($0|0),($541|0),($eminus1|0));
               $544 = __THREW__; __THREW__ = 0;
               $545 = $544&1;
               if ($545) {
                break L155;
               }
               $546 = HEAP32[$9>>2]|0;
               $547 = HEAP32[$546>>2]|0;
               $548 = ((($547)) + 24|0);
               $549 = HEAP32[$548>>2]|0;
               __THREW__ = 0;
               $550 = (invoke_ii($549|0,($546|0))|0);
               $551 = __THREW__; __THREW__ = 0;
               $552 = $551&1;
               if ($552) {
                break L155;
               }
               do {
                if ($550) {
                 $553 = ((($this)) + 176|0);
                 $554 = HEAP32[$553>>2]|0;
                 $555 = ((($this)) + 180|0);
                 $556 = HEAP32[$555>>2]|0;
                 $557 = ($554>>>0)<($556>>>0);
                 if ($557) {
                  $558 = ($554|0)==(0|0);
                  if (!($558)) {
                   $559 = HEAP32[$eplus>>2]|0;
                   HEAP32[$554>>2] = $559;
                   $560 = ((($554)) + 4|0);
                   $561 = HEAP32[$426>>2]|0;
                   HEAP32[$560>>2] = $561;
                   HEAP32[$eplus>>2] = 0;
                   HEAP32[$426>>2] = 0;
                  }
                  $562 = ((($554)) + 8|0);
                  HEAP32[$553>>2] = $562;
                 } else {
                  $563 = ((($this)) + 172|0);
                  __THREW__ = 0;
                  invoke_vii(193,($563|0),($eplus|0));
                  $564 = __THREW__; __THREW__ = 0;
                  $565 = $564&1;
                  if ($565) {
                   break L155;
                  }
                 }
                 $566 = ((($this)) + 164|0);
                 $567 = HEAP32[$566>>2]|0;
                 $568 = ((($this)) + 168|0);
                 $569 = HEAP32[$568>>2]|0;
                 $570 = ($567>>>0)<($569>>>0);
                 if (!($570)) {
                  $576 = ((($this)) + 160|0);
                  __THREW__ = 0;
                  invoke_vii(193,($576|0),($eminus1|0));
                  $577 = __THREW__; __THREW__ = 0;
                  $578 = $577&1;
                  if ($578) {
                   break L155;
                  } else {
                   break;
                  }
                 }
                 $571 = ($567|0)==(0|0);
                 if (!($571)) {
                  $572 = HEAP32[$eminus1>>2]|0;
                  HEAP32[$567>>2] = $572;
                  $573 = ((($567)) + 4|0);
                  $574 = HEAP32[$435>>2]|0;
                  HEAP32[$573>>2] = $574;
                  HEAP32[$eminus1>>2] = 0;
                  HEAP32[$435>>2] = 0;
                 }
                 $575 = ((($567)) + 8|0);
                 HEAP32[$566>>2] = $575;
                } else {
                 $585 = HEAP32[$9>>2]|0;
                 $586 = HEAP32[$585>>2]|0;
                 $587 = ((($586)) + 12|0);
                 $588 = HEAP32[$587>>2]|0;
                 __THREW__ = 0;
                 $589 = (invoke_ii($588|0,($585|0))|0);
                 $590 = __THREW__; __THREW__ = 0;
                 $591 = $590&1;
                 if ($591) {
                  break L155;
                 }
                 if (!($589)) {
                  break;
                 }
                 $592 = HEAP32[$eplus>>2]|0;
                 $593 = HEAP32[$426>>2]|0;
                 HEAP32[$eplus>>2] = 0;
                 HEAP32[$426>>2] = 0;
                 $594 = ((($agg$result)) + 32|0);
                 HEAP32[$594>>2] = $592;
                 $595 = ((($agg$result)) + 36|0);
                 $596 = HEAP32[$595>>2]|0;
                 HEAP32[$595>>2] = $593;
                 $597 = ($596|0)==(0|0);
                 if (!($597)) {
                  __ZNSt3__119__shared_weak_count16__release_sharedEv($596);
                 }
                 $598 = HEAP32[$eminus1>>2]|0;
                 $599 = HEAP32[$435>>2]|0;
                 HEAP32[$eminus1>>2] = 0;
                 HEAP32[$435>>2] = 0;
                 HEAP32[$8>>2] = $598;
                 $600 = ((($agg$result)) + 28|0);
                 $601 = HEAP32[$600>>2]|0;
                 HEAP32[$600>>2] = $599;
                 $602 = ($601|0)==(0|0);
                 if (!($602)) {
                  __ZNSt3__119__shared_weak_count16__release_sharedEv($601);
                 }
                 $603 = HEAP32[$9>>2]|0;
                 $604 = HEAP32[$603>>2]|0;
                 $605 = ((($604)) + 8|0);
                 $606 = HEAP32[$605>>2]|0;
                 __THREW__ = 0;
                 invoke_vii($606|0,($7|0),($603|0));
                 $607 = __THREW__; __THREW__ = 0;
                 $608 = $607&1;
                 if ($608) {
                  break L155;
                 }
                 $609 = +HEAPF64[$7>>3];
                 $610 = ((($agg$result)) + 40|0);
                 HEAPF64[$610>>3] = $609;
                 $611 = ((($7)) + 8|0);
                 $612 = HEAP32[$611>>2]|0;
                 $613 = ($612|0)==(0|0);
                 if ($613) {
                  break;
                 }
                 $614 = ((($7)) + 12|0);
                 $615 = HEAP32[$614>>2]|0;
                 $616 = ($615|0)==($612|0);
                 if ($616) {
                  $624 = $612;
                 } else {
                  $618 = $615;
                  while(1) {
                   $617 = ((($618)) + -16|0);
                   HEAP32[$614>>2] = $617;
                   $619 = ((($618)) + -12|0);
                   $620 = HEAP32[$619>>2]|0;
                   $621 = ($620|0)==(0|0);
                   if ($621) {
                    $623 = $617;
                   } else {
                    __ZNSt3__119__shared_weak_count16__release_sharedEv($620);
                    $$pre$i$i$i$i172 = HEAP32[$614>>2]|0;
                    $623 = $$pre$i$i$i$i172;
                   }
                   $622 = ($623|0)==($612|0);
                   if ($622) {
                    break;
                   } else {
                    $618 = $623;
                   }
                  }
                  $$pre$i$i174 = HEAP32[$611>>2]|0;
                  $624 = $$pre$i$i174;
                 }
                 __ZdlPv($624);
                }
               } while(0);
               $625 = HEAP32[$435>>2]|0;
               $626 = ($625|0)==(0|0);
               if (!($626)) {
                __ZNSt3__119__shared_weak_count16__release_sharedEv($625);
               }
               $627 = HEAP32[$426>>2]|0;
               $628 = ($627|0)==(0|0);
               if ($628) {
                break L94;
               }
               __ZNSt3__119__shared_weak_count16__release_sharedEv($627);
               break L94;
              }
             } while(0);
             $500 = (___cxa_allocate_exception(4)|0);
             HEAP32[$500>>2] = (280);
             __THREW__ = 0;
             invoke_viii(182,($500|0),(296|0),(27|0));
             $501 = __THREW__; __THREW__ = 0;
            }
           }
          }
         }
        } while(0);
        $581 = ___cxa_find_matching_catch()|0;
        $582 = tempRet0;
        $583 = HEAP32[$435>>2]|0;
        $584 = ($583|0)==(0|0);
        if ($584) {
         $$3 = $581;$$34 = $582;
        } else {
         __ZNSt3__119__shared_weak_count16__release_sharedEv($583);
         $$3 = $581;$$34 = $582;
        }
       }
       $629 = HEAP32[$426>>2]|0;
       $630 = ($629|0)==(0|0);
       if ($630) {
        $$4 = $$3;$$45 = $$34;
        break L91;
       }
       __ZNSt3__119__shared_weak_count16__release_sharedEv($629);
       $$4 = $$3;$$45 = $$34;
       break L91;
      }
     } while(0);
     $631 = +HEAPF64[$agg$result>>3];
     $632 = $631 < 0.0;
     if ($632) {
      __THREW__ = 0;
      (invoke_iid(184,($agg$result|0),-1.0)|0);
      $633 = __THREW__; __THREW__ = 0;
      $634 = $633&1;
      if ($634) {
       label = 48;
       break;
      }
     }
     $635 = ((($cexpr)) + 8|0);
     $636 = HEAP32[$635>>2]|0;
     $637 = ($636|0)==(0|0);
     if ($637) {
      STACKTOP = sp;return;
     }
     $638 = HEAP32[$19>>2]|0;
     $639 = ($638|0)==($636|0);
     if ($639) {
      $647 = $636;
     } else {
      $641 = $638;
      while(1) {
       $640 = ((($641)) + -16|0);
       HEAP32[$19>>2] = $640;
       $642 = ((($641)) + -12|0);
       $643 = HEAP32[$642>>2]|0;
       $644 = ($643|0)==(0|0);
       if ($644) {
        $646 = $640;
       } else {
        __ZNSt3__119__shared_weak_count16__release_sharedEv($643);
        $$pre$i$i$i$i9 = HEAP32[$19>>2]|0;
        $646 = $$pre$i$i$i$i9;
       }
       $645 = ($646|0)==($636|0);
       if ($645) {
        break;
       } else {
        $641 = $646;
       }
      }
      $$pre$i$i11 = HEAP32[$635>>2]|0;
      $647 = $$pre$i$i11;
     }
     __ZdlPv($647);
     STACKTOP = sp;return;
    }
   }
  } while(0);
  if ((label|0) == 48) {
   $132 = ___cxa_find_matching_catch()|0;
   $133 = tempRet0;
   $lpad$phi$index = $132;$lpad$phi$index2 = $133;
   label = 49;
  }
  if ((label|0) == 49) {
   $$4 = $lpad$phi$index;$$45 = $lpad$phi$index2;
  }
  $648 = ((($cexpr)) + 8|0);
  $649 = HEAP32[$648>>2]|0;
  $650 = ($649|0)==(0|0);
  if ($650) {
   $$5 = $$4;$$56 = $$45;
  } else {
   $651 = HEAP32[$19>>2]|0;
   $652 = ($651|0)==($649|0);
   if ($652) {
    $660 = $649;
   } else {
    $654 = $651;
    while(1) {
     $653 = ((($654)) + -16|0);
     HEAP32[$19>>2] = $653;
     $655 = ((($654)) + -12|0);
     $656 = HEAP32[$655>>2]|0;
     $657 = ($656|0)==(0|0);
     if ($657) {
      $659 = $653;
     } else {
      __ZNSt3__119__shared_weak_count16__release_sharedEv($656);
      $$pre$i$i$i$i = HEAP32[$19>>2]|0;
      $659 = $$pre$i$i$i$i;
     }
     $658 = ($659|0)==($649|0);
     if ($658) {
      break;
     } else {
      $654 = $659;
     }
    }
    $$pre$i$i = HEAP32[$648>>2]|0;
    $660 = $$pre$i$i;
   }
   __ZdlPv($660);
   $$5 = $$4;$$56 = $$45;
  }
 }
 $661 = ((($agg$result)) + 36|0);
 $662 = HEAP32[$661>>2]|0;
 $663 = ($662|0)==(0|0);
 if (!($663)) {
  __ZNSt3__119__shared_weak_count16__release_sharedEv($662);
 }
 $664 = ((($agg$result)) + 28|0);
 $665 = HEAP32[$664>>2]|0;
 $666 = ($665|0)==(0|0);
 if (!($666)) {
  __ZNSt3__119__shared_weak_count16__release_sharedEv($665);
 }
 $667 = ((($agg$result)) + 8|0);
 $668 = HEAP32[$667>>2]|0;
 $669 = ($668|0)==(0|0);
 if ($669) {
  ___resumeException($$5|0);
  // unreachable;
 }
 $670 = ((($agg$result)) + 12|0);
 $671 = HEAP32[$670>>2]|0;
 $672 = ($671|0)==($668|0);
 if ($672) {
  $680 = $668;
 } else {
  $674 = $671;
  while(1) {
   $673 = ((($674)) + -16|0);
   HEAP32[$670>>2] = $673;
   $675 = ((($674)) + -12|0);
   $676 = HEAP32[$675>>2]|0;
   $677 = ($676|0)==(0|0);
   if ($677) {
    $679 = $673;
   } else {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($676);
    $$pre$i$i$i$i$i = HEAP32[$670>>2]|0;
    $679 = $$pre$i$i$i$i$i;
   }
   $678 = ($679|0)==($668|0);
   if ($678) {
    break;
   } else {
    $674 = $679;
   }
  }
  $$pre$i$i$i = HEAP32[$667>>2]|0;
  $680 = $$pre$i$i$i;
 }
 __ZdlPv($680);
 ___resumeException($$5|0);
 // unreachable;
}
function __ZN4rhea14simplex_solver15add_constraint_ERKNS_10constraintE($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i$i$i = 0, $$pre$i$i$i$i$i15 = 0, $$pre$i$i$i17 = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__f$01$i$i = 0, $__f$01$i$i$i = 0, $__f$01$i$i$i3 = 0, $r = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $r = sp;
 $result = sp + 64|0;
 $0 = sp + 48|0;
 $1 = ((($c)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 511]($2)|0);
 if ($6) {
  $7 = HEAP32[$1>>2]|0;
  $8 = (___dynamic_cast($7,504,512,0)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   ___cxa_bad_cast();
   // unreachable;
  }
  $10 = ((($8)) + 48|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (FUNCTION_TABLE_ii[$14 & 511]($11)|0);
  if (!($15)) {
   $16 = (___cxa_allocate_exception(8)|0);
   HEAP32[$16>>2] = (2328);
   $17 = ((($16)) + 4|0);
   HEAP32[$17>>2] = $10;
   ___cxa_throw(($16|0),(528|0),(27|0));
   // unreachable;
  }
 }
 __ZN4rhea14simplex_solver15make_expressionERKNS_10constraintE($r,$this,$c);
 __THREW__ = 0;
 $18 = (invoke_iii(194,($this|0),($r|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 L8: do {
  if ($20) {
   $21 = ___cxa_find_matching_catch(544|0)|0;
   $22 = tempRet0;
   $23 = (_llvm_eh_typeid_for((544|0))|0);
   $24 = ($22|0)==($23|0);
   if ($24) {
    (___cxa_begin_catch(($21|0))|0);
    $25 = HEAP32[$this>>2]|0;
    $26 = ((($25)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    __THREW__ = 0;
    (invoke_iii($27|0,($this|0),($c|0))|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     __THREW__ = 0;
     invoke_v(195);
     $30 = __THREW__; __THREW__ = 0;
    }
    $31 = ___cxa_find_matching_catch()|0;
    $32 = tempRet0;
    __THREW__ = 0;
    invoke_v(196);
    $33 = __THREW__; __THREW__ = 0;
    $34 = $33&1;
    if ($34) {
     $213 = ___cxa_find_matching_catch(0|0)|0;
     $214 = tempRet0;
     ___clang_call_terminate($213);
     // unreachable;
    } else {
     $$1 = $31;$$12 = $32;
    }
   } else {
    $$1 = $21;$$12 = $22;
   }
  } else {
   L10: do {
    if ($18) {
     label = 36;
    } else {
     __THREW__ = 0;
     invoke_viii(197,($result|0),($this|0),($r|0));
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if (!($36)) {
      $37 = HEAP8[$result>>0]|0;
      $38 = ($37<<24>>24)==(0);
      if (!($38)) {
       $99 = ((($result)) + 4|0);
       $100 = ((($result)) + 12|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = ($101|0)==(0);
       if ($102) {
        label = 36;
        break;
       }
       $103 = ((($result)) + 8|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = HEAP32[$99>>2]|0;
       $106 = ((($105)) + 4|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = HEAP32[$104>>2]|0;
       $109 = ((($108)) + 4|0);
       HEAP32[$109>>2] = $107;
       $110 = HEAP32[$106>>2]|0;
       HEAP32[$110>>2] = $108;
       HEAP32[$100>>2] = 0;
       $111 = ($104|0)==($99|0);
       if ($111) {
        label = 36;
        break;
       } else {
        $__f$01$i$i$i = $104;
       }
       while(1) {
        $112 = ((($__f$01$i$i$i)) + 4|0);
        $113 = HEAP32[$112>>2]|0;
        $114 = ((($__f$01$i$i$i)) + 8|0);
        HEAP32[$114>>2] = (2352);
        $115 = ((($__f$01$i$i$i)) + 16|0);
        $116 = HEAP32[$115>>2]|0;
        $117 = ($116|0)==(0|0);
        if (!($117)) {
         __ZNSt3__119__shared_weak_count16__release_sharedEv($116);
        }
        __ZdlPv($__f$01$i$i$i);
        $118 = ($113|0)==($99|0);
        if ($118) {
         label = 36;
         break L10;
        } else {
         $__f$01$i$i$i = $113;
        }
       }
      }
      $39 = HEAP32[$this>>2]|0;
      $40 = ((($39)) + 20|0);
      $41 = HEAP32[$40>>2]|0;
      __THREW__ = 0;
      (invoke_iii($41|0,($this|0),($c|0))|0);
      $42 = __THREW__; __THREW__ = 0;
      $43 = $42&1;
      if ($43) {
       $82 = ___cxa_find_matching_catch()|0;
       $83 = tempRet0;
       $$pre = ((($result)) + 12|0);
       $$0 = $82;$$01 = $83;$$pre$phiZ2D = $$pre;
      } else {
       $44 = (___cxa_allocate_exception(16)|0);
       HEAP32[$0>>2] = $0;
       $45 = ((($0)) + 4|0);
       HEAP32[$45>>2] = $0;
       $46 = ((($0)) + 8|0);
       HEAP32[$46>>2] = 0;
       $47 = ((($result)) + 12|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = ($48|0)==(0);
       if (!($49)) {
        $50 = ((($result)) + 8|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = ((($result)) + 4|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = ((($53)) + 4|0);
        $55 = HEAP32[$54>>2]|0;
        $56 = HEAP32[$51>>2]|0;
        $57 = ((($56)) + 4|0);
        HEAP32[$57>>2] = $55;
        $58 = HEAP32[$54>>2]|0;
        HEAP32[$58>>2] = $56;
        $59 = HEAP32[$0>>2]|0;
        $60 = ((($59)) + 4|0);
        HEAP32[$60>>2] = $51;
        HEAP32[$51>>2] = $59;
        HEAP32[$0>>2] = $53;
        HEAP32[$54>>2] = $0;
        HEAP32[$46>>2] = $48;
        HEAP32[$47>>2] = 0;
       }
       HEAP32[$44>>2] = (568);
       $61 = ((($44)) + 4|0);
       HEAP32[$61>>2] = $61;
       $62 = ((($44)) + 8|0);
       HEAP32[$62>>2] = $61;
       $63 = ((($44)) + 12|0);
       HEAP32[$63>>2] = 0;
       $64 = HEAP32[$46>>2]|0;
       $65 = ($64|0)==(0);
       if (!($65)) {
        $66 = HEAP32[$45>>2]|0;
        $67 = HEAP32[$0>>2]|0;
        $68 = ((($67)) + 4|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = HEAP32[$66>>2]|0;
        $71 = ((($70)) + 4|0);
        HEAP32[$71>>2] = $69;
        $72 = HEAP32[$68>>2]|0;
        HEAP32[$72>>2] = $70;
        $73 = HEAP32[$61>>2]|0;
        $74 = ((($73)) + 4|0);
        HEAP32[$74>>2] = $66;
        HEAP32[$66>>2] = $73;
        HEAP32[$61>>2] = $67;
        HEAP32[$68>>2] = $61;
        HEAP32[$63>>2] = $64;
        HEAP32[$46>>2] = 0;
       }
       __THREW__ = 0;
       invoke_viii(182,($44|0),(584|0),(49|0));
       $75 = __THREW__; __THREW__ = 0;
       $76 = ___cxa_find_matching_catch()|0;
       $77 = tempRet0;
       $78 = HEAP32[$46>>2]|0;
       $79 = ($78|0)==(0);
       if ($79) {
        $$0 = $76;$$01 = $77;$$pre$phiZ2D = $47;
       } else {
        $84 = HEAP32[$45>>2]|0;
        $85 = HEAP32[$0>>2]|0;
        $86 = ((($85)) + 4|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = HEAP32[$84>>2]|0;
        $89 = ((($88)) + 4|0);
        HEAP32[$89>>2] = $87;
        $90 = HEAP32[$86>>2]|0;
        HEAP32[$90>>2] = $88;
        HEAP32[$46>>2] = 0;
        $91 = ($84|0)==($0|0);
        if ($91) {
         $$0 = $76;$$01 = $77;$$pre$phiZ2D = $47;
        } else {
         $__f$01$i$i = $84;
         while(1) {
          $92 = ((($__f$01$i$i)) + 4|0);
          $93 = HEAP32[$92>>2]|0;
          $94 = ((($__f$01$i$i)) + 8|0);
          HEAP32[$94>>2] = (2352);
          $95 = ((($__f$01$i$i)) + 16|0);
          $96 = HEAP32[$95>>2]|0;
          $97 = ($96|0)==(0|0);
          if (!($97)) {
           __ZNSt3__119__shared_weak_count16__release_sharedEv($96);
          }
          __ZdlPv($__f$01$i$i);
          $98 = ($93|0)==($0|0);
          if ($98) {
           $$0 = $76;$$01 = $77;$$pre$phiZ2D = $47;
           break;
          } else {
           $__f$01$i$i = $93;
          }
         }
        }
       }
      }
      $119 = ((($result)) + 4|0);
      $120 = HEAP32[$$pre$phiZ2D>>2]|0;
      $121 = ($120|0)==(0);
      if ($121) {
       $$1 = $$0;$$12 = $$01;
       break L8;
      }
      $122 = ((($result)) + 8|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = HEAP32[$119>>2]|0;
      $125 = ((($124)) + 4|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = HEAP32[$123>>2]|0;
      $128 = ((($127)) + 4|0);
      HEAP32[$128>>2] = $126;
      $129 = HEAP32[$125>>2]|0;
      HEAP32[$129>>2] = $127;
      HEAP32[$$pre$phiZ2D>>2] = 0;
      $130 = ($123|0)==($119|0);
      if ($130) {
       $$1 = $$0;$$12 = $$01;
       break L8;
      } else {
       $__f$01$i$i$i3 = $123;
      }
      while(1) {
       $131 = ((($__f$01$i$i$i3)) + 4|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ((($__f$01$i$i$i3)) + 8|0);
       HEAP32[$133>>2] = (2352);
       $134 = ((($__f$01$i$i$i3)) + 16|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($135|0)==(0|0);
       if (!($136)) {
        __ZNSt3__119__shared_weak_count16__release_sharedEv($135);
       }
       __ZdlPv($__f$01$i$i$i3);
       $137 = ($132|0)==($119|0);
       if ($137) {
        $$1 = $$0;$$12 = $$01;
        break L8;
       } else {
        $__f$01$i$i$i3 = $132;
       }
      }
     }
    }
   } while(0);
   L44: do {
    if ((label|0) == 36) {
     $138 = ((($this)) + 265|0);
     HEAP8[$138>>0] = 1;
     $139 = HEAP32[$1>>2]|0;
     $140 = HEAP32[$139>>2]|0;
     $141 = ((($140)) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     __THREW__ = 0;
     $143 = (invoke_ii($142|0,($139|0))|0);
     $144 = __THREW__; __THREW__ = 0;
     $145 = $144&1;
     if (!($145)) {
      do {
       if ($143) {
        $146 = HEAP32[$1>>2]|0;
        $147 = (___dynamic_cast($146,504,512,0)|0);
        $148 = ($147|0)==(0|0);
        if ($148) {
         __THREW__ = 0;
         invoke_v(198);
         $149 = __THREW__; __THREW__ = 0;
         break L44;
        } else {
         $150 = ((($this)) + 252|0);
         $151 = ((($147)) + 48|0);
         $152 = ((($r)) + 32|0);
         $153 = ((($r)) + 24|0);
         $154 = ((($r)) + 40|0);
         __THREW__ = 0;
         invoke_viiiiii(199,($150|0),($151|0),($c|0),($152|0),($153|0),($154|0));
         $155 = __THREW__; __THREW__ = 0;
         $156 = $155&1;
         if ($156) {
          break L44;
         } else {
          break;
         }
        }
       }
      } while(0);
      $157 = ((($this)) + 4|0);
      $158 = HEAP8[$157>>0]|0;
      $159 = ($158<<24>>24)==(0);
      if (!($159)) {
       $160 = ((($this)) + 244|0);
       __THREW__ = 0;
       invoke_vii(200,($this|0),($160|0));
       $161 = __THREW__; __THREW__ = 0;
       $162 = $161&1;
       if ($162) {
        break;
       }
       __THREW__ = 0;
       invoke_vi(201,($this|0));
       $163 = __THREW__; __THREW__ = 0;
       $164 = $163&1;
       if ($164) {
        break;
       }
       HEAP8[$138>>0] = 0;
       $165 = ((($this)) + 128|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)==(0|0);
       if (!($167)) {
        $168 = HEAP32[$166>>2]|0;
        $169 = ((($168)) + 24|0);
        $170 = HEAP32[$169>>2]|0;
        __THREW__ = 0;
        invoke_vii($170|0,($166|0),($this|0));
        $171 = __THREW__; __THREW__ = 0;
        $172 = $171&1;
        if ($172) {
         break;
        }
       }
      }
      $173 = ((($r)) + 36|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = ($174|0)==(0|0);
      if (!($175)) {
       __ZNSt3__119__shared_weak_count16__release_sharedEv($174);
      }
      $176 = ((($r)) + 28|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = ($177|0)==(0|0);
      if (!($178)) {
       __ZNSt3__119__shared_weak_count16__release_sharedEv($177);
      }
      $179 = ((($r)) + 8|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ($180|0)==(0|0);
      if ($181) {
       STACKTOP = sp;return ($this|0);
      }
      $182 = ((($r)) + 12|0);
      $183 = HEAP32[$182>>2]|0;
      $184 = ($183|0)==($180|0);
      if ($184) {
       $192 = $180;
      } else {
       $186 = $183;
       while(1) {
        $185 = ((($186)) + -16|0);
        HEAP32[$182>>2] = $185;
        $187 = ((($186)) + -12|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = ($188|0)==(0|0);
        if ($189) {
         $191 = $185;
        } else {
         __ZNSt3__119__shared_weak_count16__release_sharedEv($188);
         $$pre$i$i$i$i$i15 = HEAP32[$182>>2]|0;
         $191 = $$pre$i$i$i$i$i15;
        }
        $190 = ($191|0)==($180|0);
        if ($190) {
         break;
        } else {
         $186 = $191;
        }
       }
       $$pre$i$i$i17 = HEAP32[$179>>2]|0;
       $192 = $$pre$i$i$i17;
      }
      __ZdlPv($192);
      STACKTOP = sp;return ($this|0);
     }
    }
   } while(0);
   $80 = ___cxa_find_matching_catch()|0;
   $81 = tempRet0;
   $$1 = $80;$$12 = $81;
  }
 } while(0);
 $193 = ((($r)) + 36|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = ($194|0)==(0|0);
 if (!($195)) {
  __ZNSt3__119__shared_weak_count16__release_sharedEv($194);
 }
 $196 = ((($r)) + 28|0);
 $197 = HEAP32[$196>>2]|0;
 $198 = ($197|0)==(0|0);
 if (!($198)) {
  __ZNSt3__119__shared_weak_count16__release_sharedEv($197);
 }
 $199 = ((($r)) + 8|0);
 $200 = HEAP32[$199>>2]|0;
 $201 = ($200|0)==(0|0);
 if ($201) {
  ___resumeException($$1|0);
  // unreachable;
 }
 $202 = ((($r)) + 12|0);
 $203 = HEAP32[$202>>2]|0;
 $204 = ($203|0)==($200|0);
 if ($204) {
  $212 = $200;
 } else {
  $206 = $203;
  while(1) {
   $205 = ((($206)) + -16|0);
   HEAP32[$202>>2] = $205;
   $207 = ((($206)) + -12|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = ($208|0)==(0|0);
   if ($209) {
    $211 = $205;
   } else {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($208);
    $$pre$i$i$i$i$i = HEAP32[$202>>2]|0;
    $211 = $$pre$i$i$i$i$i;
   }
   $210 = ($211|0)==($200|0);
   if ($210) {
    break;
   } else {
    $206 = $211;
   }
  }
  $$pre$i$i$i = HEAP32[$199>>2]|0;
  $212 = $$pre$i$i$i;
 }
 __ZdlPv($212);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZN4rhea14simplex_solver19try_adding_directlyERNS_17linear_expressionE($this,$expr) {
 $this = $this|0;
 $expr = $expr|0;
 var $$0 = 0, $$pn$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nd$0$i$i$i$i = 0, $subj = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $subj = sp;
 __ZN4rhea14simplex_solver14choose_subjectERNS_17linear_expressionE($subj,$this,$expr);
 $0 = HEAP32[$subj>>2]|0;
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   $$0 = 0;
  } else {
   __THREW__ = 0;
   (+invoke_dii(202,($expr|0),($subj|0)));
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   L3: do {
    if (!($8)) {
     $9 = ((($this)) + 8|0);
     $10 = HEAP32[$subj>>2]|0;
     $11 = ((($10)) + 4|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ((($this)) + 16|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==(0);
     L5: do {
      if (!($15)) {
       $16 = (($14) + -1)|0;
       $17 = $16 & $14;
       $18 = ($17|0)==(0);
       if ($18) {
        $19 = $16 & $12;
        $24 = $19;
       } else {
        $20 = (($12>>>0) % ($14>>>0))&-1;
        $24 = $20;
       }
       $21 = ((($this)) + 12|0);
       $22 = HEAP32[$21>>2]|0;
       $23 = (($22) + ($24<<2)|0);
       $25 = HEAP32[$23>>2]|0;
       $26 = ($25|0)==(0|0);
       if (!($26)) {
        $$pn$i$i$i$i = $25;
        while(1) {
         $__nd$0$i$i$i$i = HEAP32[$$pn$i$i$i$i>>2]|0;
         $27 = ($__nd$0$i$i$i$i|0)==(0|0);
         if ($27) {
          break L5;
         }
         $28 = ((($__nd$0$i$i$i$i)) + 4|0);
         $29 = HEAP32[$28>>2]|0;
         if ($18) {
          $30 = $29 & $16;
          $33 = $30;
         } else {
          $31 = (($29>>>0) % ($14>>>0))&-1;
          $33 = $31;
         }
         $32 = ($33|0)==($24|0);
         if (!($32)) {
          break L5;
         }
         $34 = ((($__nd$0$i$i$i$i)) + 8|0);
         $35 = HEAP32[$34>>2]|0;
         $36 = ($35|0)==($10|0);
         if ($36) {
          break;
         } else {
          $$pn$i$i$i$i = $__nd$0$i$i$i$i;
         }
        }
        __THREW__ = 0;
        invoke_viii(203,($9|0),($subj|0),($expr|0));
        $37 = __THREW__; __THREW__ = 0;
        $38 = $37&1;
        if ($38) {
         break L3;
        }
       }
      }
     } while(0);
     __THREW__ = 0;
     invoke_viii(204,($9|0),($subj|0),($expr|0));
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if (!($40)) {
      $$0 = 1;
      break L1;
     }
    }
   } while(0);
   $2 = ___cxa_find_matching_catch()|0;
   $3 = tempRet0;
   $4 = ((($subj)) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0|0);
   if ($6) {
    ___resumeException($2|0);
    // unreachable;
   }
   __ZNSt3__119__shared_weak_count16__release_sharedEv($5);
   ___resumeException($2|0);
   // unreachable;
  }
 } while(0);
 $41 = ((($subj)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0|0);
 if ($43) {
  STACKTOP = sp;return ($$0|0);
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv($42);
 STACKTOP = sp;return ($$0|0);
}
function __ZN4rhea14simplex_solver28add_with_artificial_variableERNS_17linear_expressionE($agg$result,$this,$expr) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $expr = $expr|0;
 var $$0 = 0, $$0$i$i = 0, $$0$in$i$i = 0.0, $$02 = 0, $$1 = 0, $$13 = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$ph$i = 0, $$ph$i30 = 0, $$pn$i$i$i = 0, $$pn$i$i$i$i = 0, $$pn$i$i$i24 = 0, $$pn$us$i$i$i = 0, $$pn$us$i$i$i$i = 0, $$pn$us$i$i$i19 = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0;
 var $$pre$i$i$i$i35 = 0, $$pre$i$i$i$i68 = 0, $$pre$i$i$i$i81 = 0, $$pre$i$i37 = 0, $$pre$i$i70 = 0, $$pre$i$i83 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
 var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
 var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__f$01$i$i$i$i = 0, $__f$01$i$i$i$i45 = 0, $__f$01$i$i13 = 0, $__f$01$i$i54 = 0, $__f$01$i$i59 = 0;
 var $__f$01$i$i8 = 0, $__nd$0$i$i$i = 0, $__nd$0$i$i$i$i = 0, $__nd$0$i$i$i26 = 0, $__nd$0$us$i$i$i = 0, $__nd$0$us$i$i$i$i = 0, $__nd$0$us$i$i$i21 = 0, $av = 0, $az = 0, $entry = 0, $result = 0, $result1 = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $av = sp + 128|0;
 $az = sp + 96|0;
 $row = sp + 24|0;
 $result = sp + 136|0;
 $0 = sp + 116|0;
 $1 = sp + 48|0;
 $2 = sp + 160|0;
 $entry = sp + 152|0;
 $result1 = sp + 72|0;
 $3 = sp + 104|0;
 $4 = sp;
 $5 = sp + 84|0;
 $6 = (__Znwj(20)|0);
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($6)) + 8|0);
 HEAP32[$8>>2] = 0;
 HEAP32[$6>>2] = (320);
 $9 = ((($6)) + 12|0);
 $10 = ((($6)) + 16|0);
 $11 = HEAP32[8>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[8>>2] = $12;
 HEAP32[$10>>2] = $12;
 HEAP32[$9>>2] = (352);
 HEAP32[$av>>2] = $9;
 $13 = ((($av)) + 4|0);
 HEAP32[$13>>2] = $6;
 __THREW__ = 0;
 $14 = (invoke_ii(179,20)|0);
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $114 = ___cxa_find_matching_catch()|0;
  $115 = tempRet0;
  $$3 = $114;$$35 = $115;
 } else {
  $17 = ((($14)) + 4|0);
  HEAP32[$17>>2] = 0;
  $18 = ((($14)) + 8|0);
  HEAP32[$18>>2] = 0;
  HEAP32[$14>>2] = (184);
  $19 = ((($14)) + 12|0);
  $20 = ((($14)) + 16|0);
  $21 = (($11) + 2)|0;
  HEAP32[8>>2] = $21;
  HEAP32[$20>>2] = $21;
  HEAP32[$19>>2] = (216);
  HEAP32[$az>>2] = $19;
  $22 = ((($az)) + 4|0);
  HEAP32[$22>>2] = $14;
  $23 = +HEAPF64[$expr>>3];
  HEAPF64[$row>>3] = $23;
  $24 = ((($row)) + 8|0);
  $25 = ((($expr)) + 8|0);
  __THREW__ = 0;
  invoke_vii(183,($24|0),($25|0));
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if ($27) {
   $116 = ___cxa_find_matching_catch()|0;
   $117 = tempRet0;
   $$2 = $116;$$24 = $117;
  } else {
   $28 = +HEAPF64[$expr>>3];
   HEAPF64[$row>>3] = $28;
   $29 = ((($this)) + 8|0);
   __THREW__ = 0;
   invoke_viii(204,($29|0),($az|0),($row|0));
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   L7: do {
    if ($31) {
     label = 31;
    } else {
     __THREW__ = 0;
     invoke_viii(204,($29|0),($av|0),($expr|0));
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if ($33) {
      label = 31;
     } else {
      __THREW__ = 0;
      invoke_vii(200,($this|0),($az|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       label = 31;
      } else {
       $36 = HEAP32[$az>>2]|0;
       $37 = ((($36)) + 4|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ((($this)) + 36|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = ($40|0)==(0);
       L11: do {
        if (!($41)) {
         $42 = (($40) + -1)|0;
         $43 = $42 & $40;
         $44 = ($43|0)==(0);
         if ($44) {
          $45 = $42 & $38;
          $50 = $45;
         } else {
          $46 = (($38>>>0) % ($40>>>0))&-1;
          $50 = $46;
         }
         $47 = ((($this)) + 32|0);
         $48 = HEAP32[$47>>2]|0;
         $49 = (($48) + ($50<<2)|0);
         $51 = HEAP32[$49>>2]|0;
         $52 = ($51|0)==(0|0);
         if (!($52)) {
          if ($44) {
           $$pn$us$i$i$i = $51;
           while(1) {
            $__nd$0$us$i$i$i = HEAP32[$$pn$us$i$i$i>>2]|0;
            $53 = ($__nd$0$us$i$i$i|0)==(0|0);
            if ($53) {
             break L11;
            }
            $54 = ((($__nd$0$us$i$i$i)) + 4|0);
            $55 = HEAP32[$54>>2]|0;
            $56 = $55 & $42;
            $57 = ($56|0)==($50|0);
            if (!($57)) {
             break L11;
            }
            $58 = ((($__nd$0$us$i$i$i)) + 8|0);
            $59 = HEAP32[$58>>2]|0;
            $60 = ($59|0)==($36|0);
            if ($60) {
             $$ph$i = $__nd$0$us$i$i$i;
             break;
            } else {
             $$pn$us$i$i$i = $__nd$0$us$i$i$i;
            }
           }
          } else {
           $$pn$i$i$i = $51;
           while(1) {
            $__nd$0$i$i$i = HEAP32[$$pn$i$i$i>>2]|0;
            $61 = ($__nd$0$i$i$i|0)==(0|0);
            if ($61) {
             break L11;
            }
            $62 = ((($__nd$0$i$i$i)) + 4|0);
            $63 = HEAP32[$62>>2]|0;
            $64 = (($63>>>0) % ($40>>>0))&-1;
            $65 = ($64|0)==($50|0);
            if (!($65)) {
             break L11;
            }
            $66 = ((($__nd$0$i$i$i)) + 8|0);
            $67 = HEAP32[$66>>2]|0;
            $68 = ($67|0)==($36|0);
            if ($68) {
             $$ph$i = $__nd$0$i$i$i;
             break;
            } else {
             $$pn$i$i$i = $__nd$0$i$i$i;
            }
           }
          }
          $71 = ((($$ph$i)) + 16|0);
          $72 = +HEAPF64[$71>>3];
          $73 = $72 > 0.0;
          $74 = 0.0 - $72;
          $$0$in$i$i = $73 ? $72 : $74;
          $$0$i$i = $$0$in$i$i < 1.0E-8;
          L28: do {
           if ($$0$i$i) {
            $159 = HEAP32[$av>>2]|0;
            $160 = ((($159)) + 4|0);
            $161 = HEAP32[$160>>2]|0;
            if ($44) {
             $162 = $42 & $161;
             $165 = $162;
            } else {
             $163 = (($161>>>0) % ($40>>>0))&-1;
             $165 = $163;
            }
            $164 = (($48) + ($165<<2)|0);
            $166 = HEAP32[$164>>2]|0;
            $167 = ($166|0)==(0|0);
            L63: do {
             if (!($167)) {
              if ($44) {
               $$pn$us$i$i$i$i = $166;
               while(1) {
                $__nd$0$us$i$i$i$i = HEAP32[$$pn$us$i$i$i$i>>2]|0;
                $168 = ($__nd$0$us$i$i$i$i|0)==(0|0);
                if ($168) {
                 break L63;
                }
                $169 = ((($__nd$0$us$i$i$i$i)) + 4|0);
                $170 = HEAP32[$169>>2]|0;
                $171 = $170 & $42;
                $172 = ($171|0)==($165|0);
                if (!($172)) {
                 break L63;
                }
                $173 = ((($__nd$0$us$i$i$i$i)) + 8|0);
                $174 = HEAP32[$173>>2]|0;
                $175 = ($174|0)==($159|0);
                if ($175) {
                 break;
                } else {
                 $$pn$us$i$i$i$i = $__nd$0$us$i$i$i$i;
                }
               }
              } else {
               $$pn$i$i$i$i = $166;
               while(1) {
                $__nd$0$i$i$i$i = HEAP32[$$pn$i$i$i$i>>2]|0;
                $176 = ($__nd$0$i$i$i$i|0)==(0|0);
                if ($176) {
                 break L63;
                }
                $177 = ((($__nd$0$i$i$i$i)) + 4|0);
                $178 = HEAP32[$177>>2]|0;
                $179 = (($178>>>0) % ($40>>>0))&-1;
                $180 = ($179|0)==($165|0);
                if (!($180)) {
                 break L63;
                }
                $181 = ((($__nd$0$i$i$i$i)) + 8|0);
                $182 = HEAP32[$181>>2]|0;
                $183 = ($182|0)==($159|0);
                if ($183) {
                 break;
                } else {
                 $$pn$i$i$i$i = $__nd$0$i$i$i$i;
                }
               }
              }
              if ($44) {
               $184 = $42 & $161;
               $187 = $184;
              } else {
               $185 = (($161>>>0) % ($40>>>0))&-1;
               $187 = $185;
              }
              $186 = (($48) + ($187<<2)|0);
              $188 = HEAP32[$186>>2]|0;
              $189 = ($188|0)==(0|0);
              L79: do {
               if (!($189)) {
                if ($44) {
                 $$pn$us$i$i$i19 = $188;
                 while(1) {
                  $__nd$0$us$i$i$i21 = HEAP32[$$pn$us$i$i$i19>>2]|0;
                  $190 = ($__nd$0$us$i$i$i21|0)==(0|0);
                  if ($190) {
                   break L79;
                  }
                  $191 = ((($__nd$0$us$i$i$i21)) + 4|0);
                  $192 = HEAP32[$191>>2]|0;
                  $193 = $192 & $42;
                  $194 = ($193|0)==($187|0);
                  if (!($194)) {
                   break L79;
                  }
                  $195 = ((($__nd$0$us$i$i$i21)) + 8|0);
                  $196 = HEAP32[$195>>2]|0;
                  $197 = ($196|0)==($159|0);
                  if ($197) {
                   $$ph$i30 = $__nd$0$us$i$i$i21;
                   break;
                  } else {
                   $$pn$us$i$i$i19 = $__nd$0$us$i$i$i21;
                  }
                 }
                } else {
                 $$pn$i$i$i24 = $188;
                 while(1) {
                  $__nd$0$i$i$i26 = HEAP32[$$pn$i$i$i24>>2]|0;
                  $198 = ($__nd$0$i$i$i26|0)==(0|0);
                  if ($198) {
                   break L79;
                  }
                  $199 = ((($__nd$0$i$i$i26)) + 4|0);
                  $200 = HEAP32[$199>>2]|0;
                  $201 = (($200>>>0) % ($40>>>0))&-1;
                  $202 = ($201|0)==($187|0);
                  if (!($202)) {
                   break L79;
                  }
                  $203 = ((($__nd$0$i$i$i26)) + 8|0);
                  $204 = HEAP32[$203>>2]|0;
                  $205 = ($204|0)==($159|0);
                  if ($205) {
                   $$ph$i30 = $__nd$0$i$i$i26;
                   break;
                  } else {
                   $$pn$i$i$i24 = $__nd$0$i$i$i26;
                  }
                 }
                }
                $208 = ((($$ph$i30)) + 16|0);
                $209 = ((($$ph$i30)) + 24|0);
                $210 = HEAP32[$209>>2]|0;
                $211 = ((($$ph$i30)) + 28|0);
                $212 = HEAP32[$211>>2]|0;
                $213 = ($210|0)==($212|0);
                __THREW__ = 0;
                if ($213) {
                 __ZN4rhea7tableau10remove_rowERKNS_8variableE($1,$29,$av);
                 $214 = __THREW__; __THREW__ = 0;
                 $215 = $214&1;
                 if ($215) {
                  label = 31;
                  break L7;
                 }
                 $216 = ((($1)) + 8|0);
                 $217 = HEAP32[$216>>2]|0;
                 $218 = ($217|0)==(0|0);
                 if (!($218)) {
                  $219 = ((($1)) + 12|0);
                  $220 = HEAP32[$219>>2]|0;
                  $221 = ($220|0)==($217|0);
                  if ($221) {
                   $229 = $217;
                  } else {
                   $223 = $220;
                   while(1) {
                    $222 = ((($223)) + -16|0);
                    HEAP32[$219>>2] = $222;
                    $224 = ((($223)) + -12|0);
                    $225 = HEAP32[$224>>2]|0;
                    $226 = ($225|0)==(0|0);
                    if ($226) {
                     $228 = $222;
                    } else {
                     __ZNSt3__119__shared_weak_count16__release_sharedEv($225);
                     $$pre$i$i$i$i35 = HEAP32[$219>>2]|0;
                     $228 = $$pre$i$i$i$i35;
                    }
                    $227 = ($228|0)==($217|0);
                    if ($227) {
                     break;
                    } else {
                     $223 = $228;
                    }
                   }
                   $$pre$i$i37 = HEAP32[$216>>2]|0;
                   $229 = $$pre$i$i37;
                  }
                  __ZdlPv($229);
                 }
                 HEAP32[$2>>2] = $2;
                 $230 = ((($2)) + 4|0);
                 HEAP32[$230>>2] = $2;
                 $231 = ((($2)) + 8|0);
                 HEAP32[$231>>2] = 0;
                 HEAP8[$agg$result>>0] = 1;
                 $232 = ((($agg$result)) + 4|0);
                 HEAP32[$232>>2] = $232;
                 $233 = ((($agg$result)) + 8|0);
                 HEAP32[$233>>2] = $232;
                 $234 = ((($agg$result)) + 12|0);
                 HEAP32[$234>>2] = 0;
                 break L28;
                }
                __ZNK4rhea17linear_expression23find_pivotable_variableEv($entry,$208);
                $235 = __THREW__; __THREW__ = 0;
                $236 = $235&1;
                if ($236) {
                 label = 31;
                 break L7;
                }
                $237 = HEAP32[$entry>>2]|0;
                $238 = ($237|0)==(0|0);
                do {
                 if ($238) {
                  HEAP32[$result1>>2] = $result1;
                  $239 = ((($result1)) + 4|0);
                  HEAP32[$239>>2] = $result1;
                  $240 = ((($result1)) + 8|0);
                  HEAP32[$240>>2] = 0;
                  $241 = ((($this)) + 266|0);
                  $242 = HEAP8[$241>>0]|0;
                  $243 = ($242<<24>>24)==(0);
                  do {
                   if ($243) {
                    label = 93;
                   } else {
                    __THREW__ = 0;
                    invoke_viiii(205,($3|0),($this|0),($av|0),($208|0));
                    $244 = __THREW__; __THREW__ = 0;
                    $245 = $244&1;
                    if ($245) {
                     break;
                    }
                    $246 = HEAP32[$240>>2]|0;
                    $247 = ($246|0)==(0);
                    do {
                     if (!($247)) {
                      $248 = HEAP32[$239>>2]|0;
                      $249 = HEAP32[$result1>>2]|0;
                      $250 = ((($249)) + 4|0);
                      $251 = HEAP32[$250>>2]|0;
                      $252 = HEAP32[$248>>2]|0;
                      $253 = ((($252)) + 4|0);
                      HEAP32[$253>>2] = $251;
                      $254 = HEAP32[$250>>2]|0;
                      HEAP32[$254>>2] = $252;
                      HEAP32[$240>>2] = 0;
                      $255 = ($248|0)==($result1|0);
                      if ($255) {
                       break;
                      } else {
                       $__f$01$i$i$i$i45 = $248;
                      }
                      while(1) {
                       $256 = ((($__f$01$i$i$i$i45)) + 4|0);
                       $257 = HEAP32[$256>>2]|0;
                       $258 = ((($__f$01$i$i$i$i45)) + 8|0);
                       HEAP32[$258>>2] = (2352);
                       $259 = ((($__f$01$i$i$i$i45)) + 16|0);
                       $260 = HEAP32[$259>>2]|0;
                       $261 = ($260|0)==(0|0);
                       if (!($261)) {
                        __ZNSt3__119__shared_weak_count16__release_sharedEv($260);
                       }
                       __ZdlPv($__f$01$i$i$i$i45);
                       $262 = ($257|0)==($result1|0);
                       if ($262) {
                        break;
                       } else {
                        $__f$01$i$i$i$i45 = $257;
                       }
                      }
                     }
                    } while(0);
                    $263 = ((($3)) + 8|0);
                    $264 = HEAP32[$263>>2]|0;
                    $265 = ($264|0)==(0);
                    if ($265) {
                     label = 93;
                     break;
                    }
                    $266 = ((($3)) + 4|0);
                    $267 = HEAP32[$266>>2]|0;
                    $268 = HEAP32[$3>>2]|0;
                    $269 = ((($268)) + 4|0);
                    $270 = HEAP32[$269>>2]|0;
                    $271 = HEAP32[$267>>2]|0;
                    $272 = ((($271)) + 4|0);
                    HEAP32[$272>>2] = $270;
                    $273 = HEAP32[$269>>2]|0;
                    HEAP32[$273>>2] = $271;
                    $274 = HEAP32[$result1>>2]|0;
                    $275 = ((($274)) + 4|0);
                    HEAP32[$275>>2] = $267;
                    HEAP32[$267>>2] = $274;
                    HEAP32[$result1>>2] = $268;
                    HEAP32[$269>>2] = $result1;
                    $276 = HEAP32[$240>>2]|0;
                    $277 = (($276) + ($264))|0;
                    HEAP32[$240>>2] = $277;
                    HEAP32[$263>>2] = 0;
                    label = 93;
                   }
                  } while(0);
                  do {
                   if ((label|0) == 93) {
                    HEAP8[$agg$result>>0] = 0;
                    $299 = ((($agg$result)) + 4|0);
                    __THREW__ = 0;
                    invoke_vii(206,($299|0),($result1|0));
                    $300 = __THREW__; __THREW__ = 0;
                    $301 = $300&1;
                    if ($301) {
                     break;
                    }
                    $302 = HEAP32[$240>>2]|0;
                    $303 = ($302|0)==(0);
                    do {
                     if (!($303)) {
                      $304 = HEAP32[$239>>2]|0;
                      $305 = HEAP32[$result1>>2]|0;
                      $306 = ((($305)) + 4|0);
                      $307 = HEAP32[$306>>2]|0;
                      $308 = HEAP32[$304>>2]|0;
                      $309 = ((($308)) + 4|0);
                      HEAP32[$309>>2] = $307;
                      $310 = HEAP32[$306>>2]|0;
                      HEAP32[$310>>2] = $308;
                      HEAP32[$240>>2] = 0;
                      $311 = ($304|0)==($result1|0);
                      if ($311) {
                       break;
                      } else {
                       $__f$01$i$i59 = $304;
                      }
                      while(1) {
                       $312 = ((($__f$01$i$i59)) + 4|0);
                       $313 = HEAP32[$312>>2]|0;
                       $314 = ((($__f$01$i$i59)) + 8|0);
                       HEAP32[$314>>2] = (2352);
                       $315 = ((($__f$01$i$i59)) + 16|0);
                       $316 = HEAP32[$315>>2]|0;
                       $317 = ($316|0)==(0|0);
                       if (!($317)) {
                        __ZNSt3__119__shared_weak_count16__release_sharedEv($316);
                       }
                       __ZdlPv($__f$01$i$i59);
                       $318 = ($313|0)==($result1|0);
                       if ($318) {
                        break;
                       } else {
                        $__f$01$i$i59 = $313;
                       }
                      }
                     }
                    } while(0);
                    $319 = ((($entry)) + 4|0);
                    $320 = HEAP32[$319>>2]|0;
                    $321 = ($320|0)==(0|0);
                    if ($321) {
                     break L28;
                    }
                    __ZNSt3__119__shared_weak_count16__release_sharedEv($320);
                    break L28;
                   }
                  } while(0);
                  $280 = ___cxa_find_matching_catch()|0;
                  $281 = tempRet0;
                  $282 = HEAP32[$240>>2]|0;
                  $283 = ($282|0)==(0);
                  if ($283) {
                   $$0 = $280;$$02 = $281;
                   break;
                  }
                  $284 = HEAP32[$239>>2]|0;
                  $285 = HEAP32[$result1>>2]|0;
                  $286 = ((($285)) + 4|0);
                  $287 = HEAP32[$286>>2]|0;
                  $288 = HEAP32[$284>>2]|0;
                  $289 = ((($288)) + 4|0);
                  HEAP32[$289>>2] = $287;
                  $290 = HEAP32[$286>>2]|0;
                  HEAP32[$290>>2] = $288;
                  HEAP32[$240>>2] = 0;
                  $291 = ($284|0)==($result1|0);
                  if ($291) {
                   $$0 = $280;$$02 = $281;
                   break;
                  } else {
                   $__f$01$i$i54 = $284;
                  }
                  while(1) {
                   $292 = ((($__f$01$i$i54)) + 4|0);
                   $293 = HEAP32[$292>>2]|0;
                   $294 = ((($__f$01$i$i54)) + 8|0);
                   HEAP32[$294>>2] = (2352);
                   $295 = ((($__f$01$i$i54)) + 16|0);
                   $296 = HEAP32[$295>>2]|0;
                   $297 = ($296|0)==(0|0);
                   if (!($297)) {
                    __ZNSt3__119__shared_weak_count16__release_sharedEv($296);
                   }
                   __ZdlPv($__f$01$i$i54);
                   $298 = ($293|0)==($result1|0);
                   if ($298) {
                    $$0 = $280;$$02 = $281;
                    break;
                   } else {
                    $__f$01$i$i54 = $293;
                   }
                  }
                 } else {
                  __THREW__ = 0;
                  invoke_viii(207,($this|0),($entry|0),($av|0));
                  $322 = __THREW__; __THREW__ = 0;
                  $323 = $322&1;
                  if ($323) {
                   $278 = ___cxa_find_matching_catch()|0;
                   $279 = tempRet0;
                   $$0 = $278;$$02 = $279;
                   break;
                  }
                  $324 = ((($entry)) + 4|0);
                  $325 = HEAP32[$324>>2]|0;
                  $326 = ($325|0)==(0|0);
                  if ($326) {
                   break L63;
                  }
                  __ZNSt3__119__shared_weak_count16__release_sharedEv($325);
                  break L63;
                 }
                } while(0);
                $327 = ((($entry)) + 4|0);
                $328 = HEAP32[$327>>2]|0;
                $329 = ($328|0)==(0|0);
                if ($329) {
                 $$1 = $$0;$$13 = $$02;
                 break L7;
                }
                __ZNSt3__119__shared_weak_count16__release_sharedEv($328);
                $$1 = $$0;$$13 = $$02;
                break L7;
               }
              } while(0);
              $206 = (___cxa_allocate_exception(4)|0);
              HEAP32[$206>>2] = (280);
              __THREW__ = 0;
              invoke_viii(182,($206|0),(296|0),(27|0));
              $207 = __THREW__; __THREW__ = 0;
              label = 31;
              break L7;
             }
            } while(0);
            __THREW__ = 0;
            (invoke_iii(208,($29|0),($av|0))|0);
            $330 = __THREW__; __THREW__ = 0;
            $331 = $330&1;
            if ($331) {
             label = 31;
             break L7;
            }
            __THREW__ = 0;
            invoke_viii(209,($4|0),($29|0),($az|0));
            $332 = __THREW__; __THREW__ = 0;
            $333 = $332&1;
            if ($333) {
             label = 31;
             break L7;
            }
            $334 = ((($4)) + 8|0);
            $335 = HEAP32[$334>>2]|0;
            $336 = ($335|0)==(0|0);
            if (!($336)) {
             $337 = ((($4)) + 12|0);
             $338 = HEAP32[$337>>2]|0;
             $339 = ($338|0)==($335|0);
             if ($339) {
              $347 = $335;
             } else {
              $341 = $338;
              while(1) {
               $340 = ((($341)) + -16|0);
               HEAP32[$337>>2] = $340;
               $342 = ((($341)) + -12|0);
               $343 = HEAP32[$342>>2]|0;
               $344 = ($343|0)==(0|0);
               if ($344) {
                $346 = $340;
               } else {
                __ZNSt3__119__shared_weak_count16__release_sharedEv($343);
                $$pre$i$i$i$i68 = HEAP32[$337>>2]|0;
                $346 = $$pre$i$i$i$i68;
               }
               $345 = ($346|0)==($335|0);
               if ($345) {
                break;
               } else {
                $341 = $346;
               }
              }
              $$pre$i$i70 = HEAP32[$334>>2]|0;
              $347 = $$pre$i$i70;
             }
             __ZdlPv($347);
            }
            HEAP32[$5>>2] = $5;
            $348 = ((($5)) + 4|0);
            HEAP32[$348>>2] = $5;
            $349 = ((($5)) + 8|0);
            HEAP32[$349>>2] = 0;
            HEAP8[$agg$result>>0] = 1;
            $350 = ((($agg$result)) + 4|0);
            HEAP32[$350>>2] = $350;
            $351 = ((($agg$result)) + 8|0);
            HEAP32[$351>>2] = $350;
            $352 = ((($agg$result)) + 12|0);
            HEAP32[$352>>2] = 0;
           } else {
            HEAP32[$result>>2] = $result;
            $75 = ((($result)) + 4|0);
            HEAP32[$75>>2] = $result;
            $76 = ((($result)) + 8|0);
            HEAP32[$76>>2] = 0;
            $77 = ((($this)) + 266|0);
            $78 = HEAP8[$77>>0]|0;
            $79 = ($78<<24>>24)==(0);
            if ($79) {
             label = 37;
            } else {
             __THREW__ = 0;
             invoke_viiii(205,($0|0),($this|0),($az|0),($71|0));
             $80 = __THREW__; __THREW__ = 0;
             $81 = $80&1;
             if (!($81)) {
              $82 = HEAP32[$76>>2]|0;
              $83 = ($82|0)==(0);
              do {
               if (!($83)) {
                $84 = HEAP32[$75>>2]|0;
                $85 = HEAP32[$result>>2]|0;
                $86 = ((($85)) + 4|0);
                $87 = HEAP32[$86>>2]|0;
                $88 = HEAP32[$84>>2]|0;
                $89 = ((($88)) + 4|0);
                HEAP32[$89>>2] = $87;
                $90 = HEAP32[$86>>2]|0;
                HEAP32[$90>>2] = $88;
                HEAP32[$76>>2] = 0;
                $91 = ($84|0)==($result|0);
                if ($91) {
                 break;
                } else {
                 $__f$01$i$i$i$i = $84;
                }
                while(1) {
                 $92 = ((($__f$01$i$i$i$i)) + 4|0);
                 $93 = HEAP32[$92>>2]|0;
                 $94 = ((($__f$01$i$i$i$i)) + 8|0);
                 HEAP32[$94>>2] = (2352);
                 $95 = ((($__f$01$i$i$i$i)) + 16|0);
                 $96 = HEAP32[$95>>2]|0;
                 $97 = ($96|0)==(0|0);
                 if (!($97)) {
                  __ZNSt3__119__shared_weak_count16__release_sharedEv($96);
                 }
                 __ZdlPv($__f$01$i$i$i$i);
                 $98 = ($93|0)==($result|0);
                 if ($98) {
                  break;
                 } else {
                  $__f$01$i$i$i$i = $93;
                 }
                }
               }
              } while(0);
              $99 = ((($0)) + 8|0);
              $100 = HEAP32[$99>>2]|0;
              $101 = ($100|0)==(0);
              if ($101) {
               label = 37;
              } else {
               $102 = ((($0)) + 4|0);
               $103 = HEAP32[$102>>2]|0;
               $104 = HEAP32[$0>>2]|0;
               $105 = ((($104)) + 4|0);
               $106 = HEAP32[$105>>2]|0;
               $107 = HEAP32[$103>>2]|0;
               $108 = ((($107)) + 4|0);
               HEAP32[$108>>2] = $106;
               $109 = HEAP32[$105>>2]|0;
               HEAP32[$109>>2] = $107;
               $110 = HEAP32[$result>>2]|0;
               $111 = ((($110)) + 4|0);
               HEAP32[$111>>2] = $103;
               HEAP32[$103>>2] = $110;
               HEAP32[$result>>2] = $104;
               HEAP32[$105>>2] = $result;
               $112 = HEAP32[$76>>2]|0;
               $113 = (($112) + ($100))|0;
               HEAP32[$76>>2] = $113;
               HEAP32[$99>>2] = 0;
               label = 37;
              }
             }
            }
            if ((label|0) == 37) {
             HEAP8[$agg$result>>0] = 0;
             $139 = ((($agg$result)) + 4|0);
             __THREW__ = 0;
             invoke_vii(206,($139|0),($result|0));
             $140 = __THREW__; __THREW__ = 0;
             $141 = $140&1;
             if (!($141)) {
              $142 = HEAP32[$76>>2]|0;
              $143 = ($142|0)==(0);
              if ($143) {
               break;
              }
              $144 = HEAP32[$75>>2]|0;
              $145 = HEAP32[$result>>2]|0;
              $146 = ((($145)) + 4|0);
              $147 = HEAP32[$146>>2]|0;
              $148 = HEAP32[$144>>2]|0;
              $149 = ((($148)) + 4|0);
              HEAP32[$149>>2] = $147;
              $150 = HEAP32[$146>>2]|0;
              HEAP32[$150>>2] = $148;
              HEAP32[$76>>2] = 0;
              $151 = ($144|0)==($result|0);
              if ($151) {
               break;
              } else {
               $__f$01$i$i13 = $144;
              }
              while(1) {
               $152 = ((($__f$01$i$i13)) + 4|0);
               $153 = HEAP32[$152>>2]|0;
               $154 = ((($__f$01$i$i13)) + 8|0);
               HEAP32[$154>>2] = (2352);
               $155 = ((($__f$01$i$i13)) + 16|0);
               $156 = HEAP32[$155>>2]|0;
               $157 = ($156|0)==(0|0);
               if (!($157)) {
                __ZNSt3__119__shared_weak_count16__release_sharedEv($156);
               }
               __ZdlPv($__f$01$i$i13);
               $158 = ($153|0)==($result|0);
               if ($158) {
                break L28;
               } else {
                $__f$01$i$i13 = $153;
               }
              }
             }
            }
            $120 = ___cxa_find_matching_catch()|0;
            $121 = tempRet0;
            $122 = HEAP32[$76>>2]|0;
            $123 = ($122|0)==(0);
            if ($123) {
             $$1 = $120;$$13 = $121;
             break L7;
            }
            $124 = HEAP32[$75>>2]|0;
            $125 = HEAP32[$result>>2]|0;
            $126 = ((($125)) + 4|0);
            $127 = HEAP32[$126>>2]|0;
            $128 = HEAP32[$124>>2]|0;
            $129 = ((($128)) + 4|0);
            HEAP32[$129>>2] = $127;
            $130 = HEAP32[$126>>2]|0;
            HEAP32[$130>>2] = $128;
            HEAP32[$76>>2] = 0;
            $131 = ($124|0)==($result|0);
            if ($131) {
             $$1 = $120;$$13 = $121;
             break L7;
            } else {
             $__f$01$i$i8 = $124;
            }
            while(1) {
             $132 = ((($__f$01$i$i8)) + 4|0);
             $133 = HEAP32[$132>>2]|0;
             $134 = ((($__f$01$i$i8)) + 8|0);
             HEAP32[$134>>2] = (2352);
             $135 = ((($__f$01$i$i8)) + 16|0);
             $136 = HEAP32[$135>>2]|0;
             $137 = ($136|0)==(0|0);
             if (!($137)) {
              __ZNSt3__119__shared_weak_count16__release_sharedEv($136);
             }
             __ZdlPv($__f$01$i$i8);
             $138 = ($133|0)==($result|0);
             if ($138) {
              $$1 = $120;$$13 = $121;
              break L7;
             } else {
              $__f$01$i$i8 = $133;
             }
            }
           }
          } while(0);
          $353 = ((($row)) + 8|0);
          $354 = HEAP32[$353>>2]|0;
          $355 = ($354|0)==(0|0);
          if (!($355)) {
           $356 = ((($row)) + 12|0);
           $357 = HEAP32[$356>>2]|0;
           $358 = ($357|0)==($354|0);
           if ($358) {
            $366 = $354;
           } else {
            $360 = $357;
            while(1) {
             $359 = ((($360)) + -16|0);
             HEAP32[$356>>2] = $359;
             $361 = ((($360)) + -12|0);
             $362 = HEAP32[$361>>2]|0;
             $363 = ($362|0)==(0|0);
             if ($363) {
              $365 = $359;
             } else {
              __ZNSt3__119__shared_weak_count16__release_sharedEv($362);
              $$pre$i$i$i$i81 = HEAP32[$356>>2]|0;
              $365 = $$pre$i$i$i$i81;
             }
             $364 = ($365|0)==($354|0);
             if ($364) {
              break;
             } else {
              $360 = $365;
             }
            }
            $$pre$i$i83 = HEAP32[$353>>2]|0;
            $366 = $$pre$i$i83;
           }
           __ZdlPv($366);
          }
          $367 = HEAP32[$22>>2]|0;
          $368 = ($367|0)==(0|0);
          if (!($368)) {
           __ZNSt3__119__shared_weak_count16__release_sharedEv($367);
          }
          $369 = HEAP32[$13>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           STACKTOP = sp;return;
          }
          __ZNSt3__119__shared_weak_count16__release_sharedEv($369);
          STACKTOP = sp;return;
         }
        }
       } while(0);
       $69 = (___cxa_allocate_exception(4)|0);
       HEAP32[$69>>2] = (280);
       __THREW__ = 0;
       invoke_viii(182,($69|0),(296|0),(27|0));
       $70 = __THREW__; __THREW__ = 0;
       label = 31;
      }
     }
    }
   } while(0);
   if ((label|0) == 31) {
    $118 = ___cxa_find_matching_catch()|0;
    $119 = tempRet0;
    $$1 = $118;$$13 = $119;
   }
   $371 = ((($row)) + 8|0);
   $372 = HEAP32[$371>>2]|0;
   $373 = ($372|0)==(0|0);
   if ($373) {
    $$2 = $$1;$$24 = $$13;
   } else {
    $374 = ((($row)) + 12|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = ($375|0)==($372|0);
    if ($376) {
     $384 = $372;
    } else {
     $378 = $375;
     while(1) {
      $377 = ((($378)) + -16|0);
      HEAP32[$374>>2] = $377;
      $379 = ((($378)) + -12|0);
      $380 = HEAP32[$379>>2]|0;
      $381 = ($380|0)==(0|0);
      if ($381) {
       $383 = $377;
      } else {
       __ZNSt3__119__shared_weak_count16__release_sharedEv($380);
       $$pre$i$i$i$i = HEAP32[$374>>2]|0;
       $383 = $$pre$i$i$i$i;
      }
      $382 = ($383|0)==($372|0);
      if ($382) {
       break;
      } else {
       $378 = $383;
      }
     }
     $$pre$i$i = HEAP32[$371>>2]|0;
     $384 = $$pre$i$i;
    }
    __ZdlPv($384);
    $$2 = $$1;$$24 = $$13;
   }
  }
  $385 = HEAP32[$22>>2]|0;
  $386 = ($385|0)==(0|0);
  if ($386) {
   $$3 = $$2;$$35 = $$24;
  } else {
   __ZNSt3__119__shared_weak_count16__release_sharedEv($385);
   $$3 = $$2;$$35 = $$24;
  }
 }
 $387 = HEAP32[$13>>2]|0;
 $388 = ($387|0)==(0|0);
 if ($388) {
  ___resumeException($$3|0);
  // unreachable;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv($387);
 ___resumeException($$3|0);
 // unreachable;
}
function __ZN4rhea14simplex_solver18remove_constraint_ERKNS_10constraintE($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $$$i = 0, $$$i132 = 0, $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$lcssa = 0, $$lcssa359 = 0, $$lcssa367 = 0, $$neg2$i$i$i$i$i = 0, $$neg2$i$i$i$i$i128 = 0, $$ph = 0, $$ph$i = 0, $$ph$i101 = 0, $$ph$i122 = 0, $$ph$i36 = 0, $$phi$trans$insert = 0;
 var $$pn$i = 0, $$pn$i$i = 0, $$pn$i$i$i = 0, $$pn$i$i$i$i = 0, $$pn$i$i$i$i152 = 0, $$pn$i$i$i$i81 = 0, $$pn$i$i$i116 = 0, $$pn$i$i$i30 = 0, $$pn$i$i$i95 = 0, $$pn$i$i67 = 0, $$pn$us$i$i = 0, $$pn$us$i$i$i = 0, $$pn$us$i$i$i$i = 0, $$pn$us$i$i$i$i147 = 0, $$pn$us$i$i$i$i76 = 0, $$pn$us$i$i$i111 = 0, $$pn$us$i$i$i25 = 0, $$pn$us$i$i$i90 = 0, $$pr = 0, $$pr300 = 0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i137 = 0, $$pre$i$i$i$i43 = 0, $$pre$i$i$i$i51 = 0, $$pre$i$i$i$i59 = 0, $$pre$i$i139 = 0, $$pre$i$i45 = 0, $$pre$i$i53 = 0, $$pre$i$i61 = 0, $$pre$i$i73 = 0, $$sum$i$i$i$i$i = 0, $$sum$i$i$i$i$i127 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0.0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0.0;
 var $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0.0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0.0;
 var $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0.0, $568 = 0, $569 = 0.0, $57 = 0, $570 = 0.0;
 var $571 = 0.0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__len$0$be$i$i$i$i$i = 0, $__len$0$be$i$i$i$i$i129 = 0, $__len$03$i$i$i$i$i = 0;
 var $__len$03$i$i$i$i$i126 = 0, $__nd$0$i$i = 0, $__nd$0$i$i$i = 0, $__nd$0$i$i$i$i = 0, $__nd$0$i$i$i$i154 = 0, $__nd$0$i$i$i$i83 = 0, $__nd$0$i$i$i118 = 0, $__nd$0$i$i$i32 = 0, $__nd$0$i$i$i97 = 0, $__nd$0$i$i$lcssa372 = 0, $__nd$0$i$i69 = 0, $__nd$0$us$i$i = 0, $__nd$0$us$i$i$i = 0, $__nd$0$us$i$i$i$i = 0, $__nd$0$us$i$i$i$i149 = 0, $__nd$0$us$i$i$i$i78 = 0, $__nd$0$us$i$i$i113 = 0, $__nd$0$us$i$i$i27 = 0, $__nd$0$us$i$i$i92 = 0, $__pn$0$i$i = 0;
 var $__pn$0$i$i$lcssa = 0, $exit_var = 0, $exit_var_set$0$off0$not = 0, $exit_var_set$0$off0274 = 0, $exit_var_set$1$off0 = 0, $exit_var_set$2$off0$not = 0, $exit_var_set$2$off0270 = 0, $exit_var_set$3$off0 = 0, $i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $lpad$phi215$index = 0, $lpad$phi215$index8 = 0, $marker = 0, $min_ratio$0273 = 0.0, $min_ratio$1 = 0.0, $min_ratio$2269 = 0.0, $min_ratio$3 = 0.0, $or$cond = 0, $or$cond16 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 100|0;
 $0 = sp + 72|0;
 $i = sp + 96|0;
 $1 = sp + 24|0;
 $2 = sp + 48|0;
 $marker = sp + 88|0;
 $exit_var = sp + 80|0;
 $3 = sp;
 $4 = sp + 104|0;
 $5 = ((($this)) + 265|0);
 HEAP8[$5>>0] = 1;
 __ZN4rhea14simplex_solver20reset_stay_constantsEv($this);
 $6 = ((($this)) + 8|0);
 $7 = ((($this)) + 244|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($this)) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  $41 = (___cxa_allocate_exception(4)|0);
  HEAP32[$41>>2] = (280);
  ___cxa_throw(($41|0),(296|0),(27|0));
  // unreachable;
 }
 $14 = (($12) + -1)|0;
 $15 = $14 & $12;
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = $14 & $10;
  $22 = $17;
 } else {
  $18 = (($10>>>0) % ($12>>>0))&-1;
  $22 = $18;
 }
 $19 = ((($this)) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($22<<2)|0);
 $23 = HEAP32[$21>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $41 = (___cxa_allocate_exception(4)|0);
  HEAP32[$41>>2] = (280);
  ___cxa_throw(($41|0),(296|0),(27|0));
  // unreachable;
 }
 L11: do {
  if ($16) {
   $$pn$us$i$i$i = $23;
   while(1) {
    $__nd$0$us$i$i$i = HEAP32[$$pn$us$i$i$i>>2]|0;
    $25 = ($__nd$0$us$i$i$i|0)==(0|0);
    if ($25) {
     label = 13;
     break;
    }
    $26 = ((($__nd$0$us$i$i$i)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $27 & $14;
    $29 = ($28|0)==($22|0);
    if (!($29)) {
     label = 13;
     break;
    }
    $30 = ((($__nd$0$us$i$i$i)) + 8|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)==($8|0);
    if ($32) {
     $$ph$i = $__nd$0$us$i$i$i;
     break L11;
    } else {
     $$pn$us$i$i$i = $__nd$0$us$i$i$i;
    }
   }
   if ((label|0) == 13) {
    $41 = (___cxa_allocate_exception(4)|0);
    HEAP32[$41>>2] = (280);
    ___cxa_throw(($41|0),(296|0),(27|0));
    // unreachable;
   }
  } else {
   $$pn$i$i$i = $23;
   while(1) {
    $__nd$0$i$i$i = HEAP32[$$pn$i$i$i>>2]|0;
    $33 = ($__nd$0$i$i$i|0)==(0|0);
    if ($33) {
     label = 13;
     break;
    }
    $34 = ((($__nd$0$i$i$i)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (($35>>>0) % ($12>>>0))&-1;
    $37 = ($36|0)==($22|0);
    if (!($37)) {
     label = 13;
     break;
    }
    $38 = ((($__nd$0$i$i$i)) + 8|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)==($8|0);
    if ($40) {
     $$ph$i = $__nd$0$i$i$i;
     break L11;
    } else {
     $$pn$i$i$i = $__nd$0$i$i$i;
    }
   }
   if ((label|0) == 13) {
    $41 = (___cxa_allocate_exception(4)|0);
    HEAP32[$41>>2] = (280);
    ___cxa_throw(($41|0),(296|0),(27|0));
    // unreachable;
   }
  }
 } while(0);
 $42 = ((($$ph$i)) + 16|0);
 $43 = ((($this)) + 184|0);
 $44 = ((($c)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45;
 $47 = Math_imul($46, 1540483477)|0;
 $48 = $47 >>> 24;
 $49 = $48 ^ $47;
 $50 = Math_imul($49, 1540483477)|0;
 $51 = $50 ^ 1866966612;
 $52 = $51 >>> 13;
 $53 = $52 ^ $51;
 $54 = Math_imul($53, 1540483477)|0;
 $55 = $54 >>> 15;
 $56 = $55 ^ $54;
 $57 = ((($this)) + 188|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)==(0);
 L27: do {
  if ($59) {
   label = 25;
  } else {
   $60 = (($58) + -1)|0;
   $61 = $60 & $58;
   $62 = ($61|0)==(0);
   if ($62) {
    $63 = $56 & $60;
    $67 = $63;
   } else {
    $64 = (($56>>>0) % ($58>>>0))&-1;
    $67 = $64;
   }
   $65 = HEAP32[$43>>2]|0;
   $66 = (($65) + ($67<<2)|0);
   $68 = HEAP32[$66>>2]|0;
   $69 = ($68|0)==(0|0);
   if ($69) {
    label = 25;
   } else {
    $$pn$i$i = $68;
    while(1) {
     $__nd$0$i$i = HEAP32[$$pn$i$i>>2]|0;
     $70 = ($__nd$0$i$i|0)==(0|0);
     if ($70) {
      label = 25;
      break L27;
     }
     $71 = ((($__nd$0$i$i)) + 4|0);
     $72 = HEAP32[$71>>2]|0;
     if ($62) {
      $73 = $72 & $60;
      $76 = $73;
     } else {
      $74 = (($72>>>0) % ($58>>>0))&-1;
      $76 = $74;
     }
     $75 = ($76|0)==($67|0);
     if (!($75)) {
      label = 25;
      break L27;
     }
     $77 = ((($__nd$0$i$i)) + 8|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = HEAP32[$78>>2]|0;
     $80 = (FUNCTION_TABLE_iii[$79 & 511]($77,$c)|0);
     if ($80) {
      $__nd$0$i$i$lcssa372 = $__nd$0$i$i;
      break;
     } else {
      $$pn$i$i = $__nd$0$i$i;
     }
    }
    HEAP32[$i>>2] = $__nd$0$i$i$lcssa372;
    $81 = ((($__nd$0$i$i$lcssa372)) + 28|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==(0|0);
    if ($83) {
     $651 = $i;
    } else {
     $84 = ((($2)) + 8|0);
     $85 = ((($1)) + 8|0);
     $86 = ((($1)) + 8|0);
     $87 = ((($2)) + 8|0);
     $88 = ((($2)) + 12|0);
     $89 = ((($1)) + 12|0);
     $91 = $82;
     L43: while(1) {
      $90 = ((($91)) + 8|0);
      $92 = HEAP32[$90>>2]|0;
      $93 = ((($92)) + 4|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = HEAP32[$11>>2]|0;
      $96 = ($95|0)==(0);
      L45: do {
       if ($96) {
        label = 85;
       } else {
        $97 = (($95) + -1)|0;
        $98 = $97 & $95;
        $99 = ($98|0)==(0);
        if ($99) {
         $100 = $97 & $94;
         $104 = $100;
        } else {
         $101 = (($94>>>0) % ($95>>>0))&-1;
         $104 = $101;
        }
        $102 = HEAP32[$19>>2]|0;
        $103 = (($102) + ($104<<2)|0);
        $105 = HEAP32[$103>>2]|0;
        $106 = ($105|0)==(0|0);
        if ($106) {
         label = 85;
        } else {
         if ($99) {
          $$pn$us$i$i$i$i = $105;
          while(1) {
           $__nd$0$us$i$i$i$i = HEAP32[$$pn$us$i$i$i$i>>2]|0;
           $107 = ($__nd$0$us$i$i$i$i|0)==(0|0);
           if ($107) {
            label = 85;
            break L45;
           }
           $108 = ((($__nd$0$us$i$i$i$i)) + 4|0);
           $109 = HEAP32[$108>>2]|0;
           $110 = $109 & $97;
           $111 = ($110|0)==($104|0);
           if (!($111)) {
            label = 85;
            break L45;
           }
           $112 = ((($__nd$0$us$i$i$i$i)) + 8|0);
           $113 = HEAP32[$112>>2]|0;
           $114 = ($113|0)==($92|0);
           if ($114) {
            break;
           } else {
            $$pn$us$i$i$i$i = $__nd$0$us$i$i$i$i;
           }
          }
         } else {
          $$pn$i$i$i$i = $105;
          while(1) {
           $__nd$0$i$i$i$i = HEAP32[$$pn$i$i$i$i>>2]|0;
           $115 = ($__nd$0$i$i$i$i|0)==(0|0);
           if ($115) {
            label = 85;
            break L45;
           }
           $116 = ((($__nd$0$i$i$i$i)) + 4|0);
           $117 = HEAP32[$116>>2]|0;
           $118 = (($117>>>0) % ($95>>>0))&-1;
           $119 = ($118|0)==($104|0);
           if (!($119)) {
            label = 85;
            break L45;
           }
           $120 = ((($__nd$0$i$i$i$i)) + 8|0);
           $121 = HEAP32[$120>>2]|0;
           $122 = ($121|0)==($92|0);
           if ($122) {
            break;
           } else {
            $$pn$i$i$i$i = $__nd$0$i$i$i$i;
           }
          }
         }
         if ($99) {
          $123 = $97 & $94;
          $126 = $123;
         } else {
          $124 = (($94>>>0) % ($95>>>0))&-1;
          $126 = $124;
         }
         $125 = (($102) + ($126<<2)|0);
         $127 = HEAP32[$125>>2]|0;
         $128 = ($127|0)==(0|0);
         if ($128) {
          label = 51;
          break L43;
         }
         if ($99) {
          $$pn$us$i$i$i25 = $127;
          while(1) {
           $__nd$0$us$i$i$i27 = HEAP32[$$pn$us$i$i$i25>>2]|0;
           $129 = ($__nd$0$us$i$i$i27|0)==(0|0);
           if ($129) {
            label = 51;
            break L43;
           }
           $130 = ((($__nd$0$us$i$i$i27)) + 4|0);
           $131 = HEAP32[$130>>2]|0;
           $132 = $131 & $97;
           $133 = ($132|0)==($126|0);
           if (!($133)) {
            label = 51;
            break L43;
           }
           $134 = ((($__nd$0$us$i$i$i27)) + 8|0);
           $135 = HEAP32[$134>>2]|0;
           $136 = ($135|0)==($92|0);
           if ($136) {
            $$ph$i36 = $__nd$0$us$i$i$i27;
            break;
           } else {
            $$pn$us$i$i$i25 = $__nd$0$us$i$i$i27;
           }
          }
         } else {
          $$pn$i$i$i30 = $127;
          while(1) {
           $__nd$0$i$i$i32 = HEAP32[$$pn$i$i$i30>>2]|0;
           $137 = ($__nd$0$i$i$i32|0)==(0|0);
           if ($137) {
            label = 51;
            break L43;
           }
           $138 = ((($__nd$0$i$i$i32)) + 4|0);
           $139 = HEAP32[$138>>2]|0;
           $140 = (($139>>>0) % ($95>>>0))&-1;
           $141 = ($140|0)==($126|0);
           if (!($141)) {
            label = 51;
            break L43;
           }
           $142 = ((($__nd$0$i$i$i32)) + 8|0);
           $143 = HEAP32[$142>>2]|0;
           $144 = ($143|0)==($92|0);
           if ($144) {
            $$ph$i36 = $__nd$0$i$i$i32;
            break;
           } else {
            $$pn$i$i$i30 = $__nd$0$i$i$i32;
           }
          }
         }
         $146 = ((($$ph$i36)) + 16|0);
         $147 = +HEAPF64[$146>>3];
         HEAPF64[$2>>3] = $147;
         $148 = ((($$ph$i36)) + 24|0);
         __ZNSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEEC2ERKS7_($84,$148);
         $149 = +HEAPF64[$146>>3];
         HEAPF64[$2>>3] = $149;
         $150 = HEAP32[$44>>2]|0;
         $151 = ((($150)) + 16|0);
         $152 = +HEAPF64[$151>>3];
         $153 = ((($150)) + 24|0);
         $154 = +HEAPF64[$153>>3];
         $155 = ((($150)) + 32|0);
         $156 = +HEAPF64[$155>>3];
         $157 = HEAP32[$150>>2]|0;
         $158 = ((($157)) + 28|0);
         $159 = HEAP32[$158>>2]|0;
         __THREW__ = 0;
         $160 = (+invoke_di($159|0,($150|0)));
         $161 = __THREW__; __THREW__ = 0;
         $162 = $161&1;
         if ($162) {
          label = 70;
          break L43;
         }
         $163 = $152 * 1.0E+7;
         $164 = $154 * 1.0E+4;
         $165 = $156 + $164;
         $166 = $163 + $165;
         $167 = $166 * $160;
         $168 = -$167;
         __THREW__ = 0;
         $169 = (invoke_iid(184,($2|0),(+$168))|0);
         $170 = __THREW__; __THREW__ = 0;
         $171 = $170&1;
         if ($171) {
          label = 70;
          break L43;
         }
         $172 = +HEAPF64[$169>>3];
         HEAPF64[$1>>3] = $172;
         $173 = ((($169)) + 8|0);
         __THREW__ = 0;
         invoke_vii(183,($85|0),($173|0));
         $174 = __THREW__; __THREW__ = 0;
         $175 = $174&1;
         if ($175) {
          label = 70;
          break L43;
         }
         $176 = +HEAPF64[$169>>3];
         HEAPF64[$1>>3] = $176;
         __THREW__ = 0;
         (invoke_iiiii(210,($42|0),($1|0),($7|0),($6|0))|0);
         $177 = __THREW__; __THREW__ = 0;
         $178 = $177&1;
         if ($178) {
          label = 71;
          break L43;
         }
         $179 = HEAP32[$86>>2]|0;
         $180 = ($179|0)==(0|0);
         if (!($180)) {
          $181 = HEAP32[$89>>2]|0;
          $182 = ($181|0)==($179|0);
          if ($182) {
           $190 = $179;
          } else {
           $184 = $181;
           while(1) {
            $183 = ((($184)) + -16|0);
            HEAP32[$89>>2] = $183;
            $185 = ((($184)) + -12|0);
            $186 = HEAP32[$185>>2]|0;
            $187 = ($186|0)==(0|0);
            if ($187) {
             $189 = $183;
            } else {
             __ZNSt3__119__shared_weak_count16__release_sharedEv($186);
             $$pre$i$i$i$i = HEAP32[$89>>2]|0;
             $189 = $$pre$i$i$i$i;
            }
            $188 = ($189|0)==($179|0);
            if ($188) {
             break;
            } else {
             $184 = $189;
            }
           }
           $$pre$i$i = HEAP32[$86>>2]|0;
           $190 = $$pre$i$i;
          }
          __ZdlPv($190);
         }
         $191 = HEAP32[$87>>2]|0;
         $192 = ($191|0)==(0|0);
         if ($192) {
          break;
         }
         $193 = HEAP32[$88>>2]|0;
         $194 = ($193|0)==($191|0);
         if ($194) {
          $202 = $191;
         } else {
          $196 = $193;
          while(1) {
           $195 = ((($196)) + -16|0);
           HEAP32[$88>>2] = $195;
           $197 = ((($196)) + -12|0);
           $198 = HEAP32[$197>>2]|0;
           $199 = ($198|0)==(0|0);
           if ($199) {
            $201 = $195;
           } else {
            __ZNSt3__119__shared_weak_count16__release_sharedEv($198);
            $$pre$i$i$i$i43 = HEAP32[$88>>2]|0;
            $201 = $$pre$i$i$i$i43;
           }
           $200 = ($201|0)==($191|0);
           if ($200) {
            break;
           } else {
            $196 = $201;
           }
          }
          $$pre$i$i45 = HEAP32[$87>>2]|0;
          $202 = $$pre$i$i45;
         }
         __ZdlPv($202);
        }
       }
      } while(0);
      if ((label|0) == 85) {
       label = 0;
       $231 = HEAP32[$44>>2]|0;
       $232 = ((($231)) + 16|0);
       $233 = +HEAPF64[$232>>3];
       $234 = ((($231)) + 24|0);
       $235 = +HEAPF64[$234>>3];
       $236 = ((($231)) + 32|0);
       $237 = +HEAPF64[$236>>3];
       $238 = $235 * 1.0E+4;
       $239 = $237 + $238;
       $240 = $233 * 1.0E+7;
       $241 = $240 + $239;
       $242 = HEAP32[$231>>2]|0;
       $243 = ((($242)) + 28|0);
       $244 = HEAP32[$243>>2]|0;
       $245 = (+FUNCTION_TABLE_di[$244 & 511]($231));
       $246 = $241 * $245;
       $247 = -$246;
       (__ZN4rhea17linear_expression3addERKNS_8variableEdS3_RNS_7tableauE($42,$90,$247,$7,$6)|0);
      }
      $248 = HEAP32[$91>>2]|0;
      $249 = ($248|0)==(0|0);
      if ($249) {
       $651 = $i;
       break L27;
      } else {
       $91 = $248;
      }
     }
     if ((label|0) == 51) {
      $145 = (___cxa_allocate_exception(4)|0);
      HEAP32[$145>>2] = (280);
      ___cxa_throw(($145|0),(296|0),(27|0));
      // unreachable;
     }
     else if ((label|0) == 70) {
      $203 = ___cxa_find_matching_catch()|0;
      $204 = tempRet0;
      $$0 = $203;$$01 = $204;
     }
     else if ((label|0) == 71) {
      $205 = ___cxa_find_matching_catch()|0;
      $206 = tempRet0;
      $207 = HEAP32[$86>>2]|0;
      $208 = ($207|0)==(0|0);
      if ($208) {
       $$0 = $205;$$01 = $206;
      } else {
       $209 = HEAP32[$89>>2]|0;
       $210 = ($209|0)==($207|0);
       if ($210) {
        $218 = $207;
       } else {
        $212 = $209;
        while(1) {
         $211 = ((($212)) + -16|0);
         HEAP32[$89>>2] = $211;
         $213 = ((($212)) + -12|0);
         $214 = HEAP32[$213>>2]|0;
         $215 = ($214|0)==(0|0);
         if ($215) {
          $217 = $211;
         } else {
          __ZNSt3__119__shared_weak_count16__release_sharedEv($214);
          $$pre$i$i$i$i51 = HEAP32[$89>>2]|0;
          $217 = $$pre$i$i$i$i51;
         }
         $216 = ($217|0)==($207|0);
         if ($216) {
          break;
         } else {
          $212 = $217;
         }
        }
        $$pre$i$i53 = HEAP32[$86>>2]|0;
        $218 = $$pre$i$i53;
       }
       __ZdlPv($218);
       $$0 = $205;$$01 = $206;
      }
     }
     $219 = HEAP32[$87>>2]|0;
     $220 = ($219|0)==(0|0);
     if ($220) {
      $$2 = $$0;$$23 = $$01;
      ___resumeException($$2|0);
      // unreachable;
     }
     $221 = HEAP32[$88>>2]|0;
     $222 = ($221|0)==($219|0);
     if ($222) {
      $230 = $219;
     } else {
      $224 = $221;
      while(1) {
       $223 = ((($224)) + -16|0);
       HEAP32[$88>>2] = $223;
       $225 = ((($224)) + -12|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = ($226|0)==(0|0);
       if ($227) {
        $229 = $223;
       } else {
        __ZNSt3__119__shared_weak_count16__release_sharedEv($226);
        $$pre$i$i$i$i59 = HEAP32[$88>>2]|0;
        $229 = $$pre$i$i$i$i59;
       }
       $228 = ($229|0)==($219|0);
       if ($228) {
        break;
       } else {
        $224 = $229;
       }
      }
      $$pre$i$i61 = HEAP32[$87>>2]|0;
      $230 = $$pre$i$i61;
     }
     __ZdlPv($230);
     $$2 = $$0;$$23 = $$01;
     ___resumeException($$2|0);
     // unreachable;
    }
   }
  }
 } while(0);
 if ((label|0) == 25) {
  HEAP32[$i>>2] = 0;
  $651 = $i;
 }
 $250 = HEAP32[$44>>2]|0;
 $251 = $250;
 $252 = Math_imul($251, 1540483477)|0;
 $253 = $252 >>> 24;
 $254 = $253 ^ $252;
 $255 = Math_imul($254, 1540483477)|0;
 $256 = $255 ^ 1866966612;
 $257 = $256 >>> 13;
 $258 = $257 ^ $256;
 $259 = Math_imul($258, 1540483477)|0;
 $260 = $259 >>> 15;
 $261 = $260 ^ $259;
 $262 = ((($this)) + 208|0);
 $263 = HEAP32[$262>>2]|0;
 $264 = ($263|0)==(0);
 if ($264) {
  $294 = (___cxa_allocate_exception(4)|0);
  HEAP32[$294>>2] = (608);
  ___cxa_throw(($294|0),(624|0),(27|0));
  // unreachable;
 }
 $265 = (($263) + -1)|0;
 $266 = $265 & $263;
 $267 = ($266|0)==(0);
 if ($267) {
  $268 = $261 & $265;
  $273 = $268;
 } else {
  $269 = (($261>>>0) % ($263>>>0))&-1;
  $273 = $269;
 }
 $270 = ((($this)) + 204|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = (($271) + ($273<<2)|0);
 $274 = HEAP32[$272>>2]|0;
 $275 = ($274|0)==(0|0);
 if ($275) {
  $294 = (___cxa_allocate_exception(4)|0);
  HEAP32[$294>>2] = (608);
  ___cxa_throw(($294|0),(624|0),(27|0));
  // unreachable;
 }
 L147: do {
  if ($267) {
   $$pn$us$i$i = $274;
   while(1) {
    $__nd$0$us$i$i = HEAP32[$$pn$us$i$i>>2]|0;
    $276 = ($__nd$0$us$i$i|0)==(0|0);
    if ($276) {
     label = 99;
     break;
    }
    $277 = ((($__nd$0$us$i$i)) + 4|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = $278 & $265;
    $280 = ($279|0)==($273|0);
    if (!($280)) {
     label = 99;
     break;
    }
    $281 = ((($__nd$0$us$i$i)) + 8|0);
    $282 = HEAP32[$281>>2]|0;
    $283 = HEAP32[$282>>2]|0;
    $284 = (FUNCTION_TABLE_iii[$283 & 511]($281,$c)|0);
    if ($284) {
     $$ph = $__nd$0$us$i$i;
     break L147;
    } else {
     $$pn$us$i$i = $__nd$0$us$i$i;
    }
   }
   if ((label|0) == 99) {
    $294 = (___cxa_allocate_exception(4)|0);
    HEAP32[$294>>2] = (608);
    ___cxa_throw(($294|0),(624|0),(27|0));
    // unreachable;
   }
  } else {
   $$pn$i$i67 = $274;
   while(1) {
    $__nd$0$i$i69 = HEAP32[$$pn$i$i67>>2]|0;
    $285 = ($__nd$0$i$i69|0)==(0|0);
    if ($285) {
     label = 99;
     break;
    }
    $286 = ((($__nd$0$i$i69)) + 4|0);
    $287 = HEAP32[$286>>2]|0;
    $288 = (($287>>>0) % ($263>>>0))&-1;
    $289 = ($288|0)==($273|0);
    if (!($289)) {
     label = 99;
     break;
    }
    $290 = ((($__nd$0$i$i69)) + 8|0);
    $291 = HEAP32[$290>>2]|0;
    $292 = HEAP32[$291>>2]|0;
    $293 = (FUNCTION_TABLE_iii[$292 & 511]($290,$c)|0);
    if ($293) {
     $$ph = $__nd$0$i$i69;
     break L147;
    } else {
     $$pn$i$i67 = $__nd$0$i$i69;
    }
   }
   if ((label|0) == 99) {
    $294 = (___cxa_allocate_exception(4)|0);
    HEAP32[$294>>2] = (608);
    ___cxa_throw(($294|0),(624|0),(27|0));
    // unreachable;
   }
  }
 } while(0);
 $295 = ((($$ph)) + 20|0);
 $296 = HEAP32[$295>>2]|0;
 HEAP32[$marker>>2] = $296;
 $297 = ((($marker)) + 4|0);
 $298 = ((($$ph)) + 24|0);
 $299 = HEAP32[$298>>2]|0;
 HEAP32[$297>>2] = $299;
 $300 = ($299|0)==(0|0);
 if (!($300)) {
  __ZNSt3__119__shared_weak_count12__add_sharedEv($299);
 }
 $301 = HEAP32[$$ph>>2]|0;
 $302 = HEAP32[$262>>2]|0;
 $303 = ((($$ph)) + 4|0);
 $304 = HEAP32[$303>>2]|0;
 $305 = (($302) + -1)|0;
 $306 = $305 & $302;
 $307 = ($306|0)==(0);
 if ($307) {
  $308 = $305 & $304;
  $312 = $308;
 } else {
  $309 = (($304>>>0) % ($302>>>0))&-1;
  $312 = $309;
 }
 $310 = HEAP32[$270>>2]|0;
 $311 = (($310) + ($312<<2)|0);
 $313 = HEAP32[$311>>2]|0;
 $__pn$0$i$i = $313;
 while(1) {
  $314 = HEAP32[$__pn$0$i$i>>2]|0;
  $315 = ($314|0)==($$ph|0);
  if ($315) {
   $$lcssa367 = $__pn$0$i$i;$__pn$0$i$i$lcssa = $__pn$0$i$i;
   break;
  } else {
   $__pn$0$i$i = $314;
  }
 }
 $316 = ((($this)) + 212|0);
 $317 = ($__pn$0$i$i$lcssa|0)==($316|0);
 if ($317) {
  label = 112;
 } else {
  $318 = ((($__pn$0$i$i$lcssa)) + 4|0);
  $319 = HEAP32[$318>>2]|0;
  if ($307) {
   $320 = $319 & $305;
   $323 = $320;
  } else {
   $321 = (($319>>>0) % ($302>>>0))&-1;
   $323 = $321;
  }
  $322 = ($323|0)==($312|0);
  if ($322) {
   $332 = $301;
   label = 118;
  } else {
   label = 112;
  }
 }
 do {
  if ((label|0) == 112) {
   $324 = ($301|0)==(0|0);
   if (!($324)) {
    $325 = ((($301)) + 4|0);
    $326 = HEAP32[$325>>2]|0;
    if ($307) {
     $327 = $326 & $305;
     $330 = $327;
    } else {
     $328 = (($326>>>0) % ($302>>>0))&-1;
     $330 = $328;
    }
    $329 = ($330|0)==($312|0);
    if ($329) {
     $334 = $326;$739 = $301;
     label = 120;
     break;
    }
   }
   HEAP32[$311>>2] = 0;
   $$pre$i = HEAP32[$$ph>>2]|0;
   $332 = $$pre$i;
   label = 118;
  }
 } while(0);
 if ((label|0) == 118) {
  $331 = ($332|0)==(0|0);
  if ($331) {
   $340 = 0;
  } else {
   $$phi$trans$insert = ((($332)) + 4|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $334 = $$pre;$739 = $332;
   label = 120;
  }
 }
 if ((label|0) == 120) {
  if ($307) {
   $333 = $334 & $305;
   $337 = $333;
  } else {
   $335 = (($334>>>0) % ($302>>>0))&-1;
   $337 = $335;
  }
  $336 = ($337|0)==($312|0);
  if ($336) {
   $340 = $739;
  } else {
   $338 = HEAP32[$270>>2]|0;
   $339 = (($338) + ($337<<2)|0);
   HEAP32[$339>>2] = $__pn$0$i$i$lcssa;
   $$pre$i$i73 = HEAP32[$$ph>>2]|0;
   $340 = $$pre$i$i73;
  }
 }
 HEAP32[$$lcssa367>>2] = $340;
 HEAP32[$$ph>>2] = 0;
 $341 = ((($this)) + 216|0);
 $342 = HEAP32[$341>>2]|0;
 $343 = (($342) + -1)|0;
 HEAP32[$341>>2] = $343;
 $344 = ((($$ph)) + 8|0);
 $345 = HEAP32[$298>>2]|0;
 $346 = ($345|0)==(0|0);
 if (!($346)) {
  __ZNSt3__119__shared_weak_count16__release_sharedEv($345);
 }
 HEAP32[$344>>2] = (2352);
 $347 = ((($$ph)) + 16|0);
 $348 = HEAP32[$347>>2]|0;
 $349 = ($348|0)==(0|0);
 if (!($349)) {
  __ZNSt3__119__shared_weak_count16__release_sharedEv($348);
 }
 __ZdlPv($$ph);
 $350 = ((($this)) + 224|0);
 (__ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE14__erase_uniqueIS3_EEjRKT_($350,$marker)|0);
 $351 = HEAP32[$marker>>2]|0;
 $352 = ((($351)) + 4|0);
 $353 = HEAP32[$352>>2]|0;
 $354 = HEAP32[$11>>2]|0;
 $355 = ($354|0)==(0);
 L205: do {
  if ($355) {
   label = 141;
  } else {
   $356 = (($354) + -1)|0;
   $357 = $356 & $354;
   $358 = ($357|0)==(0);
   if ($358) {
    $359 = $356 & $353;
    $363 = $359;
   } else {
    $360 = (($353>>>0) % ($354>>>0))&-1;
    $363 = $360;
   }
   $361 = HEAP32[$19>>2]|0;
   $362 = (($361) + ($363<<2)|0);
   $364 = HEAP32[$362>>2]|0;
   $365 = ($364|0)==(0|0);
   if ($365) {
    label = 141;
   } else {
    if ($358) {
     $$pn$us$i$i$i$i76 = $364;
     while(1) {
      $__nd$0$us$i$i$i$i78 = HEAP32[$$pn$us$i$i$i$i76>>2]|0;
      $366 = ($__nd$0$us$i$i$i$i78|0)==(0|0);
      if ($366) {
       label = 141;
       break L205;
      }
      $367 = ((($__nd$0$us$i$i$i$i78)) + 4|0);
      $368 = HEAP32[$367>>2]|0;
      $369 = $368 & $356;
      $370 = ($369|0)==($363|0);
      if (!($370)) {
       label = 141;
       break L205;
      }
      $371 = ((($__nd$0$us$i$i$i$i78)) + 8|0);
      $372 = HEAP32[$371>>2]|0;
      $373 = ($372|0)==($351|0);
      if ($373) {
       label = 225;
       break;
      } else {
       $$pn$us$i$i$i$i76 = $__nd$0$us$i$i$i$i78;
      }
     }
    } else {
     $$pn$i$i$i$i81 = $364;
     while(1) {
      $__nd$0$i$i$i$i83 = HEAP32[$$pn$i$i$i$i81>>2]|0;
      $374 = ($__nd$0$i$i$i$i83|0)==(0|0);
      if ($374) {
       label = 141;
       break L205;
      }
      $375 = ((($__nd$0$i$i$i$i83)) + 4|0);
      $376 = HEAP32[$375>>2]|0;
      $377 = (($376>>>0) % ($354>>>0))&-1;
      $378 = ($377|0)==($363|0);
      if (!($378)) {
       label = 141;
       break L205;
      }
      $379 = ((($__nd$0$i$i$i$i83)) + 8|0);
      $380 = HEAP32[$379>>2]|0;
      $381 = ($380|0)==($351|0);
      if ($381) {
       label = 225;
       break;
      } else {
       $$pn$i$i$i$i81 = $__nd$0$i$i$i$i83;
      }
     }
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 141) {
   $382 = ((($this)) + 12|0);
   __THREW__ = 0;
   $383 = (invoke_iii(211,($382|0),($marker|0))|0);
   $384 = __THREW__; __THREW__ = 0;
   $385 = $384&1;
   if ($385) {
    label = 167;
   } else {
    HEAP32[$exit_var>>2] = 0;
    $386 = ((($exit_var)) + 4|0);
    HEAP32[$386>>2] = 0;
    $387 = ((($383)) + 8|0);
    $388 = HEAP32[$387>>2]|0;
    $389 = ($388|0)==(0|0);
    do {
     if ($389) {
      label = 212;
     } else {
      $391 = $388;$exit_var_set$0$off0274 = 0;$min_ratio$0273 = 0.0;
      L225: while(1) {
       $390 = ((($391)) + 8|0);
       $392 = HEAP32[$390>>2]|0;
       $393 = HEAP32[$392>>2]|0;
       $394 = ((($393)) + 28|0);
       $395 = HEAP32[$394>>2]|0;
       __THREW__ = 0;
       $396 = (invoke_ii($395|0,($392|0))|0);
       $397 = __THREW__; __THREW__ = 0;
       $398 = $397&1;
       if ($398) {
        label = 170;
        break;
       }
       do {
        if ($396) {
         $399 = HEAP32[$390>>2]|0;
         $400 = ((($399)) + 4|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = HEAP32[$11>>2]|0;
         $403 = ($402|0)==(0);
         if ($403) {
          label = 157;
          break L225;
         }
         $404 = (($402) + -1)|0;
         $405 = $404 & $402;
         $406 = ($405|0)==(0);
         if ($406) {
          $407 = $404 & $401;
          $411 = $407;
         } else {
          $408 = (($401>>>0) % ($402>>>0))&-1;
          $411 = $408;
         }
         $409 = HEAP32[$19>>2]|0;
         $410 = (($409) + ($411<<2)|0);
         $412 = HEAP32[$410>>2]|0;
         $413 = ($412|0)==(0|0);
         if ($413) {
          label = 157;
          break L225;
         }
         if ($406) {
          $$pn$us$i$i$i90 = $412;
          while(1) {
           $__nd$0$us$i$i$i92 = HEAP32[$$pn$us$i$i$i90>>2]|0;
           $414 = ($__nd$0$us$i$i$i92|0)==(0|0);
           if ($414) {
            label = 157;
            break L225;
           }
           $415 = ((($__nd$0$us$i$i$i92)) + 4|0);
           $416 = HEAP32[$415>>2]|0;
           $417 = $416 & $404;
           $418 = ($417|0)==($411|0);
           if (!($418)) {
            label = 157;
            break L225;
           }
           $419 = ((($__nd$0$us$i$i$i92)) + 8|0);
           $420 = HEAP32[$419>>2]|0;
           $421 = ($420|0)==($399|0);
           if ($421) {
            $$ph$i101 = $__nd$0$us$i$i$i92;
            break;
           } else {
            $$pn$us$i$i$i90 = $__nd$0$us$i$i$i92;
           }
          }
         } else {
          $$pn$i$i$i95 = $412;
          while(1) {
           $__nd$0$i$i$i97 = HEAP32[$$pn$i$i$i95>>2]|0;
           $422 = ($__nd$0$i$i$i97|0)==(0|0);
           if ($422) {
            label = 157;
            break L225;
           }
           $423 = ((($__nd$0$i$i$i97)) + 4|0);
           $424 = HEAP32[$423>>2]|0;
           $425 = (($424>>>0) % ($402>>>0))&-1;
           $426 = ($425|0)==($411|0);
           if (!($426)) {
            label = 157;
            break L225;
           }
           $427 = ((($__nd$0$i$i$i97)) + 8|0);
           $428 = HEAP32[$427>>2]|0;
           $429 = ($428|0)==($399|0);
           if ($429) {
            $$ph$i101 = $__nd$0$i$i$i97;
            break;
           } else {
            $$pn$i$i$i95 = $__nd$0$i$i$i97;
           }
          }
         }
         $432 = ((($$ph$i101)) + 24|0);
         $433 = HEAP32[$432>>2]|0;
         $434 = ((($$ph$i101)) + 28|0);
         $435 = HEAP32[$434>>2]|0;
         $436 = $435;
         $437 = $433;
         $438 = (($436) - ($437))|0;
         $439 = $438 >> 4;
         $440 = ($439|0)==(0);
         if ($440) {
          $455 = $433;
         } else {
          $441 = HEAP32[$marker>>2]|0;
          $442 = ((($441)) + 4|0);
          $443 = HEAP32[$442>>2]|0;
          $446 = $433;$__len$03$i$i$i$i$i = $439;
          while(1) {
           $444 = (($__len$03$i$i$i$i$i|0) / 2)&-1;
           $445 = (($446) + ($444<<4)|0);
           $447 = HEAP32[$445>>2]|0;
           $448 = ((($447)) + 4|0);
           $449 = HEAP32[$448>>2]|0;
           $450 = ($449>>>0)<($443>>>0);
           if ($450) {
            $$sum$i$i$i$i$i = (($444) + 1)|0;
            $451 = (($446) + ($$sum$i$i$i$i$i<<4)|0);
            $$neg2$i$i$i$i$i = (($__len$03$i$i$i$i$i) + -1)|0;
            $452 = (($$neg2$i$i$i$i$i) - ($444))|0;
            $740 = $451;$__len$0$be$i$i$i$i$i = $452;
           } else {
            $740 = $446;$__len$0$be$i$i$i$i$i = $444;
           }
           $453 = ($__len$0$be$i$i$i$i$i|0)==(0);
           if ($453) {
            $455 = $740;
            break;
           } else {
            $446 = $740;$__len$03$i$i$i$i$i = $__len$0$be$i$i$i$i$i;
           }
          }
         }
         $454 = ($455|0)==($435|0);
         if ($454) {
          $exit_var_set$1$off0 = $exit_var_set$0$off0274;$min_ratio$1 = $min_ratio$0273;
          break;
         }
         $456 = HEAP32[$marker>>2]|0;
         $457 = ((($456)) + 4|0);
         $458 = HEAP32[$457>>2]|0;
         $459 = HEAP32[$455>>2]|0;
         $460 = ((($459)) + 4|0);
         $461 = HEAP32[$460>>2]|0;
         $462 = ($458>>>0)<($461>>>0);
         $$$i = $462 ? $435 : $455;
         $463 = ($$$i|0)==($435|0);
         if ($463) {
          $exit_var_set$1$off0 = $exit_var_set$0$off0274;$min_ratio$1 = $min_ratio$0273;
          break;
         }
         $464 = ((($$$i)) + 8|0);
         $465 = +HEAPF64[$464>>3];
         $466 = !($465 >= 0.0);
         if (!($466)) {
          $exit_var_set$1$off0 = $exit_var_set$0$off0274;$min_ratio$1 = $min_ratio$0273;
          break;
         }
         $479 = ((($$ph$i101)) + 16|0);
         $480 = +HEAPF64[$479>>3];
         $481 = -$480;
         $482 = $481 / $465;
         $exit_var_set$0$off0$not = $exit_var_set$0$off0274 ^ 1;
         $483 = $482 < $min_ratio$0273;
         $or$cond = $483 | $exit_var_set$0$off0$not;
         if (!($or$cond)) {
          $exit_var_set$1$off0 = $exit_var_set$0$off0274;$min_ratio$1 = $min_ratio$0273;
          break;
         }
         $484 = ((($391)) + 12|0);
         $485 = HEAP32[$484>>2]|0;
         $486 = ($485|0)==(0|0);
         if (!($486)) {
          __ZNSt3__119__shared_weak_count12__add_sharedEv($485);
         }
         HEAP32[$exit_var>>2] = $399;
         $487 = HEAP32[$386>>2]|0;
         HEAP32[$386>>2] = $485;
         $488 = ($487|0)==(0|0);
         if ($488) {
          $exit_var_set$1$off0 = 1;$min_ratio$1 = $482;
          break;
         }
         __ZNSt3__119__shared_weak_count16__release_sharedEv($487);
         $exit_var_set$1$off0 = 1;$min_ratio$1 = $482;
        } else {
         $exit_var_set$1$off0 = $exit_var_set$0$off0274;$min_ratio$1 = $min_ratio$0273;
        }
       } while(0);
       $489 = HEAP32[$391>>2]|0;
       $490 = ($489|0)==(0|0);
       if ($490) {
        label = 180;
        break;
       } else {
        $391 = $489;$exit_var_set$0$off0274 = $exit_var_set$1$off0;$min_ratio$0273 = $min_ratio$1;
       }
      }
      if ((label|0) == 157) {
       $430 = (___cxa_allocate_exception(4)|0);
       HEAP32[$430>>2] = (280);
       __THREW__ = 0;
       invoke_viii(182,($430|0),(296|0),(27|0));
       $431 = __THREW__; __THREW__ = 0;
       label = 171;
       break;
      }
      else if ((label|0) == 170) {
       $473 = ___cxa_find_matching_catch()|0;
       $474 = tempRet0;
       $lpad$phi215$index = $473;$lpad$phi215$index8 = $474;
       break;
      }
      else if ((label|0) == 180) {
       if ($exit_var_set$1$off0) {
        label = 222;
        break;
       }
       $$pr300 = HEAP32[$387>>2]|0;
       $491 = ($$pr300|0)==(0|0);
       if ($491) {
        label = 212;
        break;
       } else {
        $493 = $$pr300;$exit_var_set$2$off0270 = 0;$min_ratio$2269 = $min_ratio$1;
       }
       L268: while(1) {
        $492 = ((($493)) + 8|0);
        $494 = HEAP32[$492>>2]|0;
        $495 = HEAP32[$494>>2]|0;
        $496 = ((($495)) + 28|0);
        $497 = HEAP32[$496>>2]|0;
        __THREW__ = 0;
        $498 = (invoke_ii($497|0,($494|0))|0);
        $499 = __THREW__; __THREW__ = 0;
        $500 = $499&1;
        if ($500) {
         label = 169;
         break;
        }
        do {
         if ($498) {
          $501 = HEAP32[$492>>2]|0;
          $502 = ((($501)) + 4|0);
          $503 = HEAP32[$502>>2]|0;
          $504 = HEAP32[$11>>2]|0;
          $505 = ($504|0)==(0);
          if ($505) {
           label = 196;
           break L268;
          }
          $506 = (($504) + -1)|0;
          $507 = $506 & $504;
          $508 = ($507|0)==(0);
          if ($508) {
           $509 = $506 & $503;
           $513 = $509;
          } else {
           $510 = (($503>>>0) % ($504>>>0))&-1;
           $513 = $510;
          }
          $511 = HEAP32[$19>>2]|0;
          $512 = (($511) + ($513<<2)|0);
          $514 = HEAP32[$512>>2]|0;
          $515 = ($514|0)==(0|0);
          if ($515) {
           label = 196;
           break L268;
          }
          if ($508) {
           $$pn$us$i$i$i111 = $514;
           while(1) {
            $__nd$0$us$i$i$i113 = HEAP32[$$pn$us$i$i$i111>>2]|0;
            $516 = ($__nd$0$us$i$i$i113|0)==(0|0);
            if ($516) {
             label = 196;
             break L268;
            }
            $517 = ((($__nd$0$us$i$i$i113)) + 4|0);
            $518 = HEAP32[$517>>2]|0;
            $519 = $518 & $506;
            $520 = ($519|0)==($513|0);
            if (!($520)) {
             label = 196;
             break L268;
            }
            $521 = ((($__nd$0$us$i$i$i113)) + 8|0);
            $522 = HEAP32[$521>>2]|0;
            $523 = ($522|0)==($501|0);
            if ($523) {
             $$ph$i122 = $__nd$0$us$i$i$i113;
             break;
            } else {
             $$pn$us$i$i$i111 = $__nd$0$us$i$i$i113;
            }
           }
          } else {
           $$pn$i$i$i116 = $514;
           while(1) {
            $__nd$0$i$i$i118 = HEAP32[$$pn$i$i$i116>>2]|0;
            $524 = ($__nd$0$i$i$i118|0)==(0|0);
            if ($524) {
             label = 196;
             break L268;
            }
            $525 = ((($__nd$0$i$i$i118)) + 4|0);
            $526 = HEAP32[$525>>2]|0;
            $527 = (($526>>>0) % ($504>>>0))&-1;
            $528 = ($527|0)==($513|0);
            if (!($528)) {
             label = 196;
             break L268;
            }
            $529 = ((($__nd$0$i$i$i118)) + 8|0);
            $530 = HEAP32[$529>>2]|0;
            $531 = ($530|0)==($501|0);
            if ($531) {
             $$ph$i122 = $__nd$0$i$i$i118;
             break;
            } else {
             $$pn$i$i$i116 = $__nd$0$i$i$i118;
            }
           }
          }
          $534 = ((($$ph$i122)) + 24|0);
          $535 = HEAP32[$534>>2]|0;
          $536 = ((($$ph$i122)) + 28|0);
          $537 = HEAP32[$536>>2]|0;
          $538 = $537;
          $539 = $535;
          $540 = (($538) - ($539))|0;
          $541 = $540 >> 4;
          $542 = ($541|0)==(0);
          if ($542) {
           $557 = $535;
          } else {
           $543 = HEAP32[$marker>>2]|0;
           $544 = ((($543)) + 4|0);
           $545 = HEAP32[$544>>2]|0;
           $548 = $535;$__len$03$i$i$i$i$i126 = $541;
           while(1) {
            $546 = (($__len$03$i$i$i$i$i126|0) / 2)&-1;
            $547 = (($548) + ($546<<4)|0);
            $549 = HEAP32[$547>>2]|0;
            $550 = ((($549)) + 4|0);
            $551 = HEAP32[$550>>2]|0;
            $552 = ($551>>>0)<($545>>>0);
            if ($552) {
             $$sum$i$i$i$i$i127 = (($546) + 1)|0;
             $553 = (($548) + ($$sum$i$i$i$i$i127<<4)|0);
             $$neg2$i$i$i$i$i128 = (($__len$03$i$i$i$i$i126) + -1)|0;
             $554 = (($$neg2$i$i$i$i$i128) - ($546))|0;
             $741 = $553;$__len$0$be$i$i$i$i$i129 = $554;
            } else {
             $741 = $548;$__len$0$be$i$i$i$i$i129 = $546;
            }
            $555 = ($__len$0$be$i$i$i$i$i129|0)==(0);
            if ($555) {
             $557 = $741;
             break;
            } else {
             $548 = $741;$__len$03$i$i$i$i$i126 = $__len$0$be$i$i$i$i$i129;
            }
           }
          }
          $556 = ($557|0)==($537|0);
          do {
           if ($556) {
            $571 = 0.0;
           } else {
            $558 = HEAP32[$marker>>2]|0;
            $559 = ((($558)) + 4|0);
            $560 = HEAP32[$559>>2]|0;
            $561 = HEAP32[$557>>2]|0;
            $562 = ((($561)) + 4|0);
            $563 = HEAP32[$562>>2]|0;
            $564 = ($560>>>0)<($563>>>0);
            $$$i132 = $564 ? $537 : $557;
            $565 = ($$$i132|0)==($537|0);
            if ($565) {
             $571 = 0.0;
             break;
            }
            $566 = ((($$$i132)) + 8|0);
            $567 = +HEAPF64[$566>>3];
            $571 = $567;
           }
          } while(0);
          $568 = ((($$ph$i122)) + 16|0);
          $569 = +HEAPF64[$568>>3];
          $570 = $569 / $571;
          $exit_var_set$2$off0$not = $exit_var_set$2$off0270 ^ 1;
          $572 = $570 < $min_ratio$2269;
          $or$cond16 = $572 | $exit_var_set$2$off0$not;
          if (!($or$cond16)) {
           $exit_var_set$3$off0 = $exit_var_set$2$off0270;$min_ratio$3 = $min_ratio$2269;
           break;
          }
          $573 = ((($493)) + 12|0);
          $574 = HEAP32[$573>>2]|0;
          $575 = ($574|0)==(0|0);
          if (!($575)) {
           __ZNSt3__119__shared_weak_count12__add_sharedEv($574);
          }
          HEAP32[$exit_var>>2] = $501;
          $576 = HEAP32[$386>>2]|0;
          HEAP32[$386>>2] = $574;
          $577 = ($576|0)==(0|0);
          if ($577) {
           $exit_var_set$3$off0 = 1;$min_ratio$3 = $570;
           break;
          }
          __ZNSt3__119__shared_weak_count16__release_sharedEv($576);
          $exit_var_set$3$off0 = 1;$min_ratio$3 = $570;
         } else {
          $exit_var_set$3$off0 = $exit_var_set$2$off0270;$min_ratio$3 = $min_ratio$2269;
         }
        } while(0);
        $578 = HEAP32[$493>>2]|0;
        $579 = ($578|0)==(0|0);
        if ($579) {
         label = 211;
         break;
        } else {
         $493 = $578;$exit_var_set$2$off0270 = $exit_var_set$3$off0;$min_ratio$2269 = $min_ratio$3;
        }
       }
       if ((label|0) == 169) {
        $471 = ___cxa_find_matching_catch()|0;
        $472 = tempRet0;
        $lpad$phi215$index = $471;$lpad$phi215$index8 = $472;
        break;
       }
       else if ((label|0) == 196) {
        $532 = (___cxa_allocate_exception(4)|0);
        HEAP32[$532>>2] = (280);
        __THREW__ = 0;
        invoke_viii(182,($532|0),(296|0),(27|0));
        $533 = __THREW__; __THREW__ = 0;
        label = 171;
        break;
       }
       else if ((label|0) == 211) {
        if ($exit_var_set$3$off0) {
         label = 222;
         break;
        } else {
         label = 212;
         break;
        }
       }
      }
     }
    } while(0);
    L311: do {
     if ((label|0) == 212) {
      $580 = ((($383)) + 12|0);
      $581 = HEAP32[$580>>2]|0;
      $582 = ($581|0)==(0);
      if ($582) {
       __THREW__ = 0;
       (invoke_iii(208,($6|0),($marker|0))|0);
       $586 = __THREW__; __THREW__ = 0;
       $587 = $586&1;
       if ($587) {
        label = 171;
        break;
       } else {
        label = 223;
        break;
       }
      }
      $583 = HEAP32[$387>>2]|0;
      $584 = ($583|0)==(0|0);
      if ($584) {
       label = 223;
       break;
      }
      $585 = HEAP32[$7>>2]|0;
      $589 = $583;
      while(1) {
       $588 = ((($589)) + 8|0);
       $590 = HEAP32[$588>>2]|0;
       $591 = ($590|0)==($585|0);
       if (!($591)) {
        $$lcssa = $589;$$lcssa359 = $590;
        break;
       }
       $597 = HEAP32[$589>>2]|0;
       $598 = ($597|0)==(0|0);
       if ($598) {
        label = 223;
        break L311;
       } else {
        $589 = $597;
       }
      }
      $592 = ((($$lcssa)) + 12|0);
      $593 = HEAP32[$592>>2]|0;
      $594 = ($593|0)==(0|0);
      if (!($594)) {
       __ZNSt3__119__shared_weak_count12__add_sharedEv($593);
      }
      HEAP32[$exit_var>>2] = $$lcssa359;
      $595 = HEAP32[$386>>2]|0;
      HEAP32[$386>>2] = $593;
      $596 = ($595|0)==(0|0);
      if ($596) {
       label = 222;
       break;
      }
      __ZNSt3__119__shared_weak_count16__release_sharedEv($595);
      label = 222;
     }
    } while(0);
    if ((label|0) == 222) {
     __THREW__ = 0;
     invoke_viii(207,($this|0),($marker|0),($exit_var|0));
     $599 = __THREW__; __THREW__ = 0;
     $600 = $599&1;
     if ($600) {
      label = 171;
     } else {
      label = 223;
     }
    }
    if ((label|0) == 171) {
     $475 = ___cxa_find_matching_catch()|0;
     $476 = tempRet0;
     $lpad$phi215$index = $475;$lpad$phi215$index8 = $476;
    }
    else if ((label|0) == 223) {
     $601 = HEAP32[$386>>2]|0;
     $602 = ($601|0)==(0|0);
     if ($602) {
      label = 225;
      break;
     }
     __ZNSt3__119__shared_weak_count16__release_sharedEv($601);
     label = 225;
     break;
    }
    $477 = HEAP32[$386>>2]|0;
    $478 = ($477|0)==(0|0);
    if ($478) {
     $$1 = $lpad$phi215$index;$$12 = $lpad$phi215$index8;
    } else {
     __ZNSt3__119__shared_weak_count16__release_sharedEv($477);
     $$1 = $lpad$phi215$index;$$12 = $lpad$phi215$index8;
    }
   }
  }
 } while(0);
 L333: do {
  if ((label|0) == 225) {
   $603 = HEAP32[$marker>>2]|0;
   $604 = ((($603)) + 4|0);
   $605 = HEAP32[$604>>2]|0;
   $606 = HEAP32[$11>>2]|0;
   $607 = ($606|0)==(0);
   L335: do {
    if (!($607)) {
     $608 = (($606) + -1)|0;
     $609 = $608 & $606;
     $610 = ($609|0)==(0);
     if ($610) {
      $611 = $608 & $605;
      $615 = $611;
     } else {
      $612 = (($605>>>0) % ($606>>>0))&-1;
      $615 = $612;
     }
     $613 = HEAP32[$19>>2]|0;
     $614 = (($613) + ($615<<2)|0);
     $616 = HEAP32[$614>>2]|0;
     $617 = ($616|0)==(0|0);
     if (!($617)) {
      if ($610) {
       $$pn$us$i$i$i$i147 = $616;
       while(1) {
        $__nd$0$us$i$i$i$i149 = HEAP32[$$pn$us$i$i$i$i147>>2]|0;
        $618 = ($__nd$0$us$i$i$i$i149|0)==(0|0);
        if ($618) {
         break L335;
        }
        $619 = ((($__nd$0$us$i$i$i$i149)) + 4|0);
        $620 = HEAP32[$619>>2]|0;
        $621 = $620 & $608;
        $622 = ($621|0)==($615|0);
        if (!($622)) {
         break L335;
        }
        $623 = ((($__nd$0$us$i$i$i$i149)) + 8|0);
        $624 = HEAP32[$623>>2]|0;
        $625 = ($624|0)==($603|0);
        if ($625) {
         break;
        } else {
         $$pn$us$i$i$i$i147 = $__nd$0$us$i$i$i$i149;
        }
       }
      } else {
       $$pn$i$i$i$i152 = $616;
       while(1) {
        $__nd$0$i$i$i$i154 = HEAP32[$$pn$i$i$i$i152>>2]|0;
        $626 = ($__nd$0$i$i$i$i154|0)==(0|0);
        if ($626) {
         break L335;
        }
        $627 = ((($__nd$0$i$i$i$i154)) + 4|0);
        $628 = HEAP32[$627>>2]|0;
        $629 = (($628>>>0) % ($606>>>0))&-1;
        $630 = ($629|0)==($615|0);
        if (!($630)) {
         break L335;
        }
        $631 = ((($__nd$0$i$i$i$i154)) + 8|0);
        $632 = HEAP32[$631>>2]|0;
        $633 = ($632|0)==($603|0);
        if ($633) {
         break;
        } else {
         $$pn$i$i$i$i152 = $__nd$0$i$i$i$i154;
        }
       }
      }
      __THREW__ = 0;
      invoke_viii(209,($3|0),($6|0),($marker|0));
      $634 = __THREW__; __THREW__ = 0;
      $635 = $634&1;
      if ($635) {
       label = 167;
       break L333;
      }
      $636 = ((($3)) + 8|0);
      $637 = HEAP32[$636>>2]|0;
      $638 = ($637|0)==(0|0);
      if ($638) {
       break;
      }
      $639 = ((($3)) + 12|0);
      $640 = HEAP32[$639>>2]|0;
      $641 = ($640|0)==($637|0);
      if ($641) {
       $649 = $637;
      } else {
       $643 = $640;
       while(1) {
        $642 = ((($643)) + -16|0);
        HEAP32[$639>>2] = $642;
        $644 = ((($643)) + -12|0);
        $645 = HEAP32[$644>>2]|0;
        $646 = ($645|0)==(0|0);
        if ($646) {
         $648 = $642;
        } else {
         __ZNSt3__119__shared_weak_count16__release_sharedEv($645);
         $$pre$i$i$i$i137 = HEAP32[$639>>2]|0;
         $648 = $$pre$i$i$i$i137;
        }
        $647 = ($648|0)==($637|0);
        if ($647) {
         break;
        } else {
         $643 = $648;
        }
       }
       $$pre$i$i139 = HEAP32[$636>>2]|0;
       $649 = $$pre$i$i139;
      }
      __ZdlPv($649);
     }
    }
   } while(0);
   $650 = HEAP32[$651>>2]|0;
   $652 = ($650|0)==(0|0);
   L363: do {
    if (!($652)) {
     $653 = ((($650)) + 28|0);
     $654 = HEAP32[$653>>2]|0;
     $655 = ($654|0)==(0|0);
     if (!($655)) {
      $657 = $654;
      while(1) {
       $656 = ((($657)) + 8|0);
       $658 = HEAP32[$656>>2]|0;
       $659 = HEAP32[$marker>>2]|0;
       $660 = ($658|0)==($659|0);
       if (!($660)) {
        __THREW__ = 0;
        (invoke_iii(208,($6|0),($656|0))|0);
        $661 = __THREW__; __THREW__ = 0;
        $662 = $661&1;
        if ($662) {
         break;
        }
       }
       $663 = HEAP32[$657>>2]|0;
       $664 = ($663|0)==(0|0);
       if ($664) {
        break L363;
       } else {
        $657 = $663;
       }
      }
      $467 = ___cxa_find_matching_catch()|0;
      $468 = tempRet0;
      $lpad$phi$index = $467;$lpad$phi$index2 = $468;
      label = 168;
      break L333;
     }
    }
   } while(0);
   $665 = HEAP32[$44>>2]|0;
   $666 = HEAP32[$665>>2]|0;
   $667 = ((($666)) + 24|0);
   $668 = HEAP32[$667>>2]|0;
   __THREW__ = 0;
   $669 = (invoke_ii($668|0,($665|0))|0);
   $670 = __THREW__; __THREW__ = 0;
   $671 = $670&1;
   if ($671) {
    label = 167;
   } else {
    do {
     if ($669) {
      $672 = HEAP32[$651>>2]|0;
      $673 = ($672|0)==(0|0);
      if ($673) {
       break;
      }
      $674 = ((($this)) + 172|0);
      __ZN4rhea24remove_from_container_ifINSt3__16vectorINS_8variableENS1_9allocatorIS3_EEEEZNS_14simplex_solver18remove_constraint_ERKNS_10constraintEE3__0EEvRT_T0_($674,$i);
      $675 = ((($this)) + 160|0);
      __ZN4rhea24remove_from_container_ifINSt3__16vectorINS_8variableENS1_9allocatorIS3_EEEEZNS_14simplex_solver18remove_constraint_ERKNS_10constraintEE3__0EEvRT_T0_($675,$i);
      label = 270;
     } else {
      $676 = HEAP32[$44>>2]|0;
      $677 = HEAP32[$676>>2]|0;
      $678 = ((($677)) + 12|0);
      $679 = HEAP32[$678>>2]|0;
      __THREW__ = 0;
      $680 = (invoke_ii($679|0,($676|0))|0);
      $681 = __THREW__; __THREW__ = 0;
      $682 = $681&1;
      if ($682) {
       label = 167;
       break L333;
      }
      if (!($680)) {
       label = 270;
       break;
      }
      $683 = ((($this)) + 252|0);
      $684 = ((($this)) + 256|0);
      $685 = HEAP32[$684>>2]|0;
      $686 = ($685|0)==($683|0);
      L379: do {
       if ($686) {
        $695 = $685;
       } else {
        $687 = HEAP32[$44>>2]|0;
        $$pn$i = $685;
        while(1) {
         $688 = ((($$pn$i)) + 20|0);
         $689 = HEAP32[$688>>2]|0;
         $690 = ($689|0)==($687|0);
         if ($690) {
          $695 = $$pn$i;
          break L379;
         }
         $691 = ((($$pn$i)) + 4|0);
         $692 = HEAP32[$691>>2]|0;
         $693 = ($692|0)==($683|0);
         if ($693) {
          $695 = $683;
          break;
         } else {
          $$pn$i = $692;
         }
        }
       }
      } while(0);
      $694 = ((($695)) + 36|0);
      __THREW__ = 0;
      (invoke_iii(208,($6|0),($694|0))|0);
      $696 = __THREW__; __THREW__ = 0;
      $697 = $696&1;
      if ($697) {
       label = 167;
       break L333;
      }
      $698 = ((($695)) + 4|0);
      $699 = HEAP32[$698>>2]|0;
      $700 = HEAP32[$695>>2]|0;
      $701 = ((($700)) + 4|0);
      HEAP32[$701>>2] = $699;
      $702 = HEAP32[$698>>2]|0;
      HEAP32[$702>>2] = $700;
      $703 = ((($this)) + 260|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + -1)|0;
      HEAP32[$703>>2] = $705;
      $706 = ((($695)) + 40|0);
      $707 = HEAP32[$706>>2]|0;
      $708 = ($707|0)==(0|0);
      if (!($708)) {
       __ZNSt3__119__shared_weak_count16__release_sharedEv($707);
      }
      $709 = ((($695)) + 32|0);
      $710 = HEAP32[$709>>2]|0;
      $711 = ($710|0)==(0|0);
      if (!($711)) {
       __ZNSt3__119__shared_weak_count16__release_sharedEv($710);
      }
      $712 = ((($695)) + 16|0);
      HEAP32[$712>>2] = (2352);
      $713 = ((($695)) + 24|0);
      $714 = HEAP32[$713>>2]|0;
      $715 = ($714|0)==(0|0);
      if (!($715)) {
       __ZNSt3__119__shared_weak_count16__release_sharedEv($714);
      }
      $716 = ((($695)) + 12|0);
      $717 = HEAP32[$716>>2]|0;
      $718 = ($717|0)==(0|0);
      if (!($718)) {
       __ZNSt3__119__shared_weak_count16__release_sharedEv($717);
      }
      __ZdlPv($695);
      label = 270;
     }
    } while(0);
    do {
     if ((label|0) == 270) {
      $$pr = HEAP32[$651>>2]|0;
      $719 = ($$pr|0)==(0|0);
      if ($719) {
       break;
      }
      HEAP32[$0>>2] = $$pr;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
      __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeISD_PvEEEE($4,$43,$$byval_copy);
     }
    } while(0);
    $720 = ((($this)) + 4|0);
    $721 = HEAP8[$720>>0]|0;
    $722 = ($721<<24>>24)==(0);
    do {
     if (!($722)) {
      __THREW__ = 0;
      invoke_vii(200,($this|0),($7|0));
      $723 = __THREW__; __THREW__ = 0;
      $724 = $723&1;
      if ($724) {
       label = 167;
       break L333;
      }
      __THREW__ = 0;
      invoke_vi(201,($this|0));
      $725 = __THREW__; __THREW__ = 0;
      $726 = $725&1;
      if ($726) {
       label = 167;
       break L333;
      }
      HEAP8[$5>>0] = 0;
      $727 = ((($this)) + 128|0);
      $728 = HEAP32[$727>>2]|0;
      $729 = ($728|0)==(0|0);
      if ($729) {
       break;
      }
      $730 = HEAP32[$728>>2]|0;
      $731 = ((($730)) + 24|0);
      $732 = HEAP32[$731>>2]|0;
      __THREW__ = 0;
      invoke_vii($732|0,($728|0),($this|0));
      $733 = __THREW__; __THREW__ = 0;
      $734 = $733&1;
      if ($734) {
       label = 167;
       break L333;
      }
     }
    } while(0);
    $735 = HEAP32[$297>>2]|0;
    $736 = ($735|0)==(0|0);
    if ($736) {
     STACKTOP = sp;return ($this|0);
    }
    __ZNSt3__119__shared_weak_count16__release_sharedEv($735);
    STACKTOP = sp;return ($this|0);
   }
  }
 } while(0);
 if ((label|0) == 167) {
  $469 = ___cxa_find_matching_catch()|0;
  $470 = tempRet0;
  $lpad$phi$index = $469;$lpad$phi$index2 = $470;
  label = 168;
 }
 if ((label|0) == 168) {
  $$1 = $lpad$phi$index;$$12 = $lpad$phi$index2;
 }
 $737 = HEAP32[$297>>2]|0;
 $738 = ($737|0)==(0|0);
 if ($738) {
  $$2 = $$1;$$23 = $$12;
  ___resumeException($$2|0);
  // unreachable;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv($737);
 $$2 = $$1;$$23 = $$12;
 ___resumeException($$2|0);
 // unreachable;
 return (0)|0;
}
function __ZN4rhea14simplex_solver20reset_stay_constantsEv($this) {
 $this = $this|0;
 var $$ph$i = 0, $$ph$i14 = 0, $$pn$i$i$i = 0, $$pn$i$i$i$i = 0, $$pn$i$i$i$i23 = 0, $$pn$i$i$i8 = 0, $$pn$us$i$i$i = 0, $$pn$us$i$i$i$i = 0, $$pn$us$i$i$i$i18 = 0, $$pn$us$i$i$i3 = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__nd$0$i$i$i = 0, $__nd$0$i$i$i$i = 0, $__nd$0$i$i$i$i25 = 0, $__nd$0$i$i$i10 = 0, $__nd$0$us$i$i$i = 0, $__nd$0$us$i$i$i$i = 0, $__nd$0$us$i$i$i$i20 = 0, $__nd$0$us$i$i$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 172|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 176|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  return;
 }
 $5 = ((($this)) + 160|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($this)) + 36|0);
 $8 = ((($this)) + 32|0);
 $$pre = HEAP32[$7>>2]|0;
 $10 = $1;$14 = $$pre;$71 = $6;
 L4: while(1) {
  $9 = HEAP32[$10>>2]|0;
  $11 = ((($9)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($14|0)==(0);
  L6: do {
   if ($13) {
    $128 = 0;
   } else {
    $15 = (($14) + -1)|0;
    $16 = $15 & $14;
    $17 = ($16|0)==(0);
    if ($17) {
     $18 = $15 & $12;
     $22 = $18;
    } else {
     $19 = (($12>>>0) % ($14>>>0))&-1;
     $22 = $19;
    }
    $20 = HEAP32[$8>>2]|0;
    $21 = (($20) + ($22<<2)|0);
    $23 = HEAP32[$21>>2]|0;
    $24 = ($23|0)==(0|0);
    L12: do {
     if (!($24)) {
      if ($17) {
       $$pn$us$i$i$i$i18 = $23;
       while(1) {
        $__nd$0$us$i$i$i$i20 = HEAP32[$$pn$us$i$i$i$i18>>2]|0;
        $25 = ($__nd$0$us$i$i$i$i20|0)==(0|0);
        if ($25) {
         break L12;
        }
        $26 = ((($__nd$0$us$i$i$i$i20)) + 4|0);
        $27 = HEAP32[$26>>2]|0;
        $28 = $27 & $15;
        $29 = ($28|0)==($22|0);
        if (!($29)) {
         break L12;
        }
        $30 = ((($__nd$0$us$i$i$i$i20)) + 8|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = ($31|0)==($9|0);
        if ($32) {
         break;
        } else {
         $$pn$us$i$i$i$i18 = $__nd$0$us$i$i$i$i20;
        }
       }
      } else {
       $$pn$i$i$i$i23 = $23;
       while(1) {
        $__nd$0$i$i$i$i25 = HEAP32[$$pn$i$i$i$i23>>2]|0;
        $33 = ($__nd$0$i$i$i$i25|0)==(0|0);
        if ($33) {
         break L12;
        }
        $34 = ((($__nd$0$i$i$i$i25)) + 4|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = (($35>>>0) % ($14>>>0))&-1;
        $37 = ($36|0)==($22|0);
        if (!($37)) {
         break L12;
        }
        $38 = ((($__nd$0$i$i$i$i25)) + 8|0);
        $39 = HEAP32[$38>>2]|0;
        $40 = ($39|0)==($9|0);
        if ($40) {
         break;
        } else {
         $$pn$i$i$i$i23 = $__nd$0$i$i$i$i25;
        }
       }
      }
      $41 = HEAP32[$7>>2]|0;
      $42 = ($41|0)==(0);
      if ($42) {
       label = 27;
       break L4;
      }
      $43 = (($41) + -1)|0;
      $44 = $43 & $41;
      $45 = ($44|0)==(0);
      if ($45) {
       $46 = $43 & $12;
       $49 = $46;
      } else {
       $47 = (($12>>>0) % ($41>>>0))&-1;
       $49 = $47;
      }
      $48 = (($20) + ($49<<2)|0);
      $50 = HEAP32[$48>>2]|0;
      $51 = ($50|0)==(0|0);
      if ($51) {
       label = 27;
       break L4;
      }
      if ($45) {
       $$pn$us$i$i$i3 = $50;
       while(1) {
        $__nd$0$us$i$i$i5 = HEAP32[$$pn$us$i$i$i3>>2]|0;
        $52 = ($__nd$0$us$i$i$i5|0)==(0|0);
        if ($52) {
         label = 27;
         break L4;
        }
        $53 = ((($__nd$0$us$i$i$i5)) + 4|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = $54 & $43;
        $56 = ($55|0)==($49|0);
        if (!($56)) {
         label = 27;
         break L4;
        }
        $57 = ((($__nd$0$us$i$i$i5)) + 8|0);
        $58 = HEAP32[$57>>2]|0;
        $59 = ($58|0)==($9|0);
        if ($59) {
         $$ph$i14 = $__nd$0$us$i$i$i5;
         break;
        } else {
         $$pn$us$i$i$i3 = $__nd$0$us$i$i$i5;
        }
       }
      } else {
       $$pn$i$i$i8 = $50;
       while(1) {
        $__nd$0$i$i$i10 = HEAP32[$$pn$i$i$i8>>2]|0;
        $60 = ($__nd$0$i$i$i10|0)==(0|0);
        if ($60) {
         label = 27;
         break L4;
        }
        $61 = ((($__nd$0$i$i$i10)) + 4|0);
        $62 = HEAP32[$61>>2]|0;
        $63 = (($62>>>0) % ($41>>>0))&-1;
        $64 = ($63|0)==($49|0);
        if (!($64)) {
         label = 27;
         break L4;
        }
        $65 = ((($__nd$0$i$i$i10)) + 8|0);
        $66 = HEAP32[$65>>2]|0;
        $67 = ($66|0)==($9|0);
        if ($67) {
         $$ph$i14 = $__nd$0$i$i$i10;
         break;
        } else {
         $$pn$i$i$i8 = $__nd$0$i$i$i10;
        }
       }
      }
      $69 = ((($$ph$i14)) + 16|0);
      HEAPF64[$69>>3] = 0.0;
     }
    } while(0);
    $$pr = HEAP32[$7>>2]|0;
    $70 = HEAP32[$71>>2]|0;
    $72 = ((($70)) + 4|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($$pr|0)==(0);
    if ($74) {
     $128 = 0;
    } else {
     $75 = (($$pr) + -1)|0;
     $76 = $75 & $$pr;
     $77 = ($76|0)==(0);
     if ($77) {
      $78 = $73 & $75;
      $82 = $78;
     } else {
      $79 = (($73>>>0) % ($$pr>>>0))&-1;
      $82 = $79;
     }
     $80 = HEAP32[$8>>2]|0;
     $81 = (($80) + ($82<<2)|0);
     $83 = HEAP32[$81>>2]|0;
     $84 = ($83|0)==(0|0);
     if ($84) {
      $128 = $$pr;
     } else {
      if ($77) {
       $$pn$us$i$i$i$i = $83;
       while(1) {
        $__nd$0$us$i$i$i$i = HEAP32[$$pn$us$i$i$i$i>>2]|0;
        $85 = ($__nd$0$us$i$i$i$i|0)==(0|0);
        if ($85) {
         $128 = $$pr;
         break L6;
        }
        $86 = ((($__nd$0$us$i$i$i$i)) + 4|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = $87 & $75;
        $89 = ($88|0)==($82|0);
        if (!($89)) {
         $128 = $$pr;
         break L6;
        }
        $90 = ((($__nd$0$us$i$i$i$i)) + 8|0);
        $91 = HEAP32[$90>>2]|0;
        $92 = ($91|0)==($70|0);
        if ($92) {
         break;
        } else {
         $$pn$us$i$i$i$i = $__nd$0$us$i$i$i$i;
        }
       }
      } else {
       $$pn$i$i$i$i = $83;
       while(1) {
        $__nd$0$i$i$i$i = HEAP32[$$pn$i$i$i$i>>2]|0;
        $93 = ($__nd$0$i$i$i$i|0)==(0|0);
        if ($93) {
         $128 = $$pr;
         break L6;
        }
        $94 = ((($__nd$0$i$i$i$i)) + 4|0);
        $95 = HEAP32[$94>>2]|0;
        $96 = (($95>>>0) % ($$pr>>>0))&-1;
        $97 = ($96|0)==($82|0);
        if (!($97)) {
         $128 = $$pr;
         break L6;
        }
        $98 = ((($__nd$0$i$i$i$i)) + 8|0);
        $99 = HEAP32[$98>>2]|0;
        $100 = ($99|0)==($70|0);
        if ($100) {
         break;
        } else {
         $$pn$i$i$i$i = $__nd$0$i$i$i$i;
        }
       }
      }
      if ($77) {
       $101 = $75 & $73;
       $104 = $101;
      } else {
       $102 = (($73>>>0) % ($$pr>>>0))&-1;
       $104 = $102;
      }
      $103 = (($80) + ($104<<2)|0);
      $105 = HEAP32[$103>>2]|0;
      $106 = ($105|0)==(0|0);
      if ($106) {
       label = 52;
       break L4;
      }
      if ($77) {
       $$pn$us$i$i$i = $105;
       while(1) {
        $__nd$0$us$i$i$i = HEAP32[$$pn$us$i$i$i>>2]|0;
        $107 = ($__nd$0$us$i$i$i|0)==(0|0);
        if ($107) {
         label = 52;
         break L4;
        }
        $108 = ((($__nd$0$us$i$i$i)) + 4|0);
        $109 = HEAP32[$108>>2]|0;
        $110 = $109 & $75;
        $111 = ($110|0)==($104|0);
        if (!($111)) {
         label = 52;
         break L4;
        }
        $112 = ((($__nd$0$us$i$i$i)) + 8|0);
        $113 = HEAP32[$112>>2]|0;
        $114 = ($113|0)==($70|0);
        if ($114) {
         $$ph$i = $__nd$0$us$i$i$i;
         break;
        } else {
         $$pn$us$i$i$i = $__nd$0$us$i$i$i;
        }
       }
      } else {
       $$pn$i$i$i = $105;
       while(1) {
        $__nd$0$i$i$i = HEAP32[$$pn$i$i$i>>2]|0;
        $115 = ($__nd$0$i$i$i|0)==(0|0);
        if ($115) {
         label = 52;
         break L4;
        }
        $116 = ((($__nd$0$i$i$i)) + 4|0);
        $117 = HEAP32[$116>>2]|0;
        $118 = (($117>>>0) % ($$pr>>>0))&-1;
        $119 = ($118|0)==($104|0);
        if (!($119)) {
         label = 52;
         break L4;
        }
        $120 = ((($__nd$0$i$i$i)) + 8|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = ($121|0)==($70|0);
        if ($122) {
         $$ph$i = $__nd$0$i$i$i;
         break;
        } else {
         $$pn$i$i$i = $__nd$0$i$i$i;
        }
       }
      }
      $124 = ((($$ph$i)) + 16|0);
      HEAPF64[$124>>3] = 0.0;
      $128 = $$pr;
     }
    }
   }
  } while(0);
  $125 = ((($10)) + 8|0);
  $126 = ((($71)) + 8|0);
  $127 = ($125|0)==($3|0);
  if ($127) {
   label = 55;
   break;
  } else {
   $10 = $125;$14 = $128;$71 = $126;
  }
 }
 if ((label|0) == 27) {
  $68 = (___cxa_allocate_exception(4)|0);
  HEAP32[$68>>2] = (280);
  ___cxa_throw(($68|0),(296|0),(27|0));
  // unreachable;
 }
 else if ((label|0) == 52) {
  $123 = (___cxa_allocate_exception(4)|0);
  HEAP32[$123>>2] = (280);
  ___cxa_throw(($123|0),(296|0),(27|0));
  // unreachable;
 }
 else if ((label|0) == 55) {
  return;
 }
}
function __ZN4rhea14simplex_solver5pivotERKNS_8variableES3_($this,$entry,$exit) {
 $this = $this|0;
 $entry = $entry|0;
 $exit = $exit|0;
 var $$byval_copy = 0, $$pn$i$i$i = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i$i$i$i3 = 0, $$pre$i$i5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__nd$0$i$i$i = 0;
 var $__nd$0$i$i$i$lcssa12 = 0, $expr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $expr = sp;
 $2 = ((($this)) + 8|0);
 __ZN4rhea7tableau10remove_rowERKNS_8variableE($expr,$2,$exit);
 __THREW__ = 0;
 invoke_viii(212,($expr|0),($exit|0),($entry|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __THREW__ = 0;
  invoke_viii(203,($2|0),($entry|0),($expr|0));
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if (!($6)) {
   $7 = HEAP32[$entry>>2]|0;
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   __THREW__ = 0;
   $11 = (invoke_ii($10|0,($7|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    if ($11) {
     $14 = ((($this)) + 92|0);
     $15 = HEAP32[$entry>>2]|0;
     $16 = ((($15)) + 4|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($this)) + 96|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($19|0)==(0);
     L7: do {
      if (!($20)) {
       $21 = (($19) + -1)|0;
       $22 = $21 & $19;
       $23 = ($22|0)==(0);
       if ($23) {
        $24 = $21 & $17;
        $28 = $24;
       } else {
        $25 = (($17>>>0) % ($19>>>0))&-1;
        $28 = $25;
       }
       $26 = HEAP32[$14>>2]|0;
       $27 = (($26) + ($28<<2)|0);
       $29 = HEAP32[$27>>2]|0;
       $30 = ($29|0)==(0|0);
       if (!($30)) {
        $$pn$i$i$i = $29;
        while(1) {
         $__nd$0$i$i$i = HEAP32[$$pn$i$i$i>>2]|0;
         $31 = ($__nd$0$i$i$i|0)==(0|0);
         if ($31) {
          break L7;
         }
         $32 = ((($__nd$0$i$i$i)) + 4|0);
         $33 = HEAP32[$32>>2]|0;
         if ($23) {
          $34 = $33 & $21;
          $37 = $34;
         } else {
          $35 = (($33>>>0) % ($19>>>0))&-1;
          $37 = $35;
         }
         $36 = ($37|0)==($28|0);
         if (!($36)) {
          break L7;
         }
         $38 = ((($__nd$0$i$i$i)) + 8|0);
         $39 = HEAP32[$38>>2]|0;
         $40 = ($39|0)==($15|0);
         if ($40) {
          $__nd$0$i$i$i$lcssa12 = $__nd$0$i$i$i;
          break;
         } else {
          $$pn$i$i$i = $__nd$0$i$i$i;
         }
        }
        HEAP32[$0>>2] = $__nd$0$i$i$i$lcssa12;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
        __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS2_PvEEEE($1,$14,$$byval_copy);
       }
      }
     } while(0);
    }
    __THREW__ = 0;
    invoke_viii(204,($2|0),($entry|0),($expr|0));
    $57 = __THREW__; __THREW__ = 0;
    $58 = $57&1;
    if (!($58)) {
     $59 = ((($expr)) + 8|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      STACKTOP = sp;return;
     }
     $62 = ((($expr)) + 12|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($63|0)==($60|0);
     if ($64) {
      $72 = $60;
     } else {
      $66 = $63;
      while(1) {
       $65 = ((($66)) + -16|0);
       HEAP32[$62>>2] = $65;
       $67 = ((($66)) + -12|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ($68|0)==(0|0);
       if ($69) {
        $71 = $65;
       } else {
        __ZNSt3__119__shared_weak_count16__release_sharedEv($68);
        $$pre$i$i$i$i3 = HEAP32[$62>>2]|0;
        $71 = $$pre$i$i$i$i3;
       }
       $70 = ($71|0)==($60|0);
       if ($70) {
        break;
       } else {
        $66 = $71;
       }
      }
      $$pre$i$i5 = HEAP32[$59>>2]|0;
      $72 = $$pre$i$i5;
     }
     __ZdlPv($72);
     STACKTOP = sp;return;
    }
   }
  }
 }
 $41 = ___cxa_find_matching_catch()|0;
 $42 = tempRet0;
 $43 = ((($expr)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0|0);
 if ($45) {
  ___resumeException($41|0);
  // unreachable;
 }
 $46 = ((($expr)) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)==($44|0);
 if ($48) {
  $56 = $44;
 } else {
  $50 = $47;
  while(1) {
   $49 = ((($50)) + -16|0);
   HEAP32[$46>>2] = $49;
   $51 = ((($50)) + -12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)==(0|0);
   if ($53) {
    $55 = $49;
   } else {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($52);
    $$pre$i$i$i$i = HEAP32[$46>>2]|0;
    $55 = $$pre$i$i$i$i;
   }
   $54 = ($55|0)==($44|0);
   if ($54) {
    break;
   } else {
    $50 = $55;
   }
  }
  $$pre$i$i = HEAP32[$43>>2]|0;
  $56 = $$pre$i$i;
 }
 __ZdlPv($56);
 ___resumeException($41|0);
 // unreachable;
}
function __ZN4rhea14simplex_solver7resolveEv($this) {
 $this = $this|0;
 var $$01$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__i$01$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4rhea14simplex_solver13dual_optimizeEv($this);
 __ZN4rhea14simplex_solver22set_external_variablesEv($this);
 $0 = ((($this)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = ((($this)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $$01$i$i$i = $4;
   while(1) {
    $6 = HEAP32[$$01$i$i$i>>2]|0;
    $7 = ((($$01$i$i$i)) + 12|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0|0);
    if (!($9)) {
     __ZNSt3__119__shared_weak_count16__release_sharedEv($8);
    }
    __ZdlPv($$01$i$i$i);
    $10 = ($6|0)==(0|0);
    if ($10) {
     break;
    } else {
     $$01$i$i$i = $6;
    }
   }
  }
  HEAP32[$3>>2] = 0;
  $11 = ((($this)) + 56|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if (!($13)) {
   $14 = ((($this)) + 52|0);
   $__i$01$i$i = 0;
   while(1) {
    $15 = HEAP32[$14>>2]|0;
    $16 = (($15) + ($__i$01$i$i<<2)|0);
    HEAP32[$16>>2] = 0;
    $17 = (($__i$01$i$i) + 1)|0;
    $exitcond$i$i = ($17|0)==($12|0);
    if ($exitcond$i$i) {
     break;
    } else {
     $__i$01$i$i = $17;
    }
   }
  }
  HEAP32[$0>>2] = 0;
 }
 $18 = ((($this)) + 264|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 if ($20) {
  return;
 }
 __ZN4rhea14simplex_solver20reset_stay_constantsEv($this);
 return;
}
function __ZN4rhea14simplex_solver13dual_optimizeEv($this) {
 $this = $this|0;
 var $$$i = 0, $$0131 = 0, $$0330 = 0, $$12 = 0, $$14 = 0, $$2 = 0, $$25 = 0, $$byval_copy = 0, $$neg2$i$i$i$i$i = 0, $$ph$i = 0, $$ph$i21 = 0, $$pn$i$i$i = 0, $$pn$i$i$i$i = 0, $$pn$i$i$i15 = 0, $$pn$us$i$i$i = 0, $$pn$us$i$i$i$i = 0, $$pn$us$i$i$i10 = 0, $$sum$i$i$i$i$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__len$0$be$i$i$i$i$i = 0, $__len$03$i$i$i$i$i = 0, $__nd$0$i$i$i = 0, $__nd$0$i$i$i$i = 0, $__nd$0$i$i$i17 = 0, $__nd$0$us$i$i$i = 0, $__nd$0$us$i$i$i$i = 0, $__nd$0$us$i$i$i12 = 0, $entry_var = 0, $exit_var = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $ratio$056 = 0.0, $ratio$1 = 0.0, $ratio$1$lcssa = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 44|0;
 $0 = sp + 40|0;
 $exit_var = sp + 32|0;
 $1 = sp + 24|0;
 $entry_var = sp + 16|0;
 $2 = sp;
 $3 = ((($this)) + 244|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($this)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $37 = (___cxa_allocate_exception(4)|0);
  HEAP32[$37>>2] = (280);
  ___cxa_throw(($37|0),(296|0),(27|0));
  // unreachable;
 }
 $10 = (($8) + -1)|0;
 $11 = $10 & $8;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = $10 & $6;
  $18 = $13;
 } else {
  $14 = (($6>>>0) % ($8>>>0))&-1;
  $18 = $14;
 }
 $15 = ((($this)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($18<<2)|0);
 $19 = HEAP32[$17>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $37 = (___cxa_allocate_exception(4)|0);
  HEAP32[$37>>2] = (280);
  ___cxa_throw(($37|0),(296|0),(27|0));
  // unreachable;
 }
 L11: do {
  if ($12) {
   $$pn$us$i$i$i = $19;
   while(1) {
    $__nd$0$us$i$i$i = HEAP32[$$pn$us$i$i$i>>2]|0;
    $21 = ($__nd$0$us$i$i$i|0)==(0|0);
    if ($21) {
     label = 13;
     break;
    }
    $22 = ((($__nd$0$us$i$i$i)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $23 & $10;
    $25 = ($24|0)==($18|0);
    if (!($25)) {
     label = 13;
     break;
    }
    $26 = ((($__nd$0$us$i$i$i)) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==($4|0);
    if ($28) {
     $$ph$i = $__nd$0$us$i$i$i;
     break L11;
    } else {
     $$pn$us$i$i$i = $__nd$0$us$i$i$i;
    }
   }
   if ((label|0) == 13) {
    $37 = (___cxa_allocate_exception(4)|0);
    HEAP32[$37>>2] = (280);
    ___cxa_throw(($37|0),(296|0),(27|0));
    // unreachable;
   }
  } else {
   $$pn$i$i$i = $19;
   while(1) {
    $__nd$0$i$i$i = HEAP32[$$pn$i$i$i>>2]|0;
    $29 = ($__nd$0$i$i$i|0)==(0|0);
    if ($29) {
     label = 13;
     break;
    }
    $30 = ((($__nd$0$i$i$i)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31>>>0) % ($8>>>0))&-1;
    $33 = ($32|0)==($18|0);
    if (!($33)) {
     label = 13;
     break;
    }
    $34 = ((($__nd$0$i$i$i)) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)==($4|0);
    if ($36) {
     $$ph$i = $__nd$0$i$i$i;
     break L11;
    } else {
     $$pn$i$i$i = $__nd$0$i$i$i;
    }
   }
   if ((label|0) == 13) {
    $37 = (___cxa_allocate_exception(4)|0);
    HEAP32[$37>>2] = (280);
    ___cxa_throw(($37|0),(296|0),(27|0));
    // unreachable;
   }
  }
 } while(0);
 $38 = ((($this)) + 64|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0);
 if ($40) {
  STACKTOP = sp;return;
 }
 $41 = ((($this)) + 60|0);
 $42 = ((($exit_var)) + 4|0);
 $43 = ((($this)) + 52|0);
 $44 = ((($entry_var)) + 4|0);
 $45 = ((($$ph$i)) + 24|0);
 $46 = ((($$ph$i)) + 28|0);
 L30: while(1) {
  $47 = HEAP32[$41>>2]|0;
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  HEAP32[$exit_var>>2] = $49;
  $50 = ((($47)) + 12|0);
  $51 = HEAP32[$50>>2]|0;
  HEAP32[$42>>2] = $51;
  $52 = ($51|0)==(0|0);
  if (!($52)) {
   __ZNSt3__119__shared_weak_count12__add_sharedEv($51);
  }
  HEAP32[$0>>2] = $47;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
  __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS2_PvEEEE($1,$43,$$byval_copy);
  $53 = HEAP32[$exit_var>>2]|0;
  $54 = ((($53)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$7>>2]|0;
  $57 = ($56|0)==(0);
  L35: do {
   if (!($57)) {
    $58 = (($56) + -1)|0;
    $59 = $58 & $56;
    $60 = ($59|0)==(0);
    if ($60) {
     $61 = $58 & $55;
     $65 = $61;
    } else {
     $62 = (($55>>>0) % ($56>>>0))&-1;
     $65 = $62;
    }
    $63 = HEAP32[$15>>2]|0;
    $64 = (($63) + ($65<<2)|0);
    $66 = HEAP32[$64>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     if ($60) {
      $$pn$us$i$i$i$i = $66;
      while(1) {
       $__nd$0$us$i$i$i$i = HEAP32[$$pn$us$i$i$i$i>>2]|0;
       $68 = ($__nd$0$us$i$i$i$i|0)==(0|0);
       if ($68) {
        break L35;
       }
       $69 = ((($__nd$0$us$i$i$i$i)) + 4|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = $70 & $58;
       $72 = ($71|0)==($65|0);
       if (!($72)) {
        break L35;
       }
       $73 = ((($__nd$0$us$i$i$i$i)) + 8|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = ($74|0)==($53|0);
       if ($75) {
        break;
       } else {
        $$pn$us$i$i$i$i = $__nd$0$us$i$i$i$i;
       }
      }
     } else {
      $$pn$i$i$i$i = $66;
      while(1) {
       $__nd$0$i$i$i$i = HEAP32[$$pn$i$i$i$i>>2]|0;
       $76 = ($__nd$0$i$i$i$i|0)==(0|0);
       if ($76) {
        break L35;
       }
       $77 = ((($__nd$0$i$i$i$i)) + 4|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = (($78>>>0) % ($56>>>0))&-1;
       $80 = ($79|0)==($65|0);
       if (!($80)) {
        break L35;
       }
       $81 = ((($__nd$0$i$i$i$i)) + 8|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = ($82|0)==($53|0);
       if ($83) {
        break;
       } else {
        $$pn$i$i$i$i = $__nd$0$i$i$i$i;
       }
      }
     }
     if ($60) {
      $84 = $58 & $55;
      $87 = $84;
     } else {
      $85 = (($55>>>0) % ($56>>>0))&-1;
      $87 = $85;
     }
     $86 = (($63) + ($87<<2)|0);
     $88 = HEAP32[$86>>2]|0;
     $89 = ($88|0)==(0|0);
     if ($89) {
      label = 41;
      break L30;
     }
     if ($60) {
      $$pn$us$i$i$i10 = $88;
      while(1) {
       $__nd$0$us$i$i$i12 = HEAP32[$$pn$us$i$i$i10>>2]|0;
       $90 = ($__nd$0$us$i$i$i12|0)==(0|0);
       if ($90) {
        label = 41;
        break L30;
       }
       $91 = ((($__nd$0$us$i$i$i12)) + 4|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = $92 & $58;
       $94 = ($93|0)==($87|0);
       if (!($94)) {
        label = 41;
        break L30;
       }
       $95 = ((($__nd$0$us$i$i$i12)) + 8|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = ($96|0)==($53|0);
       if ($97) {
        $$ph$i21 = $__nd$0$us$i$i$i12;
        break;
       } else {
        $$pn$us$i$i$i10 = $__nd$0$us$i$i$i12;
       }
      }
     } else {
      $$pn$i$i$i15 = $88;
      while(1) {
       $__nd$0$i$i$i17 = HEAP32[$$pn$i$i$i15>>2]|0;
       $98 = ($__nd$0$i$i$i17|0)==(0|0);
       if ($98) {
        label = 41;
        break L30;
       }
       $99 = ((($__nd$0$i$i$i17)) + 4|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = (($100>>>0) % ($56>>>0))&-1;
       $102 = ($101|0)==($87|0);
       if (!($102)) {
        label = 41;
        break L30;
       }
       $103 = ((($__nd$0$i$i$i17)) + 8|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = ($104|0)==($53|0);
       if ($105) {
        $$ph$i21 = $__nd$0$i$i$i17;
        break;
       } else {
        $$pn$i$i$i15 = $__nd$0$i$i$i17;
       }
      }
     }
     $110 = ((($$ph$i21)) + 16|0);
     $111 = +HEAPF64[$110>>3];
     $112 = !($111 >= 0.0);
     if ($112) {
      HEAP32[$entry_var>>2] = 0;
      HEAP32[$44>>2] = 0;
      $113 = ((($$ph$i21)) + 24|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = ((($$ph$i21)) + 28|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($114|0)==($116|0);
      if ($117) {
       label = 65;
       break L30;
      } else {
       $119 = $114;$ratio$056 = 1.7976931348623157E+308;
      }
      while(1) {
       $118 = ((($119)) + 8|0);
       $120 = +HEAPF64[$118>>3];
       $121 = $120 > 0.0;
       do {
        if ($121) {
         $122 = HEAP32[$119>>2]|0;
         $123 = HEAP32[$122>>2]|0;
         $124 = ((($123)) + 24|0);
         $125 = HEAP32[$124>>2]|0;
         __THREW__ = 0;
         $126 = (invoke_ii($125|0,($122|0))|0);
         $127 = __THREW__; __THREW__ = 0;
         $128 = $127&1;
         if ($128) {
          label = 60;
          break L30;
         }
         if (!($126)) {
          $ratio$1 = $ratio$056;
          break;
         }
         $129 = HEAP32[$45>>2]|0;
         $130 = HEAP32[$46>>2]|0;
         $131 = $130;
         $132 = $129;
         $133 = (($131) - ($132))|0;
         $134 = $133 >> 4;
         $135 = ($134|0)==(0);
         if ($135) {
          $150 = $129;
         } else {
          $136 = HEAP32[$119>>2]|0;
          $137 = ((($136)) + 4|0);
          $138 = HEAP32[$137>>2]|0;
          $141 = $129;$__len$03$i$i$i$i$i = $134;
          while(1) {
           $139 = (($__len$03$i$i$i$i$i|0) / 2)&-1;
           $140 = (($141) + ($139<<4)|0);
           $142 = HEAP32[$140>>2]|0;
           $143 = ((($142)) + 4|0);
           $144 = HEAP32[$143>>2]|0;
           $145 = ($144>>>0)<($138>>>0);
           if ($145) {
            $$sum$i$i$i$i$i = (($139) + 1)|0;
            $146 = (($141) + ($$sum$i$i$i$i$i<<4)|0);
            $$neg2$i$i$i$i$i = (($__len$03$i$i$i$i$i) + -1)|0;
            $147 = (($$neg2$i$i$i$i$i) - ($139))|0;
            $202 = $146;$__len$0$be$i$i$i$i$i = $147;
           } else {
            $202 = $141;$__len$0$be$i$i$i$i$i = $139;
           }
           $148 = ($__len$0$be$i$i$i$i$i|0)==(0);
           if ($148) {
            $150 = $202;
            break;
           } else {
            $141 = $202;$__len$03$i$i$i$i$i = $__len$0$be$i$i$i$i$i;
           }
          }
         }
         $149 = ($150|0)==($130|0);
         do {
          if ($149) {
           $162 = 0.0;
          } else {
           $151 = HEAP32[$119>>2]|0;
           $152 = ((($151)) + 4|0);
           $153 = HEAP32[$152>>2]|0;
           $154 = HEAP32[$150>>2]|0;
           $155 = ((($154)) + 4|0);
           $156 = HEAP32[$155>>2]|0;
           $157 = ($153>>>0)<($156>>>0);
           $$$i = $157 ? $130 : $150;
           $158 = ($$$i|0)==($130|0);
           if ($158) {
            $162 = 0.0;
            break;
           }
           $159 = ((($$$i)) + 8|0);
           $160 = +HEAPF64[$159>>3];
           $162 = $160;
          }
         } while(0);
         $161 = $162 / $120;
         $163 = $161 < $ratio$056;
         if (!($163)) {
          $ratio$1 = $ratio$056;
          break;
         }
         $164 = HEAP32[$119>>2]|0;
         $165 = ((($119)) + 4|0);
         $166 = HEAP32[$165>>2]|0;
         $167 = ($166|0)==(0|0);
         if (!($167)) {
          __ZNSt3__119__shared_weak_count12__add_sharedEv($166);
         }
         HEAP32[$entry_var>>2] = $164;
         $168 = HEAP32[$44>>2]|0;
         HEAP32[$44>>2] = $166;
         $169 = ($168|0)==(0|0);
         if ($169) {
          $ratio$1 = $161;
          break;
         }
         __ZNSt3__119__shared_weak_count16__release_sharedEv($168);
         $ratio$1 = $161;
        } else {
         $ratio$1 = $ratio$056;
        }
       } while(0);
       $174 = ((($119)) + 16|0);
       $175 = ($174|0)==($116|0);
       if ($175) {
        $ratio$1$lcssa = $ratio$1;
        break;
       } else {
        $119 = $174;$ratio$056 = $ratio$1;
       }
      }
      $176 = $ratio$1$lcssa == 1.7976931348623157E+308;
      if ($176) {
       label = 65;
       break L30;
      }
      __THREW__ = 0;
      invoke_viii(207,($this|0),($entry_var|0),($exit_var|0));
      $190 = __THREW__; __THREW__ = 0;
      $191 = $190&1;
      if ($191) {
       label = 61;
       break L30;
      }
      $192 = HEAP32[$44>>2]|0;
      $193 = ($192|0)==(0|0);
      if (!($193)) {
       __ZNSt3__119__shared_weak_count16__release_sharedEv($192);
      }
     }
    }
   }
  } while(0);
  $194 = HEAP32[$42>>2]|0;
  $195 = ($194|0)==(0|0);
  if (!($195)) {
   __ZNSt3__119__shared_weak_count16__release_sharedEv($194);
  }
  $196 = HEAP32[$38>>2]|0;
  $197 = ($196|0)==(0);
  if ($197) {
   label = 82;
   break;
  }
 }
 L100: do {
  if ((label|0) == 41) {
   $106 = (___cxa_allocate_exception(4)|0);
   HEAP32[$106>>2] = (280);
   __THREW__ = 0;
   invoke_viii(182,($106|0),(296|0),(27|0));
   $107 = __THREW__; __THREW__ = 0;
   $108 = ___cxa_find_matching_catch()|0;
   $109 = tempRet0;
   $$2 = $108;$$25 = $109;
  }
  else if ((label|0) == 60) {
   $170 = ___cxa_find_matching_catch()|0;
   $171 = tempRet0;
   $lpad$phi$index = $170;$lpad$phi$index2 = $171;
   label = 62;
  }
  else if ((label|0) == 61) {
   $172 = ___cxa_find_matching_catch()|0;
   $173 = tempRet0;
   $lpad$phi$index = $172;$lpad$phi$index2 = $173;
   label = 62;
  }
  else if ((label|0) == 65) {
   $177 = (___cxa_allocate_exception(16)|0);
   __THREW__ = 0;
   invoke_viii(213,($2|0),(640|0),29);
   $178 = __THREW__; __THREW__ = 0;
   $179 = $178&1;
   do {
    if ($179) {
     $188 = ___cxa_find_matching_catch()|0;
     $189 = tempRet0;
     $$0131 = $188;$$0330 = $189;
    } else {
     HEAP32[$177>>2] = (680);
     $180 = ((($177)) + 4|0);
     __THREW__ = 0;
     invoke_vii(214,($180|0),($2|0));
     $181 = __THREW__; __THREW__ = 0;
     $182 = $181&1;
     if ($182) {
      $183 = ___cxa_find_matching_catch()|0;
      $184 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
      $$0131 = $183;$$0330 = $184;
      break;
     } else {
      __THREW__ = 0;
      invoke_viii(182,($177|0),(696|0),(54|0));
      $185 = __THREW__; __THREW__ = 0;
      $186 = ___cxa_find_matching_catch()|0;
      $187 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
      $$12 = $186;$$14 = $187;
      label = 77;
      break L100;
     }
    }
   } while(0);
   ___cxa_free_exception(($177|0));
   $$12 = $$0131;$$14 = $$0330;
   label = 77;
  }
  else if ((label|0) == 82) {
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 62) {
  $$12 = $lpad$phi$index;$$14 = $lpad$phi$index2;
  label = 77;
 }
 if ((label|0) == 77) {
  $198 = HEAP32[$44>>2]|0;
  $199 = ($198|0)==(0|0);
  if ($199) {
   $$2 = $$12;$$25 = $$14;
  } else {
   __ZNSt3__119__shared_weak_count16__release_sharedEv($198);
   $$2 = $$12;$$25 = $$14;
  }
 }
 $200 = HEAP32[$42>>2]|0;
 $201 = ($200|0)==(0|0);
 if ($201) {
  ___resumeException($$2|0);
  // unreachable;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv($200);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZN4rhea14simplex_solver22set_external_variablesEv($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $$ph$i = 0, $$pn$i$i$i = 0, $$pn$i$i$i$i = 0, $$pn$us$i$i$i = 0, $$pn$us$i$i$i$i = 0, $$pre = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__nd$0$i$i$i = 0, $__nd$0$i$i$i$i = 0, $__nd$0$us$i$i$i = 0, $__nd$0$us$i$i$i$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $v = 0, $v4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp + 8|0;
 $v4 = sp;
 $0 = ((($this)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 L1: do {
  if (!($2)) {
   $3 = ((($v)) + 4|0);
   $4 = ((($this)) + 36|0);
   $5 = ((($this)) + 152|0);
   $6 = ((($this)) + 32|0);
   $8 = $1;
   while(1) {
    $7 = ((($8)) + 8|0);
    $9 = HEAP32[$7>>2]|0;
    HEAP32[$v>>2] = $9;
    $10 = ((($8)) + 12|0);
    $11 = HEAP32[$10>>2]|0;
    HEAP32[$3>>2] = $11;
    $12 = ($11|0)==(0|0);
    if ($12) {
     $14 = $9;
    } else {
     __ZNSt3__119__shared_weak_count12__add_sharedEv($11);
     $$pre35 = HEAP32[$v>>2]|0;
     $14 = $$pre35;
    }
    $13 = ((($14)) + 4|0);
    $15 = HEAP32[$13>>2]|0;
    $16 = HEAP32[$4>>2]|0;
    $17 = ($16|0)==(0);
    L8: do {
     if ($17) {
      label = 19;
     } else {
      $18 = (($16) + -1)|0;
      $19 = $18 & $16;
      $20 = ($19|0)==(0);
      if ($20) {
       $21 = $18 & $15;
       $25 = $21;
      } else {
       $22 = (($15>>>0) % ($16>>>0))&-1;
       $25 = $22;
      }
      $23 = HEAP32[$6>>2]|0;
      $24 = (($23) + ($25<<2)|0);
      $26 = HEAP32[$24>>2]|0;
      $27 = ($26|0)==(0|0);
      if ($27) {
       label = 19;
      } else {
       if ($20) {
        $$pn$us$i$i$i$i = $26;
        while(1) {
         $__nd$0$us$i$i$i$i = HEAP32[$$pn$us$i$i$i$i>>2]|0;
         $28 = ($__nd$0$us$i$i$i$i|0)==(0|0);
         if ($28) {
          label = 19;
          break L8;
         }
         $29 = ((($__nd$0$us$i$i$i$i)) + 4|0);
         $30 = HEAP32[$29>>2]|0;
         $31 = $30 & $18;
         $32 = ($31|0)==($25|0);
         if (!($32)) {
          label = 19;
          break L8;
         }
         $33 = ((($__nd$0$us$i$i$i$i)) + 8|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = ($34|0)==($14|0);
         if ($35) {
          break;
         } else {
          $$pn$us$i$i$i$i = $__nd$0$us$i$i$i$i;
         }
        }
       } else {
        $$pn$i$i$i$i = $26;
        while(1) {
         $__nd$0$i$i$i$i = HEAP32[$$pn$i$i$i$i>>2]|0;
         $36 = ($__nd$0$i$i$i$i|0)==(0|0);
         if ($36) {
          label = 19;
          break L8;
         }
         $37 = ((($__nd$0$i$i$i$i)) + 4|0);
         $38 = HEAP32[$37>>2]|0;
         $39 = (($38>>>0) % ($16>>>0))&-1;
         $40 = ($39|0)==($25|0);
         if (!($40)) {
          label = 19;
          break L8;
         }
         $41 = ((($__nd$0$i$i$i$i)) + 8|0);
         $42 = HEAP32[$41>>2]|0;
         $43 = ($42|0)==($14|0);
         if ($43) {
          break;
         } else {
          $$pn$i$i$i$i = $__nd$0$i$i$i$i;
         }
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     $48 = HEAP32[$14>>2]|0;
     $49 = ((($48)) + 32|0);
     $50 = HEAP32[$49>>2]|0;
     __THREW__ = 0;
     $51 = (+invoke_di($50|0,($14|0)));
     $52 = __THREW__; __THREW__ = 0;
     $53 = $52&1;
     if ($53) {
      break;
     }
     $54 = $51 != 0.0;
     if ($54) {
      $55 = HEAP32[$v>>2]|0;
      $56 = HEAP32[$55>>2]|0;
      $57 = ((($56)) + 44|0);
      $58 = HEAP32[$57>>2]|0;
      __THREW__ = 0;
      invoke_vid($58|0,($55|0),0.0);
      $59 = __THREW__; __THREW__ = 0;
      $60 = $59&1;
      if ($60) {
       break;
      }
      $61 = HEAP32[$5>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $63 = HEAP32[$61>>2]|0;
       $64 = ((($63)) + 24|0);
       $65 = HEAP32[$64>>2]|0;
       __THREW__ = 0;
       invoke_viii($65|0,($61|0),($v|0),($this|0));
       $66 = __THREW__; __THREW__ = 0;
       $67 = $66&1;
       if ($67) {
        break;
       }
      }
     }
    }
    $68 = HEAP32[$3>>2]|0;
    $69 = ($68|0)==(0|0);
    if (!($69)) {
     __ZNSt3__119__shared_weak_count16__release_sharedEv($68);
    }
    $70 = HEAP32[$8>>2]|0;
    $71 = ($70|0)==(0|0);
    if ($71) {
     break L1;
    } else {
     $8 = $70;
    }
   }
   $44 = ___cxa_find_matching_catch()|0;
   $45 = tempRet0;
   $46 = HEAP32[$3>>2]|0;
   $47 = ($46|0)==(0|0);
   if ($47) {
    $$0 = $44;$$01 = $45;
    ___resumeException($$0|0);
    // unreachable;
   }
   __ZNSt3__119__shared_weak_count16__release_sharedEv($46);
   $$0 = $44;$$01 = $45;
   ___resumeException($$0|0);
   // unreachable;
  }
 } while(0);
 $72 = ((($this)) + 80|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)==(0|0);
 if ($74) {
  $150 = ((($this)) + 265|0);
  HEAP8[$150>>0] = 0;
  STACKTOP = sp;return;
 }
 $75 = ((($v4)) + 4|0);
 $76 = ((($this)) + 36|0);
 $77 = ((($this)) + 32|0);
 $78 = ((($this)) + 152|0);
 $80 = $73;
 L43: while(1) {
  $79 = ((($80)) + 8|0);
  $81 = HEAP32[$79>>2]|0;
  HEAP32[$v4>>2] = $81;
  $82 = ((($80)) + 12|0);
  $83 = HEAP32[$82>>2]|0;
  HEAP32[$75>>2] = $83;
  $84 = ($83|0)==(0|0);
  if ($84) {
   $86 = $81;
  } else {
   __ZNSt3__119__shared_weak_count12__add_sharedEv($83);
   $$pre = HEAP32[$v4>>2]|0;
   $86 = $$pre;
  }
  $85 = ((($86)) + 4|0);
  $87 = HEAP32[$85>>2]|0;
  $88 = HEAP32[$76>>2]|0;
  $89 = ($88|0)==(0);
  if ($89) {
   label = 43;
   break;
  }
  $90 = (($88) + -1)|0;
  $91 = $90 & $88;
  $92 = ($91|0)==(0);
  if ($92) {
   $93 = $90 & $87;
   $97 = $93;
  } else {
   $94 = (($87>>>0) % ($88>>>0))&-1;
   $97 = $94;
  }
  $95 = HEAP32[$77>>2]|0;
  $96 = (($95) + ($97<<2)|0);
  $98 = HEAP32[$96>>2]|0;
  $99 = ($98|0)==(0|0);
  if ($99) {
   label = 43;
   break;
  }
  if ($92) {
   $$pn$us$i$i$i = $98;
   while(1) {
    $__nd$0$us$i$i$i = HEAP32[$$pn$us$i$i$i>>2]|0;
    $100 = ($__nd$0$us$i$i$i|0)==(0|0);
    if ($100) {
     label = 43;
     break L43;
    }
    $101 = ((($__nd$0$us$i$i$i)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & $90;
    $104 = ($103|0)==($97|0);
    if (!($104)) {
     label = 43;
     break L43;
    }
    $105 = ((($__nd$0$us$i$i$i)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ($106|0)==($86|0);
    if ($107) {
     $$ph$i = $__nd$0$us$i$i$i;
     break;
    } else {
     $$pn$us$i$i$i = $__nd$0$us$i$i$i;
    }
   }
  } else {
   $$pn$i$i$i = $98;
   while(1) {
    $__nd$0$i$i$i = HEAP32[$$pn$i$i$i>>2]|0;
    $108 = ($__nd$0$i$i$i|0)==(0|0);
    if ($108) {
     label = 43;
     break L43;
    }
    $109 = ((($__nd$0$i$i$i)) + 4|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (($110>>>0) % ($88>>>0))&-1;
    $112 = ($111|0)==($97|0);
    if (!($112)) {
     label = 43;
     break L43;
    }
    $113 = ((($__nd$0$i$i$i)) + 8|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ($114|0)==($86|0);
    if ($115) {
     $$ph$i = $__nd$0$i$i$i;
     break;
    } else {
     $$pn$i$i$i = $__nd$0$i$i$i;
    }
   }
  }
  $120 = ((($$ph$i)) + 16|0);
  $121 = +HEAPF64[$120>>3];
  $122 = HEAP32[$86>>2]|0;
  $123 = ((($122)) + 32|0);
  $124 = HEAP32[$123>>2]|0;
  __THREW__ = 0;
  $125 = (+invoke_di($124|0,($86|0)));
  $126 = __THREW__; __THREW__ = 0;
  $127 = $126&1;
  if ($127) {
   label = 52;
   break;
  }
  $128 = $125 != $121;
  if ($128) {
   $129 = HEAP32[$v4>>2]|0;
   $130 = HEAP32[$129>>2]|0;
   $131 = ((($130)) + 44|0);
   $132 = HEAP32[$131>>2]|0;
   __THREW__ = 0;
   invoke_vid($132|0,($129|0),(+$121));
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   if ($134) {
    label = 52;
    break;
   }
   $135 = HEAP32[$78>>2]|0;
   $136 = ($135|0)==(0|0);
   if (!($136)) {
    $137 = HEAP32[$135>>2]|0;
    $138 = ((($137)) + 24|0);
    $139 = HEAP32[$138>>2]|0;
    __THREW__ = 0;
    invoke_viii($139|0,($135|0),($v4|0),($this|0));
    $140 = __THREW__; __THREW__ = 0;
    $141 = $140&1;
    if ($141) {
     label = 52;
     break;
    }
   }
  }
  $142 = HEAP32[$75>>2]|0;
  $143 = ($142|0)==(0|0);
  if (!($143)) {
   __ZNSt3__119__shared_weak_count16__release_sharedEv($142);
  }
  $144 = HEAP32[$80>>2]|0;
  $145 = ($144|0)==(0|0);
  if ($145) {
   label = 55;
   break;
  } else {
   $80 = $144;
  }
 }
 if ((label|0) == 43) {
  $116 = (___cxa_allocate_exception(4)|0);
  HEAP32[$116>>2] = (280);
  __THREW__ = 0;
  invoke_viii(182,($116|0),(296|0),(27|0));
  $117 = __THREW__; __THREW__ = 0;
  $118 = ___cxa_find_matching_catch()|0;
  $119 = tempRet0;
  $lpad$phi$index = $118;$lpad$phi$index2 = $119;
 }
 else if ((label|0) == 52) {
  $146 = ___cxa_find_matching_catch()|0;
  $147 = tempRet0;
  $lpad$phi$index = $146;$lpad$phi$index2 = $147;
 }
 else if ((label|0) == 55) {
  $150 = ((($this)) + 265|0);
  HEAP8[$150>>0] = 0;
  STACKTOP = sp;return;
 }
 $148 = HEAP32[$75>>2]|0;
 $149 = ($148|0)==(0|0);
 if ($149) {
  $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
  ___resumeException($$0|0);
  // unreachable;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv($148);
 $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZN4rhea14simplex_solver13suggest_valueERKNS_8variableEd($this,$v,$x) {
 $this = $this|0;
 $v = $v|0;
 $x = +$x;
 var $$in$be = 0, $$in20 = 0, $$lcssa28 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 252|0);
 $1 = ((($this)) + 256|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)==($2|0);
 L1: do {
  if (!($3)) {
   $4 = HEAP32[$v>>2]|0;
   $6 = $0;
   while(1) {
    $5 = HEAP32[$6>>2]|0;
    $7 = ((($5)) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==($4|0);
    if ($9) {
     $$lcssa28 = $6;
     break;
    }
    $10 = ($5|0)==($2|0);
    if ($10) {
     break L1;
    } else {
     $6 = $5;
    }
   }
   $11 = ($$lcssa28|0)==($2|0);
   if (!($11)) {
    $$in20 = $$lcssa28;
    L8: while(1) {
     $14 = HEAP32[$$in20>>2]|0;
     $15 = ((($14)) + 48|0);
     $16 = +HEAPF64[$15>>3];
     $17 = $x - $16;
     HEAPF64[$15>>3] = $x;
     $18 = ((($14)) + 28|0);
     $19 = ((($14)) + 36|0);
     __ZN4rhea14simplex_solver19delta_edit_constantEdRKNS_8variableES3_($this,$17,$18,$19);
     $20 = HEAP32[$$in20>>2]|0;
     $21 = HEAP32[$1>>2]|0;
     $22 = ($20|0)==($21|0);
     L10: do {
      if ($22) {
       $$in$be = $20;
      } else {
       $24 = HEAP32[$v>>2]|0;
       $26 = $20;
       while(1) {
        $25 = HEAP32[$26>>2]|0;
        $27 = ((($25)) + 8|0);
        $28 = HEAP32[$27>>2]|0;
        $29 = ($28|0)==($24|0);
        if ($29) {
         $$in$be = $26;
         break L10;
        }
        $30 = ($25|0)==($21|0);
        if ($30) {
         label = 13;
         break L8;
        } else {
         $26 = $25;
        }
       }
      }
     } while(0);
     $23 = ($$in$be|0)==($21|0);
     if ($23) {
      label = 13;
      break;
     } else {
      $$in20 = $$in$be;
     }
    }
    if ((label|0) == 13) {
     return ($this|0);
    }
   }
  }
 } while(0);
 $12 = (___cxa_allocate_exception(8)|0);
 HEAP32[$12>>2] = (2328);
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = $v;
 ___cxa_throw(($12|0),(528|0),(27|0));
 // unreachable;
 return (0)|0;
}
function __ZN4rhea14simplex_solver19delta_edit_constantEdRKNS_8variableES3_($this,$delta,$plus,$minus) {
 $this = $this|0;
 $delta = +$delta;
 $plus = $plus|0;
 $minus = $minus|0;
 var $$$i = 0, $$neg2$i$i$i$i$i = 0, $$ph = 0, $$ph$i = 0, $$ph$i27 = 0, $$ph$i42 = 0, $$pn$i$i$i = 0, $$pn$i$i$i$i = 0, $$pn$i$i$i$i8 = 0, $$pn$i$i$i21 = 0, $$pn$i$i$i36 = 0, $$pn$us$i$i$i = 0, $$pn$us$i$i$i$i = 0, $$pn$us$i$i$i$i3 = 0, $$pn$us$i$i$i16 = 0, $$pn$us$i$i$i31 = 0, $$sum$i$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__len$0$be$i$i$i$i$i = 0, $__len$03$i$i$i$i$i = 0, $__nd$0$i$i$i = 0, $__nd$0$i$i$i$i = 0, $__nd$0$i$i$i$i10 = 0, $__nd$0$i$i$i23 = 0, $__nd$0$i$i$i38 = 0, $__nd$0$us$i$i$i = 0, $__nd$0$us$i$i$i$i = 0, $__nd$0$us$i$i$i$i5 = 0, $__nd$0$us$i$i$i18 = 0, $__nd$0$us$i$i$i33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $1 = sp + 8|0;
 $2 = sp;
 $3 = HEAP32[$plus>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   $$ph = $minus;
  } else {
   $9 = (($7) + -1)|0;
   $10 = $9 & $7;
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = $9 & $5;
    $17 = $12;
   } else {
    $13 = (($5>>>0) % ($7>>>0))&-1;
    $17 = $13;
   }
   $14 = ((($this)) + 32|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15) + ($17<<2)|0);
   $18 = HEAP32[$16>>2]|0;
   $19 = ($18|0)==(0|0);
   L8: do {
    if (!($19)) {
     if ($11) {
      $$pn$us$i$i$i$i = $18;
      while(1) {
       $__nd$0$us$i$i$i$i = HEAP32[$$pn$us$i$i$i$i>>2]|0;
       $20 = ($__nd$0$us$i$i$i$i|0)==(0|0);
       if ($20) {
        break L8;
       }
       $21 = ((($__nd$0$us$i$i$i$i)) + 4|0);
       $22 = HEAP32[$21>>2]|0;
       $23 = $22 & $9;
       $24 = ($23|0)==($17|0);
       if (!($24)) {
        break L8;
       }
       $25 = ((($__nd$0$us$i$i$i$i)) + 8|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==($3|0);
       if ($27) {
        break;
       } else {
        $$pn$us$i$i$i$i = $__nd$0$us$i$i$i$i;
       }
      }
     } else {
      $$pn$i$i$i$i = $18;
      while(1) {
       $__nd$0$i$i$i$i = HEAP32[$$pn$i$i$i$i>>2]|0;
       $28 = ($__nd$0$i$i$i$i|0)==(0|0);
       if ($28) {
        break L8;
       }
       $29 = ((($__nd$0$i$i$i$i)) + 4|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = (($30>>>0) % ($7>>>0))&-1;
       $32 = ($31|0)==($17|0);
       if (!($32)) {
        break L8;
       }
       $33 = ((($__nd$0$i$i$i$i)) + 8|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = ($34|0)==($3|0);
       if ($35) {
        break;
       } else {
        $$pn$i$i$i$i = $__nd$0$i$i$i$i;
       }
      }
     }
     if ($11) {
      $36 = $9 & $5;
      $39 = $36;
     } else {
      $37 = (($5>>>0) % ($7>>>0))&-1;
      $39 = $37;
     }
     $38 = (($15) + ($39<<2)|0);
     $40 = HEAP32[$38>>2]|0;
     $41 = ($40|0)==(0|0);
     if ($41) {
      $58 = (___cxa_allocate_exception(4)|0);
      HEAP32[$58>>2] = (280);
      ___cxa_throw(($58|0),(296|0),(27|0));
      // unreachable;
     }
     L27: do {
      if ($11) {
       $$pn$us$i$i$i = $40;
       while(1) {
        $__nd$0$us$i$i$i = HEAP32[$$pn$us$i$i$i>>2]|0;
        $42 = ($__nd$0$us$i$i$i|0)==(0|0);
        if ($42) {
         label = 25;
         break;
        }
        $43 = ((($__nd$0$us$i$i$i)) + 4|0);
        $44 = HEAP32[$43>>2]|0;
        $45 = $44 & $9;
        $46 = ($45|0)==($39|0);
        if (!($46)) {
         label = 25;
         break;
        }
        $47 = ((($__nd$0$us$i$i$i)) + 8|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = ($48|0)==($3|0);
        if ($49) {
         $$ph$i = $__nd$0$us$i$i$i;
         break L27;
        } else {
         $$pn$us$i$i$i = $__nd$0$us$i$i$i;
        }
       }
       if ((label|0) == 25) {
        $58 = (___cxa_allocate_exception(4)|0);
        HEAP32[$58>>2] = (280);
        ___cxa_throw(($58|0),(296|0),(27|0));
        // unreachable;
       }
      } else {
       $$pn$i$i$i = $40;
       while(1) {
        $__nd$0$i$i$i = HEAP32[$$pn$i$i$i>>2]|0;
        $50 = ($__nd$0$i$i$i|0)==(0|0);
        if ($50) {
         label = 25;
         break;
        }
        $51 = ((($__nd$0$i$i$i)) + 4|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = (($52>>>0) % ($7>>>0))&-1;
        $54 = ($53|0)==($39|0);
        if (!($54)) {
         label = 25;
         break;
        }
        $55 = ((($__nd$0$i$i$i)) + 8|0);
        $56 = HEAP32[$55>>2]|0;
        $57 = ($56|0)==($3|0);
        if ($57) {
         $$ph$i = $__nd$0$i$i$i;
         break L27;
        } else {
         $$pn$i$i$i = $__nd$0$i$i$i;
        }
       }
       if ((label|0) == 25) {
        $58 = (___cxa_allocate_exception(4)|0);
        HEAP32[$58>>2] = (280);
        ___cxa_throw(($58|0),(296|0),(27|0));
        // unreachable;
       }
      }
     } while(0);
     $59 = ((($$ph$i)) + 16|0);
     $60 = +HEAPF64[$59>>3];
     $61 = $60 + $delta;
     HEAPF64[$59>>3] = $61;
     $62 = $61 < 0.0;
     if (!($62)) {
      STACKTOP = sp;return;
     }
     $63 = ((($this)) + 52|0);
     __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$63,$plus);
     STACKTOP = sp;return;
    }
   } while(0);
   $64 = HEAP32[$minus>>2]|0;
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   if ($11) {
    $67 = $66 & $9;
    $70 = $67;
   } else {
    $68 = (($66>>>0) % ($7>>>0))&-1;
    $70 = $68;
   }
   $69 = (($15) + ($70<<2)|0);
   $71 = HEAP32[$69>>2]|0;
   $72 = ($71|0)==(0|0);
   if ($72) {
    $$ph = $minus;
   } else {
    if ($11) {
     $$pn$us$i$i$i$i3 = $71;
     while(1) {
      $__nd$0$us$i$i$i$i5 = HEAP32[$$pn$us$i$i$i$i3>>2]|0;
      $73 = ($__nd$0$us$i$i$i$i5|0)==(0|0);
      if ($73) {
       $$ph = $minus;
       break L1;
      }
      $74 = ((($__nd$0$us$i$i$i$i5)) + 4|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = $75 & $9;
      $77 = ($76|0)==($70|0);
      if (!($77)) {
       $$ph = $minus;
       break L1;
      }
      $78 = ((($__nd$0$us$i$i$i$i5)) + 8|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)==($64|0);
      if ($80) {
       break;
      } else {
       $$pn$us$i$i$i$i3 = $__nd$0$us$i$i$i$i5;
      }
     }
    } else {
     $$pn$i$i$i$i8 = $71;
     while(1) {
      $__nd$0$i$i$i$i10 = HEAP32[$$pn$i$i$i$i8>>2]|0;
      $81 = ($__nd$0$i$i$i$i10|0)==(0|0);
      if ($81) {
       $$ph = $minus;
       break L1;
      }
      $82 = ((($__nd$0$i$i$i$i10)) + 4|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = (($83>>>0) % ($7>>>0))&-1;
      $85 = ($84|0)==($70|0);
      if (!($85)) {
       $$ph = $minus;
       break L1;
      }
      $86 = ((($__nd$0$i$i$i$i10)) + 8|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = ($87|0)==($64|0);
      if ($88) {
       break;
      } else {
       $$pn$i$i$i$i8 = $__nd$0$i$i$i$i10;
      }
     }
    }
    if ($11) {
     $89 = $9 & $66;
     $92 = $89;
    } else {
     $90 = (($66>>>0) % ($7>>>0))&-1;
     $92 = $90;
    }
    $91 = (($15) + ($92<<2)|0);
    $93 = HEAP32[$91>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $111 = (___cxa_allocate_exception(4)|0);
     HEAP32[$111>>2] = (280);
     ___cxa_throw(($111|0),(296|0),(27|0));
     // unreachable;
    }
    L70: do {
     if ($11) {
      $$pn$us$i$i$i31 = $93;
      while(1) {
       $__nd$0$us$i$i$i33 = HEAP32[$$pn$us$i$i$i31>>2]|0;
       $95 = ($__nd$0$us$i$i$i33|0)==(0|0);
       if ($95) {
        label = 50;
        break;
       }
       $96 = ((($__nd$0$us$i$i$i33)) + 4|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = $97 & $9;
       $99 = ($98|0)==($92|0);
       if (!($99)) {
        label = 50;
        break;
       }
       $100 = ((($__nd$0$us$i$i$i33)) + 8|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = ($101|0)==($64|0);
       if ($102) {
        $$ph$i42 = $__nd$0$us$i$i$i33;
        break L70;
       } else {
        $$pn$us$i$i$i31 = $__nd$0$us$i$i$i33;
       }
      }
      if ((label|0) == 50) {
       $111 = (___cxa_allocate_exception(4)|0);
       HEAP32[$111>>2] = (280);
       ___cxa_throw(($111|0),(296|0),(27|0));
       // unreachable;
      }
     } else {
      $$pn$i$i$i36 = $93;
      while(1) {
       $__nd$0$i$i$i38 = HEAP32[$$pn$i$i$i36>>2]|0;
       $103 = ($__nd$0$i$i$i38|0)==(0|0);
       if ($103) {
        label = 50;
        break;
       }
       $104 = ((($__nd$0$i$i$i38)) + 4|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = (($105>>>0) % ($7>>>0))&-1;
       $107 = ($106|0)==($92|0);
       if (!($107)) {
        label = 50;
        break;
       }
       $108 = ((($__nd$0$i$i$i38)) + 8|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ($109|0)==($64|0);
       if ($110) {
        $$ph$i42 = $__nd$0$i$i$i38;
        break L70;
       } else {
        $$pn$i$i$i36 = $__nd$0$i$i$i38;
       }
      }
      if ((label|0) == 50) {
       $111 = (___cxa_allocate_exception(4)|0);
       HEAP32[$111>>2] = (280);
       ___cxa_throw(($111|0),(296|0),(27|0));
       // unreachable;
      }
     }
    } while(0);
    $112 = ((($$ph$i42)) + 16|0);
    $113 = +HEAPF64[$112>>3];
    $114 = $113 - $delta;
    HEAPF64[$112>>3] = $114;
    $115 = $114 < 0.0;
    if (!($115)) {
     STACKTOP = sp;return;
    }
    $116 = ((($this)) + 52|0);
    __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($0,$116,$minus);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $117 = ((($this)) + 12|0);
 $118 = (__ZNSt3__113unordered_mapIN4rhea8variableENS_13unordered_setIS2_NS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEES5_S7_NS8_INS_4pairIKS2_SA_EEEEEixERSC_($117,$minus)|0);
 $119 = ((($118)) + 8|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = ($120|0)==(0|0);
 if ($121) {
  STACKTOP = sp;return;
 }
 $122 = ((($this)) + 32|0);
 $123 = ((($this)) + 52|0);
 $125 = $120;
 L94: while(1) {
  $124 = ((($125)) + 8|0);
  $126 = HEAP32[$124>>2]|0;
  $127 = ((($126)) + 4|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = HEAP32[$6>>2]|0;
  $130 = ($129|0)==(0);
  if ($130) {
   label = 67;
   break;
  }
  $131 = (($129) + -1)|0;
  $132 = $131 & $129;
  $133 = ($132|0)==(0);
  if ($133) {
   $134 = $131 & $128;
   $138 = $134;
  } else {
   $135 = (($128>>>0) % ($129>>>0))&-1;
   $138 = $135;
  }
  $136 = HEAP32[$122>>2]|0;
  $137 = (($136) + ($138<<2)|0);
  $139 = HEAP32[$137>>2]|0;
  $140 = ($139|0)==(0|0);
  if ($140) {
   label = 67;
   break;
  }
  if ($133) {
   $$pn$us$i$i$i16 = $139;
   while(1) {
    $__nd$0$us$i$i$i18 = HEAP32[$$pn$us$i$i$i16>>2]|0;
    $141 = ($__nd$0$us$i$i$i18|0)==(0|0);
    if ($141) {
     label = 67;
     break L94;
    }
    $142 = ((($__nd$0$us$i$i$i18)) + 4|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = $143 & $131;
    $145 = ($144|0)==($138|0);
    if (!($145)) {
     label = 67;
     break L94;
    }
    $146 = ((($__nd$0$us$i$i$i18)) + 8|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = ($147|0)==($126|0);
    if ($148) {
     $$ph$i27 = $__nd$0$us$i$i$i18;
     break;
    } else {
     $$pn$us$i$i$i16 = $__nd$0$us$i$i$i18;
    }
   }
  } else {
   $$pn$i$i$i21 = $139;
   while(1) {
    $__nd$0$i$i$i23 = HEAP32[$$pn$i$i$i21>>2]|0;
    $149 = ($__nd$0$i$i$i23|0)==(0|0);
    if ($149) {
     label = 67;
     break L94;
    }
    $150 = ((($__nd$0$i$i$i23)) + 4|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = (($151>>>0) % ($129>>>0))&-1;
    $153 = ($152|0)==($138|0);
    if (!($153)) {
     label = 67;
     break L94;
    }
    $154 = ((($__nd$0$i$i$i23)) + 8|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ($155|0)==($126|0);
    if ($156) {
     $$ph$i27 = $__nd$0$i$i$i23;
     break;
    } else {
     $$pn$i$i$i21 = $__nd$0$i$i$i23;
    }
   }
  }
  $158 = ((($$ph$i27)) + 24|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = ((($$ph$i27)) + 28|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = $161;
  $163 = $159;
  $164 = (($162) - ($163))|0;
  $165 = $164 >> 4;
  $166 = ($165|0)==(0);
  if ($166) {
   $181 = $159;
  } else {
   $167 = HEAP32[$$ph>>2]|0;
   $168 = ((($167)) + 4|0);
   $169 = HEAP32[$168>>2]|0;
   $172 = $159;$__len$03$i$i$i$i$i = $165;
   while(1) {
    $170 = (($__len$03$i$i$i$i$i|0) / 2)&-1;
    $171 = (($172) + ($170<<4)|0);
    $173 = HEAP32[$171>>2]|0;
    $174 = ((($173)) + 4|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = ($175>>>0)<($169>>>0);
    if ($176) {
     $$sum$i$i$i$i$i = (($170) + 1)|0;
     $177 = (($172) + ($$sum$i$i$i$i$i<<4)|0);
     $$neg2$i$i$i$i$i = (($__len$03$i$i$i$i$i) + -1)|0;
     $178 = (($$neg2$i$i$i$i$i) - ($170))|0;
     $205 = $177;$__len$0$be$i$i$i$i$i = $178;
    } else {
     $205 = $172;$__len$0$be$i$i$i$i$i = $170;
    }
    $179 = ($__len$0$be$i$i$i$i$i|0)==(0);
    if ($179) {
     $181 = $205;
     break;
    } else {
     $172 = $205;$__len$03$i$i$i$i$i = $__len$0$be$i$i$i$i$i;
    }
   }
  }
  $180 = ($181|0)==($161|0);
  if ($180) {
   $193 = 0.0;
  } else {
   $182 = HEAP32[$$ph>>2]|0;
   $183 = ((($182)) + 4|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = HEAP32[$181>>2]|0;
   $186 = ((($185)) + 4|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = ($184>>>0)<($187>>>0);
   $$$i = $188 ? $161 : $181;
   $189 = ($$$i|0)==($161|0);
   if ($189) {
    $193 = 0.0;
   } else {
    $190 = ((($$$i)) + 8|0);
    $191 = +HEAPF64[$190>>3];
    $193 = $191;
   }
  }
  $192 = $193 * $delta;
  $194 = ((($$ph$i27)) + 16|0);
  $195 = +HEAPF64[$194>>3];
  $196 = $195 + $192;
  HEAPF64[$194>>3] = $196;
  $197 = HEAP32[$126>>2]|0;
  $198 = ((($197)) + 28|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = (FUNCTION_TABLE_ii[$199 & 511]($126)|0);
  if ($200) {
   $201 = +HEAPF64[$194>>3];
   $202 = $201 < 0.0;
   if ($202) {
    __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($2,$123,$124);
   }
  }
  $203 = HEAP32[$125>>2]|0;
  $204 = ($203|0)==(0|0);
  if ($204) {
   label = 80;
   break;
  } else {
   $125 = $203;
  }
 }
 if ((label|0) == 67) {
  $157 = (___cxa_allocate_exception(4)|0);
  HEAP32[$157>>2] = (280);
  ___cxa_throw(($157|0),(296|0),(27|0));
  // unreachable;
 }
 else if ((label|0) == 80) {
  STACKTOP = sp;return;
 }
}
function __ZN4rhea14simplex_solver7suggestERKNS_8variableEd($this,$v,$x) {
 $this = $this|0;
 $v = $v|0;
 $x = +$x;
 var $$in$be$i = 0, $$in20$i = 0, $$lcssa16 = 0, $$lcssa18 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 32|0;
 $1 = sp + 48|0;
 $2 = sp + 40|0;
 $3 = sp;
 HEAP32[$3>>2] = (2264);
 $4 = ((($3)) + 8|0);
 __ZN4rhea15symbolic_weightC2Eddd($4,1.0,0.0,0.0);
 HEAPF64[$0>>3] = 1.0;
 __ZNSt3__110shared_ptrIN4rhea15edit_constraintEE11make_sharedIJRKNS1_8variableERKNS1_8strengthERdEEES3_DpOT_($2,$v,$3,$0);
 HEAP32[$1>>2] = (2352);
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$2>>2]|0;
 HEAP32[$5>>2] = $6;
 $7 = ((($1)) + 8|0);
 $8 = ((($2)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$7>>2] = $9;
 HEAP32[$2>>2] = 0;
 HEAP32[$8>>2] = 0;
 $10 = HEAP32[$this>>2]|0;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 __THREW__ = 0;
 (invoke_iii($12|0,($this|0),($1|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  HEAP32[$1>>2] = (2352);
  $19 = HEAP32[$7>>2]|0;
  $20 = ($19|0)==(0|0);
  if ($20) {
   ___resumeException($17|0);
   // unreachable;
  }
  __ZNSt3__119__shared_weak_count16__release_sharedEv($19);
  ___resumeException($17|0);
  // unreachable;
 }
 HEAP32[$1>>2] = (2352);
 $15 = HEAP32[$7>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  __ZNSt3__119__shared_weak_count16__release_sharedEv($15);
 }
 (__ZN4rhea14simplex_solver10begin_editEv($this)|0);
 $21 = ((($this)) + 252|0);
 $22 = ((($this)) + 256|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($21|0)==($23|0);
 if ($24) {
  $33 = (___cxa_allocate_exception(8)|0);
  HEAP32[$33>>2] = (2328);
  $34 = ((($33)) + 4|0);
  HEAP32[$34>>2] = $v;
  ___cxa_throw(($33|0),(528|0),(27|0));
  // unreachable;
 }
 $25 = HEAP32[$v>>2]|0;
 $27 = $21;
 while(1) {
  $26 = HEAP32[$27>>2]|0;
  $28 = ((($26)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==($25|0);
  if ($30) {
   $$lcssa16 = $27;$$lcssa18 = $26;
   break;
  }
  $31 = ($26|0)==($23|0);
  if ($31) {
   label = 12;
   break;
  } else {
   $27 = $26;
  }
 }
 if ((label|0) == 12) {
  $33 = (___cxa_allocate_exception(8)|0);
  HEAP32[$33>>2] = (2328);
  $34 = ((($33)) + 4|0);
  HEAP32[$34>>2] = $v;
  ___cxa_throw(($33|0),(528|0),(27|0));
  // unreachable;
 }
 $32 = ($$lcssa16|0)==($23|0);
 if ($32) {
  $33 = (___cxa_allocate_exception(8)|0);
  HEAP32[$33>>2] = (2328);
  $34 = ((($33)) + 4|0);
  HEAP32[$34>>2] = $v;
  ___cxa_throw(($33|0),(528|0),(27|0));
  // unreachable;
 } else {
  $$in20$i = $$lcssa16;$36 = $$lcssa18;
 }
 L22: while(1) {
  $35 = ((($36)) + 48|0);
  $37 = +HEAPF64[$35>>3];
  $38 = $x - $37;
  HEAPF64[$35>>3] = $x;
  $39 = ((($36)) + 28|0);
  $40 = ((($36)) + 36|0);
  __ZN4rhea14simplex_solver19delta_edit_constantEdRKNS_8variableES3_($this,$38,$39,$40);
  $41 = HEAP32[$$in20$i>>2]|0;
  $42 = HEAP32[$22>>2]|0;
  $43 = ($41|0)==($42|0);
  L24: do {
   if ($43) {
    $$in$be$i = $41;
   } else {
    $45 = HEAP32[$v>>2]|0;
    $47 = $41;
    while(1) {
     $46 = HEAP32[$47>>2]|0;
     $48 = ((($46)) + 8|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49|0)==($45|0);
     if ($50) {
      $$in$be$i = $47;
      break L24;
     }
     $51 = ($46|0)==($42|0);
     if ($51) {
      label = 19;
      break L22;
     } else {
      $47 = $46;
     }
    }
   }
  } while(0);
  $44 = ($$in$be$i|0)==($42|0);
  if ($44) {
   label = 19;
   break;
  }
  $$pre = HEAP32[$$in$be$i>>2]|0;
  $$in20$i = $$in$be$i;$36 = $$pre;
 }
 if ((label|0) == 19) {
  (__ZN4rhea14simplex_solver8end_editEv($this)|0);
  STACKTOP = sp;return ($this|0);
 }
 return (0)|0;
}
function __ZN4rhea14simplex_solver10begin_editEv($this) {
 $this = $this|0;
 var $$01$i$i$i = 0, $$neg2$i$i$i = 0, $$pre$i$i = 0, $$pre1$i$i = 0, $$pre2$i$i = 0, $$pre3$i$i = 0, $$pre4$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__i$01$i$i = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 260|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (___cxa_allocate_exception(8)|0);
  HEAP32[$3>>2] = (2328);
  $4 = ((($3)) + 4|0);
  HEAP32[$4>>2] = 0;
  ___cxa_throw(($3|0),(528|0),(27|0));
  // unreachable;
 }
 $5 = ((($this)) + 64|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = ((($this)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   $$01$i$i$i = $9;
   while(1) {
    $11 = HEAP32[$$01$i$i$i>>2]|0;
    $12 = ((($$01$i$i$i)) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(0|0);
    if (!($14)) {
     __ZNSt3__119__shared_weak_count16__release_sharedEv($13);
    }
    __ZdlPv($$01$i$i$i);
    $15 = ($11|0)==(0|0);
    if ($15) {
     break;
    } else {
     $$01$i$i$i = $11;
    }
   }
  }
  HEAP32[$8>>2] = 0;
  $16 = ((($this)) + 56|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0);
  if (!($18)) {
   $19 = ((($this)) + 52|0);
   $__i$01$i$i = 0;
   while(1) {
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + ($__i$01$i$i<<2)|0);
    HEAP32[$21>>2] = 0;
    $22 = (($__i$01$i$i) + 1)|0;
    $exitcond$i$i = ($22|0)==($17|0);
    if ($exitcond$i$i) {
     break;
    } else {
     $__i$01$i$i = $22;
    }
   }
  }
  HEAP32[$5>>2] = 0;
 }
 __ZN4rhea14simplex_solver20reset_stay_constantsEv($this);
 $23 = HEAP32[$0>>2]|0;
 $24 = ((($this)) + 268|0);
 $25 = ((($this)) + 276|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($this)) + 272|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($26|0)==($28|0);
 if ($29) {
  $39 = 0;
 } else {
  $30 = $26;
  $31 = $28;
  $32 = (($30) - ($31))|0;
  $33 = $32 << 8;
  $34 = (($33) + -1)|0;
  $39 = $34;
 }
 $35 = ((($this)) + 284|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($this)) + 288|0);
 $38 = HEAP32[$37>>2]|0;
 $$neg2$i$i$i = (($39) - ($36))|0;
 $40 = ($$neg2$i$i$i|0)==($38|0);
 if ($40) {
  __ZNSt3__15dequeIjNS_9allocatorIjEEE19__add_back_capacityEv($24);
  $$pre$i$i = HEAP32[$37>>2]|0;
  $$pre1$i$i = HEAP32[$35>>2]|0;
  $$pre2$i$i = HEAP32[$27>>2]|0;
  $$pre3$i$i = HEAP32[$25>>2]|0;
  $42 = $$pre$i$i;$43 = $$pre1$i$i;$45 = $$pre3$i$i;$46 = $$pre2$i$i;
 } else {
  $42 = $38;$43 = $36;$45 = $26;$46 = $28;
 }
 $41 = (($42) + ($43))|0;
 $44 = ($45|0)==($46|0);
 if ($44) {
  $54 = $42;
  $53 = (($54) + 1)|0;
  HEAP32[$37>>2] = $53;
  return ($this|0);
 }
 $47 = $41 >>> 10;
 $48 = (($46) + ($47<<2)|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $41 & 1023;
 $51 = (($49) + ($50<<2)|0);
 $52 = ($51|0)==(0|0);
 if ($52) {
  $54 = $42;
  $53 = (($54) + 1)|0;
  HEAP32[$37>>2] = $53;
  return ($this|0);
 }
 HEAP32[$51>>2] = $23;
 $$pre4$i$i = HEAP32[$37>>2]|0;
 $54 = $$pre4$i$i;
 $53 = (($54) + 1)|0;
 HEAP32[$37>>2] = $53;
 return ($this|0);
}
function __ZN4rhea14simplex_solver8end_editEv($this) {
 $this = $this|0;
 var $$lcssa = 0, $$lcssa26 = 0, $$neg1$i = 0, $$neg2$i$i$i = 0, $$pre = 0, $$pre15 = 0, $$pre16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep4$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 252|0);
 $1 = ((($this)) + 260|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = (___cxa_allocate_exception(8)|0);
  HEAP32[$4>>2] = (2328);
  $5 = ((($4)) + 4|0);
  HEAP32[$5>>2] = 0;
  ___cxa_throw(($4|0),(528|0),(27|0));
  // unreachable;
 }
 $6 = HEAP32[$this>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vi[$8 & 511]($this);
 $9 = ((($this)) + 288|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($this)) + 284|0);
 $12 = (($10) + -1)|0;
 HEAP32[$9>>2] = $12;
 $13 = ((($this)) + 276|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($this)) + 272|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($14|0)==($16|0);
 if ($17) {
  $24 = 0;
 } else {
  $18 = $14;
  $19 = $16;
  $20 = (($18) - ($19))|0;
  $21 = $20 << 8;
  $22 = (($21) + -1)|0;
  $24 = $22;
 }
 $23 = HEAP32[$11>>2]|0;
 $$neg1$i = (1 - ($10))|0;
 $$neg2$i$i$i = (($$neg1$i) + ($24))|0;
 $25 = (($$neg2$i$i$i) - ($23))|0;
 $26 = ($25>>>0)>(2047);
 if ($26) {
  $27 = ((($14)) + -4|0);
  $28 = HEAP32[$27>>2]|0;
  __ZdlPv($28);
  $29 = HEAP32[$13>>2]|0;
  $scevgep4$i$i$i$i$i = ((($29)) + -4|0);
  HEAP32[$13>>2] = $scevgep4$i$i$i$i$i;
  $$pre = HEAP32[$9>>2]|0;
  $$pre15 = HEAP32[$11>>2]|0;
  $$pre16 = HEAP32[$15>>2]|0;
  $31 = $$pre;$33 = $$pre15;$36 = $$pre16;
 } else {
  $31 = $12;$33 = $23;$36 = $16;
 }
 $30 = (($31) + -1)|0;
 $32 = (($30) + ($33))|0;
 $34 = $32 >>> 10;
 $35 = (($36) + ($34<<2)|0);
 $37 = HEAP32[$35>>2]|0;
 $38 = $32 & 1023;
 $39 = (($37) + ($38<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[$1>>2]|0;
 $42 = ($41>>>0)>($40>>>0);
 if (!($42)) {
  return ($this|0);
 }
 $43 = ((($this)) + 256|0);
 L13: while(1) {
  $44 = HEAP32[$0>>2]|0;
  $45 = ((($44)) + 8|0);
  $46 = HEAP32[$43>>2]|0;
  $47 = ($0|0)==($46|0);
  if ($47) {
   $58 = $45;
   label = 14;
   break;
  }
  $48 = HEAP32[$45>>2]|0;
  $50 = $0;
  while(1) {
   $49 = HEAP32[$50>>2]|0;
   $51 = ((($49)) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)==($48|0);
   if ($53) {
    $$lcssa = $50;$$lcssa26 = $49;
    break;
   }
   $54 = ($49|0)==($46|0);
   if ($54) {
    $58 = $45;
    label = 14;
    break L13;
   } else {
    $50 = $49;
   }
  }
  $55 = ($$lcssa|0)==($46|0);
  if ($55) {
   $58 = $45;
   label = 14;
   break;
  }
  $59 = ((($$lcssa26)) + 16|0);
  $60 = HEAP32[$this>>2]|0;
  $61 = ((($60)) + 20|0);
  $62 = HEAP32[$61>>2]|0;
  (FUNCTION_TABLE_iii[$62 & 511]($this,$59)|0);
  $63 = HEAP32[$1>>2]|0;
  $64 = ($63>>>0)>($40>>>0);
  if (!($64)) {
   label = 16;
   break;
  }
 }
 if ((label|0) == 14) {
  $56 = (___cxa_allocate_exception(8)|0);
  HEAP32[$56>>2] = (2328);
  $57 = ((($56)) + 4|0);
  HEAP32[$57>>2] = $58;
  ___cxa_throw(($56|0),(528|0),(27|0));
  // unreachable;
 }
 else if ((label|0) == 16) {
  return ($this|0);
 }
 return (0)|0;
}
function __ZN4rhea14simplex_solver5solveEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 265|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  return ($this|0);
 }
 $3 = ((($this)) + 244|0);
 __ZN4rhea14simplex_solver8optimizeERKNS_8variableE($this,$3);
 __ZN4rhea14simplex_solver22set_external_variablesEv($this);
 HEAP8[$0>>0] = 0;
 $4 = ((($this)) + 128|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  return ($this|0);
 }
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($7)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_vii[$9 & 511]($5,$this);
 return ($this|0);
}
function __ZN4rhea14simplex_solver8optimizeERKNS_8variableE($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $$$i = 0, $$0$i = 0, $$0$in$i = 0.0, $$0129 = 0, $$0328 = 0, $$12 = 0, $$14 = 0, $$lcssa86 = 0, $$lcssa88 = 0, $$neg2$i$i$i$i$i = 0, $$ph$i = 0, $$ph$i24 = 0, $$pn$i$i$i = 0, $$pn$i$i$i18 = 0, $$pn$us$i$i$i = 0, $$pn$us$i$i$i13 = 0, $$sum$i$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0.0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__len$0$be$i$i$i$i$i = 0, $__len$03$i$i$i$i$i = 0, $__nd$0$i$i$i = 0, $__nd$0$i$i$i20 = 0, $__nd$0$us$i$i$i = 0, $__nd$0$us$i$i$i15 = 0;
 var $entry = 0, $exit = 0, $lpad$phi$index = 0, $lpad$phi$index4 = 0, $min_ratio$054 = 0.0, $min_ratio$1 = 0.0, $min_ratio$1$lcssa = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $entry = sp + 24|0;
 $exit = sp + 16|0;
 $0 = sp;
 $1 = HEAP32[$v>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($this)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $34 = (___cxa_allocate_exception(4)|0);
  HEAP32[$34>>2] = (280);
  ___cxa_throw(($34|0),(296|0),(27|0));
  // unreachable;
 }
 $7 = (($5) + -1)|0;
 $8 = $7 & $5;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = $7 & $3;
  $15 = $10;
 } else {
  $11 = (($3>>>0) % ($5>>>0))&-1;
  $15 = $11;
 }
 $12 = ((($this)) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($15<<2)|0);
 $16 = HEAP32[$14>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $34 = (___cxa_allocate_exception(4)|0);
  HEAP32[$34>>2] = (280);
  ___cxa_throw(($34|0),(296|0),(27|0));
  // unreachable;
 }
 L11: do {
  if ($9) {
   $$pn$us$i$i$i = $16;
   while(1) {
    $__nd$0$us$i$i$i = HEAP32[$$pn$us$i$i$i>>2]|0;
    $18 = ($__nd$0$us$i$i$i|0)==(0|0);
    if ($18) {
     label = 13;
     break;
    }
    $19 = ((($__nd$0$us$i$i$i)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20 & $7;
    $22 = ($21|0)==($15|0);
    if (!($22)) {
     label = 13;
     break;
    }
    $23 = ((($__nd$0$us$i$i$i)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($1|0);
    if ($25) {
     $$ph$i = $__nd$0$us$i$i$i;
     break L11;
    } else {
     $$pn$us$i$i$i = $__nd$0$us$i$i$i;
    }
   }
   if ((label|0) == 13) {
    $34 = (___cxa_allocate_exception(4)|0);
    HEAP32[$34>>2] = (280);
    ___cxa_throw(($34|0),(296|0),(27|0));
    // unreachable;
   }
  } else {
   $$pn$i$i$i = $16;
   while(1) {
    $__nd$0$i$i$i = HEAP32[$$pn$i$i$i>>2]|0;
    $26 = ($__nd$0$i$i$i|0)==(0|0);
    if ($26) {
     label = 13;
     break;
    }
    $27 = ((($__nd$0$i$i$i)) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28>>>0) % ($5>>>0))&-1;
    $30 = ($29|0)==($15|0);
    if (!($30)) {
     label = 13;
     break;
    }
    $31 = ((($__nd$0$i$i$i)) + 8|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==($1|0);
    if ($33) {
     $$ph$i = $__nd$0$i$i$i;
     break L11;
    } else {
     $$pn$i$i$i = $__nd$0$i$i$i;
    }
   }
   if ((label|0) == 13) {
    $34 = (___cxa_allocate_exception(4)|0);
    HEAP32[$34>>2] = (280);
    ___cxa_throw(($34|0),(296|0),(27|0));
    // unreachable;
   }
  }
 } while(0);
 HEAP32[$entry>>2] = 0;
 $35 = ((($entry)) + 4|0);
 HEAP32[$35>>2] = 0;
 HEAP32[$exit>>2] = 0;
 $36 = ((($exit)) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($$ph$i)) + 24|0);
 $38 = ((($$ph$i)) + 28|0);
 $39 = ((($this)) + 12|0);
 L27: while(1) {
  $40 = HEAP32[$37>>2]|0;
  $41 = HEAP32[$38>>2]|0;
  $42 = ($40|0)==($41|0);
  if ($42) {
   label = 29;
   break;
  } else {
   $44 = $40;
  }
  while(1) {
   $43 = HEAP32[$44>>2]|0;
   $45 = HEAP32[$43>>2]|0;
   $46 = ((($45)) + 24|0);
   $47 = HEAP32[$46>>2]|0;
   __THREW__ = 0;
   $48 = (invoke_ii($47|0,($43|0))|0);
   $49 = __THREW__; __THREW__ = 0;
   $50 = $49&1;
   if ($50) {
    label = 25;
    break L27;
   }
   if ($48) {
    $51 = ((($44)) + 8|0);
    $52 = +HEAPF64[$51>>3];
    $53 = $52 < 0.0;
    if ($53) {
     $$lcssa86 = $44;$$lcssa88 = $44;
     break;
    }
   }
   $69 = ((($44)) + 16|0);
   $70 = ($69|0)==($41|0);
   if ($70) {
    label = 29;
    break L27;
   } else {
    $44 = $69;
   }
  }
  $54 = HEAP32[$$lcssa88>>2]|0;
  $55 = ((($$lcssa86)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)==(0|0);
  if (!($57)) {
   __ZNSt3__119__shared_weak_count12__add_sharedEv($56);
  }
  HEAP32[$entry>>2] = $54;
  $58 = HEAP32[$35>>2]|0;
  HEAP32[$35>>2] = $56;
  $59 = ($58|0)==(0|0);
  if (!($59)) {
   __ZNSt3__119__shared_weak_count16__release_sharedEv($58);
  }
  __THREW__ = 0;
  $60 = (invoke_iii(211,($39|0),($entry|0))|0);
  $61 = __THREW__; __THREW__ = 0;
  $62 = $61&1;
  if ($62) {
   label = 26;
   break;
  }
  $75 = ((($60)) + 8|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($76|0)==(0|0);
  if ($77) {
   label = 67;
   break;
  } else {
   $79 = $76;$min_ratio$054 = 1.7976931348623157E+308;
  }
  while(1) {
   $78 = ((($79)) + 8|0);
   $80 = HEAP32[$78>>2]|0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ((($81)) + 24|0);
   $83 = HEAP32[$82>>2]|0;
   __THREW__ = 0;
   $84 = (invoke_ii($83|0,($80|0))|0);
   $85 = __THREW__; __THREW__ = 0;
   $86 = $85&1;
   if ($86) {
    label = 24;
    break L27;
   }
   do {
    if ($84) {
     $87 = HEAP32[$78>>2]|0;
     $88 = ((($87)) + 4|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = HEAP32[$4>>2]|0;
     $91 = ($90|0)==(0);
     if ($91) {
      label = 49;
      break L27;
     }
     $92 = (($90) + -1)|0;
     $93 = $92 & $90;
     $94 = ($93|0)==(0);
     if ($94) {
      $95 = $92 & $89;
      $99 = $95;
     } else {
      $96 = (($89>>>0) % ($90>>>0))&-1;
      $99 = $96;
     }
     $97 = HEAP32[$12>>2]|0;
     $98 = (($97) + ($99<<2)|0);
     $100 = HEAP32[$98>>2]|0;
     $101 = ($100|0)==(0|0);
     if ($101) {
      label = 49;
      break L27;
     }
     if ($94) {
      $$pn$us$i$i$i13 = $100;
      while(1) {
       $__nd$0$us$i$i$i15 = HEAP32[$$pn$us$i$i$i13>>2]|0;
       $102 = ($__nd$0$us$i$i$i15|0)==(0|0);
       if ($102) {
        label = 49;
        break L27;
       }
       $103 = ((($__nd$0$us$i$i$i15)) + 4|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = $104 & $92;
       $106 = ($105|0)==($99|0);
       if (!($106)) {
        label = 49;
        break L27;
       }
       $107 = ((($__nd$0$us$i$i$i15)) + 8|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = ($108|0)==($87|0);
       if ($109) {
        $$ph$i24 = $__nd$0$us$i$i$i15;
        break;
       } else {
        $$pn$us$i$i$i13 = $__nd$0$us$i$i$i15;
       }
      }
     } else {
      $$pn$i$i$i18 = $100;
      while(1) {
       $__nd$0$i$i$i20 = HEAP32[$$pn$i$i$i18>>2]|0;
       $110 = ($__nd$0$i$i$i20|0)==(0|0);
       if ($110) {
        label = 49;
        break L27;
       }
       $111 = ((($__nd$0$i$i$i20)) + 4|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = (($112>>>0) % ($90>>>0))&-1;
       $114 = ($113|0)==($99|0);
       if (!($114)) {
        label = 49;
        break L27;
       }
       $115 = ((($__nd$0$i$i$i20)) + 8|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = ($116|0)==($87|0);
       if ($117) {
        $$ph$i24 = $__nd$0$i$i$i20;
        break;
       } else {
        $$pn$i$i$i18 = $__nd$0$i$i$i20;
       }
      }
     }
     $122 = ((($$ph$i24)) + 24|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = ((($$ph$i24)) + 28|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = $125;
     $127 = $123;
     $128 = (($126) - ($127))|0;
     $129 = $128 >> 4;
     $130 = ($129|0)==(0);
     if ($130) {
      $145 = $123;
     } else {
      $131 = HEAP32[$entry>>2]|0;
      $132 = ((($131)) + 4|0);
      $133 = HEAP32[$132>>2]|0;
      $136 = $123;$__len$03$i$i$i$i$i = $129;
      while(1) {
       $134 = (($__len$03$i$i$i$i$i|0) / 2)&-1;
       $135 = (($136) + ($134<<4)|0);
       $137 = HEAP32[$135>>2]|0;
       $138 = ((($137)) + 4|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = ($139>>>0)<($133>>>0);
       if ($140) {
        $$sum$i$i$i$i$i = (($134) + 1)|0;
        $141 = (($136) + ($$sum$i$i$i$i$i<<4)|0);
        $$neg2$i$i$i$i$i = (($__len$03$i$i$i$i$i) + -1)|0;
        $142 = (($$neg2$i$i$i$i$i) - ($134))|0;
        $196 = $141;$__len$0$be$i$i$i$i$i = $142;
       } else {
        $196 = $136;$__len$0$be$i$i$i$i$i = $134;
       }
       $143 = ($__len$0$be$i$i$i$i$i|0)==(0);
       if ($143) {
        $145 = $196;
        break;
       } else {
        $136 = $196;$__len$03$i$i$i$i$i = $__len$0$be$i$i$i$i$i;
       }
      }
     }
     $144 = ($145|0)==($125|0);
     if ($144) {
      $min_ratio$1 = $min_ratio$054;
     } else {
      $146 = HEAP32[$entry>>2]|0;
      $147 = ((($146)) + 4|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = HEAP32[$145>>2]|0;
      $150 = ((($149)) + 4|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ($148>>>0)<($151>>>0);
      $$$i = $152 ? $125 : $145;
      $153 = ($$$i|0)==($125|0);
      if ($153) {
       $min_ratio$1 = $min_ratio$054;
       break;
      }
      $154 = ((($$$i)) + 8|0);
      $155 = +HEAPF64[$154>>3];
      $156 = !($155 >= 0.0);
      if (!($156)) {
       $min_ratio$1 = $min_ratio$054;
       break;
      }
      $157 = ((($$ph$i24)) + 16|0);
      $158 = +HEAPF64[$157>>3];
      $159 = -$158;
      $160 = $159 / $155;
      $161 = $160 < $min_ratio$054;
      if (!($161)) {
       $162 = $160 > $min_ratio$054;
       $163 = $160 - $min_ratio$054;
       $164 = $min_ratio$054 - $160;
       $$0$in$i = $162 ? $163 : $164;
       $$0$i = $$0$in$i < 1.0E-8;
       if (!($$0$i)) {
        $min_ratio$1 = $min_ratio$054;
        break;
       }
       $165 = HEAP32[$exit>>2]|0;
       $166 = ((($165)) + 4|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($89>>>0)<($167>>>0);
       if (!($168)) {
        $min_ratio$1 = $min_ratio$054;
        break;
       }
      }
      $169 = ((($79)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if (!($171)) {
       __ZNSt3__119__shared_weak_count12__add_sharedEv($170);
      }
      HEAP32[$exit>>2] = $87;
      $172 = HEAP32[$36>>2]|0;
      HEAP32[$36>>2] = $170;
      $173 = ($172|0)==(0|0);
      if ($173) {
       $min_ratio$1 = $160;
       break;
      }
      __ZNSt3__119__shared_weak_count16__release_sharedEv($172);
      $min_ratio$1 = $160;
     }
    } else {
     $min_ratio$1 = $min_ratio$054;
    }
   } while(0);
   $174 = HEAP32[$79>>2]|0;
   $175 = ($174|0)==(0|0);
   if ($175) {
    $min_ratio$1$lcssa = $min_ratio$1;
    break;
   } else {
    $79 = $174;$min_ratio$054 = $min_ratio$1;
   }
  }
  $176 = $min_ratio$1$lcssa == 1.7976931348623157E+308;
  if ($176) {
   label = 67;
   break;
  }
  __THREW__ = 0;
  invoke_viii(207,($this|0),($entry|0),($exit|0));
  $190 = __THREW__; __THREW__ = 0;
  $191 = $190&1;
  if ($191) {
   label = 26;
   break;
  }
 }
 L86: do {
  if ((label|0) == 24) {
   $63 = ___cxa_find_matching_catch()|0;
   $64 = tempRet0;
   $lpad$phi$index = $63;$lpad$phi$index4 = $64;
   label = 27;
  }
  else if ((label|0) == 25) {
   $65 = ___cxa_find_matching_catch()|0;
   $66 = tempRet0;
   $lpad$phi$index = $65;$lpad$phi$index4 = $66;
   label = 27;
  }
  else if ((label|0) == 26) {
   $67 = ___cxa_find_matching_catch()|0;
   $68 = tempRet0;
   $lpad$phi$index = $67;$lpad$phi$index4 = $68;
   label = 27;
  }
  else if ((label|0) == 29) {
   $71 = HEAP32[$36>>2]|0;
   $72 = ($71|0)==(0|0);
   if (!($72)) {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($71);
   }
   $73 = HEAP32[$35>>2]|0;
   $74 = ($73|0)==(0|0);
   if ($74) {
    STACKTOP = sp;return;
   }
   __ZNSt3__119__shared_weak_count16__release_sharedEv($73);
   STACKTOP = sp;return;
  }
  else if ((label|0) == 49) {
   $118 = (___cxa_allocate_exception(4)|0);
   HEAP32[$118>>2] = (280);
   __THREW__ = 0;
   invoke_viii(182,($118|0),(296|0),(27|0));
   $119 = __THREW__; __THREW__ = 0;
   $120 = ___cxa_find_matching_catch()|0;
   $121 = tempRet0;
   $lpad$phi$index = $120;$lpad$phi$index4 = $121;
   label = 27;
  }
  else if ((label|0) == 67) {
   $177 = (___cxa_allocate_exception(16)|0);
   __THREW__ = 0;
   invoke_viii(213,($0|0),(712|0),31);
   $178 = __THREW__; __THREW__ = 0;
   $179 = $178&1;
   do {
    if ($179) {
     $188 = ___cxa_find_matching_catch()|0;
     $189 = tempRet0;
     $$0129 = $188;$$0328 = $189;
    } else {
     HEAP32[$177>>2] = (680);
     $180 = ((($177)) + 4|0);
     __THREW__ = 0;
     invoke_vii(214,($180|0),($0|0));
     $181 = __THREW__; __THREW__ = 0;
     $182 = $181&1;
     if ($182) {
      $183 = ___cxa_find_matching_catch()|0;
      $184 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
      $$0129 = $183;$$0328 = $184;
      break;
     } else {
      __THREW__ = 0;
      invoke_viii(182,($177|0),(696|0),(54|0));
      $185 = __THREW__; __THREW__ = 0;
      $186 = ___cxa_find_matching_catch()|0;
      $187 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
      $$12 = $186;$$14 = $187;
      break L86;
     }
    }
   } while(0);
   ___cxa_free_exception(($177|0));
   $$12 = $$0129;$$14 = $$0328;
  }
 } while(0);
 if ((label|0) == 27) {
  $$12 = $lpad$phi$index;$$14 = $lpad$phi$index4;
 }
 $192 = HEAP32[$36>>2]|0;
 $193 = ($192|0)==(0|0);
 if (!($193)) {
  __ZNSt3__119__shared_weak_count16__release_sharedEv($192);
 }
 $194 = HEAP32[$35>>2]|0;
 $195 = ($194|0)==(0|0);
 if ($195) {
  ___resumeException($$12|0);
  // unreachable;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv($194);
 ___resumeException($$12|0);
 // unreachable;
}
function __ZNK4rhea14simplex_solver17build_explanationERKNS_8variableERKNS_17linear_expressionE($agg$result,$this,$v,$expr) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $v = $v|0;
 $expr = $expr|0;
 var $$lcssa = 0, $$lcssa32 = 0, $$pn$i$i = 0, $$pn$i$i2 = 0, $$pre = 0, $$pre19 = 0, $$pre20 = 0, $$pre21 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__f$01$i$i = 0, $__nd$0$i$i = 0, $__nd$0$i$i$lcssa34 = 0, $__nd$0$i$i4 = 0, $__nd$0$i$i4$lcssa30 = 0, $lpad$phi24$index = 0, $lpad$phi24$index4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $agg$result;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = $agg$result;
 $1 = ((($agg$result)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($this)) + 224|0);
 $3 = HEAP32[$v>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this)) + 228|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   $112 = $agg$result;$113 = 0;
  } else {
   $9 = (($7) + -1)|0;
   $10 = $9 & $7;
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = $9 & $5;
    $16 = $12;
   } else {
    $13 = (($5>>>0) % ($7>>>0))&-1;
    $16 = $13;
   }
   $14 = HEAP32[$2>>2]|0;
   $15 = (($14) + ($16<<2)|0);
   $17 = HEAP32[$15>>2]|0;
   $18 = ($17|0)==(0|0);
   if ($18) {
    $112 = $agg$result;$113 = 0;
   } else {
    $$pn$i$i = $17;
    while(1) {
     $__nd$0$i$i = HEAP32[$$pn$i$i>>2]|0;
     $19 = ($__nd$0$i$i|0)==(0|0);
     if ($19) {
      $112 = $agg$result;$113 = 0;
      break L1;
     }
     $20 = ((($__nd$0$i$i)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     if ($11) {
      $22 = $21 & $9;
      $25 = $22;
     } else {
      $23 = (($21>>>0) % ($7>>>0))&-1;
      $25 = $23;
     }
     $24 = ($25|0)==($16|0);
     if (!($24)) {
      $112 = $agg$result;$113 = 0;
      break L1;
     }
     $26 = ((($__nd$0$i$i)) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)==($3|0);
     if ($28) {
      $__nd$0$i$i$lcssa34 = $__nd$0$i$i;
      break;
     } else {
      $$pn$i$i = $__nd$0$i$i;
     }
    }
    __THREW__ = 0;
    $29 = (invoke_ii(179,20)|0);
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if ($31) {
     $44 = ___cxa_find_matching_catch()|0;
     $45 = tempRet0;
     $lpad$phi24$index = $44;$lpad$phi24$index4 = $45;
     ___resumeException($lpad$phi24$index|0);
     // unreachable;
    }
    $32 = ((($29)) + 8|0);
    HEAP32[$32>>2] = (2352);
    $33 = ((($29)) + 12|0);
    $34 = ((($__nd$0$i$i$lcssa34)) + 20|0);
    $35 = HEAP32[$34>>2]|0;
    HEAP32[$33>>2] = $35;
    $36 = ((($29)) + 16|0);
    $37 = ((($__nd$0$i$i$lcssa34)) + 24|0);
    $38 = HEAP32[$37>>2]|0;
    HEAP32[$36>>2] = $38;
    $39 = ($38|0)==(0|0);
    if ($39) {
     $41 = $agg$result;$43 = 1;
    } else {
     __ZNSt3__119__shared_weak_count12__add_sharedEv($38);
     $$pre20 = HEAP32[$agg$result>>2]|0;
     $$pre21 = HEAP32[$1>>2]|0;
     $phitmp = (($$pre21) + 1)|0;
     $41 = $$pre20;$43 = $phitmp;
    }
    $40 = ((($29)) + 4|0);
    HEAP32[$40>>2] = $agg$result;
    HEAP32[$29>>2] = $41;
    $42 = ((($41)) + 4|0);
    HEAP32[$42>>2] = $29;
    HEAP32[$agg$result>>2] = $29;
    HEAP32[$1>>2] = $43;
    $112 = $29;$113 = $43;
   }
  }
 } while(0);
 $63 = ((($expr)) + 8|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($expr)) + 12|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($64|0)==($66|0);
 if ($67) {
  return;
 }
 $114 = $112;$115 = $113;$116 = $112;$69 = $64;
 L27: while(1) {
  $68 = HEAP32[$69>>2]|0;
  $70 = ((($68)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = HEAP32[$6>>2]|0;
  $73 = ($72|0)==(0);
  L29: do {
   if ($73) {
    $117 = $114;$118 = $115;$119 = $116;
   } else {
    $74 = (($72) + -1)|0;
    $75 = $74 & $72;
    $76 = ($75|0)==(0);
    if ($76) {
     $77 = $74 & $71;
     $81 = $77;
    } else {
     $78 = (($71>>>0) % ($72>>>0))&-1;
     $81 = $78;
    }
    $79 = HEAP32[$2>>2]|0;
    $80 = (($79) + ($81<<2)|0);
    $82 = HEAP32[$80>>2]|0;
    $83 = ($82|0)==(0|0);
    if ($83) {
     $117 = $114;$118 = $115;$119 = $116;
    } else {
     $$pn$i$i2 = $82;
     while(1) {
      $__nd$0$i$i4 = HEAP32[$$pn$i$i2>>2]|0;
      $84 = ($__nd$0$i$i4|0)==(0|0);
      if ($84) {
       $117 = $114;$118 = $115;$119 = $116;
       break L29;
      }
      $85 = ((($__nd$0$i$i4)) + 4|0);
      $86 = HEAP32[$85>>2]|0;
      if ($76) {
       $87 = $86 & $74;
       $90 = $87;
      } else {
       $88 = (($86>>>0) % ($72>>>0))&-1;
       $90 = $88;
      }
      $89 = ($90|0)==($81|0);
      if (!($89)) {
       $117 = $114;$118 = $115;$119 = $116;
       break L29;
      }
      $91 = ((($__nd$0$i$i4)) + 8|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = ($92|0)==($68|0);
      if ($93) {
       $__nd$0$i$i4$lcssa30 = $__nd$0$i$i4;
       break;
      } else {
       $$pn$i$i2 = $__nd$0$i$i4;
      }
     }
     __THREW__ = 0;
     $94 = (invoke_ii(179,20)|0);
     $95 = __THREW__; __THREW__ = 0;
     $96 = $95&1;
     if ($96) {
      $$lcssa = $114;$$lcssa32 = $115;
      break L27;
     }
     $97 = ((($94)) + 8|0);
     HEAP32[$97>>2] = (2352);
     $98 = ((($94)) + 12|0);
     $99 = ((($__nd$0$i$i4$lcssa30)) + 20|0);
     $100 = HEAP32[$99>>2]|0;
     HEAP32[$98>>2] = $100;
     $101 = ((($94)) + 16|0);
     $102 = ((($__nd$0$i$i4$lcssa30)) + 24|0);
     $103 = HEAP32[$102>>2]|0;
     HEAP32[$101>>2] = $103;
     $104 = ($103|0)==(0|0);
     if ($104) {
      $106 = $116;$109 = $115;
     } else {
      __ZNSt3__119__shared_weak_count12__add_sharedEv($103);
      $$pre = HEAP32[$agg$result>>2]|0;
      $$pre19 = HEAP32[$1>>2]|0;
      $106 = $$pre;$109 = $$pre19;
     }
     $105 = ((($94)) + 4|0);
     HEAP32[$105>>2] = $agg$result;
     HEAP32[$94>>2] = $106;
     $107 = ((($106)) + 4|0);
     HEAP32[$107>>2] = $94;
     HEAP32[$agg$result>>2] = $94;
     $108 = (($109) + 1)|0;
     HEAP32[$1>>2] = $108;
     $117 = $94;$118 = $108;$119 = $94;
    }
   }
  } while(0);
  $110 = ((($69)) + 16|0);
  $111 = ($110|0)==($66|0);
  if ($111) {
   label = 41;
   break;
  } else {
   $114 = $117;$115 = $118;$116 = $119;$69 = $110;
  }
 }
 if ((label|0) == 41) {
  return;
 }
 $46 = ___cxa_find_matching_catch()|0;
 $47 = tempRet0;
 $48 = ($$lcssa32|0)==(0);
 if ($48) {
  $lpad$phi24$index = $46;$lpad$phi24$index4 = $47;
  ___resumeException($lpad$phi24$index|0);
  // unreachable;
 }
 $49 = HEAP32[$0>>2]|0;
 $50 = ((($$lcssa)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = ((($52)) + 4|0);
 HEAP32[$53>>2] = $51;
 $54 = HEAP32[$50>>2]|0;
 HEAP32[$54>>2] = $52;
 HEAP32[$1>>2] = 0;
 $55 = ($49|0)==($agg$result|0);
 if ($55) {
  $lpad$phi24$index = $46;$lpad$phi24$index4 = $47;
  ___resumeException($lpad$phi24$index|0);
  // unreachable;
 } else {
  $__f$01$i$i = $49;
 }
 while(1) {
  $56 = ((($__f$01$i$i)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($__f$01$i$i)) + 8|0);
  HEAP32[$58>>2] = (2352);
  $59 = ((($__f$01$i$i)) + 16|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)==(0|0);
  if (!($61)) {
   __ZNSt3__119__shared_weak_count16__release_sharedEv($60);
  }
  __ZdlPv($__f$01$i$i);
  $62 = ($57|0)==($agg$result|0);
  if ($62) {
   $lpad$phi24$index = $46;$lpad$phi24$index4 = $47;
   break;
  } else {
   $__f$01$i$i = $57;
  }
 }
 ___resumeException($lpad$phi24$index|0);
 // unreachable;
}
function __ZN4rhea14simplex_solver14choose_subjectERNS_17linear_expressionE($agg$result,$this,$expr) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $expr = $expr|0;
 var $$0$i$i = 0, $$0$in$i$i = 0.0, $$lcssa = 0, $$lcssa130 = 0, $$lcssa131 = 0, $$lcssa139 = 0, $$lcssa145 = 0, $$lcssa146 = 0, $$lcssa55 = 0, $$lcssa60106 = 0, $$not = 0, $$pn$i$i = 0, $$pn$i$i$i$i = 0, $$pn$i$i$i$i19 = 0, $$pn$i$i$i$i31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0.0;
 var $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__nd$0$i$i = 0, $__nd$0$i$i$i$i = 0, $__nd$0$i$i$i$i21 = 0, $__nd$0$i$i$i$i33 = 0, $coeff$0$lcssa = 0.0, $coeff$075 = 0.0, $coeff$1 = 0.0, $found_new_restricted$0$off078 = 0, $found_new_restricted$1$off0 = 0, $found_unrestricted$0$off079 = 0, $found_unrestricted$1$off0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($expr)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($expr)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 do {
  if ($4) {
   $$lcssa60106 = 0;
   label = 63;
  } else {
   $5 = ((($this)) + 16|0);
   $6 = ((($this)) + 12|0);
   $7 = ((($this)) + 24|0);
   $8 = ((($this)) + 244|0);
   $10 = $1;$116 = 0;$185 = 0;$found_new_restricted$0$off078 = 0;$found_unrestricted$0$off079 = 0;
   L3: while(1) {
    $9 = ((($10)) + 8|0);
    $11 = +HEAPF64[$9>>3];
    $12 = HEAP32[$10>>2]|0;
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($13)) + 28|0);
    $15 = HEAP32[$14>>2]|0;
    __THREW__ = 0;
    $16 = (invoke_ii($15|0,($12|0))|0);
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    L5: do {
     if ($found_unrestricted$0$off079) {
      if ($18) {
       $$lcssa139 = $116;
       label = 20;
       break L3;
      }
      if ($16) {
       $186 = $116;$187 = $185;$found_new_restricted$1$off0 = $found_new_restricted$0$off078;$found_unrestricted$1$off0 = 1;
      } else {
       $19 = HEAP32[$10>>2]|0;
       $20 = ((($19)) + 4|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = HEAP32[$5>>2]|0;
       $23 = ($22|0)==(0);
       if ($23) {
        $188 = $116;$44 = $19;$47 = $10;
        label = 17;
        break L3;
       }
       $24 = (($22) + -1)|0;
       $25 = $24 & $22;
       $26 = ($25|0)==(0);
       if ($26) {
        $27 = $24 & $21;
        $31 = $27;
       } else {
        $28 = (($21>>>0) % ($22>>>0))&-1;
        $31 = $28;
       }
       $29 = HEAP32[$6>>2]|0;
       $30 = (($29) + ($31<<2)|0);
       $32 = HEAP32[$30>>2]|0;
       $33 = ($32|0)==(0|0);
       if ($33) {
        $188 = $116;$44 = $19;$47 = $10;
        label = 17;
        break L3;
       } else {
        $$pn$i$i$i$i19 = $32;
       }
       while(1) {
        $__nd$0$i$i$i$i21 = HEAP32[$$pn$i$i$i$i19>>2]|0;
        $34 = ($__nd$0$i$i$i$i21|0)==(0|0);
        if ($34) {
         $188 = $116;$44 = $19;$47 = $10;
         label = 17;
         break L3;
        }
        $35 = ((($__nd$0$i$i$i$i21)) + 4|0);
        $36 = HEAP32[$35>>2]|0;
        if ($26) {
         $37 = $36 & $24;
         $40 = $37;
        } else {
         $38 = (($36>>>0) % ($22>>>0))&-1;
         $40 = $38;
        }
        $39 = ($40|0)==($31|0);
        if (!($39)) {
         $188 = $116;$44 = $19;$47 = $10;
         label = 17;
         break L3;
        }
        $41 = ((($__nd$0$i$i$i$i21)) + 8|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = ($42|0)==($19|0);
        if ($43) {
         $186 = $116;$187 = $185;$found_new_restricted$1$off0 = $found_new_restricted$0$off078;$found_unrestricted$1$off0 = 1;
         break;
        } else {
         $$pn$i$i$i$i19 = $__nd$0$i$i$i$i21;
        }
       }
      }
     } else {
      if ($18) {
       $$lcssa139 = $116;
       label = 20;
       break L3;
      }
      if (!($16)) {
       $117 = HEAP32[$10>>2]|0;
       $118 = ((($10)) + 4|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = ($119|0)==(0|0);
       if (!($120)) {
        __ZNSt3__119__shared_weak_count12__add_sharedEv($119);
       }
       $121 = ($116|0)==(0|0);
       if ($121) {
        $186 = $119;$187 = $117;$found_new_restricted$1$off0 = $found_new_restricted$0$off078;$found_unrestricted$1$off0 = 1;
        break;
       }
       __ZNSt3__119__shared_weak_count16__release_sharedEv($116);
       $186 = $119;$187 = $117;$found_new_restricted$1$off0 = $found_new_restricted$0$off078;$found_unrestricted$1$off0 = 1;
       break;
      }
      if ($found_new_restricted$0$off078) {
       $186 = $116;$187 = $185;$found_new_restricted$1$off0 = 1;$found_unrestricted$1$off0 = 0;
      } else {
       $58 = HEAP32[$10>>2]|0;
       $59 = HEAP32[$58>>2]|0;
       $60 = ((($59)) + 16|0);
       $61 = HEAP32[$60>>2]|0;
       __THREW__ = 0;
       $62 = (invoke_ii($61|0,($58|0))|0);
       $63 = __THREW__; __THREW__ = 0;
       $64 = $63&1;
       if ($64) {
        $$lcssa139 = $116;
        label = 20;
        break L3;
       }
       $$not = $62 ^ 1;
       $65 = $11 < 0.0;
       $or$cond = $65 & $$not;
       if ($or$cond) {
        $66 = HEAP32[$10>>2]|0;
        $67 = ((($66)) + 4|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = HEAP32[$5>>2]|0;
        $70 = ($69|0)==(0);
        L18: do {
         if (!($70)) {
          $71 = (($69) + -1)|0;
          $72 = $71 & $69;
          $73 = ($72|0)==(0);
          if ($73) {
           $74 = $71 & $68;
           $78 = $74;
          } else {
           $75 = (($68>>>0) % ($69>>>0))&-1;
           $78 = $75;
          }
          $76 = HEAP32[$6>>2]|0;
          $77 = (($76) + ($78<<2)|0);
          $79 = HEAP32[$77>>2]|0;
          $80 = ($79|0)==(0|0);
          if (!($80)) {
           $$pn$i$i = $79;
           while(1) {
            $__nd$0$i$i = HEAP32[$$pn$i$i>>2]|0;
            $81 = ($__nd$0$i$i|0)==(0|0);
            if ($81) {
             break L18;
            }
            $82 = ((($__nd$0$i$i)) + 4|0);
            $83 = HEAP32[$82>>2]|0;
            if ($73) {
             $84 = $83 & $71;
             $87 = $84;
            } else {
             $85 = (($83>>>0) % ($69>>>0))&-1;
             $87 = $85;
            }
            $86 = ($87|0)==($78|0);
            if (!($86)) {
             break L18;
            }
            $88 = ((($__nd$0$i$i)) + 8|0);
            $89 = HEAP32[$88>>2]|0;
            $90 = ($89|0)==($66|0);
            if ($90) {
             break;
            } else {
             $$pn$i$i = $__nd$0$i$i;
            }
           }
           $91 = HEAP32[$7>>2]|0;
           $92 = ($91|0)==(1);
           if (!($92)) {
            $186 = $116;$187 = $185;$found_new_restricted$1$off0 = 0;$found_unrestricted$1$off0 = 0;
            break L5;
           }
           $93 = HEAP32[$8>>2]|0;
           $94 = ((($93)) + 4|0);
           $95 = HEAP32[$94>>2]|0;
           if ($73) {
            $96 = $71 & $95;
            $99 = $96;
           } else {
            $97 = (($95>>>0) % ($69>>>0))&-1;
            $99 = $97;
           }
           $98 = (($76) + ($99<<2)|0);
           $100 = HEAP32[$98>>2]|0;
           $101 = ($100|0)==(0|0);
           if ($101) {
            $186 = $116;$187 = $185;$found_new_restricted$1$off0 = 0;$found_unrestricted$1$off0 = 0;
            break L5;
           } else {
            $$pn$i$i$i$i31 = $100;
           }
           while(1) {
            $__nd$0$i$i$i$i33 = HEAP32[$$pn$i$i$i$i31>>2]|0;
            $102 = ($__nd$0$i$i$i$i33|0)==(0|0);
            if ($102) {
             $186 = $116;$187 = $185;$found_new_restricted$1$off0 = 0;$found_unrestricted$1$off0 = 0;
             break L5;
            }
            $103 = ((($__nd$0$i$i$i$i33)) + 4|0);
            $104 = HEAP32[$103>>2]|0;
            if ($73) {
             $105 = $104 & $71;
             $108 = $105;
            } else {
             $106 = (($104>>>0) % ($69>>>0))&-1;
             $108 = $106;
            }
            $107 = ($108|0)==($99|0);
            if (!($107)) {
             $186 = $116;$187 = $185;$found_new_restricted$1$off0 = 0;$found_unrestricted$1$off0 = 0;
             break L5;
            }
            $109 = ((($__nd$0$i$i$i$i33)) + 8|0);
            $110 = HEAP32[$109>>2]|0;
            $111 = ($110|0)==($93|0);
            if ($111) {
             break;
            } else {
             $$pn$i$i$i$i31 = $__nd$0$i$i$i$i33;
            }
           }
          }
         }
        } while(0);
        $112 = ((($10)) + 4|0);
        $113 = HEAP32[$112>>2]|0;
        $114 = ($113|0)==(0|0);
        if (!($114)) {
         __ZNSt3__119__shared_weak_count12__add_sharedEv($113);
        }
        $115 = ($116|0)==(0|0);
        if ($115) {
         $186 = $113;$187 = $66;$found_new_restricted$1$off0 = 1;$found_unrestricted$1$off0 = 0;
        } else {
         __ZNSt3__119__shared_weak_count16__release_sharedEv($116);
         $186 = $113;$187 = $66;$found_new_restricted$1$off0 = 1;$found_unrestricted$1$off0 = 0;
        }
       } else {
        $186 = $116;$187 = $185;$found_new_restricted$1$off0 = 0;$found_unrestricted$1$off0 = 0;
       }
      }
     }
    } while(0);
    $122 = ((($10)) + 16|0);
    $123 = ($122|0)==($3|0);
    if ($123) {
     $$lcssa145 = $186;$$lcssa146 = $187;
     label = 61;
     break;
    } else {
     $10 = $122;$116 = $186;$185 = $187;$found_new_restricted$0$off078 = $found_new_restricted$1$off0;$found_unrestricted$0$off079 = $found_unrestricted$1$off0;
    }
   }
   if ((label|0) == 17) {
    HEAP32[$agg$result>>2] = $44;
    $45 = ((($agg$result)) + 4|0);
    $46 = ((($47)) + 4|0);
    $48 = HEAP32[$46>>2]|0;
    HEAP32[$45>>2] = $48;
    $49 = ($48|0)==(0|0);
    if ($49) {
     $184 = $188;
     label = 90;
     break;
    }
    __ZNSt3__119__shared_weak_count12__add_sharedEv($48);
    $184 = $188;
    label = 90;
    break;
   }
   else if ((label|0) == 20) {
    $52 = ___cxa_find_matching_catch()|0;
    $53 = tempRet0;
    $57 = $$lcssa139;$lpad$phi$index = $52;$lpad$phi$index3 = $53;
    label = 22;
    break;
   }
   else if ((label|0) == 61) {
    $124 = ($$lcssa146|0)==(0|0);
    if ($124) {
     $$lcssa60106 = $$lcssa145;
     label = 63;
     break;
    }
    HEAP32[$agg$result>>2] = $$lcssa146;
    $125 = ((($agg$result)) + 4|0);
    HEAP32[$125>>2] = $$lcssa145;
    return;
   }
  }
 } while(0);
 L75: do {
  if ((label|0) == 63) {
   $126 = HEAP32[$0>>2]|0;
   $127 = HEAP32[$2>>2]|0;
   $128 = ($126|0)==($127|0);
   L77: do {
    if ($128) {
     $$lcssa = $$lcssa60106;$$lcssa55 = 0;$coeff$0$lcssa = 0.0;
    } else {
     $129 = ((($this)) + 16|0);
     $130 = ((($this)) + 12|0);
     $132 = $126;$169 = $$lcssa60106;$189 = 0;$coeff$075 = 0.0;
     while(1) {
      $131 = HEAP32[$132>>2]|0;
      $133 = HEAP32[$131>>2]|0;
      $134 = ((($133)) + 16|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($131|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       $$lcssa130 = $169;
       label = 19;
       break;
      }
      if (!($136)) {
       $$lcssa131 = $169;
       label = 67;
       break;
      }
      $140 = HEAP32[$132>>2]|0;
      $141 = ((($140)) + 4|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = HEAP32[$129>>2]|0;
      $144 = ($143|0)==(0);
      L83: do {
       if ($144) {
        label = 79;
       } else {
        $145 = (($143) + -1)|0;
        $146 = $145 & $143;
        $147 = ($146|0)==(0);
        if ($147) {
         $148 = $145 & $142;
         $152 = $148;
        } else {
         $149 = (($142>>>0) % ($143>>>0))&-1;
         $152 = $149;
        }
        $150 = HEAP32[$130>>2]|0;
        $151 = (($150) + ($152<<2)|0);
        $153 = HEAP32[$151>>2]|0;
        $154 = ($153|0)==(0|0);
        if ($154) {
         label = 79;
        } else {
         $$pn$i$i$i$i = $153;
         while(1) {
          $__nd$0$i$i$i$i = HEAP32[$$pn$i$i$i$i>>2]|0;
          $155 = ($__nd$0$i$i$i$i|0)==(0|0);
          if ($155) {
           label = 79;
           break L83;
          }
          $156 = ((($__nd$0$i$i$i$i)) + 4|0);
          $157 = HEAP32[$156>>2]|0;
          if ($147) {
           $158 = $157 & $145;
           $161 = $158;
          } else {
           $159 = (($157>>>0) % ($143>>>0))&-1;
           $161 = $159;
          }
          $160 = ($161|0)==($152|0);
          if (!($160)) {
           label = 79;
           break L83;
          }
          $162 = ((($__nd$0$i$i$i$i)) + 8|0);
          $163 = HEAP32[$162>>2]|0;
          $164 = ($163|0)==($140|0);
          if ($164) {
           $190 = $169;$191 = $189;$coeff$1 = $coeff$075;
           break;
          } else {
           $$pn$i$i$i$i = $__nd$0$i$i$i$i;
          }
         }
        }
       }
      } while(0);
      if ((label|0) == 79) {
       label = 0;
       $165 = ((($132)) + 4|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)==(0|0);
       if (!($167)) {
        __ZNSt3__119__shared_weak_count12__add_sharedEv($166);
       }
       $168 = ($169|0)==(0|0);
       if (!($168)) {
        __ZNSt3__119__shared_weak_count16__release_sharedEv($169);
       }
       $170 = ((($132)) + 8|0);
       $171 = +HEAPF64[$170>>3];
       $190 = $166;$191 = $140;$coeff$1 = $171;
      }
      $172 = ((($132)) + 16|0);
      $173 = ($172|0)==($127|0);
      if ($173) {
       $$lcssa = $190;$$lcssa55 = $191;$coeff$0$lcssa = $coeff$1;
       break L77;
      } else {
       $132 = $172;$169 = $190;$189 = $191;$coeff$075 = $coeff$1;
      }
     }
     if ((label|0) == 19) {
      $50 = ___cxa_find_matching_catch()|0;
      $51 = tempRet0;
      $57 = $$lcssa130;$lpad$phi$index = $50;$lpad$phi$index3 = $51;
      label = 22;
      break L75;
     }
     else if ((label|0) == 67) {
      HEAP32[$agg$result>>2] = 0;
      $139 = ((($agg$result)) + 4|0);
      HEAP32[$139>>2] = 0;
      $184 = $$lcssa131;
      label = 90;
      break L75;
     }
    }
   } while(0);
   $174 = +HEAPF64[$expr>>3];
   $175 = $174 > 0.0;
   $176 = 0.0 - $174;
   $$0$in$i$i = $175 ? $174 : $176;
   $$0$i$i = $$0$in$i$i < 1.0E-8;
   do {
    if ($$0$i$i) {
     $179 = $coeff$0$lcssa > 0.0;
     if ($179) {
      __THREW__ = 0;
      (invoke_iid(184,($expr|0),-1.0)|0);
      $180 = __THREW__; __THREW__ = 0;
      $181 = $180&1;
      if ($181) {
       break;
      }
     }
     HEAP32[$agg$result>>2] = $$lcssa55;
     $182 = ((($agg$result)) + 4|0);
     HEAP32[$182>>2] = $$lcssa;
     return;
    } else {
     $177 = (___cxa_allocate_exception(4)|0);
     HEAP32[$177>>2] = (752);
     __THREW__ = 0;
     invoke_viii(182,($177|0),(544|0),(27|0));
     $178 = __THREW__; __THREW__ = 0;
    }
   } while(0);
   $54 = ___cxa_find_matching_catch()|0;
   $55 = tempRet0;
   $57 = $$lcssa;$lpad$phi$index = $54;$lpad$phi$index3 = $55;
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $56 = ($57|0)==(0|0);
  if ($56) {
   ___resumeException($lpad$phi$index|0);
   // unreachable;
  }
  __ZNSt3__119__shared_weak_count16__release_sharedEv($57);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 else if ((label|0) == 90) {
  $183 = ($184|0)==(0|0);
  if ($183) {
   return;
  }
  __ZNSt3__119__shared_weak_count16__release_sharedEv($184);
  return;
 }
}
function __ZN4rhea15symbolic_weightC2Eddd($this,$w1,$w2,$w3) {
 $this = $this|0;
 $w1 = +$w1;
 $w2 = +$w2;
 $w3 = +$w3;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[$this>>3] = $w1;
 $0 = ((($this)) + 8|0);
 HEAPF64[$0>>3] = $w2;
 $1 = ((($this)) + 16|0);
 HEAPF64[$1>>3] = $w3;
 return;
}
function __ZNK4rhea15symbolic_weighteqERKS0_($this,$comp) {
 $this = $this|0;
 $comp = $comp|0;
 var $$01$i$i$i = 0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF64[$this>>3];
 $1 = +HEAPF64[$comp>>3];
 $2 = $0 == $1;
 if ($2) {
  $3 = ((($this)) + 8|0);
  $4 = ((($comp)) + 8|0);
  $5 = +HEAPF64[$3>>3];
  $6 = +HEAPF64[$4>>3];
  $7 = $5 == $6;
  if ($7) {
   $8 = ((($this)) + 16|0);
   $9 = ((($comp)) + 16|0);
   $10 = +HEAPF64[$8>>3];
   $11 = +HEAPF64[$9>>3];
   $12 = $10 == $11;
   if ($12) {
    $$01$i$i$i = 1;
   } else {
    $$01$i$i$i = 0;
   }
  } else {
   $$01$i$i$i = 0;
  }
 } else {
  $$01$i$i$i = 0;
 }
 return ($$01$i$i$i|0);
}
function __ZN4rhea7tableau7add_rowERKNS_8variableERKNS_17linear_expressionE($this,$var,$expr) {
 $this = $this|0;
 $var = $var|0;
 $expr = $expr|0;
 var $$pn$i$i$i$i = 0, $$pre = 0, $$pre$phi7Z2D = 0, $$pre$phiZ2D = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nd$0$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 16|0;
 $1 = sp + 8|0;
 $2 = sp;
 $3 = ((($this)) + 24|0);
 $4 = (__ZNSt3__113unordered_mapIN4rhea8variableENS1_17linear_expressionENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEixERSA_($3,$var)|0);
 $5 = +HEAPF64[$expr>>3];
 HEAPF64[$4>>3] = $5;
 $6 = ($4|0)==($expr|0);
 if ($6) {
  $$pre = ((($expr)) + 8|0);
  $$pre6 = ((($expr)) + 12|0);
  $$pre$phi7Z2D = $$pre6;$$pre$phiZ2D = $$pre;
 } else {
  $7 = ((($4)) + 8|0);
  $8 = ((($expr)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($expr)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  __ZNSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_($7,$9,$11);
  $$pre$phi7Z2D = $10;$$pre$phiZ2D = $8;
 }
 $12 = HEAP32[$$pre$phiZ2D>>2]|0;
 $13 = HEAP32[$$pre$phi7Z2D>>2]|0;
 $14 = ($12|0)==($13|0);
 if (!($14)) {
  $15 = ((($this)) + 4|0);
  $16 = ((($this)) + 28|0);
  $17 = ((($this)) + 84|0);
  $18 = ((($this)) + 24|0);
  $19 = $12;
  while(1) {
   $20 = (__ZNSt3__113unordered_mapIN4rhea8variableENS_13unordered_setIS2_NS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEES5_S7_NS8_INS_4pairIKS2_SA_EEEEEixERSC_($15,$19)|0);
   __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($0,$20,$var);
   $21 = HEAP32[$19>>2]|0;
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_ii[$24 & 511]($21)|0);
   L9: do {
    if ($25) {
     $26 = HEAP32[$19>>2]|0;
     $27 = ((($26)) + 4|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = HEAP32[$16>>2]|0;
     $30 = ($29|0)==(0);
     L11: do {
      if (!($30)) {
       $31 = (($29) + -1)|0;
       $32 = $31 & $29;
       $33 = ($32|0)==(0);
       if ($33) {
        $34 = $31 & $28;
        $38 = $34;
       } else {
        $35 = (($28>>>0) % ($29>>>0))&-1;
        $38 = $35;
       }
       $36 = HEAP32[$18>>2]|0;
       $37 = (($36) + ($38<<2)|0);
       $39 = HEAP32[$37>>2]|0;
       $40 = ($39|0)==(0|0);
       if (!($40)) {
        $$pn$i$i$i$i = $39;
        while(1) {
         $__nd$0$i$i$i$i = HEAP32[$$pn$i$i$i$i>>2]|0;
         $41 = ($__nd$0$i$i$i$i|0)==(0|0);
         if ($41) {
          break L11;
         }
         $42 = ((($__nd$0$i$i$i$i)) + 4|0);
         $43 = HEAP32[$42>>2]|0;
         if ($33) {
          $44 = $43 & $31;
          $47 = $44;
         } else {
          $45 = (($43>>>0) % ($29>>>0))&-1;
          $47 = $45;
         }
         $46 = ($47|0)==($38|0);
         if (!($46)) {
          break L11;
         }
         $48 = ((($__nd$0$i$i$i$i)) + 8|0);
         $49 = HEAP32[$48>>2]|0;
         $50 = ($49|0)==($26|0);
         if ($50) {
          break L9;
         } else {
          $$pn$i$i$i$i = $__nd$0$i$i$i$i;
         }
        }
       }
      }
     } while(0);
     __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$17,$19);
    }
   } while(0);
   $51 = ((($19)) + 16|0);
   $52 = ($51|0)==($13|0);
   if ($52) {
    break;
   } else {
    $19 = $51;
   }
  }
 }
 $53 = HEAP32[$var>>2]|0;
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($54)) + 20|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (FUNCTION_TABLE_ii[$56 & 511]($53)|0);
 if (!($57)) {
  STACKTOP = sp;return;
 }
 $58 = ((($this)) + 64|0);
 __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($2,$58,$var);
 STACKTOP = sp;return;
}
function __ZN4rhea7tableau13remove_columnERKNS_8variableE($this,$var) {
 $this = $this|0;
 $var = $var|0;
 var $$0 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$ph = 0, $$phi$trans$insert = 0, $$pn$i$i = 0, $$pn$i$i$i = 0, $$pn$i$i$i2 = 0, $$pn$us$i$i = 0, $$pre = 0, $$pre25 = 0, $$pre26 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__nd$0$i$i = 0, $__nd$0$i$i$i = 0, $__nd$0$i$i$i$lcssa35 = 0, $__nd$0$i$i$i4 = 0, $__nd$0$i$i$i4$lcssa36 = 0, $__nd$0$us$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 28|0;
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 4|0;
 $0 = sp + 8|0;
 $1 = sp + 32|0;
 $2 = sp;
 $3 = sp + 12|0;
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 $6 = ((($this)) + 4|0);
 $7 = HEAP32[$var>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($this)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (($11) + -1)|0;
 $14 = $13 & $11;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = $13 & $9;
  $20 = $16;
 } else {
  $17 = (($9>>>0) % ($11>>>0))&-1;
  $20 = $17;
 }
 $18 = HEAP32[$6>>2]|0;
 $19 = (($18) + ($20<<2)|0);
 $21 = HEAP32[$19>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 L11: do {
  if ($15) {
   $$pn$us$i$i = $21;
   while(1) {
    $__nd$0$us$i$i = HEAP32[$$pn$us$i$i>>2]|0;
    $23 = ($__nd$0$us$i$i|0)==(0|0);
    if ($23) {
     $$0 = 0;
     label = 44;
     break;
    }
    $24 = ((($__nd$0$us$i$i)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $25 & $13;
    $27 = ($26|0)==($20|0);
    if (!($27)) {
     $$0 = 0;
     label = 44;
     break;
    }
    $28 = ((($__nd$0$us$i$i)) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==($7|0);
    if ($30) {
     $$ph = $__nd$0$us$i$i;
     break L11;
    } else {
     $$pn$us$i$i = $__nd$0$us$i$i;
    }
   }
   if ((label|0) == 44) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $$pn$i$i = $21;
   while(1) {
    $__nd$0$i$i = HEAP32[$$pn$i$i>>2]|0;
    $31 = ($__nd$0$i$i|0)==(0|0);
    if ($31) {
     $$0 = 0;
     label = 44;
     break;
    }
    $32 = ((($__nd$0$i$i)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33>>>0) % ($11>>>0))&-1;
    $35 = ($34|0)==($20|0);
    if (!($35)) {
     $$0 = 0;
     label = 44;
     break;
    }
    $36 = ((($__nd$0$i$i)) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==($7|0);
    if ($38) {
     $$ph = $__nd$0$i$i;
     break L11;
    } else {
     $$pn$i$i = $__nd$0$i$i;
    }
   }
   if ((label|0) == 44) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $39 = ((($$ph)) + 24|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0|0);
 if ($41) {
  $50 = $7;
 } else {
  $42 = ((($this)) + 24|0);
  $44 = $40;
  while(1) {
   $43 = ((($44)) + 8|0);
   $45 = (__ZNSt3__113unordered_mapIN4rhea8variableENS1_17linear_expressionENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEixERSA_($42,$43)|0);
   $46 = ((($45)) + 8|0);
   (__ZN4rhea8flat_mapINS_8variableEdNSt3__14lessIS1_EENS2_9allocatorINS2_4pairIS1_dEEEEE5eraseERKS1_($46,$var)|0);
   $47 = HEAP32[$44>>2]|0;
   $48 = ($47|0)==(0|0);
   if ($48) {
    break;
   } else {
    $44 = $47;
   }
  }
  $$pre = HEAP32[$var>>2]|0;
  $50 = $$pre;
 }
 $49 = HEAP32[$50>>2]|0;
 $51 = ((($49)) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (FUNCTION_TABLE_ii[$52 & 511]($50)|0);
 if ($53) {
  $54 = ((($this)) + 64|0);
  $55 = HEAP32[$var>>2]|0;
  $56 = ((($55)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($this)) + 68|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(0);
  L35: do {
   if ($60) {
    $106 = $55;$89 = $57;
   } else {
    $61 = (($59) + -1)|0;
    $62 = $61 & $59;
    $63 = ($62|0)==(0);
    if ($63) {
     $64 = $61 & $57;
     $68 = $64;
    } else {
     $65 = (($57>>>0) % ($59>>>0))&-1;
     $68 = $65;
    }
    $66 = HEAP32[$54>>2]|0;
    $67 = (($66) + ($68<<2)|0);
    $69 = HEAP32[$67>>2]|0;
    $70 = ($69|0)==(0|0);
    if ($70) {
     $106 = $55;$89 = $57;
    } else {
     $$pn$i$i$i2 = $69;
     while(1) {
      $__nd$0$i$i$i4 = HEAP32[$$pn$i$i$i2>>2]|0;
      $71 = ($__nd$0$i$i$i4|0)==(0|0);
      if ($71) {
       $106 = $55;$89 = $57;
       break L35;
      }
      $72 = ((($__nd$0$i$i$i4)) + 4|0);
      $73 = HEAP32[$72>>2]|0;
      if ($63) {
       $74 = $73 & $61;
       $77 = $74;
      } else {
       $75 = (($73>>>0) % ($59>>>0))&-1;
       $77 = $75;
      }
      $76 = ($77|0)==($68|0);
      if (!($76)) {
       $106 = $55;$89 = $57;
       break L35;
      }
      $78 = ((($__nd$0$i$i$i4)) + 8|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)==($55|0);
      if ($80) {
       $__nd$0$i$i$i4$lcssa36 = $__nd$0$i$i$i4;
       break;
      } else {
       $$pn$i$i$i2 = $__nd$0$i$i$i4;
      }
     }
     HEAP32[$0>>2] = $__nd$0$i$i$i4$lcssa36;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
     __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS2_PvEEEE($1,$54,$$byval_copy);
     $$pre25 = HEAP32[$var>>2]|0;
     $$phi$trans$insert = ((($$pre25)) + 4|0);
     $$pre26 = HEAP32[$$phi$trans$insert>>2]|0;
     $106 = $$pre25;$89 = $$pre26;
    }
   }
  } while(0);
  $81 = ((($this)) + 84|0);
  $82 = ((($this)) + 88|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($83|0)==(0);
  L51: do {
   if (!($84)) {
    $85 = (($83) + -1)|0;
    $86 = $85 & $83;
    $87 = ($86|0)==(0);
    if ($87) {
     $88 = $85 & $89;
     $93 = $88;
    } else {
     $90 = (($89>>>0) % ($83>>>0))&-1;
     $93 = $90;
    }
    $91 = HEAP32[$81>>2]|0;
    $92 = (($91) + ($93<<2)|0);
    $94 = HEAP32[$92>>2]|0;
    $95 = ($94|0)==(0|0);
    if (!($95)) {
     $$pn$i$i$i = $94;
     while(1) {
      $__nd$0$i$i$i = HEAP32[$$pn$i$i$i>>2]|0;
      $96 = ($__nd$0$i$i$i|0)==(0|0);
      if ($96) {
       break L51;
      }
      $97 = ((($__nd$0$i$i$i)) + 4|0);
      $98 = HEAP32[$97>>2]|0;
      if ($87) {
       $99 = $98 & $85;
       $102 = $99;
      } else {
       $100 = (($98>>>0) % ($83>>>0))&-1;
       $102 = $100;
      }
      $101 = ($102|0)==($93|0);
      if (!($101)) {
       break L51;
      }
      $103 = ((($__nd$0$i$i$i)) + 8|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = ($104|0)==($106|0);
      if ($105) {
       $__nd$0$i$i$i$lcssa35 = $__nd$0$i$i$i;
       break;
      } else {
       $$pn$i$i$i = $__nd$0$i$i$i;
      }
     }
     HEAP32[$2>>2] = $__nd$0$i$i$i$lcssa35;
     ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;
     __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS2_PvEEEE($3,$81,$$byval_copy1);
    }
   }
  } while(0);
 }
 HEAP32[$4>>2] = $$ph;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$4>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeISC_PvEEEE($5,$6,$$byval_copy2);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZN4rhea7tableau10remove_rowERKNS_8variableE($agg$result,$this,$var) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $var = $var|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$phi$trans$insert = 0, $$phi$trans$insert71 = 0, $$pn$i$i = 0, $$pn$i$i$i = 0, $$pn$i$i$i10 = 0, $$pn$i$i$i18 = 0, $$pn$i$i$i2 = 0, $$pn$i$i$i39 = 0, $$pn$i$i33 = 0, $$pn$us$i$i = 0, $$pn$us$i$i28 = 0, $$pre = 0, $$pre68 = 0;
 var $$pre69 = 0, $$pre70 = 0, $$pre72 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__nd$0$i$i = 0, $__nd$0$i$i$i = 0, $__nd$0$i$i$i$lcssa88 = 0, $__nd$0$i$i$i12 = 0, $__nd$0$i$i$i12$lcssa90 = 0, $__nd$0$i$i$i20 = 0, $__nd$0$i$i$i20$lcssa92 = 0, $__nd$0$i$i$i4 = 0, $__nd$0$i$i$i4$lcssa89 = 0, $__nd$0$i$i$i41 = 0, $__nd$0$i$i$i41$lcssa91 = 0, $__nd$0$i$i35 = 0, $__nd$0$us$i$i = 0, $__nd$0$us$i$i30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy6 = sp + 76|0;
 $$byval_copy5 = sp + 48|0;
 $$byval_copy4 = sp + 24|0;
 $$byval_copy3 = sp + 36|0;
 $$byval_copy2 = sp + 68|0;
 $$byval_copy1 = sp + 16|0;
 $$byval_copy = sp + 20|0;
 $0 = sp + 56|0;
 $1 = sp + 64|0;
 $2 = sp + 72|0;
 $3 = sp + 80|0;
 $4 = sp + 40|0;
 $5 = sp + 44|0;
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 4|0;
 $9 = sp + 52|0;
 $10 = sp + 28|0;
 $11 = sp + 60|0;
 $12 = sp + 12|0;
 $13 = sp + 32|0;
 $14 = ((($this)) + 24|0);
 $15 = HEAP32[$var>>2]|0;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($this)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 L1: do {
  if ($20) {
   $48 = 0;
  } else {
   $21 = (($19) + -1)|0;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   if ($23) {
    $24 = $21 & $17;
    $28 = $24;
   } else {
    $25 = (($17>>>0) % ($19>>>0))&-1;
    $28 = $25;
   }
   $26 = HEAP32[$14>>2]|0;
   $27 = (($26) + ($28<<2)|0);
   $29 = HEAP32[$27>>2]|0;
   $30 = ($29|0)==(0|0);
   if ($30) {
    $48 = 0;
   } else {
    if ($23) {
     $$pn$us$i$i = $29;
     while(1) {
      $__nd$0$us$i$i = HEAP32[$$pn$us$i$i>>2]|0;
      $31 = ($__nd$0$us$i$i|0)==(0|0);
      if ($31) {
       $48 = 0;
       break L1;
      }
      $32 = ((($__nd$0$us$i$i)) + 4|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = $33 & $21;
      $35 = ($34|0)==($28|0);
      if (!($35)) {
       $48 = 0;
       break L1;
      }
      $36 = ((($__nd$0$us$i$i)) + 8|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)==($15|0);
      if ($38) {
       $48 = $__nd$0$us$i$i;
       break;
      } else {
       $$pn$us$i$i = $__nd$0$us$i$i;
      }
     }
    } else {
     $$pn$i$i = $29;
     while(1) {
      $__nd$0$i$i = HEAP32[$$pn$i$i>>2]|0;
      $39 = ($__nd$0$i$i|0)==(0|0);
      if ($39) {
       $48 = 0;
       break L1;
      }
      $40 = ((($__nd$0$i$i)) + 4|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (($41>>>0) % ($19>>>0))&-1;
      $43 = ($42|0)==($28|0);
      if (!($43)) {
       $48 = 0;
       break L1;
      }
      $44 = ((($__nd$0$i$i)) + 8|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($45|0)==($15|0);
      if ($46) {
       $48 = $__nd$0$i$i;
       break;
      } else {
       $$pn$i$i = $__nd$0$i$i;
      }
     }
    }
   }
  }
 } while(0);
 $47 = ((($48)) + 24|0);
 $49 = HEAP32[$47>>2]|0;
 $50 = ((($48)) + 28|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($49|0)==($51|0);
 if ($52) {
  $155 = $17;$172 = $15;
 } else {
  $53 = ((($this)) + 4|0);
  $54 = ((($this)) + 8|0);
  $55 = ((($this)) + 84|0);
  $56 = ((($this)) + 88|0);
  $58 = $49;
  while(1) {
   $57 = HEAP32[$58>>2]|0;
   $59 = ((($57)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = HEAP32[$54>>2]|0;
   $62 = ($61|0)==(0);
   L22: do {
    if ($62) {
     $90 = 0;
    } else {
     $63 = (($61) + -1)|0;
     $64 = $63 & $61;
     $65 = ($64|0)==(0);
     if ($65) {
      $66 = $63 & $60;
      $70 = $66;
     } else {
      $67 = (($60>>>0) % ($61>>>0))&-1;
      $70 = $67;
     }
     $68 = HEAP32[$53>>2]|0;
     $69 = (($68) + ($70<<2)|0);
     $71 = HEAP32[$69>>2]|0;
     $72 = ($71|0)==(0|0);
     if ($72) {
      $90 = 0;
     } else {
      if ($65) {
       $$pn$us$i$i28 = $71;
       while(1) {
        $__nd$0$us$i$i30 = HEAP32[$$pn$us$i$i28>>2]|0;
        $73 = ($__nd$0$us$i$i30|0)==(0|0);
        if ($73) {
         $90 = 0;
         break L22;
        }
        $74 = ((($__nd$0$us$i$i30)) + 4|0);
        $75 = HEAP32[$74>>2]|0;
        $76 = $75 & $63;
        $77 = ($76|0)==($70|0);
        if (!($77)) {
         $90 = 0;
         break L22;
        }
        $78 = ((($__nd$0$us$i$i30)) + 8|0);
        $79 = HEAP32[$78>>2]|0;
        $80 = ($79|0)==($57|0);
        if ($80) {
         $90 = $__nd$0$us$i$i30;
         break;
        } else {
         $$pn$us$i$i28 = $__nd$0$us$i$i30;
        }
       }
      } else {
       $$pn$i$i33 = $71;
       while(1) {
        $__nd$0$i$i35 = HEAP32[$$pn$i$i33>>2]|0;
        $81 = ($__nd$0$i$i35|0)==(0|0);
        if ($81) {
         $90 = 0;
         break L22;
        }
        $82 = ((($__nd$0$i$i35)) + 4|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = (($83>>>0) % ($61>>>0))&-1;
        $85 = ($84|0)==($70|0);
        if (!($85)) {
         $90 = 0;
         break L22;
        }
        $86 = ((($__nd$0$i$i35)) + 8|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = ($87|0)==($57|0);
        if ($88) {
         $90 = $__nd$0$i$i35;
         break;
        } else {
         $$pn$i$i33 = $__nd$0$i$i35;
        }
       }
      }
     }
    }
   } while(0);
   $89 = ((($90)) + 16|0);
   $91 = HEAP32[$var>>2]|0;
   $92 = ((($91)) + 4|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($90)) + 20|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($95|0)==(0);
   L39: do {
    if (!($96)) {
     $97 = (($95) + -1)|0;
     $98 = $97 & $95;
     $99 = ($98|0)==(0);
     if ($99) {
      $100 = $97 & $93;
      $104 = $100;
     } else {
      $101 = (($93>>>0) % ($95>>>0))&-1;
      $104 = $101;
     }
     $102 = HEAP32[$89>>2]|0;
     $103 = (($102) + ($104<<2)|0);
     $105 = HEAP32[$103>>2]|0;
     $106 = ($105|0)==(0|0);
     if (!($106)) {
      $$pn$i$i$i39 = $105;
      while(1) {
       $__nd$0$i$i$i41 = HEAP32[$$pn$i$i$i39>>2]|0;
       $107 = ($__nd$0$i$i$i41|0)==(0|0);
       if ($107) {
        break L39;
       }
       $108 = ((($__nd$0$i$i$i41)) + 4|0);
       $109 = HEAP32[$108>>2]|0;
       if ($99) {
        $110 = $109 & $97;
        $113 = $110;
       } else {
        $111 = (($109>>>0) % ($95>>>0))&-1;
        $113 = $111;
       }
       $112 = ($113|0)==($104|0);
       if (!($112)) {
        break L39;
       }
       $114 = ((($__nd$0$i$i$i41)) + 8|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = ($115|0)==($91|0);
       if ($116) {
        $__nd$0$i$i$i41$lcssa91 = $__nd$0$i$i$i41;
        break;
       } else {
        $$pn$i$i$i39 = $__nd$0$i$i$i41;
       }
      }
      HEAP32[$0>>2] = $__nd$0$i$i$i41$lcssa91;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
      __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS2_PvEEEE($1,$89,$$byval_copy);
     }
    }
   } while(0);
   $117 = ((($90)) + 28|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = ($118|0)==(0);
   if ($119) {
    HEAP32[$2>>2] = $90;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;
    __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeISC_PvEEEE($12,$53,$$byval_copy1);
    $120 = HEAP32[$58>>2]|0;
    $121 = ((($120)) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = HEAP32[$56>>2]|0;
    $124 = ($123|0)==(0);
    L57: do {
     if (!($124)) {
      $125 = (($123) + -1)|0;
      $126 = $125 & $123;
      $127 = ($126|0)==(0);
      if ($127) {
       $128 = $125 & $122;
       $132 = $128;
      } else {
       $129 = (($122>>>0) % ($123>>>0))&-1;
       $132 = $129;
      }
      $130 = HEAP32[$55>>2]|0;
      $131 = (($130) + ($132<<2)|0);
      $133 = HEAP32[$131>>2]|0;
      $134 = ($133|0)==(0|0);
      if (!($134)) {
       $$pn$i$i$i18 = $133;
       while(1) {
        $__nd$0$i$i$i20 = HEAP32[$$pn$i$i$i18>>2]|0;
        $135 = ($__nd$0$i$i$i20|0)==(0|0);
        if ($135) {
         break L57;
        }
        $136 = ((($__nd$0$i$i$i20)) + 4|0);
        $137 = HEAP32[$136>>2]|0;
        if ($127) {
         $138 = $137 & $125;
         $141 = $138;
        } else {
         $139 = (($137>>>0) % ($123>>>0))&-1;
         $141 = $139;
        }
        $140 = ($141|0)==($132|0);
        if (!($140)) {
         break L57;
        }
        $142 = ((($__nd$0$i$i$i20)) + 8|0);
        $143 = HEAP32[$142>>2]|0;
        $144 = ($143|0)==($120|0);
        if ($144) {
         $__nd$0$i$i$i20$lcssa92 = $__nd$0$i$i$i20;
         break;
        } else {
         $$pn$i$i$i18 = $__nd$0$i$i$i20;
        }
       }
       HEAP32[$3>>2] = $__nd$0$i$i$i20$lcssa92;
       ;HEAP32[$$byval_copy2>>2]=HEAP32[$3>>2]|0;
       __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS2_PvEEEE($4,$55,$$byval_copy2);
      }
     }
    } while(0);
   }
   $145 = ((($58)) + 16|0);
   $146 = ($145|0)==($51|0);
   if ($146) {
    break;
   } else {
    $58 = $145;
   }
  }
  $$pre = HEAP32[$var>>2]|0;
  $$phi$trans$insert = ((($$pre)) + 4|0);
  $$pre68 = HEAP32[$$phi$trans$insert>>2]|0;
  $155 = $$pre68;$172 = $$pre;
 }
 $147 = ((($this)) + 44|0);
 $148 = ((($this)) + 48|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = ($149|0)==(0);
 L76: do {
  if ($150) {
   $174 = $172;
  } else {
   $151 = (($149) + -1)|0;
   $152 = $151 & $149;
   $153 = ($152|0)==(0);
   if ($153) {
    $154 = $151 & $155;
    $159 = $154;
   } else {
    $156 = (($155>>>0) % ($149>>>0))&-1;
    $159 = $156;
   }
   $157 = HEAP32[$147>>2]|0;
   $158 = (($157) + ($159<<2)|0);
   $160 = HEAP32[$158>>2]|0;
   $161 = ($160|0)==(0|0);
   if ($161) {
    $174 = $172;
   } else {
    $$pn$i$i$i10 = $160;
    while(1) {
     $__nd$0$i$i$i12 = HEAP32[$$pn$i$i$i10>>2]|0;
     $162 = ($__nd$0$i$i$i12|0)==(0|0);
     if ($162) {
      $174 = $172;
      break L76;
     }
     $163 = ((($__nd$0$i$i$i12)) + 4|0);
     $164 = HEAP32[$163>>2]|0;
     if ($153) {
      $165 = $164 & $151;
      $168 = $165;
     } else {
      $166 = (($164>>>0) % ($149>>>0))&-1;
      $168 = $166;
     }
     $167 = ($168|0)==($159|0);
     if (!($167)) {
      $174 = $172;
      break L76;
     }
     $169 = ((($__nd$0$i$i$i12)) + 8|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = ($170|0)==($172|0);
     if ($171) {
      $__nd$0$i$i$i12$lcssa90 = $__nd$0$i$i$i12;
      break;
     } else {
      $$pn$i$i$i10 = $__nd$0$i$i$i12;
     }
    }
    HEAP32[$5>>2] = $__nd$0$i$i$i12$lcssa90;
    ;HEAP32[$$byval_copy3>>2]=HEAP32[$5>>2]|0;
    __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS2_PvEEEE($6,$147,$$byval_copy3);
    $$pre69 = HEAP32[$var>>2]|0;
    $174 = $$pre69;
   }
  }
 } while(0);
 $173 = HEAP32[$174>>2]|0;
 $175 = ((($173)) + 20|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = (FUNCTION_TABLE_ii[$176 & 511]($174)|0);
 if (!($177)) {
  $231 = ((($48)) + 16|0);
  $232 = ((($agg$result)) + 8|0);
  $233 = ((($agg$result)) + 12|0);
  $234 = ((($agg$result)) + 16|0);
  $235 = HEAP32[$47>>2]|0;
  HEAP32[$232>>2] = $235;
  $236 = HEAP32[$50>>2]|0;
  HEAP32[$233>>2] = $236;
  $237 = ((($48)) + 32|0);
  $238 = HEAP32[$237>>2]|0;
  HEAP32[$234>>2] = $238;
  HEAP32[$237>>2] = 0;
  HEAP32[$50>>2] = 0;
  HEAP32[$47>>2] = 0;
  $239 = +HEAPF64[$231>>3];
  HEAPF64[$agg$result>>3] = $239;
  HEAP32[$11>>2] = $48;
  ;HEAP32[$$byval_copy6>>2]=HEAP32[$11>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS5_PvEEEE($13,$14,$$byval_copy6);
  STACKTOP = sp;return;
 }
 $178 = ((($this)) + 64|0);
 $179 = HEAP32[$var>>2]|0;
 $180 = ((($179)) + 4|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = ((($this)) + 68|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = ($183|0)==(0);
 L95: do {
  if ($184) {
   $213 = $181;$230 = $179;
  } else {
   $185 = (($183) + -1)|0;
   $186 = $185 & $183;
   $187 = ($186|0)==(0);
   if ($187) {
    $188 = $185 & $181;
    $192 = $188;
   } else {
    $189 = (($181>>>0) % ($183>>>0))&-1;
    $192 = $189;
   }
   $190 = HEAP32[$178>>2]|0;
   $191 = (($190) + ($192<<2)|0);
   $193 = HEAP32[$191>>2]|0;
   $194 = ($193|0)==(0|0);
   if ($194) {
    $213 = $181;$230 = $179;
   } else {
    $$pn$i$i$i2 = $193;
    while(1) {
     $__nd$0$i$i$i4 = HEAP32[$$pn$i$i$i2>>2]|0;
     $195 = ($__nd$0$i$i$i4|0)==(0|0);
     if ($195) {
      $213 = $181;$230 = $179;
      break L95;
     }
     $196 = ((($__nd$0$i$i$i4)) + 4|0);
     $197 = HEAP32[$196>>2]|0;
     if ($187) {
      $198 = $197 & $185;
      $201 = $198;
     } else {
      $199 = (($197>>>0) % ($183>>>0))&-1;
      $201 = $199;
     }
     $200 = ($201|0)==($192|0);
     if (!($200)) {
      $213 = $181;$230 = $179;
      break L95;
     }
     $202 = ((($__nd$0$i$i$i4)) + 8|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==($179|0);
     if ($204) {
      $__nd$0$i$i$i4$lcssa89 = $__nd$0$i$i$i4;
      break;
     } else {
      $$pn$i$i$i2 = $__nd$0$i$i$i4;
     }
    }
    HEAP32[$7>>2] = $__nd$0$i$i$i4$lcssa89;
    ;HEAP32[$$byval_copy4>>2]=HEAP32[$7>>2]|0;
    __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS2_PvEEEE($8,$178,$$byval_copy4);
    $$pre70 = HEAP32[$var>>2]|0;
    $$phi$trans$insert71 = ((($$pre70)) + 4|0);
    $$pre72 = HEAP32[$$phi$trans$insert71>>2]|0;
    $213 = $$pre72;$230 = $$pre70;
   }
  }
 } while(0);
 $205 = ((($this)) + 84|0);
 $206 = ((($this)) + 88|0);
 $207 = HEAP32[$206>>2]|0;
 $208 = ($207|0)==(0);
 L111: do {
  if (!($208)) {
   $209 = (($207) + -1)|0;
   $210 = $209 & $207;
   $211 = ($210|0)==(0);
   if ($211) {
    $212 = $209 & $213;
    $217 = $212;
   } else {
    $214 = (($213>>>0) % ($207>>>0))&-1;
    $217 = $214;
   }
   $215 = HEAP32[$205>>2]|0;
   $216 = (($215) + ($217<<2)|0);
   $218 = HEAP32[$216>>2]|0;
   $219 = ($218|0)==(0|0);
   if (!($219)) {
    $$pn$i$i$i = $218;
    while(1) {
     $__nd$0$i$i$i = HEAP32[$$pn$i$i$i>>2]|0;
     $220 = ($__nd$0$i$i$i|0)==(0|0);
     if ($220) {
      break L111;
     }
     $221 = ((($__nd$0$i$i$i)) + 4|0);
     $222 = HEAP32[$221>>2]|0;
     if ($211) {
      $223 = $222 & $209;
      $226 = $223;
     } else {
      $224 = (($222>>>0) % ($207>>>0))&-1;
      $226 = $224;
     }
     $225 = ($226|0)==($217|0);
     if (!($225)) {
      break L111;
     }
     $227 = ((($__nd$0$i$i$i)) + 8|0);
     $228 = HEAP32[$227>>2]|0;
     $229 = ($228|0)==($230|0);
     if ($229) {
      $__nd$0$i$i$i$lcssa88 = $__nd$0$i$i$i;
      break;
     } else {
      $$pn$i$i$i = $__nd$0$i$i$i;
     }
    }
    HEAP32[$9>>2] = $__nd$0$i$i$i$lcssa88;
    ;HEAP32[$$byval_copy5>>2]=HEAP32[$9>>2]|0;
    __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS2_PvEEEE($10,$205,$$byval_copy5);
   }
  }
 } while(0);
 $231 = ((($48)) + 16|0);
 $232 = ((($agg$result)) + 8|0);
 $233 = ((($agg$result)) + 12|0);
 $234 = ((($agg$result)) + 16|0);
 $235 = HEAP32[$47>>2]|0;
 HEAP32[$232>>2] = $235;
 $236 = HEAP32[$50>>2]|0;
 HEAP32[$233>>2] = $236;
 $237 = ((($48)) + 32|0);
 $238 = HEAP32[$237>>2]|0;
 HEAP32[$234>>2] = $238;
 HEAP32[$237>>2] = 0;
 HEAP32[$50>>2] = 0;
 HEAP32[$47>>2] = 0;
 $239 = +HEAPF64[$231>>3];
 HEAPF64[$agg$result>>3] = $239;
 HEAP32[$11>>2] = $48;
 ;HEAP32[$$byval_copy6>>2]=HEAP32[$11>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS5_PvEEEE($13,$14,$$byval_copy6);
 STACKTOP = sp;return;
}
function __ZN4rhea7tableau14substitute_outERKNS_8variableERKNS_17linear_expressionE($this,$old,$expr) {
 $this = $this|0;
 $old = $old|0;
 $expr = $expr|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$ph = 0, $$ph$i$i = 0, $$phi$trans$insert = 0, $$pn$i$i = 0, $$pn$i$i$i = 0, $$pn$i$i$i3 = 0, $$pn$us$i$i = 0, $$pn$us$i$i$i = 0, $$pre = 0, $$pre27 = 0, $$pre28 = 0, $$pre29 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__nd$0$i$i = 0, $__nd$0$i$i$i = 0, $__nd$0$i$i$i$lcssa43 = 0;
 var $__nd$0$i$i$i5 = 0, $__nd$0$us$i$i = 0, $__nd$0$us$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 8|0;
 $$byval_copy = sp + 28|0;
 $0 = sp + 16|0;
 $1 = sp + 32|0;
 $2 = sp + 40|0;
 $3 = sp;
 $4 = sp + 24|0;
 $5 = sp + 36|0;
 $6 = ((($this)) + 4|0);
 $7 = HEAP32[$old>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($this)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = (($11) + -1)|0;
 $14 = $13 & $11;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = $13 & $9;
  $20 = $16;
 } else {
  $17 = (($9>>>0) % ($11>>>0))&-1;
  $20 = $17;
 }
 $18 = HEAP32[$6>>2]|0;
 $19 = (($18) + ($20<<2)|0);
 $21 = HEAP32[$19>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  STACKTOP = sp;return;
 }
 L11: do {
  if ($15) {
   $$pn$us$i$i = $21;
   while(1) {
    $__nd$0$us$i$i = HEAP32[$$pn$us$i$i>>2]|0;
    $23 = ($__nd$0$us$i$i|0)==(0|0);
    if ($23) {
     label = 49;
     break;
    }
    $24 = ((($__nd$0$us$i$i)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $25 & $13;
    $27 = ($26|0)==($20|0);
    if (!($27)) {
     label = 49;
     break;
    }
    $28 = ((($__nd$0$us$i$i)) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==($7|0);
    if ($30) {
     $$ph = $__nd$0$us$i$i;
     break L11;
    } else {
     $$pn$us$i$i = $__nd$0$us$i$i;
    }
   }
   if ((label|0) == 49) {
    STACKTOP = sp;return;
   }
  } else {
   $$pn$i$i = $21;
   while(1) {
    $__nd$0$i$i = HEAP32[$$pn$i$i>>2]|0;
    $31 = ($__nd$0$i$i|0)==(0|0);
    if ($31) {
     label = 49;
     break;
    }
    $32 = ((($__nd$0$i$i)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33>>>0) % ($11>>>0))&-1;
    $35 = ($34|0)==($20|0);
    if (!($35)) {
     label = 49;
     break;
    }
    $36 = ((($__nd$0$i$i)) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==($7|0);
    if ($38) {
     $$ph = $__nd$0$i$i;
     break L11;
    } else {
     $$pn$i$i = $__nd$0$i$i;
    }
   }
   if ((label|0) == 49) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $39 = ((($$ph)) + 24|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0|0);
 if ($41) {
  $57 = $11;$62 = $9;$77 = $7;
 } else {
  $42 = ((($this)) + 24|0);
  $43 = ((($this)) + 44|0);
  $45 = $40;
  while(1) {
   $44 = ((($45)) + 8|0);
   $46 = (__ZNSt3__113unordered_mapIN4rhea8variableENS1_17linear_expressionENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEixERSA_($42,$44)|0);
   __ZN4rhea17linear_expression14substitute_outERKNS_8variableERKS0_S3_RNS_7tableauE($46,$old,$expr,$44,$this);
   $47 = HEAP32[$44>>2]|0;
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($48)) + 28|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (FUNCTION_TABLE_ii[$50 & 511]($47)|0);
   if ($51) {
    $52 = +HEAPF64[$46>>3];
    $53 = $52 < 0.0;
    if ($53) {
     __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($0,$43,$44);
    }
   }
   $54 = HEAP32[$45>>2]|0;
   $55 = ($54|0)==(0|0);
   if ($55) {
    break;
   } else {
    $45 = $54;
   }
  }
  $$pre = HEAP32[$old>>2]|0;
  $$phi$trans$insert = ((($$pre)) + 4|0);
  $$pre27 = HEAP32[$$phi$trans$insert>>2]|0;
  $$pre28 = HEAP32[$10>>2]|0;
  $57 = $$pre28;$62 = $$pre27;$77 = $$pre;
 }
 $56 = ($57|0)==(0);
 L37: do {
  if ($56) {
   $87 = $77;
  } else {
   $58 = (($57) + -1)|0;
   $59 = $58 & $57;
   $60 = ($59|0)==(0);
   if ($60) {
    $61 = $58 & $62;
    $66 = $61;
   } else {
    $63 = (($62>>>0) % ($57>>>0))&-1;
    $66 = $63;
   }
   $64 = HEAP32[$6>>2]|0;
   $65 = (($64) + ($66<<2)|0);
   $67 = HEAP32[$65>>2]|0;
   $68 = ($67|0)==(0|0);
   if ($68) {
    $87 = $77;
   } else {
    if ($60) {
     $$pn$us$i$i$i = $67;
     while(1) {
      $__nd$0$us$i$i$i = HEAP32[$$pn$us$i$i$i>>2]|0;
      $69 = ($__nd$0$us$i$i$i|0)==(0|0);
      if ($69) {
       $87 = $77;
       break L37;
      }
      $70 = ((($__nd$0$us$i$i$i)) + 4|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = $71 & $58;
      $73 = ($72|0)==($66|0);
      if (!($73)) {
       $87 = $77;
       break L37;
      }
      $74 = ((($__nd$0$us$i$i$i)) + 8|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ($75|0)==($77|0);
      if ($76) {
       $$ph$i$i = $__nd$0$us$i$i$i;
       break;
      } else {
       $$pn$us$i$i$i = $__nd$0$us$i$i$i;
      }
     }
    } else {
     $$pn$i$i$i3 = $67;
     while(1) {
      $__nd$0$i$i$i5 = HEAP32[$$pn$i$i$i3>>2]|0;
      $78 = ($__nd$0$i$i$i5|0)==(0|0);
      if ($78) {
       $87 = $77;
       break L37;
      }
      $79 = ((($__nd$0$i$i$i5)) + 4|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (($80>>>0) % ($57>>>0))&-1;
      $82 = ($81|0)==($66|0);
      if (!($82)) {
       $87 = $77;
       break L37;
      }
      $83 = ((($__nd$0$i$i$i5)) + 8|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ($84|0)==($77|0);
      if ($85) {
       $$ph$i$i = $__nd$0$i$i$i5;
       break;
      } else {
       $$pn$i$i$i3 = $__nd$0$i$i$i5;
      }
     }
    }
    HEAP32[$1>>2] = $$ph$i$i;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
    __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeISC_PvEEEE($2,$6,$$byval_copy);
    $$pre29 = HEAP32[$old>>2]|0;
    $87 = $$pre29;
   }
  }
 } while(0);
 $86 = HEAP32[$87>>2]|0;
 $88 = ((($86)) + 20|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (FUNCTION_TABLE_ii[$89 & 511]($87)|0);
 if (!($90)) {
  STACKTOP = sp;return;
 }
 $91 = (__ZNSt3__113unordered_mapIN4rhea8variableENS_13unordered_setIS2_NS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEES5_S7_NS8_INS_4pairIKS2_SA_EEEEEixERSC_($6,$old)|0);
 $92 = ((($91)) + 12|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ($93|0)==(0);
 if (!($94)) {
  $95 = ((($this)) + 64|0);
  __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($3,$95,$old);
 }
 $96 = ((($this)) + 84|0);
 $97 = HEAP32[$old>>2]|0;
 $98 = ((($97)) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = ((($this)) + 88|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ($101|0)==(0);
 L61: do {
  if (!($102)) {
   $103 = (($101) + -1)|0;
   $104 = $103 & $101;
   $105 = ($104|0)==(0);
   if ($105) {
    $106 = $103 & $99;
    $110 = $106;
   } else {
    $107 = (($99>>>0) % ($101>>>0))&-1;
    $110 = $107;
   }
   $108 = HEAP32[$96>>2]|0;
   $109 = (($108) + ($110<<2)|0);
   $111 = HEAP32[$109>>2]|0;
   $112 = ($111|0)==(0|0);
   if (!($112)) {
    $$pn$i$i$i = $111;
    while(1) {
     $__nd$0$i$i$i = HEAP32[$$pn$i$i$i>>2]|0;
     $113 = ($__nd$0$i$i$i|0)==(0|0);
     if ($113) {
      break L61;
     }
     $114 = ((($__nd$0$i$i$i)) + 4|0);
     $115 = HEAP32[$114>>2]|0;
     if ($105) {
      $116 = $115 & $103;
      $119 = $116;
     } else {
      $117 = (($115>>>0) % ($101>>>0))&-1;
      $119 = $117;
     }
     $118 = ($119|0)==($110|0);
     if (!($118)) {
      break L61;
     }
     $120 = ((($__nd$0$i$i$i)) + 8|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = ($121|0)==($97|0);
     if ($122) {
      $__nd$0$i$i$i$lcssa43 = $__nd$0$i$i$i;
      break;
     } else {
      $$pn$i$i$i = $__nd$0$i$i$i;
     }
    }
    HEAP32[$4>>2] = $__nd$0$i$i$i$lcssa43;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$4>>2]|0;
    __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS2_PvEEEE($5,$96,$$byval_copy1);
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZN4rhea7tableau21note_removed_variableERKNS_8variableES3_($this,$v,$subj) {
 $this = $this|0;
 $v = $v|0;
 $subj = $subj|0;
 var $$0123 = 0, $$0124 = 0, $$0221 = 0, $$0222 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$ph$i$i = 0, $$phi$trans$insert = 0, $$pn$i$i = 0, $$pn$i$i$i = 0, $$pn$i$i$i13 = 0, $$pn$i$i$i4 = 0, $$pn$us$i$i$i = 0, $$pre = 0, $$pre38 = 0, $$pre39 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__nd$0$i$i = 0, $__nd$0$i$i$i = 0, $__nd$0$i$i$i$lcssa49 = 0, $__nd$0$i$i$i15 = 0;
 var $__nd$0$i$i$i6 = 0, $__nd$0$i$i$i6$lcssa50 = 0, $__nd$0$i$i$lcssa53 = 0, $__nd$0$us$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy3 = sp + 52|0;
 $$byval_copy2 = sp + 44|0;
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $0 = sp + 40|0;
 $1 = sp + 48|0;
 $2 = sp + 56|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp + 24|0;
 $6 = sp + 12|0;
 $7 = sp + 28|0;
 $8 = sp;
 $9 = ((($this)) + 4|0);
 $10 = (__ZNSt3__113unordered_mapIN4rhea8variableENS_13unordered_setIS2_NS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEES5_S7_NS8_INS_4pairIKS2_SA_EEEEEixERSC_($9,$v)|0);
 $11 = HEAP32[$subj>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($10)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 L1: do {
  if (!($16)) {
   $17 = (($15) + -1)|0;
   $18 = $17 & $15;
   $19 = ($18|0)==(0);
   if ($19) {
    $20 = $17 & $13;
    $24 = $20;
   } else {
    $21 = (($13>>>0) % ($15>>>0))&-1;
    $24 = $21;
   }
   $22 = HEAP32[$10>>2]|0;
   $23 = (($22) + ($24<<2)|0);
   $25 = HEAP32[$23>>2]|0;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    $$pn$i$i = $25;
    while(1) {
     $__nd$0$i$i = HEAP32[$$pn$i$i>>2]|0;
     $27 = ($__nd$0$i$i|0)==(0|0);
     if ($27) {
      break L1;
     }
     $28 = ((($__nd$0$i$i)) + 4|0);
     $29 = HEAP32[$28>>2]|0;
     if ($19) {
      $30 = $29 & $17;
      $33 = $30;
     } else {
      $31 = (($29>>>0) % ($15>>>0))&-1;
      $33 = $31;
     }
     $32 = ($33|0)==($24|0);
     if (!($32)) {
      break L1;
     }
     $34 = ((($__nd$0$i$i)) + 8|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ($35|0)==($11|0);
     if ($36) {
      $__nd$0$i$i$lcssa53 = $__nd$0$i$i;
      break;
     } else {
      $$pn$i$i = $__nd$0$i$i;
     }
    }
    HEAP32[$0>>2] = $__nd$0$i$i$lcssa53;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;
    __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS2_PvEEEE($8,$10,$$byval_copy);
    $50 = ((($10)) + 12|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($51|0)==(0);
    if (!($52)) {
     STACKTOP = sp;return;
    }
    $53 = HEAP32[$v>>2]|0;
    $54 = ((($53)) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ((($this)) + 8|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==(0);
    L19: do {
     if ($58) {
      $110 = $53;$93 = $55;
     } else {
      $59 = (($57) + -1)|0;
      $60 = $59 & $57;
      $61 = ($60|0)==(0);
      if ($61) {
       $62 = $59 & $55;
       $66 = $62;
      } else {
       $63 = (($55>>>0) % ($57>>>0))&-1;
       $66 = $63;
      }
      $64 = HEAP32[$9>>2]|0;
      $65 = (($64) + ($66<<2)|0);
      $67 = HEAP32[$65>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $110 = $53;$93 = $55;
      } else {
       if ($61) {
        $$pn$us$i$i$i = $67;
        while(1) {
         $__nd$0$us$i$i$i = HEAP32[$$pn$us$i$i$i>>2]|0;
         $69 = ($__nd$0$us$i$i$i|0)==(0|0);
         if ($69) {
          $110 = $53;$93 = $55;
          break L19;
         }
         $70 = ((($__nd$0$us$i$i$i)) + 4|0);
         $71 = HEAP32[$70>>2]|0;
         $72 = $71 & $59;
         $73 = ($72|0)==($66|0);
         if (!($73)) {
          $110 = $53;$93 = $55;
          break L19;
         }
         $74 = ((($__nd$0$us$i$i$i)) + 8|0);
         $75 = HEAP32[$74>>2]|0;
         $76 = ($75|0)==($53|0);
         if ($76) {
          $$ph$i$i = $__nd$0$us$i$i$i;
          break;
         } else {
          $$pn$us$i$i$i = $__nd$0$us$i$i$i;
         }
        }
       } else {
        $$pn$i$i$i13 = $67;
        while(1) {
         $__nd$0$i$i$i15 = HEAP32[$$pn$i$i$i13>>2]|0;
         $77 = ($__nd$0$i$i$i15|0)==(0|0);
         if ($77) {
          $110 = $53;$93 = $55;
          break L19;
         }
         $78 = ((($__nd$0$i$i$i15)) + 4|0);
         $79 = HEAP32[$78>>2]|0;
         $80 = (($79>>>0) % ($57>>>0))&-1;
         $81 = ($80|0)==($66|0);
         if (!($81)) {
          $110 = $53;$93 = $55;
          break L19;
         }
         $82 = ((($__nd$0$i$i$i15)) + 8|0);
         $83 = HEAP32[$82>>2]|0;
         $84 = ($83|0)==($53|0);
         if ($84) {
          $$ph$i$i = $__nd$0$i$i$i15;
          break;
         } else {
          $$pn$i$i$i13 = $__nd$0$i$i$i15;
         }
        }
       }
       HEAP32[$1>>2] = $$ph$i$i;
       ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;
       __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeISC_PvEEEE($2,$9,$$byval_copy1);
       $$pre = HEAP32[$v>>2]|0;
       $$phi$trans$insert = ((($$pre)) + 4|0);
       $$pre38 = HEAP32[$$phi$trans$insert>>2]|0;
       $110 = $$pre;$93 = $$pre38;
      }
     }
    } while(0);
    $85 = ((($this)) + 64|0);
    $86 = ((($this)) + 68|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0);
    L37: do {
     if ($88) {
      $113 = $110;
     } else {
      $89 = (($87) + -1)|0;
      $90 = $89 & $87;
      $91 = ($90|0)==(0);
      if ($91) {
       $92 = $89 & $93;
       $97 = $92;
      } else {
       $94 = (($93>>>0) % ($87>>>0))&-1;
       $97 = $94;
      }
      $95 = HEAP32[$85>>2]|0;
      $96 = (($95) + ($97<<2)|0);
      $98 = HEAP32[$96>>2]|0;
      $99 = ($98|0)==(0|0);
      if ($99) {
       $113 = $110;
      } else {
       $$pn$i$i$i4 = $98;
       while(1) {
        $__nd$0$i$i$i6 = HEAP32[$$pn$i$i$i4>>2]|0;
        $100 = ($__nd$0$i$i$i6|0)==(0|0);
        if ($100) {
         $113 = $110;
         break L37;
        }
        $101 = ((($__nd$0$i$i$i6)) + 4|0);
        $102 = HEAP32[$101>>2]|0;
        if ($91) {
         $103 = $102 & $89;
         $106 = $103;
        } else {
         $104 = (($102>>>0) % ($87>>>0))&-1;
         $106 = $104;
        }
        $105 = ($106|0)==($97|0);
        if (!($105)) {
         $113 = $110;
         break L37;
        }
        $107 = ((($__nd$0$i$i$i6)) + 8|0);
        $108 = HEAP32[$107>>2]|0;
        $109 = ($108|0)==($110|0);
        if ($109) {
         $__nd$0$i$i$i6$lcssa50 = $__nd$0$i$i$i6;
         break;
        } else {
         $$pn$i$i$i4 = $__nd$0$i$i$i6;
        }
       }
       HEAP32[$3>>2] = $__nd$0$i$i$i6$lcssa50;
       ;HEAP32[$$byval_copy2>>2]=HEAP32[$3>>2]|0;
       __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS2_PvEEEE($4,$85,$$byval_copy2);
       $$pre39 = HEAP32[$v>>2]|0;
       $113 = $$pre39;
      }
     }
    } while(0);
    $111 = ((($this)) + 84|0);
    $112 = ((($113)) + 4|0);
    $114 = HEAP32[$112>>2]|0;
    $115 = ((($this)) + 88|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($116|0)==(0);
    L53: do {
     if (!($117)) {
      $118 = (($116) + -1)|0;
      $119 = $118 & $116;
      $120 = ($119|0)==(0);
      if ($120) {
       $121 = $118 & $114;
       $125 = $121;
      } else {
       $122 = (($114>>>0) % ($116>>>0))&-1;
       $125 = $122;
      }
      $123 = HEAP32[$111>>2]|0;
      $124 = (($123) + ($125<<2)|0);
      $126 = HEAP32[$124>>2]|0;
      $127 = ($126|0)==(0|0);
      if (!($127)) {
       $$pn$i$i$i = $126;
       while(1) {
        $__nd$0$i$i$i = HEAP32[$$pn$i$i$i>>2]|0;
        $128 = ($__nd$0$i$i$i|0)==(0|0);
        if ($128) {
         break L53;
        }
        $129 = ((($__nd$0$i$i$i)) + 4|0);
        $130 = HEAP32[$129>>2]|0;
        if ($120) {
         $131 = $130 & $118;
         $134 = $131;
        } else {
         $132 = (($130>>>0) % ($116>>>0))&-1;
         $134 = $132;
        }
        $133 = ($134|0)==($125|0);
        if (!($133)) {
         break L53;
        }
        $135 = ((($__nd$0$i$i$i)) + 8|0);
        $136 = HEAP32[$135>>2]|0;
        $137 = ($136|0)==($113|0);
        if ($137) {
         $__nd$0$i$i$i$lcssa49 = $__nd$0$i$i$i;
         break;
        } else {
         $$pn$i$i$i = $__nd$0$i$i$i;
        }
       }
       HEAP32[$5>>2] = $__nd$0$i$i$i$lcssa49;
       ;HEAP32[$$byval_copy3>>2]=HEAP32[$5>>2]|0;
       __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS2_PvEEEE($6,$111,$$byval_copy3);
      }
     }
    } while(0);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $37 = (___cxa_allocate_exception(16)|0);
 __THREW__ = 0;
 invoke_viii(213,($7|0),(768|0),44);
 $38 = __THREW__; __THREW__ = 0;
 $39 = $38&1;
 do {
  if ($39) {
   $48 = ___cxa_find_matching_catch()|0;
   $49 = tempRet0;
   $$0124 = $49;$$0222 = $48;
  } else {
   HEAP32[$37>>2] = (680);
   $40 = ((($37)) + 4|0);
   __THREW__ = 0;
   invoke_vii(214,($40|0),($7|0));
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   if ($42) {
    $43 = ___cxa_find_matching_catch()|0;
    $44 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
    $$0124 = $44;$$0222 = $43;
    break;
   }
   __THREW__ = 0;
   invoke_viii(182,($37|0),(696|0),(54|0));
   $45 = __THREW__; __THREW__ = 0;
   $46 = ___cxa_find_matching_catch()|0;
   $47 = tempRet0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
   $$0123 = $47;$$0221 = $46;
   ___resumeException($$0221|0);
   // unreachable;
  }
 } while(0);
 ___cxa_free_exception(($37|0));
 $$0123 = $$0124;$$0221 = $$0222;
 ___resumeException($$0221|0);
 // unreachable;
}
function __ZN4rhea7tableau19note_added_variableERKNS_8variableES3_($this,$v,$subj) {
 $this = $this|0;
 $v = $v|0;
 $subj = $subj|0;
 var $$pn$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nd$0$i$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 8|0;
 $1 = sp;
 $2 = ((($this)) + 4|0);
 $3 = (__ZNSt3__113unordered_mapIN4rhea8variableENS_13unordered_setIS2_NS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEES5_S7_NS8_INS_4pairIKS2_SA_EEEEEixERSC_($2,$v)|0);
 __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($1,$3,$subj);
 $4 = HEAP32[$v>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 511]($4)|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$v>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($this)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 L4: do {
  if (!($14)) {
   $15 = (($13) + -1)|0;
   $16 = $15 & $13;
   $17 = ($16|0)==(0);
   if ($17) {
    $18 = $15 & $11;
    $23 = $18;
   } else {
    $19 = (($11>>>0) % ($13>>>0))&-1;
    $23 = $19;
   }
   $20 = ((($this)) + 24|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($23<<2)|0);
   $24 = HEAP32[$22>>2]|0;
   $25 = ($24|0)==(0|0);
   if (!($25)) {
    $$pn$i$i$i$i = $24;
    while(1) {
     $__nd$0$i$i$i$i = HEAP32[$$pn$i$i$i$i>>2]|0;
     $26 = ($__nd$0$i$i$i$i|0)==(0|0);
     if ($26) {
      break L4;
     }
     $27 = ((($__nd$0$i$i$i$i)) + 4|0);
     $28 = HEAP32[$27>>2]|0;
     if ($17) {
      $29 = $28 & $15;
      $32 = $29;
     } else {
      $30 = (($28>>>0) % ($13>>>0))&-1;
      $32 = $30;
     }
     $31 = ($32|0)==($23|0);
     if (!($31)) {
      break L4;
     }
     $33 = ((($__nd$0$i$i$i$i)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)==($9|0);
     if ($35) {
      break;
     } else {
      $$pn$i$i$i$i = $__nd$0$i$i$i$i;
     }
    }
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $36 = ((($this)) + 84|0);
 __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($0,$36,$v);
 STACKTOP = sp;return;
}
function __ZN4rhea8flat_mapINS_8variableEdNSt3__14lessIS1_EENS2_9allocatorINS2_4pairIS1_dEEEEEixERKS1_($this,$key) {
 $this = $this|0;
 $key = $key|0;
 var $$byval_copy = 0, $$in$i = 0, $$neg2$i$i$i$i = 0, $$pre = 0, $$sum$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__len$0$be$i$i$i$i = 0, $__len$03$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $2 = sp;
 $3 = HEAP32[$key>>2]|0;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 $5 = ((($key)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  __ZNSt3__119__shared_weak_count12__add_sharedEv($6);
 }
 $8 = ((($2)) + 8|0);
 HEAPF64[$8>>3] = 0.0;
 $9 = HEAP32[$this>>2]|0;
 $10 = ((($this)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11;
 $13 = $9;
 $14 = (($12) - ($13))|0;
 $15 = $14 >> 4;
 $16 = ($15|0)==(0);
 if ($16) {
  $30 = $9;
 } else {
  $17 = ((($3)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $21 = $9;$__len$03$i$i$i$i = $15;
  while(1) {
   $19 = (($__len$03$i$i$i$i|0) / 2)&-1;
   $20 = (($21) + ($19<<4)|0);
   $22 = HEAP32[$20>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24>>>0)<($18>>>0);
   if ($25) {
    $$sum$i$i$i$i = (($19) + 1)|0;
    $26 = (($21) + ($$sum$i$i$i$i<<4)|0);
    $$neg2$i$i$i$i = (($__len$03$i$i$i$i) + -1)|0;
    $27 = (($$neg2$i$i$i$i) - ($19))|0;
    $47 = $26;$__len$0$be$i$i$i$i = $27;
   } else {
    $47 = $21;$__len$0$be$i$i$i$i = $19;
   }
   $28 = ($__len$0$be$i$i$i$i|0)==(0);
   if ($28) {
    $30 = $47;
    break;
   } else {
    $21 = $47;$__len$03$i$i$i$i = $__len$0$be$i$i$i$i;
   }
  }
 }
 $29 = ($30|0)==($11|0);
 if ($29) {
  label = 10;
 } else {
  $31 = ((($3)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$30>>2]|0;
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($32>>>0)<($35>>>0);
  if ($36) {
   label = 10;
  } else {
   $$in$i = $30;$42 = $6;
  }
 }
 do {
  if ((label|0) == 10) {
   HEAP32[$1>>2] = $30;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
   invoke_viiii(215,($0|0),($this|0),($$byval_copy|0),($2|0));
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if (!($38)) {
    $39 = HEAP32[$0>>2]|0;
    $$pre = HEAP32[$4>>2]|0;
    $$in$i = $39;$42 = $$pre;
    break;
   }
   $43 = ___cxa_find_matching_catch()|0;
   $44 = tempRet0;
   $45 = HEAP32[$4>>2]|0;
   $46 = ($45|0)==(0|0);
   if ($46) {
    ___resumeException($43|0);
    // unreachable;
   }
   __ZNSt3__119__shared_weak_count16__release_sharedEv($45);
   ___resumeException($43|0);
   // unreachable;
  }
 } while(0);
 $40 = ((($$in$i)) + 8|0);
 $41 = ($42|0)==(0|0);
 if ($41) {
  STACKTOP = sp;return ($40|0);
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv($42);
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__113unordered_mapIN4rhea8variableENS1_17linear_expressionENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEixERSA_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $$0 = 0, $$ph$sink = 0, $$pn$i$i = 0, $$pn$us$i$i = 0, $$pre$i$i$i$i$i$i$i = 0, $$pre$i$i$i$i$i$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $__nd$0$i$i = 0, $__nd$0$us$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$__k>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($this)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 L1: do {
  if (!($6)) {
   $7 = (($5) + -1)|0;
   $8 = $7 & $5;
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = $7 & $3;
    $14 = $10;
   } else {
    $11 = (($3>>>0) % ($5>>>0))&-1;
    $14 = $11;
   }
   $12 = HEAP32[$this>>2]|0;
   $13 = (($12) + ($14<<2)|0);
   $15 = HEAP32[$13>>2]|0;
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    if ($9) {
     $$pn$us$i$i = $15;
     while(1) {
      $__nd$0$us$i$i = HEAP32[$$pn$us$i$i>>2]|0;
      $17 = ($__nd$0$us$i$i|0)==(0|0);
      if ($17) {
       break L1;
      }
      $18 = ((($__nd$0$us$i$i)) + 4|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = $19 & $7;
      $21 = ($20|0)==($14|0);
      if (!($21)) {
       break L1;
      }
      $22 = ((($__nd$0$us$i$i)) + 8|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($23|0)==($1|0);
      if ($24) {
       $$ph$sink = $__nd$0$us$i$i;
       break;
      } else {
       $$pn$us$i$i = $__nd$0$us$i$i;
      }
     }
     $$0 = ((($$ph$sink)) + 16|0);
     STACKTOP = sp;return ($$0|0);
    } else {
     $$pn$i$i = $15;
     while(1) {
      $__nd$0$i$i = HEAP32[$$pn$i$i>>2]|0;
      $25 = ($__nd$0$i$i|0)==(0|0);
      if ($25) {
       break L1;
      }
      $26 = ((($__nd$0$i$i)) + 4|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = (($27>>>0) % ($5>>>0))&-1;
      $29 = ($28|0)==($14|0);
      if (!($29)) {
       break L1;
      }
      $30 = ((($__nd$0$i$i)) + 8|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($31|0)==($1|0);
      if ($32) {
       $$ph$sink = $__nd$0$i$i;
       break;
      } else {
       $$pn$i$i = $__nd$0$i$i;
      }
     }
     $$0 = ((($$ph$sink)) + 16|0);
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $33 = (__Znwj(40)|0);
 $34 = ((($33)) + 8|0);
 HEAP32[$34>>2] = $1;
 $35 = ((($33)) + 12|0);
 $36 = ((($__k)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 HEAP32[$35>>2] = $37;
 $38 = ($37|0)==(0|0);
 if (!($38)) {
  __ZNSt3__119__shared_weak_count12__add_sharedEv($37);
 }
 $39 = ((($33)) + 16|0);
 __THREW__ = 0;
 invoke_vid(216,($39|0),0.0);
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if ($41) {
  $42 = ___cxa_find_matching_catch()|0;
  $43 = tempRet0;
  $44 = HEAP32[$35>>2]|0;
  $45 = ($44|0)==(0|0);
  if ($45) {
   __ZdlPv($33);
   ___resumeException($42|0);
   // unreachable;
  }
  __ZNSt3__119__shared_weak_count16__release_sharedEv($44);
  __ZdlPv($33);
  ___resumeException($42|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_viii(217,($0|0),($this|0),($33|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if (!($47)) {
  $48 = HEAP32[$0>>2]|0;
  $$ph$sink = $48;
  $$0 = ((($$ph$sink)) + 16|0);
  STACKTOP = sp;return ($$0|0);
 }
 $49 = ___cxa_find_matching_catch()|0;
 $50 = tempRet0;
 $51 = ((($33)) + 24|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(0|0);
 if (!($53)) {
  $54 = ((($33)) + 28|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)==($52|0);
  if ($56) {
   $64 = $52;
  } else {
   $58 = $55;
   while(1) {
    $57 = ((($58)) + -16|0);
    HEAP32[$54>>2] = $57;
    $59 = ((($58)) + -12|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($60|0)==(0|0);
    if ($61) {
     $63 = $57;
    } else {
     __ZNSt3__119__shared_weak_count16__release_sharedEv($60);
     $$pre$i$i$i$i$i$i$i$i$i = HEAP32[$54>>2]|0;
     $63 = $$pre$i$i$i$i$i$i$i$i$i;
    }
    $62 = ($63|0)==($52|0);
    if ($62) {
     break;
    } else {
     $58 = $63;
    }
   }
   $$pre$i$i$i$i$i$i$i = HEAP32[$51>>2]|0;
   $64 = $$pre$i$i$i$i$i$i$i;
  }
  __ZdlPv($64);
 }
 $65 = HEAP32[$35>>2]|0;
 $66 = ($65|0)==(0|0);
 if ($66) {
  __ZdlPv($33);
  ___resumeException($49|0);
  // unreachable;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv($65);
 __ZdlPv($33);
 ___resumeException($49|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__15dequeIjNS_9allocatorIjEEE19__add_back_capacityEv($this) {
 $this = $this|0;
 var $$0 = 0, $$01 = 0, $$lcssa = 0, $$lcssa50 = 0, $$lcssa51 = 0, $$lcssa52 = 0, $$lcssa55 = 0, $$lcssa56 = 0, $$lcssa57 = 0, $$lcssa58 = 0, $$pr$pre$i = 0, $$pr$pre$i23 = 0, $$pre = 0, $$pre$i = 0, $$pre$i12 = 0, $$pre$i20 = 0, $$pre36 = 0, $$pre37 = 0, $$pre38 = 0, $$pre40 = 0;
 var $$pre5$i = 0, $$pre5$i25 = 0, $$sum = 0, $$sum$i = 0, $$sum$i16 = 0, $$sum$i8 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $118$phi = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $50$phi = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__buf = 0, $__i$032 = 0, $__new_last2$i$i$i$i = 0, $__new_last2$i$i$i$i2 = 0, $scevgep$i$i$i$i = 0, $scevgep$i$i$i$i3 = 0, $scevgep4$i$i$i$i = 0, $scevgep4$i$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $__buf = sp + 4|0;
 $2 = sp;
 $3 = ((($this)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)>(1023);
 if ($5) {
  $6 = (($4) + -1024)|0;
  HEAP32[$3>>2] = $6;
  $7 = ((($this)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($8)) + 4|0);
  HEAP32[$7>>2] = $10;
  $11 = ((($this)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($this)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12|0)==($14|0);
  do {
   if ($15) {
    $16 = HEAP32[$this>>2]|0;
    $17 = ($10>>>0)>($16>>>0);
    if ($17) {
     $18 = $10;
     $19 = $16;
     $20 = (($18) - ($19))|0;
     $21 = $20 >> 2;
     $22 = (($21) + 1)|0;
     $23 = (($22|0) / -2)&-1;
     $$sum28 = (($23) + 1)|0;
     $24 = (($8) + ($$sum28<<2)|0);
     $25 = $12;
     $26 = (($25) - ($18))|0;
     $27 = $26 >> 2;
     _memmove(($24|0),($10|0),($26|0))|0;
     $$sum$i8 = (($27) + 1)|0;
     $$sum29 = (($$sum$i8) + ($23))|0;
     $28 = (($8) + ($$sum29<<2)|0);
     HEAP32[$11>>2] = $28;
     $29 = HEAP32[$7>>2]|0;
     $30 = (($29) + ($23<<2)|0);
     HEAP32[$7>>2] = $30;
     $57 = $28;
     label = 13;
     break;
    }
    $31 = $12;
    $32 = $16;
    $33 = (($31) - ($32))|0;
    $34 = $33 >> 1;
    $35 = ($34|0)==(0);
    $36 = $35 ? 1 : $34;
    $37 = $36 >>> 2;
    $38 = $36 << 2;
    $39 = (__Znwj($38)|0);
    $40 = (($39) + ($37<<2)|0);
    $41 = (($39) + ($36<<2)|0);
    $42 = ($10|0)==($12|0);
    if ($42) {
     $52 = $40;$54 = $16;
    } else {
     $44 = $40;$46 = $10;$50 = $8;
     while(1) {
      $43 = ($44|0)==(0|0);
      if ($43) {
       $48 = 0;
      } else {
       $45 = HEAP32[$46>>2]|0;
       HEAP32[$44>>2] = $45;
       $48 = $44;
      }
      $47 = ((($48)) + 4|0);
      $49 = ((($50)) + 8|0);
      $51 = ($49|0)==($12|0);
      if ($51) {
       $$lcssa = $47;
       break;
      } else {
       $50$phi = $46;$44 = $47;$46 = $49;$50 = $50$phi;
      }
     }
     $$pre$i12 = HEAP32[$this>>2]|0;
     $52 = $$lcssa;$54 = $$pre$i12;
    }
    HEAP32[$this>>2] = $39;
    HEAP32[$7>>2] = $40;
    HEAP32[$11>>2] = $52;
    HEAP32[$13>>2] = $41;
    $53 = ($54|0)==(0|0);
    if ($53) {
     $56 = $52;
     label = 12;
    } else {
     __ZdlPv($54);
     $$pr$pre$i = HEAP32[$11>>2]|0;
     $56 = $$pr$pre$i;
     label = 12;
    }
   } else {
    $56 = $12;
    label = 12;
   }
  } while(0);
  if ((label|0) == 12) {
   $55 = ($56|0)==(0|0);
   if ($55) {
    $59 = 0;
   } else {
    $57 = $56;
    label = 13;
   }
  }
  if ((label|0) == 13) {
   HEAP32[$57>>2] = $9;
   $$pre5$i = HEAP32[$11>>2]|0;
   $59 = $$pre5$i;
  }
  $58 = ((($59)) + 4|0);
  HEAP32[$11>>2] = $58;
  STACKTOP = sp;return;
 }
 $60 = ((($this)) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($this)) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $61;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = $66 >> 2;
 $68 = ((($this)) + 12|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$this>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = $73 >> 2;
 $75 = ($67>>>0)<($74>>>0);
 if ($75) {
  $76 = ($69|0)==($61|0);
  $77 = (__Znwj(4096)|0);
  if (!($76)) {
   HEAP32[$0>>2] = $77;
   __ZNSt3__114__split_bufferIPjNS_9allocatorIS1_EEE9push_backEOS1_($this,$0);
   STACKTOP = sp;return;
  }
  HEAP32[$1>>2] = $77;
  __ZNSt3__114__split_bufferIPjNS_9allocatorIS1_EEE10push_frontEOS1_($this,$1);
  $78 = HEAP32[$62>>2]|0;
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($78)) + 4|0);
  HEAP32[$62>>2] = $80;
  $81 = HEAP32[$60>>2]|0;
  $82 = HEAP32[$68>>2]|0;
  $83 = ($81|0)==($82|0);
  do {
   if ($83) {
    $84 = HEAP32[$this>>2]|0;
    $85 = ($80>>>0)>($84>>>0);
    if ($85) {
     $86 = $80;
     $87 = $84;
     $88 = (($86) - ($87))|0;
     $89 = $88 >> 2;
     $90 = (($89) + 1)|0;
     $91 = (($90|0) / -2)&-1;
     $$sum = (($91) + 1)|0;
     $92 = (($78) + ($$sum<<2)|0);
     $93 = $81;
     $94 = (($93) - ($86))|0;
     $95 = $94 >> 2;
     _memmove(($92|0),($80|0),($94|0))|0;
     $$sum$i16 = (($95) + 1)|0;
     $$sum27 = (($$sum$i16) + ($91))|0;
     $96 = (($78) + ($$sum27<<2)|0);
     HEAP32[$60>>2] = $96;
     $97 = HEAP32[$62>>2]|0;
     $98 = (($97) + ($91<<2)|0);
     HEAP32[$62>>2] = $98;
     $125 = $96;
     label = 29;
     break;
    }
    $99 = $81;
    $100 = $84;
    $101 = (($99) - ($100))|0;
    $102 = $101 >> 1;
    $103 = ($102|0)==(0);
    $104 = $103 ? 1 : $102;
    $105 = $104 >>> 2;
    $106 = $104 << 2;
    $107 = (__Znwj($106)|0);
    $108 = (($107) + ($105<<2)|0);
    $109 = (($107) + ($104<<2)|0);
    $110 = ($80|0)==($81|0);
    if ($110) {
     $120 = $108;$122 = $84;
    } else {
     $112 = $108;$114 = $80;$118 = $78;
     while(1) {
      $111 = ($112|0)==(0|0);
      if ($111) {
       $116 = 0;
      } else {
       $113 = HEAP32[$114>>2]|0;
       HEAP32[$112>>2] = $113;
       $116 = $112;
      }
      $115 = ((($116)) + 4|0);
      $117 = ((($118)) + 8|0);
      $119 = ($117|0)==($81|0);
      if ($119) {
       $$lcssa50 = $115;
       break;
      } else {
       $118$phi = $114;$112 = $115;$114 = $117;$118 = $118$phi;
      }
     }
     $$pre$i20 = HEAP32[$this>>2]|0;
     $120 = $$lcssa50;$122 = $$pre$i20;
    }
    HEAP32[$this>>2] = $107;
    HEAP32[$62>>2] = $108;
    HEAP32[$60>>2] = $120;
    HEAP32[$68>>2] = $109;
    $121 = ($122|0)==(0|0);
    if ($121) {
     $124 = $120;
     label = 28;
    } else {
     __ZdlPv($122);
     $$pr$pre$i23 = HEAP32[$60>>2]|0;
     $124 = $$pr$pre$i23;
     label = 28;
    }
   } else {
    $124 = $81;
    label = 28;
   }
  } while(0);
  if ((label|0) == 28) {
   $123 = ($124|0)==(0|0);
   if ($123) {
    $127 = 0;
   } else {
    $125 = $124;
    label = 29;
   }
  }
  if ((label|0) == 29) {
   HEAP32[$125>>2] = $79;
   $$pre5$i25 = HEAP32[$60>>2]|0;
   $127 = $$pre5$i25;
  }
  $126 = ((($127)) + 4|0);
  HEAP32[$60>>2] = $126;
  STACKTOP = sp;return;
 }
 $128 = $73 >> 1;
 $129 = ($128|0)==(0);
 $130 = $129 ? 1 : $128;
 $131 = ((($this)) + 12|0);
 $132 = ((($__buf)) + 12|0);
 $133 = ((($__buf)) + 16|0);
 HEAP32[$133>>2] = $131;
 $134 = $130 << 2;
 $135 = (__Znwj($134)|0);
 HEAP32[$__buf>>2] = $135;
 $136 = (($135) + ($67<<2)|0);
 $137 = ((($__buf)) + 8|0);
 HEAP32[$137>>2] = $136;
 $138 = ((($__buf)) + 4|0);
 HEAP32[$138>>2] = $136;
 $139 = (($135) + ($130<<2)|0);
 HEAP32[$132>>2] = $139;
 __THREW__ = 0;
 $140 = (invoke_ii(179,4096)|0);
 $141 = __THREW__; __THREW__ = 0;
 $142 = $141&1;
 L51: do {
  if ($142) {
   label = 33;
  } else {
   HEAP32[$2>>2] = $140;
   __THREW__ = 0;
   invoke_vii(218,($__buf|0),($2|0));
   $143 = __THREW__; __THREW__ = 0;
   $144 = $143&1;
   if ($144) {
    label = 33;
   } else {
    $155 = HEAP32[$60>>2]|0;
    $156 = HEAP32[$62>>2]|0;
    $157 = ($155|0)==($156|0);
    do {
     if ($157) {
      $$pre = HEAP32[$__buf>>2]|0;
      $$pre36 = HEAP32[$138>>2]|0;
      $211 = $$pre;$212 = $$pre36;$213 = $155;$215 = $155;
     } else {
      $$pre38 = HEAP32[$138>>2]|0;
      $161 = $$pre38;$__i$032 = $155;
      L57: while(1) {
       $158 = ((($__i$032)) + -4|0);
       $159 = HEAP32[$__buf>>2]|0;
       $160 = ($161|0)==($159|0);
       do {
        if ($160) {
         $162 = HEAP32[$137>>2]|0;
         $163 = HEAP32[$132>>2]|0;
         $164 = ($162>>>0)<($163>>>0);
         $165 = $163;
         if ($164) {
          $166 = $162;
          $167 = (($165) - ($166))|0;
          $168 = $167 >> 2;
          $169 = (($168) + 1)|0;
          $170 = (($169|0) / 2)&-1;
          $171 = $161;
          $172 = (($166) - ($171))|0;
          $173 = $172 >> 2;
          $$sum$i = (($170) - ($173))|0;
          $174 = (($162) + ($$sum$i<<2)|0);
          _memmove(($174|0),($161|0),($172|0))|0;
          HEAP32[$138>>2] = $174;
          $175 = (($162) + ($170<<2)|0);
          HEAP32[$137>>2] = $175;
          $202 = $174;$235 = $161;
          break;
         }
         $176 = $161;
         $177 = (($165) - ($176))|0;
         $178 = $177 >> 1;
         $179 = ($178|0)==(0);
         $180 = $179 ? 1 : $178;
         $181 = $180 << 2;
         __THREW__ = 0;
         $182 = (invoke_ii(179,($181|0))|0);
         $183 = __THREW__; __THREW__ = 0;
         $184 = $183&1;
         if ($184) {
          $$lcssa52 = $161;$$lcssa56 = $162;
          label = 50;
          break L57;
         }
         $185 = (($180) + 3)|0;
         $186 = $185 >>> 2;
         $187 = (($182) + ($186<<2)|0);
         $188 = (($182) + ($180<<2)|0);
         $189 = ($161|0)==($162|0);
         if ($189) {
          $198 = $187;$200 = $161;
         } else {
          $191 = $187;$193 = $161;
          while(1) {
           $190 = ($191|0)==(0|0);
           if ($190) {
            $195 = 0;
           } else {
            $192 = HEAP32[$193>>2]|0;
            HEAP32[$191>>2] = $192;
            $195 = $191;
           }
           $194 = ((($195)) + 4|0);
           $196 = ((($193)) + 4|0);
           $197 = ($196|0)==($162|0);
           if ($197) {
            $$lcssa51 = $194;
            break;
           } else {
            $191 = $194;$193 = $196;
           }
          }
          $$pre$i = HEAP32[$__buf>>2]|0;
          $198 = $$lcssa51;$200 = $$pre$i;
         }
         HEAP32[$__buf>>2] = $182;
         HEAP32[$138>>2] = $187;
         HEAP32[$137>>2] = $198;
         HEAP32[$132>>2] = $188;
         $199 = ($200|0)==(0|0);
         if ($199) {
          $202 = $187;$235 = $182;
         } else {
          __ZdlPv($200);
          $202 = $187;$235 = $182;
         }
        } else {
         $202 = $161;$235 = $159;
        }
       } while(0);
       $201 = ((($202)) + -4|0);
       $203 = HEAP32[$158>>2]|0;
       HEAP32[$201>>2] = $203;
       $204 = HEAP32[$138>>2]|0;
       $205 = ((($204)) + -4|0);
       HEAP32[$138>>2] = $205;
       $206 = HEAP32[$62>>2]|0;
       $207 = ($158|0)==($206|0);
       if ($207) {
        $$lcssa55 = $158;$$lcssa57 = $235;$$lcssa58 = $205;
        label = 51;
        break;
       } else {
        $161 = $205;$__i$032 = $158;
       }
      }
      if ((label|0) == 50) {
       $208 = ___cxa_find_matching_catch()|0;
       $209 = tempRet0;
       $$0 = $209;$$01 = $208;$225 = $$lcssa56;$226 = $$lcssa52;
       break L51;
      }
      else if ((label|0) == 51) {
       $$pre37 = HEAP32[$60>>2]|0;
       $211 = $$lcssa57;$212 = $$lcssa58;$213 = $$lcssa55;$215 = $$pre37;
       break;
      }
     }
    } while(0);
    $210 = HEAP32[$this>>2]|0;
    HEAP32[$this>>2] = $211;
    HEAP32[$__buf>>2] = $210;
    HEAP32[$62>>2] = $212;
    HEAP32[$138>>2] = $213;
    $214 = HEAP32[$137>>2]|0;
    HEAP32[$60>>2] = $214;
    HEAP32[$137>>2] = $215;
    $216 = HEAP32[$68>>2]|0;
    $217 = HEAP32[$132>>2]|0;
    HEAP32[$68>>2] = $217;
    HEAP32[$132>>2] = $216;
    $218 = ($215|0)==($213|0);
    if (!($218)) {
     $__new_last2$i$i$i$i2 = $213;
     $scevgep$i$i$i$i3 = ((($215)) + -4|0);
     $219 = $scevgep$i$i$i$i3;
     $220 = (($219) - ($__new_last2$i$i$i$i2))|0;
     $221 = $220 >>> 2;
     $222 = $221 ^ -1;
     $scevgep4$i$i$i$i4 = (($215) + ($222<<2)|0);
     HEAP32[$137>>2] = $scevgep4$i$i$i$i4;
    }
    $223 = ($210|0)==(0|0);
    if ($223) {
     STACKTOP = sp;return;
    }
    __ZdlPv($210);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 do {
  if ((label|0) == 33) {
   $145 = ___cxa_find_matching_catch(0|0)|0;
   $146 = tempRet0;
   (___cxa_begin_catch(($145|0))|0);
   $147 = HEAP32[$137>>2]|0;
   $148 = ((($147)) + -4|0);
   $149 = HEAP32[$148>>2]|0;
   __ZdlPv($149);
   __THREW__ = 0;
   invoke_v(195);
   $150 = __THREW__; __THREW__ = 0;
   $151 = ___cxa_find_matching_catch()|0;
   $152 = tempRet0;
   __THREW__ = 0;
   invoke_v(196);
   $153 = __THREW__; __THREW__ = 0;
   $154 = $153&1;
   if ($154) {
    $233 = ___cxa_find_matching_catch(0|0)|0;
    $234 = tempRet0;
    ___clang_call_terminate($233);
    // unreachable;
   } else {
    $$pre40 = HEAP32[$138>>2]|0;
    $$0 = $152;$$01 = $151;$225 = $147;$226 = $$pre40;
    break;
   }
  }
 } while(0);
 $224 = ($225|0)==($226|0);
 if (!($224)) {
  $__new_last2$i$i$i$i = $226;
  $scevgep$i$i$i$i = ((($225)) + -4|0);
  $227 = $scevgep$i$i$i$i;
  $228 = (($227) - ($__new_last2$i$i$i$i))|0;
  $229 = $228 >>> 2;
  $230 = $229 ^ -1;
  $scevgep4$i$i$i$i = (($225) + ($230<<2)|0);
  HEAP32[$137>>2] = $scevgep4$i$i$i$i;
 }
 $231 = HEAP32[$__buf>>2]|0;
 $232 = ($231|0)==(0|0);
 if ($232) {
  ___resumeException($$01|0);
  // unreachable;
 }
 __ZdlPv($231);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNSt3__113unordered_mapIN4rhea10constraintENS1_8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEixERSA_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $$0 = 0, $$ph$pn = 0, $$pn$i$i = 0, $$pn$us$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__h = 0, $__nd$0$i$i = 0, $__nd$0$us$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__h = sp + 8|0;
 $0 = sp;
 $1 = ((($__k)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = Math_imul($3, 1540483477)|0;
 $5 = $4 >>> 24;
 $6 = $5 ^ $4;
 $7 = Math_imul($6, 1540483477)|0;
 $8 = $7 ^ 1866966612;
 $9 = $8 >>> 13;
 $10 = $9 ^ $8;
 $11 = Math_imul($10, 1540483477)|0;
 $12 = $11 >>> 15;
 $13 = $12 ^ $11;
 $14 = ((($this)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 L1: do {
  if (!($16)) {
   $17 = (($15) + -1)|0;
   $18 = $17 & $15;
   $19 = ($18|0)==(0);
   if ($19) {
    $20 = $13 & $17;
    $24 = $20;
   } else {
    $21 = (($13>>>0) % ($15>>>0))&-1;
    $24 = $21;
   }
   $22 = HEAP32[$this>>2]|0;
   $23 = (($22) + ($24<<2)|0);
   $25 = HEAP32[$23>>2]|0;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    if ($19) {
     $$pn$us$i$i = $25;
     while(1) {
      $__nd$0$us$i$i = HEAP32[$$pn$us$i$i>>2]|0;
      $27 = ($__nd$0$us$i$i|0)==(0|0);
      if ($27) {
       break L1;
      }
      $28 = ((($__nd$0$us$i$i)) + 4|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = $29 & $17;
      $31 = ($30|0)==($24|0);
      if (!($31)) {
       break L1;
      }
      $32 = ((($__nd$0$us$i$i)) + 8|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = HEAP32[$33>>2]|0;
      $35 = (FUNCTION_TABLE_iii[$34 & 511]($32,$__k)|0);
      if ($35) {
       $$ph$pn = $__nd$0$us$i$i;
       break;
      } else {
       $$pn$us$i$i = $__nd$0$us$i$i;
      }
     }
     $$0 = ((($$ph$pn)) + 20|0);
     STACKTOP = sp;return ($$0|0);
    } else {
     $$pn$i$i = $25;
     while(1) {
      $__nd$0$i$i = HEAP32[$$pn$i$i>>2]|0;
      $36 = ($__nd$0$i$i|0)==(0|0);
      if ($36) {
       break L1;
      }
      $37 = ((($__nd$0$i$i)) + 4|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = (($38>>>0) % ($15>>>0))&-1;
      $40 = ($39|0)==($24|0);
      if (!($40)) {
       break L1;
      }
      $41 = ((($__nd$0$i$i)) + 8|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = HEAP32[$42>>2]|0;
      $44 = (FUNCTION_TABLE_iii[$43 & 511]($41,$__k)|0);
      if ($44) {
       $$ph$pn = $__nd$0$i$i;
       break;
      } else {
       $$pn$i$i = $__nd$0$i$i;
      }
     }
     $$0 = ((($$ph$pn)) + 20|0);
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 __ZNSt3__113unordered_mapIN4rhea10constraintENS1_8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEE25__construct_node_with_keyERSA_($__h,$this,$__k);
 $45 = HEAP32[$__h>>2]|0;
 __THREW__ = 0;
 invoke_viii(219,($0|0),($this|0),($45|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if (!($47)) {
  $48 = HEAP32[$0>>2]|0;
  HEAP32[$__h>>2] = 0;
  $$ph$pn = $48;
  $$0 = ((($$ph$pn)) + 20|0);
  STACKTOP = sp;return ($$0|0);
 }
 $49 = ___cxa_find_matching_catch()|0;
 $50 = tempRet0;
 HEAP32[$__h>>2] = 0;
 $51 = ($45|0)==(0|0);
 if ($51) {
  ___resumeException($49|0);
  // unreachable;
 }
 $52 = ((($__h)) + 9|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = ($53<<24>>24)==(0);
 if (!($54)) {
  $55 = ((($45)) + 24|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)==(0|0);
  if (!($57)) {
   __ZNSt3__119__shared_weak_count16__release_sharedEv($56);
  }
 }
 $58 = ((($__h)) + 8|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = ($59<<24>>24)==(0);
 if (!($60)) {
  $61 = ((($45)) + 8|0);
  HEAP32[$61>>2] = (2352);
  $62 = ((($45)) + 16|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)==(0|0);
  if (!($64)) {
   __ZNSt3__119__shared_weak_count16__release_sharedEv($63);
  }
 }
 __ZdlPv($45);
 ___resumeException($49|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__113unordered_mapIN4rhea8variableENS1_10constraintENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEixERSA_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $$0 = 0, $$pn$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nd$0$i$i = 0, $__nd$0$i$i$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$__k>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($this)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 L1: do {
  if (!($6)) {
   $7 = (($5) + -1)|0;
   $8 = $7 & $5;
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = $7 & $3;
    $14 = $10;
   } else {
    $11 = (($3>>>0) % ($5>>>0))&-1;
    $14 = $11;
   }
   $12 = HEAP32[$this>>2]|0;
   $13 = (($12) + ($14<<2)|0);
   $15 = HEAP32[$13>>2]|0;
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    $$pn$i$i = $15;
    while(1) {
     $__nd$0$i$i = HEAP32[$$pn$i$i>>2]|0;
     $17 = ($__nd$0$i$i|0)==(0|0);
     if ($17) {
      break L1;
     }
     $18 = ((($__nd$0$i$i)) + 4|0);
     $19 = HEAP32[$18>>2]|0;
     if ($9) {
      $20 = $19 & $7;
      $23 = $20;
     } else {
      $21 = (($19>>>0) % ($5>>>0))&-1;
      $23 = $21;
     }
     $22 = ($23|0)==($14|0);
     if (!($22)) {
      break L1;
     }
     $24 = ((($__nd$0$i$i)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==($1|0);
     if ($26) {
      $__nd$0$i$i$sink = $__nd$0$i$i;
      break;
     } else {
      $$pn$i$i = $__nd$0$i$i;
     }
    }
    $$0 = ((($__nd$0$i$i$sink)) + 16|0);
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $27 = (__Znwj(28)|0);
 $28 = ((($27)) + 8|0);
 HEAP32[$28>>2] = $1;
 $29 = ((($27)) + 12|0);
 $30 = ((($__k)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 HEAP32[$29>>2] = $31;
 $32 = ($31|0)==(0|0);
 if (!($32)) {
  __ZNSt3__119__shared_weak_count12__add_sharedEv($31);
 }
 $33 = ((($27)) + 16|0);
 HEAP32[$33>>2] = (2352);
 $34 = ((($27)) + 20|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($27)) + 24|0);
 HEAP32[$35>>2] = 0;
 __THREW__ = 0;
 invoke_viii(220,($0|0),($this|0),($27|0));
 $36 = __THREW__; __THREW__ = 0;
 $37 = $36&1;
 if (!($37)) {
  $38 = HEAP32[$0>>2]|0;
  $__nd$0$i$i$sink = $38;
  $$0 = ((($__nd$0$i$i$sink)) + 16|0);
  STACKTOP = sp;return ($$0|0);
 }
 $39 = ___cxa_find_matching_catch()|0;
 $40 = tempRet0;
 HEAP32[$33>>2] = (2352);
 $41 = HEAP32[$35>>2]|0;
 $42 = ($41|0)==(0|0);
 if (!($42)) {
  __ZNSt3__119__shared_weak_count16__release_sharedEv($41);
 }
 $43 = HEAP32[$29>>2]|0;
 $44 = ($43|0)==(0|0);
 if ($44) {
  __ZdlPv($27);
  ___resumeException($39|0);
  // unreachable;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv($43);
 __ZdlPv($27);
 ___resumeException($39|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__113unordered_mapIN4rhea10constraintENS_13unordered_setINS1_8variableENS_4hashIS4_EENS_8equal_toIS4_EENS_9allocatorIS4_EEEENS5_IS2_EENS7_IS2_EENS9_INS_4pairIKS2_SB_EEEEEixERSF_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $$0 = 0, $$01$i$i$i$i$i$i$i$i = 0, $$pn$i$i = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__nd$0$i$i = 0, $__nd$0$i$i$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = ((($__k)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = Math_imul($3, 1540483477)|0;
 $5 = $4 >>> 24;
 $6 = $5 ^ $4;
 $7 = Math_imul($6, 1540483477)|0;
 $8 = $7 ^ 1866966612;
 $9 = $8 >>> 13;
 $10 = $9 ^ $8;
 $11 = Math_imul($10, 1540483477)|0;
 $12 = $11 >>> 15;
 $13 = $12 ^ $11;
 $14 = ((($this)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 do {
  if ($16) {
   $41 = $2;
  } else {
   $17 = (($15) + -1)|0;
   $18 = $17 & $15;
   $19 = ($18|0)==(0);
   if ($19) {
    $20 = $13 & $17;
    $24 = $20;
   } else {
    $21 = (($13>>>0) % ($15>>>0))&-1;
    $24 = $21;
   }
   $22 = HEAP32[$this>>2]|0;
   $23 = (($22) + ($24<<2)|0);
   $25 = HEAP32[$23>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $41 = $2;
   } else {
    $$pn$i$i = $25;
    while(1) {
     $__nd$0$i$i = HEAP32[$$pn$i$i>>2]|0;
     $27 = ($__nd$0$i$i|0)==(0|0);
     if ($27) {
      label = 12;
      break;
     }
     $28 = ((($__nd$0$i$i)) + 4|0);
     $29 = HEAP32[$28>>2]|0;
     if ($19) {
      $30 = $29 & $17;
      $33 = $30;
     } else {
      $31 = (($29>>>0) % ($15>>>0))&-1;
      $33 = $31;
     }
     $32 = ($33|0)==($24|0);
     if (!($32)) {
      label = 12;
      break;
     }
     $34 = ((($__nd$0$i$i)) + 8|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = HEAP32[$35>>2]|0;
     $37 = (FUNCTION_TABLE_iii[$36 & 511]($34,$__k)|0);
     if ($37) {
      $__nd$0$i$i$sink = $__nd$0$i$i;
      label = 26;
      break;
     } else {
      $$pn$i$i = $__nd$0$i$i;
     }
    }
    if ((label|0) == 12) {
     $$pre = HEAP32[$1>>2]|0;
     $41 = $$pre;
     break;
    }
    else if ((label|0) == 26) {
     $$0 = ((($__nd$0$i$i$sink)) + 20|0);
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $38 = (__Znwj(40)|0);
 $39 = ((($38)) + 8|0);
 HEAP32[$39>>2] = (2352);
 $40 = ((($38)) + 12|0);
 HEAP32[$40>>2] = $41;
 $42 = ((($38)) + 16|0);
 $43 = ((($__k)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 HEAP32[$42>>2] = $44;
 $45 = ($44|0)==(0|0);
 if (!($45)) {
  __ZNSt3__119__shared_weak_count12__add_sharedEv($44);
 }
 $46 = ((($38)) + 20|0);
 $47 = ((($38)) + 36|0);
 ;HEAP32[$46>>2]=0|0;HEAP32[$46+4>>2]=0|0;HEAP32[$46+8>>2]=0|0;HEAP32[$46+12>>2]=0|0;
 HEAPF32[$47>>2] = 1.0;
 __THREW__ = 0;
 invoke_viii(221,($0|0),($this|0),($38|0));
 $48 = __THREW__; __THREW__ = 0;
 $49 = $48&1;
 if (!($49)) {
  $50 = HEAP32[$0>>2]|0;
  $__nd$0$i$i$sink = $50;
  $$0 = ((($__nd$0$i$i$sink)) + 20|0);
  STACKTOP = sp;return ($$0|0);
 }
 $51 = ___cxa_find_matching_catch()|0;
 $52 = tempRet0;
 $53 = ((($38)) + 28|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)==(0|0);
 if (!($55)) {
  $$01$i$i$i$i$i$i$i$i = $54;
  while(1) {
   $56 = HEAP32[$$01$i$i$i$i$i$i$i$i>>2]|0;
   $57 = ((($$01$i$i$i$i$i$i$i$i)) + 12|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58|0)==(0|0);
   if (!($59)) {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($58);
   }
   __ZdlPv($$01$i$i$i$i$i$i$i$i);
   $60 = ($56|0)==(0|0);
   if ($60) {
    break;
   } else {
    $$01$i$i$i$i$i$i$i$i = $56;
   }
  }
 }
 $61 = HEAP32[$46>>2]|0;
 HEAP32[$46>>2] = 0;
 $62 = ($61|0)==(0|0);
 if (!($62)) {
  __ZdlPv($61);
 }
 HEAP32[$39>>2] = (2352);
 $63 = HEAP32[$42>>2]|0;
 $64 = ($63|0)==(0|0);
 if ($64) {
  __ZdlPv($38);
  ___resumeException($51|0);
  // unreachable;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv($63);
 __ZdlPv($38);
 ___resumeException($51|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$0$i7 = 0, $$0$i8 = 0, $$01$i$i = 0, $$pre$i = 0, $$pre4 = 0, $$pre5 = 0, $$pre6 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0;
 var $scevgep = 0, $scevgep3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 3;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(536870911);
 if ($8) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $9 = ((($this)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10;
 $12 = $2;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 3;
 $15 = ($14>>>0)<(268435455);
 if ($15) {
  $20 = $13 >> 2;
  $21 = ($20>>>0)<($7>>>0);
  $22 = $21 ? $7 : $20;
  $23 = HEAP32[$0>>2]|0;
  $24 = $23;
  $25 = (($24) - ($12))|0;
  $26 = $25 >> 3;
  $27 = ($22|0)==(0);
  if ($27) {
   $$0$i8 = 0;$31 = 0;$32 = $26;$71 = $23;
  } else {
   $$0$i7 = $22;$69 = $26;$70 = $23;
   label = 6;
  }
 } else {
  $16 = HEAP32[$0>>2]|0;
  $17 = $16;
  $18 = (($17) - ($12))|0;
  $19 = $18 >> 3;
  $$0$i7 = 536870911;$69 = $19;$70 = $16;
  label = 6;
 }
 if ((label|0) == 6) {
  $28 = $$0$i7 << 3;
  $29 = (__Znwj($28)|0);
  $$0$i8 = $$0$i7;$31 = $29;$32 = $69;$71 = $70;
 }
 $30 = (($31) + ($32<<3)|0);
 $33 = (($31) + ($$0$i8<<3)|0);
 $34 = ($30|0)==(0|0);
 if ($34) {
  $42 = $71;$43 = $2;
 } else {
  $35 = HEAP32[$__x>>2]|0;
  HEAP32[$30>>2] = $35;
  $36 = (((($31) + ($32<<3)|0)) + 4|0);
  $37 = ((($__x)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  HEAP32[$36>>2] = $38;
  $39 = ($38|0)==(0|0);
  if ($39) {
   $42 = $71;$43 = $2;
  } else {
   __ZNSt3__119__shared_weak_count12__add_sharedEv($38);
   $$pre4 = HEAP32[$this>>2]|0;
   $$pre5 = HEAP32[$0>>2]|0;
   $42 = $$pre5;$43 = $$pre4;
  }
 }
 $$sum = (($32) + 1)|0;
 $40 = (($31) + ($$sum<<3)|0);
 $41 = ($42|0)==($43|0);
 if ($41) {
  HEAP32[$this>>2] = $30;
  HEAP32[$0>>2] = $40;
  HEAP32[$9>>2] = $33;
  $68 = $42;
 } else {
  $44 = $43;
  $45 = (($32) + -1)|0;
  $scevgep = ((($42)) + -8|0);
  $46 = $scevgep;
  $47 = (($46) - ($44))|0;
  $48 = $47 >>> 3;
  $49 = (($45) - ($48))|0;
  $$01$i$i = $42;$52 = $30;
  while(1) {
   $50 = ((($$01$i$i)) + -8|0);
   $51 = ((($52)) + -8|0);
   $53 = HEAP32[$50>>2]|0;
   HEAP32[$51>>2] = $53;
   $54 = ((($52)) + -4|0);
   $55 = ((($$01$i$i)) + -4|0);
   $56 = HEAP32[$55>>2]|0;
   HEAP32[$54>>2] = $56;
   $57 = ($56|0)==(0|0);
   if (!($57)) {
    __ZNSt3__119__shared_weak_count12__add_sharedEv($56);
   }
   $58 = ((($52)) + -8|0);
   $59 = ($50|0)==($43|0);
   if ($59) {
    break;
   } else {
    $$01$i$i = $50;$52 = $58;
   }
  }
  $scevgep3 = (($31) + ($49<<3)|0);
  $$pre$i = HEAP32[$this>>2]|0;
  $$pre6 = HEAP32[$0>>2]|0;
  HEAP32[$this>>2] = $scevgep3;
  HEAP32[$0>>2] = $40;
  HEAP32[$9>>2] = $33;
  $60 = ($$pre6|0)==($$pre$i|0);
  if ($60) {
   $68 = $$pre$i;
  } else {
   $62 = $$pre6;
   while(1) {
    $61 = ((($62)) + -8|0);
    $63 = ((($62)) + -4|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)==(0|0);
    if (!($65)) {
     __ZNSt3__119__shared_weak_count16__release_sharedEv($64);
    }
    $66 = ($61|0)==($$pre$i|0);
    if ($66) {
     $68 = $$pre$i;
     break;
    } else {
     $62 = $61;
    }
   }
  }
 }
 $67 = ($68|0)==(0|0);
 if ($67) {
  return;
 }
 __ZdlPv($68);
 return;
}
function __ZNSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_($this,$__args) {
 $this = $this|0;
 $__args = $__args|0;
 var $$0$i4 = 0, $$0$i5 = 0, $$01$i$i = 0, $$pre$i = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 3;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(536870911);
 if ($8) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $9 = ((($this)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10;
 $12 = $2;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 3;
 $15 = ($14>>>0)<(268435455);
 if ($15) {
  $20 = $13 >> 2;
  $21 = ($20>>>0)<($7>>>0);
  $22 = $21 ? $7 : $20;
  $23 = HEAP32[$0>>2]|0;
  $24 = $23;
  $25 = (($24) - ($12))|0;
  $26 = $25 >> 3;
  $27 = ($22|0)==(0);
  if ($27) {
   $$0$i5 = 0;$31 = 0;$32 = $26;$41 = $23;
  } else {
   $$0$i4 = $22;$68 = $26;$69 = $23;
   label = 6;
  }
 } else {
  $16 = HEAP32[$0>>2]|0;
  $17 = $16;
  $18 = (($17) - ($12))|0;
  $19 = $18 >> 3;
  $$0$i4 = 536870911;$68 = $19;$69 = $16;
  label = 6;
 }
 if ((label|0) == 6) {
  $28 = $$0$i4 << 3;
  $29 = (__Znwj($28)|0);
  $$0$i5 = $$0$i4;$31 = $29;$32 = $68;$41 = $69;
 }
 $30 = (($31) + ($32<<3)|0);
 $33 = (($31) + ($$0$i5<<3)|0);
 $34 = ($30|0)==(0|0);
 if (!($34)) {
  $35 = HEAP32[$__args>>2]|0;
  HEAP32[$30>>2] = $35;
  $36 = (((($31) + ($32<<3)|0)) + 4|0);
  $37 = ((($__args)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  HEAP32[$36>>2] = $38;
  HEAP32[$__args>>2] = 0;
  HEAP32[$37>>2] = 0;
 }
 $$sum = (($32) + 1)|0;
 $39 = (($31) + ($$sum<<3)|0);
 $40 = ($41|0)==($2|0);
 if ($40) {
  $57 = $30;$60 = $2;
 } else {
  $42 = (($32) + -1)|0;
  $scevgep = ((($41)) + -8|0);
  $43 = $scevgep;
  $44 = (($43) - ($12))|0;
  $45 = $44 >>> 3;
  $46 = (($42) - ($45))|0;
  $$01$i$i = $41;$49 = $30;
  while(1) {
   $47 = ((($$01$i$i)) + -8|0);
   $48 = ((($49)) + -8|0);
   $50 = HEAP32[$47>>2]|0;
   HEAP32[$48>>2] = $50;
   $51 = ((($49)) + -4|0);
   $52 = ((($$01$i$i)) + -4|0);
   $53 = HEAP32[$52>>2]|0;
   HEAP32[$51>>2] = $53;
   $54 = ($53|0)==(0|0);
   if (!($54)) {
    __ZNSt3__119__shared_weak_count12__add_sharedEv($53);
   }
   $55 = ((($49)) + -8|0);
   $56 = ($47|0)==($2|0);
   if ($56) {
    break;
   } else {
    $$01$i$i = $47;$49 = $55;
   }
  }
  $scevgep3 = (($31) + ($46<<3)|0);
  $$pre$i = HEAP32[$this>>2]|0;
  $57 = $scevgep3;$60 = $$pre$i;
 }
 HEAP32[$this>>2] = $57;
 $58 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = $39;
 HEAP32[$9>>2] = $33;
 $59 = ($58|0)==($60|0);
 if (!($59)) {
  $62 = $58;
  while(1) {
   $61 = ((($62)) + -8|0);
   $63 = ((($62)) + -4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)==(0|0);
   if (!($65)) {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($64);
   }
   $66 = ($61|0)==($60|0);
   if ($66) {
    break;
   } else {
    $62 = $61;
   }
  }
 }
 $67 = ($60|0)==(0|0);
 if ($67) {
  return;
 }
 __ZdlPv($60);
 return;
}
function __ZN4rhea33required_failure_with_explanationD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__f$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (568);
 $0 = ((($this)) + 4|0);
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = ((($this)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = HEAP32[$7>>2]|0;
 HEAP32[$11>>2] = $9;
 HEAP32[$1>>2] = 0;
 $12 = ($5|0)==($0|0);
 if ($12) {
  return;
 } else {
  $__f$01$i$i = $5;
 }
 while(1) {
  $13 = ((($__f$01$i$i)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($__f$01$i$i)) + 8|0);
  HEAP32[$15>>2] = (2352);
  $16 = ((($__f$01$i$i)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   __ZNSt3__119__shared_weak_count16__release_sharedEv($17);
  }
  __ZdlPv($__f$01$i$i);
  $19 = ($14|0)==($0|0);
  if ($19) {
   break;
  } else {
   $__f$01$i$i = $14;
  }
 }
 return;
}
function __ZNSt3__14listIN4rhea14simplex_solver9edit_infoENS_9allocatorIS3_EEE12emplace_backIJRKNS1_8variableERKNS1_10constraintERS8_SE_RdEEEvDpOT_($this,$__args,$__args1,$__args2,$__args3,$__args4) {
 $this = $this|0;
 $__args = $__args|0;
 $__args1 = $__args1|0;
 $__args2 = $__args2|0;
 $__args3 = $__args3|0;
 $__args4 = $__args4|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(56)|0);
 $1 = ((($0)) + 8|0);
 $2 = ((($__args1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($__args1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  __ZNSt3__119__shared_weak_count12__add_sharedEv($5);
 }
 $7 = HEAP32[$__args2>>2]|0;
 $8 = ((($__args2)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  __ZNSt3__119__shared_weak_count12__add_sharedEv($9);
 }
 $11 = HEAP32[$__args3>>2]|0;
 $12 = ((($__args3)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  __ZNSt3__119__shared_weak_count12__add_sharedEv($13);
 }
 $15 = +HEAPF64[$__args4>>3];
 $16 = HEAP32[$__args>>2]|0;
 HEAP32[$1>>2] = $16;
 $17 = ((($0)) + 12|0);
 $18 = ((($__args)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$17>>2] = $19;
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  __ZNSt3__119__shared_weak_count12__add_sharedEv($19);
 }
 $21 = ((($0)) + 16|0);
 HEAP32[$21>>2] = (2352);
 $22 = ((($0)) + 20|0);
 HEAP32[$22>>2] = $3;
 $23 = ((($0)) + 24|0);
 HEAP32[$23>>2] = $5;
 if (!($6)) {
  __ZNSt3__119__shared_weak_count12__add_sharedEv($5);
 }
 $24 = ((($0)) + 28|0);
 HEAP32[$24>>2] = $7;
 $25 = ((($0)) + 32|0);
 HEAP32[$25>>2] = $9;
 if (!($10)) {
  __ZNSt3__119__shared_weak_count12__add_sharedEv($9);
 }
 $26 = ((($0)) + 36|0);
 HEAP32[$26>>2] = $11;
 $27 = ((($0)) + 40|0);
 HEAP32[$27>>2] = $13;
 if ($14) {
  $28 = ((($0)) + 48|0);
  HEAPF64[$28>>3] = $15;
 } else {
  __ZNSt3__119__shared_weak_count12__add_sharedEv($13);
  $29 = ((($0)) + 48|0);
  HEAPF64[$29>>3] = $15;
  __ZNSt3__119__shared_weak_count16__release_sharedEv($13);
 }
 if (!($10)) {
  __ZNSt3__119__shared_weak_count16__release_sharedEv($9);
 }
 if ($6) {
  $30 = ((($0)) + 4|0);
  HEAP32[$30>>2] = $this;
  $31 = HEAP32[$this>>2]|0;
  HEAP32[$0>>2] = $31;
  $32 = ((($31)) + 4|0);
  HEAP32[$32>>2] = $0;
  HEAP32[$this>>2] = $0;
  $33 = ((($this)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 1)|0;
  HEAP32[$33>>2] = $35;
  return;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv($5);
 $30 = ((($0)) + 4|0);
 HEAP32[$30>>2] = $this;
 $31 = HEAP32[$this>>2]|0;
 HEAP32[$0>>2] = $31;
 $32 = ((($31)) + 4|0);
 HEAP32[$32>>2] = $0;
 HEAP32[$this>>2] = $0;
 $33 = ((($this)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + 1)|0;
 HEAP32[$33>>2] = $35;
 return;
}
function __ZNSt3__14listIN4rhea10constraintENS_9allocatorIS2_EEEC2ERKS5_($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$lcssa = 0, $$lcssa6 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__f$01$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = $this;
 $0 = ((($this)) + 4|0);
 HEAP32[$0>>2] = $this;
 $1 = ((($this)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($__c)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($__c|0);
 if ($4) {
  return;
 }
 $11 = $3;$42 = $this;$43 = 0;
 while(1) {
  __THREW__ = 0;
  $5 = (invoke_ii(179,20)|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $$lcssa = $42;$$lcssa6 = $43;
   break;
  }
  $8 = ((($5)) + 8|0);
  HEAP32[$8>>2] = (2352);
  $9 = ((($5)) + 12|0);
  $10 = ((($11)) + 12|0);
  $12 = HEAP32[$10>>2]|0;
  HEAP32[$9>>2] = $12;
  $13 = ((($5)) + 16|0);
  $14 = ((($11)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$13>>2] = $15;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $18 = $42;$21 = $43;
  } else {
   __ZNSt3__119__shared_weak_count12__add_sharedEv($15);
   $$pre = HEAP32[$this>>2]|0;
   $$pre1 = HEAP32[$1>>2]|0;
   $18 = $$pre;$21 = $$pre1;
  }
  $17 = ((($5)) + 4|0);
  HEAP32[$17>>2] = $this;
  HEAP32[$5>>2] = $18;
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $5;
  HEAP32[$this>>2] = $5;
  $20 = (($21) + 1)|0;
  HEAP32[$1>>2] = $20;
  $22 = ((($11)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==($__c|0);
  if ($24) {
   label = 13;
   break;
  } else {
   $11 = $23;$42 = $5;$43 = $20;
  }
 }
 if ((label|0) == 13) {
  return;
 }
 $25 = ___cxa_find_matching_catch()|0;
 $26 = tempRet0;
 $27 = ($$lcssa6|0)==(0);
 if ($27) {
  ___resumeException($25|0);
  // unreachable;
 }
 $28 = HEAP32[$0>>2]|0;
 $29 = ((($$lcssa)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$28>>2]|0;
 $32 = ((($31)) + 4|0);
 HEAP32[$32>>2] = $30;
 $33 = HEAP32[$29>>2]|0;
 HEAP32[$33>>2] = $31;
 HEAP32[$1>>2] = 0;
 $34 = ($28|0)==($this|0);
 if ($34) {
  ___resumeException($25|0);
  // unreachable;
 } else {
  $__f$01$i$i = $28;
 }
 while(1) {
  $35 = ((($__f$01$i$i)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($__f$01$i$i)) + 8|0);
  HEAP32[$37>>2] = (2352);
  $38 = ((($__f$01$i$i)) + 16|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(0|0);
  if (!($40)) {
   __ZNSt3__119__shared_weak_count16__release_sharedEv($39);
  }
  __ZdlPv($__f$01$i$i);
  $41 = ($36|0)==($this|0);
  if ($41) {
   break;
  } else {
   $__f$01$i$i = $36;
  }
 }
 ___resumeException($25|0);
 // unreachable;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE14__erase_uniqueIS3_EEjRKT_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa15 = 0, $$pn$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__nd$0$i = 0, $__nd$0$i$lcssa14 = 0, $__pn$0$i = 0, $__pn$0$i$lcssa = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__k>>2]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($this)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (($4) + -1)|0;
 $7 = $6 & $4;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $6 & $2;
  $13 = $9;
 } else {
  $10 = (($2>>>0) % ($4>>>0))&-1;
  $13 = $10;
 }
 $11 = HEAP32[$this>>2]|0;
 $12 = (($11) + ($13<<2)|0);
 $14 = HEAP32[$12>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $$pn$i = $14;
 }
 while(1) {
  $__nd$0$i = HEAP32[$$pn$i>>2]|0;
  $16 = ($__nd$0$i|0)==(0|0);
  if ($16) {
   $$0 = 0;
   label = 39;
   break;
  }
  $17 = ((($__nd$0$i)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  if ($8) {
   $19 = $18 & $6;
   $22 = $19;
  } else {
   $20 = (($18>>>0) % ($4>>>0))&-1;
   $22 = $20;
  }
  $21 = ($22|0)==($13|0);
  if (!($21)) {
   $$0 = 0;
   label = 39;
   break;
  }
  $23 = ((($__nd$0$i)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==($0|0);
  if ($25) {
   $$lcssa15 = $18;$__nd$0$i$lcssa14 = $__nd$0$i;
   label = 12;
   break;
  } else {
   $$pn$i = $__nd$0$i;
  }
 }
 if ((label|0) == 12) {
  if ($8) {
   $26 = $6 & $$lcssa15;
   $29 = $26;
  } else {
   $27 = (($$lcssa15>>>0) % ($4>>>0))&-1;
   $29 = $27;
  }
  $28 = (($11) + ($29<<2)|0);
  $30 = HEAP32[$28>>2]|0;
  $__pn$0$i = $30;
  while(1) {
   $31 = HEAP32[$__pn$0$i>>2]|0;
   $32 = ($31|0)==($__nd$0$i$lcssa14|0);
   if ($32) {
    $$lcssa = $__pn$0$i;$__pn$0$i$lcssa = $__pn$0$i;
    break;
   } else {
    $__pn$0$i = $31;
   }
  }
  $33 = ((($this)) + 8|0);
  $34 = ($__pn$0$i$lcssa|0)==($33|0);
  if ($34) {
   label = 22;
  } else {
   $35 = ((($__pn$0$i$lcssa)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   if ($8) {
    $37 = $36 & $6;
    $40 = $37;
   } else {
    $38 = (($36>>>0) % ($4>>>0))&-1;
    $40 = $38;
   }
   $39 = ($40|0)==($29|0);
   if (!($39)) {
    label = 22;
   }
  }
  do {
   if ((label|0) == 22) {
    $41 = HEAP32[$__nd$0$i$lcssa14>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     $43 = ((($41)) + 4|0);
     $44 = HEAP32[$43>>2]|0;
     if ($8) {
      $45 = $44 & $6;
      $48 = $45;
     } else {
      $46 = (($44>>>0) % ($4>>>0))&-1;
      $48 = $46;
     }
     $47 = ($48|0)==($29|0);
     if ($47) {
      break;
     }
    }
    HEAP32[$28>>2] = 0;
   }
  } while(0);
  $49 = HEAP32[$__nd$0$i$lcssa14>>2]|0;
  $50 = ($49|0)==(0|0);
  if ($50) {
   $59 = 0;
  } else {
   $51 = ((($49)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   if ($8) {
    $53 = $52 & $6;
    $56 = $53;
   } else {
    $54 = (($52>>>0) % ($4>>>0))&-1;
    $56 = $54;
   }
   $55 = ($56|0)==($29|0);
   if ($55) {
    $59 = $49;
   } else {
    $57 = HEAP32[$this>>2]|0;
    $58 = (($57) + ($56<<2)|0);
    HEAP32[$58>>2] = $__pn$0$i$lcssa;
    $$pre$i = HEAP32[$__nd$0$i$lcssa14>>2]|0;
    $59 = $$pre$i;
   }
  }
  HEAP32[$$lcssa>>2] = $59;
  HEAP32[$__nd$0$i$lcssa14>>2] = 0;
  $60 = ((($this)) + 12|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + -1)|0;
  HEAP32[$60>>2] = $62;
  $63 = ((($__nd$0$i$lcssa14)) + 16|0);
  HEAP32[$63>>2] = (2352);
  $64 = ((($__nd$0$i$lcssa14)) + 24|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)==(0|0);
  if (!($66)) {
   __ZNSt3__119__shared_weak_count16__release_sharedEv($65);
  }
  $67 = ((($__nd$0$i$lcssa14)) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($68|0)==(0|0);
  if (!($69)) {
   __ZNSt3__119__shared_weak_count16__release_sharedEv($68);
  }
  __ZdlPv($__nd$0$i$lcssa14);
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 39) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__113unordered_mapIN4rhea8variableENS_13unordered_setIS2_NS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEES5_S7_NS8_INS_4pairIKS2_SA_EEEEEixERSC_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $$0 = 0, $$01$i$i$i$i$i$i$i$i = 0, $$pn$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nd$0$i$i = 0, $__nd$0$i$i$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$__k>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($this)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 L1: do {
  if (!($6)) {
   $7 = (($5) + -1)|0;
   $8 = $7 & $5;
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = $7 & $3;
    $14 = $10;
   } else {
    $11 = (($3>>>0) % ($5>>>0))&-1;
    $14 = $11;
   }
   $12 = HEAP32[$this>>2]|0;
   $13 = (($12) + ($14<<2)|0);
   $15 = HEAP32[$13>>2]|0;
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    $$pn$i$i = $15;
    while(1) {
     $__nd$0$i$i = HEAP32[$$pn$i$i>>2]|0;
     $17 = ($__nd$0$i$i|0)==(0|0);
     if ($17) {
      break L1;
     }
     $18 = ((($__nd$0$i$i)) + 4|0);
     $19 = HEAP32[$18>>2]|0;
     if ($9) {
      $20 = $19 & $7;
      $23 = $20;
     } else {
      $21 = (($19>>>0) % ($5>>>0))&-1;
      $23 = $21;
     }
     $22 = ($23|0)==($14|0);
     if (!($22)) {
      break L1;
     }
     $24 = ((($__nd$0$i$i)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==($1|0);
     if ($26) {
      $__nd$0$i$i$sink = $__nd$0$i$i;
      break;
     } else {
      $$pn$i$i = $__nd$0$i$i;
     }
    }
    $$0 = ((($__nd$0$i$i$sink)) + 16|0);
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $27 = (__Znwj(36)|0);
 $28 = ((($27)) + 8|0);
 HEAP32[$28>>2] = $1;
 $29 = ((($27)) + 12|0);
 $30 = ((($__k)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 HEAP32[$29>>2] = $31;
 $32 = ($31|0)==(0|0);
 if (!($32)) {
  __ZNSt3__119__shared_weak_count12__add_sharedEv($31);
 }
 $33 = ((($27)) + 16|0);
 $34 = ((($27)) + 32|0);
 ;HEAP32[$33>>2]=0|0;HEAP32[$33+4>>2]=0|0;HEAP32[$33+8>>2]=0|0;HEAP32[$33+12>>2]=0|0;
 HEAPF32[$34>>2] = 1.0;
 __THREW__ = 0;
 invoke_viii(222,($0|0),($this|0),($27|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if (!($36)) {
  $37 = HEAP32[$0>>2]|0;
  $__nd$0$i$i$sink = $37;
  $$0 = ((($__nd$0$i$i$sink)) + 16|0);
  STACKTOP = sp;return ($$0|0);
 }
 $38 = ___cxa_find_matching_catch()|0;
 $39 = tempRet0;
 $40 = ((($27)) + 24|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(0|0);
 if (!($42)) {
  $$01$i$i$i$i$i$i$i$i = $41;
  while(1) {
   $43 = HEAP32[$$01$i$i$i$i$i$i$i$i>>2]|0;
   $44 = ((($$01$i$i$i$i$i$i$i$i)) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)==(0|0);
   if (!($46)) {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($45);
   }
   __ZdlPv($$01$i$i$i$i$i$i$i$i);
   $47 = ($43|0)==(0|0);
   if ($47) {
    break;
   } else {
    $$01$i$i$i$i$i$i$i$i = $43;
   }
  }
 }
 $48 = HEAP32[$33>>2]|0;
 HEAP32[$33>>2] = 0;
 $49 = ($48|0)==(0|0);
 if (!($49)) {
  __ZdlPv($48);
 }
 $50 = HEAP32[$29>>2]|0;
 $51 = ($50|0)==(0|0);
 if ($51) {
  __ZdlPv($27);
  ___resumeException($38|0);
  // unreachable;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv($50);
 __ZdlPv($27);
 ___resumeException($38|0);
 // unreachable;
 return (0)|0;
}
function __ZN4rhea24remove_from_container_ifINSt3__16vectorINS_8variableENS1_9allocatorIS3_EEEEZNS_14simplex_solver18remove_constraint_ERKNS_10constraintEE3__0EEvRT_T0_($c,$pred$0) {
 $c = $c|0;
 $pred$0 = $pred$0|0;
 var $$0$lcssa$i$i$i = 0, $$012$i$i$i = 0, $$03$i$i$i = 0, $$lcssa = 0, $$lcssa25 = 0, $$lcssa26 = 0, $$ph11$i = 0, $$pn$i$i$i$i$i = 0, $$pn$i$i$i$i$i$i = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__first$02$lcssa$i$i = 0, $__first$024$i$i = 0, $__first$08$ph$i = 0, $__first$09$i = 0, $__first5$i$i$i = 0, $__nd$0$i$i$i$i$i = 0, $__nd$0$i$i$i$i$i$i = 0, $__pred$idx$val$idx$val$i = 0, $__pred$idx$val$idx$val$i$i = 0, $scevgep$i$i$i = 0, $scevgep7$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$c>>2]|0;
 $1 = ((($c)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)==($2|0);
 L1: do {
  if ($3) {
   $__first$02$lcssa$i$i = $0;
   label = 20;
  } else {
   $__first$024$i$i = $0;
   while(1) {
    $4 = HEAP32[$__first$024$i$i>>2]|0;
    $5 = ((($__first$024$i$i)) + 4|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==(0|0);
    if (!($7)) {
     __ZNSt3__119__shared_weak_count12__add_sharedEv($6);
    }
    $__pred$idx$val$idx$val$i$i = HEAP32[$pred$0>>2]|0;
    $8 = ((($4)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ((($__pred$idx$val$idx$val$i$i)) + 24|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0);
    L8: do {
     if ($12) {
      $35 = 0;
     } else {
      $13 = (($11) + -1)|0;
      $14 = $13 & $11;
      $15 = ($14|0)==(0);
      if ($15) {
       $16 = $13 & $9;
       $21 = $16;
      } else {
       $17 = (($9>>>0) % ($11>>>0))&-1;
       $21 = $17;
      }
      $18 = ((($__pred$idx$val$idx$val$i$i)) + 20|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (($19) + ($21<<2)|0);
      $22 = HEAP32[$20>>2]|0;
      $23 = ($22|0)==(0|0);
      if ($23) {
       $35 = 0;
      } else {
       $$pn$i$i$i$i$i$i = $22;
       while(1) {
        $__nd$0$i$i$i$i$i$i = HEAP32[$$pn$i$i$i$i$i$i>>2]|0;
        $24 = ($__nd$0$i$i$i$i$i$i|0)==(0|0);
        if ($24) {
         $35 = 0;
         break L8;
        }
        $25 = ((($__nd$0$i$i$i$i$i$i)) + 4|0);
        $26 = HEAP32[$25>>2]|0;
        if ($15) {
         $27 = $26 & $13;
         $30 = $27;
        } else {
         $28 = (($26>>>0) % ($11>>>0))&-1;
         $30 = $28;
        }
        $29 = ($30|0)==($21|0);
        if (!($29)) {
         $35 = 0;
         break L8;
        }
        $31 = ((($__nd$0$i$i$i$i$i$i)) + 8|0);
        $32 = HEAP32[$31>>2]|0;
        $33 = ($32|0)==($4|0);
        if ($33) {
         $35 = $__nd$0$i$i$i$i$i$i;
         break;
        } else {
         $$pn$i$i$i$i$i$i = $__nd$0$i$i$i$i$i$i;
        }
       }
      }
     }
    } while(0);
    $34 = ($35|0)==(0|0);
    if (!($7)) {
     __ZNSt3__119__shared_weak_count16__release_sharedEv($6);
    }
    if (!($34)) {
     $__first$02$lcssa$i$i = $__first$024$i$i;
     label = 20;
     break L1;
    }
    $36 = ((($__first$024$i$i)) + 8|0);
    $37 = ($36|0)==($2|0);
    if ($37) {
     $__first$09$i = $2;
     break;
    } else {
     $__first$024$i$i = $36;
    }
   }
  }
 } while(0);
 L27: do {
  if ((label|0) == 20) {
   $38 = ($__first$02$lcssa$i$i|0)==($2|0);
   if ($38) {
    $__first$09$i = $2;
   } else {
    $$ph11$i = $__first$02$lcssa$i$i;$__first$08$ph$i = $__first$02$lcssa$i$i;
    while(1) {
     $40 = $$ph11$i;
     while(1) {
      $39 = ((($40)) + 8|0);
      $41 = ($39|0)==($2|0);
      if ($41) {
       $__first$09$i = $__first$08$ph$i;
       break L27;
      }
      $42 = HEAP32[$39>>2]|0;
      $43 = ((($40)) + 12|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if (!($45)) {
       __ZNSt3__119__shared_weak_count12__add_sharedEv($44);
      }
      $__pred$idx$val$idx$val$i = HEAP32[$pred$0>>2]|0;
      $46 = ((($42)) + 4|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ((($__pred$idx$val$idx$val$i)) + 24|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ($49|0)==(0);
      L38: do {
       if ($50) {
        $73 = 0;
       } else {
        $51 = (($49) + -1)|0;
        $52 = $51 & $49;
        $53 = ($52|0)==(0);
        if ($53) {
         $54 = $51 & $47;
         $59 = $54;
        } else {
         $55 = (($47>>>0) % ($49>>>0))&-1;
         $59 = $55;
        }
        $56 = ((($__pred$idx$val$idx$val$i)) + 20|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = (($57) + ($59<<2)|0);
        $60 = HEAP32[$58>>2]|0;
        $61 = ($60|0)==(0|0);
        if ($61) {
         $73 = 0;
        } else {
         $$pn$i$i$i$i$i = $60;
         while(1) {
          $__nd$0$i$i$i$i$i = HEAP32[$$pn$i$i$i$i$i>>2]|0;
          $62 = ($__nd$0$i$i$i$i$i|0)==(0|0);
          if ($62) {
           $73 = 0;
           break L38;
          }
          $63 = ((($__nd$0$i$i$i$i$i)) + 4|0);
          $64 = HEAP32[$63>>2]|0;
          if ($53) {
           $65 = $64 & $51;
           $68 = $65;
          } else {
           $66 = (($64>>>0) % ($49>>>0))&-1;
           $68 = $66;
          }
          $67 = ($68|0)==($59|0);
          if (!($67)) {
           $73 = 0;
           break L38;
          }
          $69 = ((($__nd$0$i$i$i$i$i)) + 8|0);
          $70 = HEAP32[$69>>2]|0;
          $71 = ($70|0)==($42|0);
          if ($71) {
           $73 = $__nd$0$i$i$i$i$i;
           break;
          } else {
           $$pn$i$i$i$i$i = $__nd$0$i$i$i$i$i;
          }
         }
        }
       }
      } while(0);
      $72 = ($73|0)==(0|0);
      if (!($45)) {
       __ZNSt3__119__shared_weak_count16__release_sharedEv($44);
      }
      if ($72) {
       $$lcssa = $39;$$lcssa25 = $39;$$lcssa26 = $43;
       break;
      } else {
       $40 = $39;
      }
     }
     $74 = HEAP32[$$lcssa>>2]|0;
     $75 = HEAP32[$$lcssa26>>2]|0;
     HEAP32[$$lcssa>>2] = 0;
     HEAP32[$$lcssa26>>2] = 0;
     HEAP32[$__first$08$ph$i>>2] = $74;
     $76 = ((($__first$08$ph$i)) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     HEAP32[$76>>2] = $75;
     $78 = ($77|0)==(0|0);
     if (!($78)) {
      __ZNSt3__119__shared_weak_count16__release_sharedEv($77);
     }
     $79 = ((($__first$08$ph$i)) + 8|0);
     $$ph11$i = $$lcssa25;$__first$08$ph$i = $79;
    }
   }
  }
 } while(0);
 $80 = HEAP32[$c>>2]|0;
 $81 = $__first$09$i;
 $82 = $80;
 $83 = (($81) - ($82))|0;
 $84 = $83 >> 3;
 $$sum$i = (($84) + 1)|0;
 $85 = (($80) + ($$sum$i<<3)|0);
 $86 = HEAP32[$1>>2]|0;
 $87 = ($85|0)==($86|0);
 if ($87) {
  $$0$lcssa$i$i$i = $__first$09$i;$102 = $85;
 } else {
  $scevgep$i$i$i = ((($86)) + -8|0);
  $88 = $scevgep$i$i$i;
  $$012$i$i$i = $85;$$03$i$i$i = $__first$09$i;
  while(1) {
   $89 = HEAP32[$$012$i$i$i>>2]|0;
   $90 = ((($$012$i$i$i)) + 4|0);
   $91 = HEAP32[$90>>2]|0;
   HEAP32[$$012$i$i$i>>2] = 0;
   HEAP32[$90>>2] = 0;
   HEAP32[$$03$i$i$i>>2] = $89;
   $92 = ((($$03$i$i$i)) + 4|0);
   $93 = HEAP32[$92>>2]|0;
   HEAP32[$92>>2] = $91;
   $94 = ($93|0)==(0|0);
   if (!($94)) {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($93);
   }
   $95 = ((($$012$i$i$i)) + 8|0);
   $96 = ((($$03$i$i$i)) + 8|0);
   $97 = ($95|0)==($86|0);
   if ($97) {
    break;
   } else {
    $$012$i$i$i = $95;$$03$i$i$i = $96;
   }
  }
  $__first5$i$i$i = $85;
  $98 = (($88) - ($__first5$i$i$i))|0;
  $99 = $98 >>> 3;
  $100 = (($99) + 1)|0;
  $scevgep7$i$i$i = (($__first$09$i) + ($100<<3)|0);
  $$pre$i = HEAP32[$1>>2]|0;
  $$0$lcssa$i$i$i = $scevgep7$i$i$i;$102 = $$pre$i;
 }
 $101 = ($102|0)==($$0$lcssa$i$i$i|0);
 if ($101) {
  return;
 } else {
  $104 = $102;
 }
 while(1) {
  $103 = ((($104)) + -8|0);
  HEAP32[$1>>2] = $103;
  $105 = ((($104)) + -4|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ($106|0)==(0|0);
  if ($107) {
   $109 = $103;
  } else {
   __ZNSt3__119__shared_weak_count16__release_sharedEv($106);
   $$pre$i$i$i = HEAP32[$1>>2]|0;
   $109 = $$pre$i$i$i;
  }
  $108 = ($109|0)==($$0$lcssa$i$i$i|0);
  if ($108) {
   break;
  } else {
   $104 = $109;
  }
 }
 return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeISD_PvEEEE($agg$result,$this,$__p) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__p = $__p|0;
 var $$01$i$i$i$i$i$i$i$i$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $__pn$0$i = 0, $__pn$0$i$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__p>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$agg$result>>2] = $1;
 $2 = ((($this)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + -1)|0;
 $7 = $6 & $3;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $6 & $5;
  $13 = $9;
 } else {
  $10 = (($5>>>0) % ($3>>>0))&-1;
  $13 = $10;
 }
 $11 = HEAP32[$this>>2]|0;
 $12 = (($11) + ($13<<2)|0);
 $14 = HEAP32[$12>>2]|0;
 $__pn$0$i = $14;
 while(1) {
  $15 = HEAP32[$__pn$0$i>>2]|0;
  $16 = ($15|0)==($0|0);
  if ($16) {
   $$lcssa = $__pn$0$i;$__pn$0$i$lcssa = $__pn$0$i;
   break;
  } else {
   $__pn$0$i = $15;
  }
 }
 $17 = ((($this)) + 8|0);
 $18 = ($__pn$0$i$lcssa|0)==($17|0);
 if ($18) {
  label = 11;
 } else {
  $19 = ((($__pn$0$i$lcssa)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  if ($8) {
   $21 = $20 & $6;
   $24 = $21;
  } else {
   $22 = (($20>>>0) % ($3>>>0))&-1;
   $24 = $22;
  }
  $23 = ($24|0)==($13|0);
  if ($23) {
   $33 = $1;
   label = 17;
  } else {
   label = 11;
  }
 }
 do {
  if ((label|0) == 11) {
   $25 = ($1|0)==(0|0);
   if (!($25)) {
    $26 = ((($1)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    if ($8) {
     $28 = $27 & $6;
     $31 = $28;
    } else {
     $29 = (($27>>>0) % ($3>>>0))&-1;
     $31 = $29;
    }
    $30 = ($31|0)==($13|0);
    if ($30) {
     $35 = $1;
     label = 18;
     break;
    }
   }
   HEAP32[$12>>2] = 0;
   $$pre = HEAP32[$0>>2]|0;
   $33 = $$pre;
   label = 17;
  }
 } while(0);
 if ((label|0) == 17) {
  $32 = ($33|0)==(0|0);
  if ($32) {
   $43 = 0;
  } else {
   $35 = $33;
   label = 18;
  }
 }
 if ((label|0) == 18) {
  $34 = ((($35)) + 4|0);
  $36 = HEAP32[$34>>2]|0;
  if ($8) {
   $37 = $36 & $6;
   $40 = $37;
  } else {
   $38 = (($36>>>0) % ($3>>>0))&-1;
   $40 = $38;
  }
  $39 = ($40|0)==($13|0);
  if ($39) {
   $43 = $35;
  } else {
   $41 = HEAP32[$this>>2]|0;
   $42 = (($41) + ($40<<2)|0);
   HEAP32[$42>>2] = $__pn$0$i$lcssa;
   $$pre$i = HEAP32[$0>>2]|0;
   $43 = $$pre$i;
  }
 }
 HEAP32[$$lcssa>>2] = $43;
 HEAP32[$0>>2] = 0;
 $44 = ((($this)) + 12|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + -1)|0;
 HEAP32[$44>>2] = $46;
 $47 = ($0|0)==(0|0);
 if ($47) {
  return;
 }
 $48 = ((($0)) + 8|0);
 $49 = ((($0)) + 28|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0|0);
 if (!($51)) {
  $$01$i$i$i$i$i$i$i$i$i$i = $50;
  while(1) {
   $52 = HEAP32[$$01$i$i$i$i$i$i$i$i$i$i>>2]|0;
   $53 = ((($$01$i$i$i$i$i$i$i$i$i$i)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)==(0|0);
   if (!($55)) {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($54);
   }
   __ZdlPv($$01$i$i$i$i$i$i$i$i$i$i);
   $56 = ($52|0)==(0|0);
   if ($56) {
    break;
   } else {
    $$01$i$i$i$i$i$i$i$i$i$i = $52;
   }
  }
 }
 $57 = ((($0)) + 20|0);
 $58 = HEAP32[$57>>2]|0;
 HEAP32[$57>>2] = 0;
 $59 = ($58|0)==(0|0);
 if (!($59)) {
  __ZdlPv($58);
 }
 HEAP32[$48>>2] = (2352);
 $60 = ((($0)) + 16|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)==(0|0);
 if (!($62)) {
  __ZNSt3__119__shared_weak_count16__release_sharedEv($61);
 }
 __ZdlPv($0);
 return;
}
function __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS2_PvEEEE($agg$result,$this,$__p) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__p = $__p|0;
 var $$lcssa = 0, $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__pn$0$i = 0, $__pn$0$i$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__p>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$agg$result>>2] = $1;
 $2 = ((($this)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + -1)|0;
 $7 = $6 & $3;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $6 & $5;
  $13 = $9;
 } else {
  $10 = (($5>>>0) % ($3>>>0))&-1;
  $13 = $10;
 }
 $11 = HEAP32[$this>>2]|0;
 $12 = (($11) + ($13<<2)|0);
 $14 = HEAP32[$12>>2]|0;
 $__pn$0$i = $14;
 while(1) {
  $15 = HEAP32[$__pn$0$i>>2]|0;
  $16 = ($15|0)==($0|0);
  if ($16) {
   $$lcssa = $__pn$0$i;$__pn$0$i$lcssa = $__pn$0$i;
   break;
  } else {
   $__pn$0$i = $15;
  }
 }
 $17 = ((($this)) + 8|0);
 $18 = ($__pn$0$i$lcssa|0)==($17|0);
 if ($18) {
  label = 11;
 } else {
  $19 = ((($__pn$0$i$lcssa)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  if ($8) {
   $21 = $20 & $6;
   $24 = $21;
  } else {
   $22 = (($20>>>0) % ($3>>>0))&-1;
   $24 = $22;
  }
  $23 = ($24|0)==($13|0);
  if ($23) {
   $33 = $1;
   label = 17;
  } else {
   label = 11;
  }
 }
 do {
  if ((label|0) == 11) {
   $25 = ($1|0)==(0|0);
   if (!($25)) {
    $26 = ((($1)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    if ($8) {
     $28 = $27 & $6;
     $31 = $28;
    } else {
     $29 = (($27>>>0) % ($3>>>0))&-1;
     $31 = $29;
    }
    $30 = ($31|0)==($13|0);
    if ($30) {
     $35 = $1;
     label = 18;
     break;
    }
   }
   HEAP32[$12>>2] = 0;
   $$pre = HEAP32[$0>>2]|0;
   $33 = $$pre;
   label = 17;
  }
 } while(0);
 if ((label|0) == 17) {
  $32 = ($33|0)==(0|0);
  if ($32) {
   $43 = 0;
  } else {
   $35 = $33;
   label = 18;
  }
 }
 if ((label|0) == 18) {
  $34 = ((($35)) + 4|0);
  $36 = HEAP32[$34>>2]|0;
  if ($8) {
   $37 = $36 & $6;
   $40 = $37;
  } else {
   $38 = (($36>>>0) % ($3>>>0))&-1;
   $40 = $38;
  }
  $39 = ($40|0)==($13|0);
  if ($39) {
   $43 = $35;
  } else {
   $41 = HEAP32[$this>>2]|0;
   $42 = (($41) + ($40<<2)|0);
   HEAP32[$42>>2] = $__pn$0$i$lcssa;
   $$pre$i = HEAP32[$0>>2]|0;
   $43 = $$pre$i;
  }
 }
 HEAP32[$$lcssa>>2] = $43;
 HEAP32[$0>>2] = 0;
 $44 = ((($this)) + 12|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + -1)|0;
 HEAP32[$44>>2] = $46;
 $47 = ($0|0)==(0|0);
 if ($47) {
  return;
 }
 $48 = ((($0)) + 12|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0|0);
 if (!($50)) {
  __ZNSt3__119__shared_weak_count16__release_sharedEv($49);
 }
 __ZdlPv($0);
 return;
}
function __ZN4rhea14internal_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (680);
 $0 = ((($this)) + 4|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 return;
}
function __ZNSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEE6assignIPS4_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS4_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$ = 0, $$0$i12 = 0, $$0$lcssa$i$i = 0, $$01$i = 0, $$01$i4 = 0, $$012$i$i = 0, $$03$i$i = 0, $$__last = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$pre$i1 = 0, $$pre$i2 = 0, $$pre3$i = 0, $$pre3$i6 = 0, $$pre3$pre$i = 0, $$pre3$pre$i5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $scevgep$i$i = 0, $scevgep7$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__last;
 $1 = $__first;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 4;
 $4 = ((($this)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$this>>2]|0;
 $7 = $5;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = $9 >> 4;
 $11 = ($3>>>0)>($10>>>0);
 if ($11) {
  $61 = ($6|0)==(0|0);
  if ($61) {
   $75 = $5;
  } else {
   $62 = ((($this)) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)==($6|0);
   if ($64) {
    $72 = $6;
   } else {
    $66 = $63;
    while(1) {
     $65 = ((($66)) + -16|0);
     HEAP32[$62>>2] = $65;
     $67 = ((($66)) + -12|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)==(0|0);
     if ($69) {
      $71 = $65;
     } else {
      __ZNSt3__119__shared_weak_count16__release_sharedEv($68);
      $$pre$i$i$i$i = HEAP32[$62>>2]|0;
      $71 = $$pre$i$i$i$i;
     }
     $70 = ($71|0)==($6|0);
     if ($70) {
      break;
     } else {
      $66 = $71;
     }
    }
    $$pre$i1 = HEAP32[$this>>2]|0;
    $72 = $$pre$i1;
   }
   __ZdlPv($72);
   HEAP32[$4>>2] = 0;
   HEAP32[$62>>2] = 0;
   HEAP32[$this>>2] = 0;
   $75 = 0;
  }
  $73 = ($3>>>0)>(268435455);
  if ($73) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
   // unreachable;
  }
  $74 = $75;
  $76 = (($74) - 0)|0;
  $77 = $76 >> 4;
  $78 = ($77>>>0)<(134217727);
  if ($78) {
   $79 = $76 >> 3;
   $80 = ($79>>>0)<($3>>>0);
   $81 = $80 ? $3 : $79;
   $82 = ($81>>>0)>(268435455);
   if ($82) {
    __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
    // unreachable;
   } else {
    $$0$i12 = $81;
   }
  } else {
   $$0$i12 = 268435455;
  }
  $83 = $$0$i12 << 4;
  $84 = (__Znwj($83)|0);
  $85 = ((($this)) + 4|0);
  HEAP32[$85>>2] = $84;
  HEAP32[$this>>2] = $84;
  $86 = (($84) + ($$0$i12<<4)|0);
  HEAP32[$4>>2] = $86;
  $87 = ($__first|0)==($__last|0);
  if ($87) {
   return;
  }
  $$01$i = $__first;$89 = $84;
  while(1) {
   $88 = HEAP32[$$01$i>>2]|0;
   HEAP32[$89>>2] = $88;
   $90 = ((($89)) + 4|0);
   $91 = ((($$01$i)) + 4|0);
   $92 = HEAP32[$91>>2]|0;
   HEAP32[$90>>2] = $92;
   $93 = ($92|0)==(0|0);
   if ($93) {
    $$pre3$i = $89;
   } else {
    __ZNSt3__119__shared_weak_count12__add_sharedEv($92);
    $$pre3$pre$i = HEAP32[$85>>2]|0;
    $$pre3$i = $$pre3$pre$i;
   }
   $94 = ((($89)) + 8|0);
   $95 = ((($$01$i)) + 8|0);
   $96 = +HEAPF64[$95>>3];
   HEAPF64[$94>>3] = $96;
   $97 = ((($$pre3$i)) + 16|0);
   HEAP32[$85>>2] = $97;
   $98 = ((($$01$i)) + 16|0);
   $99 = ($98|0)==($__last|0);
   if ($99) {
    break;
   } else {
    $$01$i = $98;$89 = $97;
   }
  }
  return;
 }
 $12 = ((($this)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13;
 $15 = (($14) - ($8))|0;
 $16 = $15 >> 4;
 $17 = ($3>>>0)>($16>>>0);
 $18 = (($__first) + ($16<<4)|0);
 $$__last = $17 ? $18 : $__last;
 $$ = $17 ? 1 : 0;
 $19 = ($$__last|0)==($__first|0);
 if ($19) {
  $$0$lcssa$i$i = $6;
 } else {
  $scevgep$i$i = ((($$__last)) + -16|0);
  $20 = $scevgep$i$i;
  $21 = (($20) - ($1))|0;
  $$012$i$i = $__first;$$03$i$i = $6;
  while(1) {
   $22 = HEAP32[$$012$i$i>>2]|0;
   $23 = ((($$012$i$i)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0|0);
   if (!($25)) {
    __ZNSt3__119__shared_weak_count12__add_sharedEv($24);
   }
   HEAP32[$$03$i$i>>2] = $22;
   $26 = ((($$03$i$i)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   HEAP32[$26>>2] = $24;
   $28 = ($27|0)==(0|0);
   if (!($28)) {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($27);
   }
   $29 = ((($$012$i$i)) + 8|0);
   $30 = +HEAPF64[$29>>3];
   $31 = ((($$03$i$i)) + 8|0);
   HEAPF64[$31>>3] = $30;
   $32 = ((($$012$i$i)) + 16|0);
   $33 = ((($$03$i$i)) + 16|0);
   $34 = ($32|0)==($$__last|0);
   if ($34) {
    break;
   } else {
    $$012$i$i = $32;$$03$i$i = $33;
   }
  }
  $35 = $21 >>> 4;
  $36 = (($35) + 1)|0;
  $scevgep7$i$i = (($6) + ($36<<4)|0);
  $$0$lcssa$i$i = $scevgep7$i$i;
 }
 if (!($$)) {
  $52 = HEAP32[$12>>2]|0;
  $53 = ($52|0)==($$0$lcssa$i$i|0);
  if ($53) {
   return;
  } else {
   $55 = $52;
  }
  while(1) {
   $54 = ((($55)) + -16|0);
   HEAP32[$12>>2] = $54;
   $56 = ((($55)) + -12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)==(0|0);
   if ($58) {
    $60 = $54;
   } else {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($57);
    $$pre$i$i = HEAP32[$12>>2]|0;
    $60 = $$pre$i$i;
   }
   $59 = ($60|0)==($$0$lcssa$i$i|0);
   if ($59) {
    break;
   } else {
    $55 = $60;
   }
  }
  return;
 }
 $37 = ($$__last|0)==($__last|0);
 if ($37) {
  return;
 }
 $$pre$i2 = HEAP32[$12>>2]|0;
 $$01$i4 = $$__last;$39 = $$pre$i2;
 while(1) {
  $38 = ($39|0)==(0|0);
  if ($38) {
   $49 = 0;
  } else {
   $40 = HEAP32[$$01$i4>>2]|0;
   HEAP32[$39>>2] = $40;
   $41 = ((($39)) + 4|0);
   $42 = ((($$01$i4)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   HEAP32[$41>>2] = $43;
   $44 = ($43|0)==(0|0);
   if ($44) {
    $$pre3$i6 = $39;
   } else {
    __ZNSt3__119__shared_weak_count12__add_sharedEv($43);
    $$pre3$pre$i5 = HEAP32[$12>>2]|0;
    $$pre3$i6 = $$pre3$pre$i5;
   }
   $45 = ((($39)) + 8|0);
   $46 = ((($$01$i4)) + 8|0);
   $47 = +HEAPF64[$46>>3];
   HEAPF64[$45>>3] = $47;
   $49 = $$pre3$i6;
  }
  $48 = ((($49)) + 16|0);
  HEAP32[$12>>2] = $48;
  $50 = ((($$01$i4)) + 16|0);
  $51 = ($50|0)==($__last|0);
  if ($51) {
   break;
  } else {
   $$01$i4 = $50;$39 = $48;
  }
 }
 return;
}
function __ZN4rhea8flat_mapINS_8variableEdNSt3__14lessIS1_EENS2_9allocatorINS2_4pairIS1_dEEEEE5eraseERKS1_($this,$k) {
 $this = $this|0;
 $k = $k|0;
 var $$ = 0, $$0 = 0, $$0$lcssa$i$i$i$i = 0, $$012$i$i$i$i = 0, $$03$i$i$i$i = 0, $$neg2$i$i$i$i = 0, $$pre$i$i = 0, $$pre$i$i$i$i = 0, $$sum$i$i = 0, $$sum$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $__first5$i$i$i$i = 0, $__len$0$be$i$i$i$i = 0, $__len$03$i$i$i$i = 0, $scevgep$i$i$i$i = 0, $scevgep7$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($this)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = $0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 4;
 $7 = ($6|0)==(0);
 if ($7) {
  $22 = $0;
 } else {
  $8 = HEAP32[$k>>2]|0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $0;$__len$03$i$i$i$i = $6;
  while(1) {
   $11 = (($__len$03$i$i$i$i|0) / 2)&-1;
   $12 = (($13) + ($11<<4)|0);
   $14 = HEAP32[$12>>2]|0;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16>>>0)<($10>>>0);
   if ($17) {
    $$sum$i$i$i$i = (($11) + 1)|0;
    $18 = (($13) + ($$sum$i$i$i$i<<4)|0);
    $$neg2$i$i$i$i = (($__len$03$i$i$i$i) + -1)|0;
    $19 = (($$neg2$i$i$i$i) - ($11))|0;
    $61 = $18;$__len$0$be$i$i$i$i = $19;
   } else {
    $61 = $13;$__len$0$be$i$i$i$i = $11;
   }
   $20 = ($__len$0$be$i$i$i$i|0)==(0);
   if ($20) {
    $22 = $61;
    break;
   } else {
    $13 = $61;$__len$03$i$i$i$i = $__len$0$be$i$i$i$i;
   }
  }
 }
 $21 = ($22|0)==($2|0);
 if ($21) {
  $$0 = 0;
  return ($$0|0);
 }
 $23 = HEAP32[$k>>2]|0;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$22>>2]|0;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($25>>>0)<($28>>>0);
 $$ = $29 ? $2 : $22;
 $30 = ($$|0)==($2|0);
 if ($30) {
  $$0 = 0;
  return ($$0|0);
 }
 $31 = $$;
 $32 = (($31) - ($4))|0;
 $33 = $32 >> 4;
 $$sum$i$i = (($33) + 1)|0;
 $34 = (($0) + ($$sum$i$i<<4)|0);
 $35 = ($34|0)==($2|0);
 if ($35) {
  $$0$lcssa$i$i$i$i = $$;$53 = $2;
 } else {
  $scevgep$i$i$i$i = ((($2)) + -16|0);
  $$012$i$i$i$i = $34;$$03$i$i$i$i = $$;
  while(1) {
   $36 = HEAP32[$$012$i$i$i$i>>2]|0;
   $37 = ((($$012$i$i$i$i)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   HEAP32[$$012$i$i$i$i>>2] = 0;
   HEAP32[$37>>2] = 0;
   HEAP32[$$03$i$i$i$i>>2] = $36;
   $39 = ((($$03$i$i$i$i)) + 4|0);
   $40 = HEAP32[$39>>2]|0;
   HEAP32[$39>>2] = $38;
   $41 = ($40|0)==(0|0);
   if (!($41)) {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($40);
   }
   $42 = ((($$012$i$i$i$i)) + 8|0);
   $43 = +HEAPF64[$42>>3];
   $44 = ((($$03$i$i$i$i)) + 8|0);
   HEAPF64[$44>>3] = $43;
   $45 = ((($$012$i$i$i$i)) + 16|0);
   $46 = ((($$03$i$i$i$i)) + 16|0);
   $47 = ($45|0)==($2|0);
   if ($47) {
    break;
   } else {
    $$012$i$i$i$i = $45;$$03$i$i$i$i = $46;
   }
  }
  $48 = $scevgep$i$i$i$i;
  $__first5$i$i$i$i = $34;
  $49 = (($48) - ($__first5$i$i$i$i))|0;
  $50 = $49 >>> 4;
  $51 = (($50) + 1)|0;
  $scevgep7$i$i$i$i = (($$) + ($51<<4)|0);
  $$pre$i$i = HEAP32[$1>>2]|0;
  $$0$lcssa$i$i$i$i = $scevgep7$i$i$i$i;$53 = $$pre$i$i;
 }
 $52 = ($53|0)==($$0$lcssa$i$i$i$i|0);
 if ($52) {
  $$0 = 1;
  return ($$0|0);
 } else {
  $55 = $53;
 }
 while(1) {
  $54 = ((($55)) + -16|0);
  HEAP32[$1>>2] = $54;
  $56 = ((($55)) + -12|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)==(0|0);
  if ($58) {
   $60 = $54;
  } else {
   __ZNSt3__119__shared_weak_count16__release_sharedEv($57);
   $$pre$i$i$i$i = HEAP32[$1>>2]|0;
   $60 = $$pre$i$i$i$i;
  }
  $59 = ($60|0)==($$0$lcssa$i$i$i$i|0);
  if ($59) {
   $$0 = 1;
   break;
  } else {
   $55 = $60;
  }
 }
 return ($$0|0);
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeISC_PvEEEE($agg$result,$this,$__p) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__p = $__p|0;
 var $$01$i$i$i$i$i$i$i$i$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $__pn$0$i = 0, $__pn$0$i$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__p>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$agg$result>>2] = $1;
 $2 = ((($this)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + -1)|0;
 $7 = $6 & $3;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $6 & $5;
  $13 = $9;
 } else {
  $10 = (($5>>>0) % ($3>>>0))&-1;
  $13 = $10;
 }
 $11 = HEAP32[$this>>2]|0;
 $12 = (($11) + ($13<<2)|0);
 $14 = HEAP32[$12>>2]|0;
 $__pn$0$i = $14;
 while(1) {
  $15 = HEAP32[$__pn$0$i>>2]|0;
  $16 = ($15|0)==($0|0);
  if ($16) {
   $$lcssa = $__pn$0$i;$__pn$0$i$lcssa = $__pn$0$i;
   break;
  } else {
   $__pn$0$i = $15;
  }
 }
 $17 = ((($this)) + 8|0);
 $18 = ($__pn$0$i$lcssa|0)==($17|0);
 if ($18) {
  label = 11;
 } else {
  $19 = ((($__pn$0$i$lcssa)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  if ($8) {
   $21 = $20 & $6;
   $24 = $21;
  } else {
   $22 = (($20>>>0) % ($3>>>0))&-1;
   $24 = $22;
  }
  $23 = ($24|0)==($13|0);
  if ($23) {
   $33 = $1;
   label = 17;
  } else {
   label = 11;
  }
 }
 do {
  if ((label|0) == 11) {
   $25 = ($1|0)==(0|0);
   if (!($25)) {
    $26 = ((($1)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    if ($8) {
     $28 = $27 & $6;
     $31 = $28;
    } else {
     $29 = (($27>>>0) % ($3>>>0))&-1;
     $31 = $29;
    }
    $30 = ($31|0)==($13|0);
    if ($30) {
     $35 = $1;
     label = 18;
     break;
    }
   }
   HEAP32[$12>>2] = 0;
   $$pre = HEAP32[$0>>2]|0;
   $33 = $$pre;
   label = 17;
  }
 } while(0);
 if ((label|0) == 17) {
  $32 = ($33|0)==(0|0);
  if ($32) {
   $43 = 0;
  } else {
   $35 = $33;
   label = 18;
  }
 }
 if ((label|0) == 18) {
  $34 = ((($35)) + 4|0);
  $36 = HEAP32[$34>>2]|0;
  if ($8) {
   $37 = $36 & $6;
   $40 = $37;
  } else {
   $38 = (($36>>>0) % ($3>>>0))&-1;
   $40 = $38;
  }
  $39 = ($40|0)==($13|0);
  if ($39) {
   $43 = $35;
  } else {
   $41 = HEAP32[$this>>2]|0;
   $42 = (($41) + ($40<<2)|0);
   HEAP32[$42>>2] = $__pn$0$i$lcssa;
   $$pre$i = HEAP32[$0>>2]|0;
   $43 = $$pre$i;
  }
 }
 HEAP32[$$lcssa>>2] = $43;
 HEAP32[$0>>2] = 0;
 $44 = ((($this)) + 12|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + -1)|0;
 HEAP32[$44>>2] = $46;
 $47 = ($0|0)==(0|0);
 if ($47) {
  return;
 }
 $48 = ((($0)) + 24|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0|0);
 if (!($50)) {
  $$01$i$i$i$i$i$i$i$i$i$i = $49;
  while(1) {
   $51 = HEAP32[$$01$i$i$i$i$i$i$i$i$i$i>>2]|0;
   $52 = ((($$01$i$i$i$i$i$i$i$i$i$i)) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(0|0);
   if (!($54)) {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($53);
   }
   __ZdlPv($$01$i$i$i$i$i$i$i$i$i$i);
   $55 = ($51|0)==(0|0);
   if ($55) {
    break;
   } else {
    $$01$i$i$i$i$i$i$i$i$i$i = $51;
   }
  }
 }
 $56 = ((($0)) + 16|0);
 $57 = HEAP32[$56>>2]|0;
 HEAP32[$56>>2] = 0;
 $58 = ($57|0)==(0|0);
 if (!($58)) {
  __ZdlPv($57);
 }
 $59 = ((($0)) + 12|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(0|0);
 if (!($61)) {
  __ZNSt3__119__shared_weak_count16__release_sharedEv($60);
 }
 __ZdlPv($0);
 return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE5eraseENS_21__hash_const_iteratorIPNS_11__hash_nodeIS5_PvEEEE($agg$result,$this,$__p) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__p = $__p|0;
 var $$lcssa = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i$i$i$i$i$i$i = 0, $$pre$i$i$i$i$i$i$i$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__pn$0$i = 0, $__pn$0$i$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__p>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$agg$result>>2] = $1;
 $2 = ((($this)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + -1)|0;
 $7 = $6 & $3;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $6 & $5;
  $13 = $9;
 } else {
  $10 = (($5>>>0) % ($3>>>0))&-1;
  $13 = $10;
 }
 $11 = HEAP32[$this>>2]|0;
 $12 = (($11) + ($13<<2)|0);
 $14 = HEAP32[$12>>2]|0;
 $__pn$0$i = $14;
 while(1) {
  $15 = HEAP32[$__pn$0$i>>2]|0;
  $16 = ($15|0)==($0|0);
  if ($16) {
   $$lcssa = $__pn$0$i;$__pn$0$i$lcssa = $__pn$0$i;
   break;
  } else {
   $__pn$0$i = $15;
  }
 }
 $17 = ((($this)) + 8|0);
 $18 = ($__pn$0$i$lcssa|0)==($17|0);
 if ($18) {
  label = 11;
 } else {
  $19 = ((($__pn$0$i$lcssa)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  if ($8) {
   $21 = $20 & $6;
   $24 = $21;
  } else {
   $22 = (($20>>>0) % ($3>>>0))&-1;
   $24 = $22;
  }
  $23 = ($24|0)==($13|0);
  if ($23) {
   $33 = $1;
   label = 17;
  } else {
   label = 11;
  }
 }
 do {
  if ((label|0) == 11) {
   $25 = ($1|0)==(0|0);
   if (!($25)) {
    $26 = ((($1)) + 4|0);
    $27 = HEAP32[$26>>2]|0;
    if ($8) {
     $28 = $27 & $6;
     $31 = $28;
    } else {
     $29 = (($27>>>0) % ($3>>>0))&-1;
     $31 = $29;
    }
    $30 = ($31|0)==($13|0);
    if ($30) {
     $35 = $1;
     label = 18;
     break;
    }
   }
   HEAP32[$12>>2] = 0;
   $$pre = HEAP32[$0>>2]|0;
   $33 = $$pre;
   label = 17;
  }
 } while(0);
 if ((label|0) == 17) {
  $32 = ($33|0)==(0|0);
  if ($32) {
   $43 = 0;
  } else {
   $35 = $33;
   label = 18;
  }
 }
 if ((label|0) == 18) {
  $34 = ((($35)) + 4|0);
  $36 = HEAP32[$34>>2]|0;
  if ($8) {
   $37 = $36 & $6;
   $40 = $37;
  } else {
   $38 = (($36>>>0) % ($3>>>0))&-1;
   $40 = $38;
  }
  $39 = ($40|0)==($13|0);
  if ($39) {
   $43 = $35;
  } else {
   $41 = HEAP32[$this>>2]|0;
   $42 = (($41) + ($40<<2)|0);
   HEAP32[$42>>2] = $__pn$0$i$lcssa;
   $$pre$i = HEAP32[$0>>2]|0;
   $43 = $$pre$i;
  }
 }
 HEAP32[$$lcssa>>2] = $43;
 HEAP32[$0>>2] = 0;
 $44 = ((($this)) + 12|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + -1)|0;
 HEAP32[$44>>2] = $46;
 $47 = ($0|0)==(0|0);
 if ($47) {
  return;
 }
 $48 = ((($0)) + 24|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0|0);
 if (!($50)) {
  $51 = ((($0)) + 28|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==($49|0);
  if ($53) {
   $61 = $49;
  } else {
   $55 = $52;
   while(1) {
    $54 = ((($55)) + -16|0);
    HEAP32[$51>>2] = $54;
    $56 = ((($55)) + -12|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==(0|0);
    if ($58) {
     $60 = $54;
    } else {
     __ZNSt3__119__shared_weak_count16__release_sharedEv($57);
     $$pre$i$i$i$i$i$i$i$i$i$i$i = HEAP32[$51>>2]|0;
     $60 = $$pre$i$i$i$i$i$i$i$i$i$i$i;
    }
    $59 = ($60|0)==($49|0);
    if ($59) {
     break;
    } else {
     $55 = $60;
    }
   }
   $$pre$i$i$i$i$i$i$i$i$i = HEAP32[$48>>2]|0;
   $61 = $$pre$i$i$i$i$i$i$i$i$i;
  }
  __ZdlPv($61);
 }
 $62 = ((($0)) + 12|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)==(0|0);
 if (!($64)) {
  __ZNSt3__119__shared_weak_count16__release_sharedEv($63);
 }
 __ZdlPv($0);
 return;
}
function __ZN4rhea14simplex_solverD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4rhea14simplex_solverD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZThn8_N4rhea14simplex_solverD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + -8|0);
 __ZN4rhea14simplex_solverD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN4rhea16required_failureD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK4rhea16required_failure4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (864|0);
}
function __ZN4rhea14internal_errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (680);
 $0 = ((($this)) + 4|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNK4rhea14internal_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = ((($0)) + 1|0);
  $7 = $6;
  return ($7|0);
 } else {
  $4 = ((($this)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
  return ($7|0);
 }
 return (0)|0;
}
function __ZN4rhea20constraint_not_foundD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK4rhea20constraint_not_found4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1184|0);
}
function __ZN4rhea33required_failure_with_explanationD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__f$01$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (568);
 $0 = ((($this)) + 4|0);
 $1 = ((($this)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  __ZdlPv($this);
  return;
 }
 $4 = ((($this)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = HEAP32[$7>>2]|0;
 HEAP32[$11>>2] = $9;
 HEAP32[$1>>2] = 0;
 $12 = ($5|0)==($0|0);
 if ($12) {
  __ZdlPv($this);
  return;
 } else {
  $__f$01$i$i$i = $5;
 }
 while(1) {
  $13 = ((($__f$01$i$i$i)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($__f$01$i$i$i)) + 8|0);
  HEAP32[$15>>2] = (2352);
  $16 = ((($__f$01$i$i$i)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   __ZNSt3__119__shared_weak_count16__release_sharedEv($17);
  }
  __ZdlPv($__f$01$i$i$i);
  $19 = ($14|0)==($0|0);
  if ($19) {
   break;
  } else {
   $__f$01$i$i$i = $14;
  }
 }
 __ZdlPv($this);
 return;
}
function __ZN4rhea14dummy_variableD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK4rhea14dummy_variable8is_dummyEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK4rhea14dummy_variable11is_externalEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNK4rhea14dummy_variable12is_pivotableEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNK4rhea14dummy_variable13is_restrictedEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK4rhea14dummy_variable9to_stringEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,1424,5);
 return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea14dummy_variableENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_countD2Ev($this);
 return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea14dummy_variableENS_9allocatorIS2_EEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_countD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea14dummy_variableENS_9allocatorIS2_EEE16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$2 & 511]($0);
 return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea14dummy_variableENS_9allocatorIS2_EEE21__on_zero_shared_weakEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__113unordered_mapIN4rhea10constraintENS1_8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEE25__construct_node_with_keyERSA_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = (__Znwj(28)|0);
 $2 = $0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = (2352);
 $4 = ((($1)) + 12|0);
 $5 = ((($__k)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = ((($1)) + 16|0);
 $8 = ((($__k)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$7>>2] = $9;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  __ZNSt3__119__shared_weak_count12__add_sharedEv($9);
 }
 __THREW__ = 0;
 $11 = (invoke_ii(179,32)|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if (!($13)) {
  $14 = ((($1)) + 20|0);
  $15 = ((($11)) + 4|0);
  HEAP32[$15>>2] = 0;
  $16 = ((($11)) + 8|0);
  HEAP32[$16>>2] = 0;
  HEAP32[$11>>2] = (2168);
  $17 = ((($11)) + 16|0);
  $18 = ((($11)) + 20|0);
  $19 = HEAP32[8>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[8>>2] = $20;
  HEAP32[$18>>2] = $20;
  $21 = ((($11)) + 24|0);
  HEAPF64[$21>>3] = 0.0;
  HEAP32[$17>>2] = (2200);
  HEAP32[$14>>2] = $17;
  $22 = ((($1)) + 24|0);
  HEAP32[$22>>2] = $11;
  HEAP32[$agg$result>>2] = $1;
  $23 = ((($agg$result)) + 4|0);
  $24 = $23;
  $25 = $24;
  HEAP32[$25>>2] = $2;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = 257;
  return;
 }
 $28 = ___cxa_find_matching_catch()|0;
 $29 = tempRet0;
 HEAP32[$3>>2] = (2352);
 $30 = HEAP32[$7>>2]|0;
 $31 = ($30|0)==(0|0);
 if ($31) {
  __ZdlPv($1);
  ___resumeException($28|0);
  // unreachable;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv($30);
 __ZdlPv($1);
 ___resumeException($28|0);
 // unreachable;
}
function __ZN4rhea14slack_variableD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK4rhea14slack_variable11is_externalEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNK4rhea14slack_variable12is_pivotableEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK4rhea14slack_variable13is_restrictedEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK4rhea14slack_variable9to_stringEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,1792,5);
 return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea14slack_variableENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_countD2Ev($this);
 return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea14slack_variableENS_9allocatorIS2_EEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_countD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea14slack_variableENS_9allocatorIS2_EEE16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$2 & 511]($0);
 return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea14slack_variableENS_9allocatorIS2_EEE21__on_zero_shared_weakEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN4rhea13row_not_foundD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK4rhea13row_not_found4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1944|0);
}
function __ZN4rhea18objective_variableD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK4rhea18objective_variable12is_pivotableEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNK4rhea18objective_variable13is_restrictedEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNK4rhea18objective_variable9to_stringEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,2016,9);
 return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea18objective_variableENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_countD2Ev($this);
 return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea18objective_variableENS_9allocatorIS2_EEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_countD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea18objective_variableENS_9allocatorIS2_EEE16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$2 & 511]($0);
 return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea18objective_variableENS_9allocatorIS2_EEE21__on_zero_shared_weakEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEE6insertENS_11__wrap_iterIPKS4_EEOS4_($agg$result,$this,$__position,$__x) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__position = $__position|0;
 $__x = $__x|0;
 var $$0$i = 0, $$01$i$i = 0, $$01$i3$i = 0, $$012$i$i$i = 0, $$03$i$i$i = 0, $$lcssa = 0, $$pre$i = 0, $$pre19 = 0, $$pre20 = 0, $$pre3$i$i = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__i$01$i = 0, $__p$0 = 0, $__v = 0, $scevgep = 0;
 var $scevgep$i = 0, $scevgep12 = 0, $scevgep13 = 0, $scevgep17 = 0, $scevgep5$i = 0, $uglygep$i = 0, $uglygep4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = HEAP32[$__position>>2]|0;
 $2 = $1;
 $3 = $0;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 4;
 $6 = ((($this)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($this)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)<($9>>>0);
 if ($10) {
  $11 = ($1|0)==($7|0);
  if ($11) {
   $12 = ($1|0)==(0|0);
   if (!($12)) {
    $13 = HEAP32[$__x>>2]|0;
    HEAP32[$1>>2] = $13;
    $14 = ((($1)) + 4|0);
    $15 = ((($__x)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    HEAP32[$14>>2] = $16;
    HEAP32[$__x>>2] = 0;
    HEAP32[$15>>2] = 0;
    $17 = ((($1)) + 8|0);
    $18 = ((($__x)) + 8|0);
    $19 = +HEAPF64[$18>>3];
    HEAPF64[$17>>3] = $19;
   }
   $20 = ((($1)) + 16|0);
   HEAP32[$6>>2] = $20;
   $__p$0 = $1;
   HEAP32[$agg$result>>2] = $__p$0;
   STACKTOP = sp;return;
  }
  $$sum = (($5) + 1)|0;
  $21 = (($0) + ($$sum<<4)|0);
  $22 = $7;
  $23 = $21;
  $24 = (($22) - ($23))|0;
  $25 = $24 >> 4;
  $26 = (($1) + ($25<<4)|0);
  $27 = ($26>>>0)<($7>>>0);
  if ($27) {
   $28 = (0 - ($25))|0;
   $scevgep$i = (($7) + ($28<<4)|0);
   $29 = $2 ^ -1;
   $uglygep$i = (($scevgep$i) + ($29)|0);
   $uglygep4$i = $uglygep$i;
   $30 = $uglygep4$i >>> 4;
   $32 = $7;$__i$01$i = $26;
   while(1) {
    $31 = ($32|0)==(0|0);
    if (!($31)) {
     $33 = HEAP32[$__i$01$i>>2]|0;
     HEAP32[$32>>2] = $33;
     $34 = ((($32)) + 4|0);
     $35 = ((($__i$01$i)) + 4|0);
     $36 = HEAP32[$35>>2]|0;
     HEAP32[$34>>2] = $36;
     HEAP32[$__i$01$i>>2] = 0;
     HEAP32[$35>>2] = 0;
     $37 = ((($32)) + 8|0);
     $38 = ((($__i$01$i)) + 8|0);
     $39 = +HEAPF64[$38>>3];
     HEAPF64[$37>>3] = $39;
    }
    $40 = ((($__i$01$i)) + 16|0);
    $41 = ((($32)) + 16|0);
    $42 = ($40>>>0)<($7>>>0);
    if ($42) {
     $32 = $41;$__i$01$i = $40;
    } else {
     break;
    }
   }
   $43 = (($30) + 1)|0;
   $scevgep5$i = (($7) + ($43<<4)|0);
   HEAP32[$6>>2] = $scevgep5$i;
  }
  $44 = ($25|0)==(0);
  if (!($44)) {
   $$012$i$i$i = $26;$$03$i$i$i = $7;
   while(1) {
    $45 = ((($$03$i$i$i)) + -16|0);
    $46 = ((($$012$i$i$i)) + -16|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ((($$012$i$i$i)) + -12|0);
    $49 = HEAP32[$48>>2]|0;
    HEAP32[$46>>2] = 0;
    HEAP32[$48>>2] = 0;
    HEAP32[$45>>2] = $47;
    $50 = ((($$03$i$i$i)) + -12|0);
    $51 = HEAP32[$50>>2]|0;
    HEAP32[$50>>2] = $49;
    $52 = ($51|0)==(0|0);
    if (!($52)) {
     __ZNSt3__119__shared_weak_count16__release_sharedEv($51);
    }
    $53 = ((($$012$i$i$i)) + -8|0);
    $54 = +HEAPF64[$53>>3];
    $55 = ((($$03$i$i$i)) + -8|0);
    HEAPF64[$55>>3] = $54;
    $56 = ($46|0)==($1|0);
    if ($56) {
     break;
    } else {
     $$012$i$i$i = $46;$$03$i$i$i = $45;
    }
   }
  }
  $57 = HEAP32[$__x>>2]|0;
  $58 = ((($__x)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  HEAP32[$__x>>2] = 0;
  HEAP32[$58>>2] = 0;
  HEAP32[$1>>2] = $57;
  $60 = ((($1)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  HEAP32[$60>>2] = $59;
  $62 = ($61|0)==(0|0);
  if (!($62)) {
   __ZNSt3__119__shared_weak_count16__release_sharedEv($61);
  }
  $63 = ((($__x)) + 8|0);
  $64 = +HEAPF64[$63>>3];
  $65 = ((($1)) + 8|0);
  HEAPF64[$65>>3] = $64;
  $__p$0 = $1;
  HEAP32[$agg$result>>2] = $__p$0;
  STACKTOP = sp;return;
 }
 $66 = ((($this)) + 8|0);
 $67 = $7;
 $68 = (($67) - ($3))|0;
 $69 = $68 >> 4;
 $70 = (($69) + 1)|0;
 $71 = ($70>>>0)>(268435455);
 if ($71) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $72 = $9;
 $73 = $0;
 $74 = (($72) - ($73))|0;
 $75 = $74 >> 4;
 $76 = ($75>>>0)<(134217727);
 if ($76) {
  $77 = $74 >> 3;
  $78 = ($77>>>0)<($70>>>0);
  $79 = $78 ? $70 : $77;
  $$0$i = $79;
 } else {
  $$0$i = 268435455;
 }
 $80 = (($2) - ($73))|0;
 $81 = $80 >> 4;
 $82 = ((($__v)) + 12|0);
 HEAP32[$82>>2] = 0;
 $83 = ((($__v)) + 16|0);
 HEAP32[$83>>2] = $66;
 $84 = ($$0$i|0)==(0);
 if ($84) {
  $87 = 0;
 } else {
  $85 = $$0$i << 4;
  $86 = (__Znwj($85)|0);
  $87 = $86;
 }
 HEAP32[$__v>>2] = $87;
 $88 = (($87) + ($81<<4)|0);
 $89 = ((($__v)) + 8|0);
 HEAP32[$89>>2] = $88;
 $90 = ((($__v)) + 4|0);
 HEAP32[$90>>2] = $88;
 $91 = (($87) + ($$0$i<<4)|0);
 HEAP32[$82>>2] = $91;
 __THREW__ = 0;
 invoke_vii(223,($__v|0),($__x|0));
 $92 = __THREW__; __THREW__ = 0;
 $93 = $92&1;
 if ($93) {
  $146 = ___cxa_find_matching_catch()|0;
  $147 = tempRet0;
  $148 = HEAP32[$90>>2]|0;
  $149 = HEAP32[$89>>2]|0;
  $150 = ($149|0)==($148|0);
  if (!($150)) {
   $151 = $148;
   $scevgep13 = ((($149)) + -16|0);
   $152 = $scevgep13;
   $153 = (($152) - ($151))|0;
   $154 = $153 >>> 4;
   $155 = $154 ^ -1;
   $157 = $149;
   while(1) {
    $156 = ((($157)) + -16|0);
    $158 = ((($157)) + -12|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)==(0|0);
    if (!($160)) {
     __ZNSt3__119__shared_weak_count16__release_sharedEv($159);
    }
    $161 = ($156|0)==($148|0);
    if ($161) {
     break;
    } else {
     $157 = $156;
    }
   }
   $scevgep17 = (($149) + ($155<<4)|0);
   HEAP32[$89>>2] = $scevgep17;
  }
  $162 = HEAP32[$__v>>2]|0;
  $163 = ($162|0)==(0|0);
  if ($163) {
   ___resumeException($146|0);
   // unreachable;
  }
  __ZdlPv($162);
  ___resumeException($146|0);
  // unreachable;
 }
 $94 = HEAP32[$90>>2]|0;
 $95 = HEAP32[$this>>2]|0;
 $96 = ($95|0)==($1|0);
 if ($96) {
  $164 = $94;
 } else {
  $$01$i3$i = $1;$99 = $94;
  while(1) {
   $97 = ((($$01$i3$i)) + -16|0);
   $98 = ((($99)) + -16|0);
   $100 = HEAP32[$97>>2]|0;
   HEAP32[$98>>2] = $100;
   $101 = ((($99)) + -12|0);
   $102 = ((($$01$i3$i)) + -12|0);
   $103 = HEAP32[$102>>2]|0;
   HEAP32[$101>>2] = $103;
   $104 = ($103|0)==(0|0);
   if (!($104)) {
    __ZNSt3__119__shared_weak_count12__add_sharedEv($103);
   }
   $105 = ((($99)) + -8|0);
   $106 = ((($$01$i3$i)) + -8|0);
   $107 = +HEAPF64[$106>>3];
   HEAPF64[$105>>3] = $107;
   $108 = ((($99)) + -16|0);
   HEAP32[$90>>2] = $108;
   $109 = ($97|0)==($95|0);
   if ($109) {
    $164 = $108;
    break;
   } else {
    $$01$i3$i = $97;$99 = $108;
   }
  }
 }
 $110 = HEAP32[$6>>2]|0;
 $111 = ($110|0)==($1|0);
 $$pre20 = HEAP32[$89>>2]|0;
 if ($111) {
  $127 = $164;$128 = $$pre20;$129 = $1;
 } else {
  $$01$i$i = $1;$113 = $$pre20;
  while(1) {
   $112 = ($113|0)==(0|0);
   if ($112) {
    $124 = 0;
   } else {
    $114 = HEAP32[$$01$i$i>>2]|0;
    HEAP32[$113>>2] = $114;
    $115 = ((($113)) + 4|0);
    $116 = ((($$01$i$i)) + 4|0);
    $117 = HEAP32[$116>>2]|0;
    HEAP32[$115>>2] = $117;
    $118 = ($117|0)==(0|0);
    if (!($118)) {
     __ZNSt3__119__shared_weak_count12__add_sharedEv($117);
    }
    $119 = ((($113)) + 8|0);
    $120 = ((($$01$i$i)) + 8|0);
    $121 = +HEAPF64[$120>>3];
    HEAPF64[$119>>3] = $121;
    $$pre3$i$i = HEAP32[$89>>2]|0;
    $124 = $$pre3$i$i;
   }
   $122 = ((($$01$i$i)) + 16|0);
   $123 = ((($124)) + 16|0);
   HEAP32[$89>>2] = $123;
   $125 = ($122|0)==($110|0);
   if ($125) {
    $$lcssa = $123;
    break;
   } else {
    $$01$i$i = $122;$113 = $123;
   }
  }
  $$pre$i = HEAP32[$90>>2]|0;
  $$pre19 = HEAP32[$6>>2]|0;
  $127 = $$pre$i;$128 = $$lcssa;$129 = $$pre19;
 }
 $126 = HEAP32[$this>>2]|0;
 HEAP32[$this>>2] = $127;
 HEAP32[$90>>2] = $126;
 HEAP32[$6>>2] = $128;
 HEAP32[$89>>2] = $129;
 $130 = HEAP32[$8>>2]|0;
 $131 = HEAP32[$82>>2]|0;
 HEAP32[$8>>2] = $131;
 HEAP32[$82>>2] = $130;
 HEAP32[$__v>>2] = $126;
 $132 = ($129|0)==($126|0);
 if ($132) {
  $145 = $129;
 } else {
  $133 = $126;
  $scevgep = ((($129)) + -16|0);
  $134 = $scevgep;
  $135 = (($134) - ($133))|0;
  $136 = $135 >>> 4;
  $137 = $136 ^ -1;
  $139 = $129;
  while(1) {
   $138 = ((($139)) + -16|0);
   $140 = ((($139)) + -12|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ($141|0)==(0|0);
   if (!($142)) {
    __ZNSt3__119__shared_weak_count16__release_sharedEv($141);
   }
   $143 = ($138|0)==($126|0);
   if ($143) {
    break;
   } else {
    $139 = $138;
   }
  }
  $scevgep12 = (($129) + ($137<<4)|0);
  HEAP32[$89>>2] = $scevgep12;
  $145 = $126;
 }
 $144 = ($145|0)==(0|0);
 if ($144) {
  $__p$0 = $94;
  HEAP32[$agg$result>>2] = $__p$0;
  STACKTOP = sp;return;
 }
 __ZdlPv($145);
 $__p$0 = $94;
 HEAP32[$agg$result>>2] = $__p$0;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_4pairIN4rhea8variableEdEERNS_9allocatorIS4_EEE9push_backEOS4_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$0$lcssa$i$i = 0, $$012$i$i = 0, $$03$i$i = 0, $$pr = 0, $$pre = 0, $$pre5 = 0, $$pre6 = 0, $$pre7 = 0, $$pre8 = 0, $$promoted15$i = 0, $$sum = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $9 = 0, $scevgep$i = 0, $scevgep$i$i = 0, $scevgep7$i$i = 0, $scevgep8$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($this)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  $5 = ((($this)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$this>>2]|0;
  $8 = ($6>>>0)>($7>>>0);
  if ($8) {
   $9 = $6;
   $10 = $7;
   $11 = (($9) - ($10))|0;
   $12 = $11 >> 4;
   $13 = (($12) + 1)|0;
   $14 = (($13|0) / -2)&-1;
   $15 = (($6) + ($14<<4)|0);
   $16 = ($6|0)==($1|0);
   if ($16) {
    $$0$lcssa$i$i = $15;$34 = $1;
   } else {
    $scevgep$i$i = ((($1)) + -16|0);
    $17 = $scevgep$i$i;
    $18 = (($17) - ($9))|0;
    $$012$i$i = $6;$$03$i$i = $15;
    while(1) {
     $19 = HEAP32[$$012$i$i>>2]|0;
     $20 = ((($$012$i$i)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     HEAP32[$$012$i$i>>2] = 0;
     HEAP32[$20>>2] = 0;
     HEAP32[$$03$i$i>>2] = $19;
     $22 = ((($$03$i$i)) + 4|0);
     $23 = HEAP32[$22>>2]|0;
     HEAP32[$22>>2] = $21;
     $24 = ($23|0)==(0|0);
     if (!($24)) {
      __ZNSt3__119__shared_weak_count16__release_sharedEv($23);
     }
     $25 = ((($$012$i$i)) + 8|0);
     $26 = +HEAPF64[$25>>3];
     $27 = ((($$03$i$i)) + 8|0);
     HEAPF64[$27>>3] = $26;
     $28 = ((($$012$i$i)) + 16|0);
     $29 = ((($$03$i$i)) + 16|0);
     $30 = ($28|0)==($1|0);
     if ($30) {
      break;
     } else {
      $$012$i$i = $28;$$03$i$i = $29;
     }
    }
    $31 = $18 >>> 4;
    $32 = (($31) + 1)|0;
    $$sum4 = (($32) + ($14))|0;
    $scevgep7$i$i = (($6) + ($$sum4<<4)|0);
    $$pre = HEAP32[$5>>2]|0;
    $$0$lcssa$i$i = $scevgep7$i$i;$34 = $$pre;
   }
   HEAP32[$0>>2] = $$0$lcssa$i$i;
   $33 = (($34) + ($14<<4)|0);
   HEAP32[$5>>2] = $33;
  } else {
   $35 = $1;
   $36 = $7;
   $37 = (($35) - ($36))|0;
   $38 = $37 >> 3;
   $39 = ($38|0)==(0);
   $40 = $39 ? 1 : $38;
   $41 = $40 >>> 2;
   $42 = $40 << 4;
   $43 = (__Znwj($42)|0);
   $44 = (($43) + ($41<<4)|0);
   $45 = (($43) + ($40<<4)|0);
   $46 = ($6|0)==($1|0);
   if ($46) {
    HEAP32[$this>>2] = $43;
    HEAP32[$5>>2] = $44;
    HEAP32[$0>>2] = $44;
    HEAP32[$2>>2] = $45;
    $72 = $7;
   } else {
    $$promoted15$i = $6;
    $scevgep$i = ((($1)) + -16|0);
    $47 = $scevgep$i;
    $48 = (($47) - ($$promoted15$i))|0;
    $50 = $44;$52 = $6;
    while(1) {
     $49 = ($50|0)==(0|0);
     if (!($49)) {
      $51 = HEAP32[$52>>2]|0;
      HEAP32[$50>>2] = $51;
      $53 = ((($50)) + 4|0);
      $54 = ((($52)) + 4|0);
      $55 = HEAP32[$54>>2]|0;
      HEAP32[$53>>2] = $55;
      HEAP32[$52>>2] = 0;
      HEAP32[$54>>2] = 0;
      $56 = ((($50)) + 8|0);
      $57 = ((($52)) + 8|0);
      $58 = +HEAPF64[$57>>3];
      HEAPF64[$56>>3] = $58;
     }
     $59 = ((($50)) + 16|0);
     $60 = ((($52)) + 16|0);
     $61 = ($60|0)==($1|0);
     if ($61) {
      break;
     } else {
      $50 = $59;$52 = $60;
     }
    }
    $62 = $48 >>> 4;
    $63 = (($41) + 1)|0;
    $$sum = (($63) + ($62))|0;
    $scevgep8$i = (($43) + ($$sum<<4)|0);
    $$pre5 = HEAP32[$this>>2]|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$pre7 = HEAP32[$0>>2]|0;
    HEAP32[$this>>2] = $43;
    HEAP32[$5>>2] = $44;
    HEAP32[$0>>2] = $scevgep8$i;
    HEAP32[$2>>2] = $45;
    $64 = ($$pre7|0)==($$pre6|0);
    if ($64) {
     $72 = $$pre5;
    } else {
     $66 = $$pre7;
     while(1) {
      $65 = ((($66)) + -16|0);
      $67 = ((($66)) + -12|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if (!($69)) {
       __ZNSt3__119__shared_weak_count16__release_sharedEv($68);
      }
      $70 = ($65|0)==($$pre6|0);
      if ($70) {
       $72 = $$pre5;
       break;
      } else {
       $66 = $65;
      }
     }
    }
   }
   $71 = ($72|0)==(0|0);
   if (!($71)) {
    __ZdlPv($72);
   }
  }
  $$pr = HEAP32[$0>>2]|0;
  $$pre8 = $$pr;
 } else {
  $$pre8 = $1;
 }
 $73 = ($$pre8|0)==(0|0);
 if ($73) {
  $82 = 0;
  $81 = ((($82)) + 16|0);
  HEAP32[$0>>2] = $81;
  return;
 }
 $74 = HEAP32[$__x>>2]|0;
 HEAP32[$$pre8>>2] = $74;
 $75 = ((($$pre8)) + 4|0);
 $76 = ((($__x)) + 4|0);
 $77 = HEAP32[$76>>2]|0;
 HEAP32[$75>>2] = $77;
 HEAP32[$__x>>2] = 0;
 HEAP32[$76>>2] = 0;
 $78 = ((($$pre8)) + 8|0);
 $79 = ((($__x)) + 8|0);
 $80 = +HEAPF64[$79>>3];
 HEAPF64[$78>>3] = $80;
 $82 = $$pre8;
 $81 = ((($82)) + 16|0);
 HEAP32[$0>>2] = $81;
 return;
}
function __Z22createExpressionVarVarRN4rhea8variableENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES1_($agg$result,$v1,$op,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $op = $op|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $v1;
 $3 = $v2;
 $0 = $op;
 $1 = 2504;
 $4 = $0;
 $5 = $1;
 $6 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($4,$5)|0);
 $7 = ($6|0)==(0);
 $8 = $2;
 $9 = $3;
 if ($7) {
  __ZN4rheaplERKNS_8variableES2_($agg$result,$8,$9);
  STACKTOP = sp;return;
 } else {
  __ZN4rheamiERKNS_8variableES2_($agg$result,$8,$9);
  STACKTOP = sp;return;
 }
}
function __Z24createExpressionVarConstRN4rhea8variableENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEd($agg$result,$v1,$op,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $op = $op|0;
 $v2 = +$v2;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $v1;
 $7 = $v2;
 $4 = $op;
 $5 = 2504;
 $8 = $4;
 $9 = $5;
 $10 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($8,$9)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = $6;
  $13 = $7;
  __ZN4rheaplERKNS_8variableEd($agg$result,$12,$13);
  STACKTOP = sp;return;
 }
 $2 = $op;
 $3 = 2512;
 $14 = $2;
 $15 = $3;
 $16 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($14,$15)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = $6;
  $19 = $7;
  __ZN4rheamiERKNS_8variableEd($agg$result,$18,$19);
  STACKTOP = sp;return;
 }
 $0 = $op;
 $1 = 2520;
 $20 = $0;
 $21 = $1;
 $22 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($20,$21)|0);
 $23 = ($22|0)==(0);
 $24 = $6;
 $25 = $7;
 if ($23) {
  __ZN4rheamlERKNS_8variableEd($agg$result,$24,$25);
  STACKTOP = sp;return;
 } else {
  __ZN4rheadvERKNS_8variableEd($agg$result,$24,$25);
  STACKTOP = sp;return;
 }
}
function __Z24createExpressionConstVardNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERN4rhea8variableE($agg$result,$v1,$op,$v2) {
 $agg$result = $agg$result|0;
 $v1 = +$v1;
 $op = $op|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0;
 var $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 16|0;
 $4 = $v1;
 $5 = $v2;
 $2 = $op;
 $3 = 2504;
 $9 = $2;
 $10 = $3;
 $11 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($9,$10)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = $4;
  __ZN4rhea8variableC2Ed($6,$13);
  $14 = $5;
  __THREW__ = 0;
  invoke_viii(224,($agg$result|0),($6|0),($14|0));
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch()|0;
   $18 = tempRet0;
   $7 = $17;
   $8 = $18;
   __ZN4rhea8variableD2Ev($6);
   $19 = $7;
   $20 = $8;
   ___resumeException($19|0);
   // unreachable;
  }
  __ZN4rhea8variableD2Ev($6);
  STACKTOP = sp;return;
 }
 $0 = $op;
 $1 = 2512;
 $21 = $0;
 $22 = $1;
 $23 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($21,$22)|0);
 $24 = ($23|0)==(0);
 $25 = $4;
 $26 = $5;
 if ($24) {
  __ZN4rheamiEdRKNS_8variableE($agg$result,$25,$26);
  STACKTOP = sp;return;
 } else {
  __ZN4rheamlEdRKNS_8variableE($agg$result,$25,$26);
  STACKTOP = sp;return;
 }
}
function __Z20createEquationExpVarRN4rhea17linear_expressionERNS_8variableE($agg$result,$e1,$v2) {
 $agg$result = $agg$result|0;
 $e1 = $e1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $e1;
 $1 = $v2;
 $5 = $0;
 __ZN4rhea17linear_expressionC2ERKS0_($2,$5);
 $6 = $1;
 __THREW__ = 0;
 invoke_viii(225,($agg$result|0),($2|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $3 = $9;
  $4 = $10;
  __ZN4rhea17linear_expressionD2Ev($2);
  $11 = $3;
  $12 = $4;
  ___resumeException($11|0);
  // unreachable;
 } else {
  __ZN4rhea17linear_expressionD2Ev($2);
  STACKTOP = sp;return;
 }
}
function __Z20createEquationExpExpRN4rhea17linear_expressionES1_($agg$result,$e1,$e2) {
 $agg$result = $agg$result|0;
 $e1 = $e1|0;
 $e2 = $e2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $e1;
 $1 = $e2;
 $5 = $0;
 __ZN4rhea17linear_expressionC2ERKS0_($2,$5);
 $6 = $1;
 __THREW__ = 0;
 invoke_viii(226,($agg$result|0),($2|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $3 = $9;
  $4 = $10;
  __ZN4rhea17linear_expressionD2Ev($2);
  $11 = $3;
  $12 = $4;
  ___resumeException($11|0);
  // unreachable;
 } else {
  __ZN4rhea17linear_expressionD2Ev($2);
  STACKTOP = sp;return;
 }
}
function __Z20createEquationVarExpRN4rhea8variableERNS_17linear_expressionE($agg$result,$e1,$e2) {
 $agg$result = $agg$result|0;
 $e1 = $e1|0;
 $e2 = $e2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $e1;
 $1 = $e2;
 $2 = $0;
 $3 = $1;
 __ZN4rheaeqERKNS_8variableERKNS_17linear_expressionE($agg$result,$2,$3);
 STACKTOP = sp;return;
}
function __Z20createEquationVarVarRN4rhea8variableES1_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v1;
 $1 = $v2;
 $2 = $0;
 $3 = $1;
 __ZN4rheaeqERKNS_8variableES2_($agg$result,$2,$3);
 STACKTOP = sp;return;
}
function __Z22createEquationVarConstRN4rhea8variableEd($agg$result,$v1,$e2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $e2 = +$e2;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v1;
 $1 = $e2;
 $2 = $0;
 $3 = $1;
 __ZN4rheaeqERKNS_8variableEd($agg$result,$2,$3);
 STACKTOP = sp;return;
}
function __Z22createInequalityExpExpRN4rhea17linear_expressionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES1_($agg$result,$e1,$op,$e2) {
 $agg$result = $agg$result|0;
 $e1 = $e1|0;
 $op = $op|0;
 $e2 = $e2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $e1;
 $3 = $e2;
 $0 = $op;
 $1 = 2528;
 $4 = $0;
 $5 = $1;
 $6 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($4,$5)|0);
 $7 = ($6|0)==(0);
 $8 = $2;
 $9 = $3;
 if ($7) {
  __ZN4rhealeERKNS_17linear_expressionES2_($agg$result,$8,$9);
  STACKTOP = sp;return;
 } else {
  __ZN4rheageERKNS_17linear_expressionES2_($agg$result,$8,$9);
  STACKTOP = sp;return;
 }
}
function __Z22createInequalityVarExpRN4rhea8variableENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERNS_17linear_expressionE($agg$result,$e1,$op,$e2) {
 $agg$result = $agg$result|0;
 $e1 = $e1|0;
 $op = $op|0;
 $e2 = $e2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $e1;
 $3 = $e2;
 $0 = $op;
 $1 = 2528;
 $4 = $0;
 $5 = $1;
 $6 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($4,$5)|0);
 $7 = ($6|0)==(0);
 $8 = $2;
 $9 = $3;
 if ($7) {
  __ZN4rhealeERKNS_8variableERKNS_17linear_expressionE($agg$result,$8,$9);
  STACKTOP = sp;return;
 } else {
  __ZN4rheageERKNS_8variableERKNS_17linear_expressionE($agg$result,$8,$9);
  STACKTOP = sp;return;
 }
}
function __Z22createInequalityVarVarRN4rhea8variableENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES1_($agg$result,$e1,$op,$e2) {
 $agg$result = $agg$result|0;
 $e1 = $e1|0;
 $op = $op|0;
 $e2 = $e2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $e1;
 $3 = $e2;
 $0 = $op;
 $1 = 2528;
 $4 = $0;
 $5 = $1;
 $6 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($4,$5)|0);
 $7 = ($6|0)==(0);
 $8 = $2;
 $9 = $3;
 if ($7) {
  __ZN4rhealeERKNS_8variableES2_($agg$result,$8,$9);
  STACKTOP = sp;return;
 } else {
  __ZN4rheageERKNS_8variableES2_($agg$result,$8,$9);
  STACKTOP = sp;return;
 }
}
function __Z24createInequalityVarConstRN4rhea8variableENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEd($agg$result,$e1,$op,$e2) {
 $agg$result = $agg$result|0;
 $e1 = $e1|0;
 $op = $op|0;
 $e2 = +$e2;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $e1;
 $3 = $e2;
 $0 = $op;
 $1 = 2528;
 $4 = $0;
 $5 = $1;
 $6 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($4,$5)|0);
 $7 = ($6|0)==(0);
 $8 = $2;
 $9 = $3;
 if ($7) {
  __ZN4rhealeERKNS_8variableEd($agg$result,$8,$9);
  STACKTOP = sp;return;
 } else {
  __ZN4rheageERKNS_8variableEd($agg$result,$8,$9);
  STACKTOP = sp;return;
 }
}
function __Z18createConstraintEqRN4rhea15linear_equationE($agg$result,$eq1) {
 $agg$result = $agg$result|0;
 $eq1 = $eq1|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $eq1;
 $1 = $0;
 __ZN4rhea10constraintC2ERKNS_15linear_equationE($agg$result,$1);
 STACKTOP = sp;return;
}
function __Z20createConstraintIneqRN4rhea17linear_inequalityE($agg$result,$eq1) {
 $agg$result = $agg$result|0;
 $eq1 = $eq1|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $eq1;
 $1 = $0;
 __ZN4rhea10constraintC2ERKNS_17linear_inequalityE($agg$result,$1);
 STACKTOP = sp;return;
}
function __Z21constraintIsSatisfiedRN4rhea10constraintE($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = (__ZNK4rhea10constraint12is_satisfiedEv($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __Z19equationIsSatisfiedRN4rhea15linear_equationE($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 511]($1)|0);
 STACKTOP = sp;return ($5|0);
}
function __Z21inequalityIsSatisfiedRN4rhea17linear_inequalityE($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 511]($1)|0);
 STACKTOP = sp;return ($5|0);
}
function __Z19solverAddConstraintRN4rhea14simplex_solverERNS_10constraintE($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $c;
 $2 = $0;
 $3 = $1;
 (__ZN4rhea6solver14add_constraintERKNS_10constraintE($2,$3)|0);
 STACKTOP = sp;return;
}
function __Z13solverAddStayRN4rhea14simplex_solverERNS_8variableE($s,$v) {
 $s = $s|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $s;
 $1 = $v;
 $3 = $0;
 $4 = $1;
 __ZN4rhea8strength4weakEv($2);
 (__ZN4rhea6solver8add_stayERKNS_8variableERKNS_8strengthEd($3,$4,$2,1.0)|0);
 STACKTOP = sp;return;
}
function __Z16solverAddEditVarRN4rhea14simplex_solverERNS_8variableE($s,$v) {
 $s = $s|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $s;
 $1 = $v;
 $3 = $0;
 $4 = $1;
 __ZN4rhea8strength6strongEv($2);
 (__ZN4rhea14simplex_solver12add_edit_varERKNS_8variableERKNS_8strengthEd($3,$4,$2,1.0)|0);
 STACKTOP = sp;return;
}
function __Z13solverSuggestRN4rhea14simplex_solverERNS_8variableEd($s,$v1,$x) {
 $s = $s|0;
 $v1 = $v1|0;
 $x = +$x;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $v1;
 $2 = $x;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 (__ZN4rhea14simplex_solver7suggestERKNS_8variableEd($3,$4,$5)|0);
 STACKTOP = sp;return;
}
function __Z18solverSuggestValueRN4rhea14simplex_solverERNS_8variableEd($s,$v1,$x) {
 $s = $s|0;
 $v1 = $v1|0;
 $x = +$x;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $v1;
 $2 = $x;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 (__ZN4rhea14simplex_solver13suggest_valueERKNS_8variableEd($3,$4,$5)|0);
 STACKTOP = sp;return;
}
function __Z11solverSolveRN4rhea14simplex_solverE($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_ii[$4 & 511]($1)|0);
 STACKTOP = sp;return;
}
function __Z4testv($agg$result) {
 $agg$result = $agg$result|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c1 = 0, $c2 = 0, $e1 = 0, $eh$lpad$body$index2Z2D = 0;
 var $eh$lpad$body$indexZ2D = 0, $eq1 = 0, $eq2 = 0, $solver = 0, $v1 = 0, $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = sp + 620|0;
 $10 = sp + 556|0;
 $16 = sp + 464|0;
 $v1 = sp + 584|0;
 $v2 = sp + 592|0;
 $solver = sp;
 $e1 = sp + 296|0;
 $29 = sp + 508|0;
 $eq1 = sp + 320|0;
 $c1 = sp + 496|0;
 $eq2 = sp + 392|0;
 $30 = sp + 636|0;
 $c2 = sp + 648|0;
 $31 = sp + 664|0;
 $32 = sp + 472|0;
 __ZN4rhea8variableC2Ev($v1);
 __THREW__ = 0;
 invoke_vi(227,($v2|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $114 = ___cxa_find_matching_catch()|0;
  $115 = tempRet0;
  $27 = $114;
  $28 = $115;
  __ZN4rhea8variableD2Ev($v1);
  $134 = $27;
  $135 = $28;
  ___resumeException($134|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(228,($solver|0));
 $36 = __THREW__; __THREW__ = 0;
 $37 = $36&1;
 if ($37) {
  $116 = ___cxa_find_matching_catch()|0;
  $117 = tempRet0;
  $27 = $116;
  $28 = $117;
 } else {
  $25 = $29;
  $26 = 2512;
  $38 = $25;
  $24 = $38;
  $39 = $24;
  $23 = $39;
  $40 = $23;
  $22 = $40;
  $41 = $26;
  $42 = $26;
  __THREW__ = 0;
  $43 = (invoke_ii(229,($42|0))|0);
  $44 = __THREW__; __THREW__ = 0;
  $45 = $44&1;
  do {
   if ($45) {
    label = 24;
   } else {
    __THREW__ = 0;
    invoke_viii(213,($38|0),($41|0),($43|0));
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     label = 24;
    } else {
     __THREW__ = 0;
     invoke_viiid(230,($e1|0),($v1|0),($29|0),1.0);
     $48 = __THREW__; __THREW__ = 0;
     $49 = $48&1;
     if ($49) {
      $120 = ___cxa_find_matching_catch()|0;
      $121 = tempRet0;
      $27 = $120;
      $28 = $121;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($29);
      break;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($29);
     __THREW__ = 0;
     invoke_viii(231,($eq1|0),($e1|0),($v2|0));
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if ($51) {
      $122 = ___cxa_find_matching_catch()|0;
      $123 = tempRet0;
      $27 = $122;
      $28 = $123;
     } else {
      __THREW__ = 0;
      invoke_vii(232,($c1|0),($eq1|0));
      $52 = __THREW__; __THREW__ = 0;
      $53 = $52&1;
      if ($53) {
       $124 = ___cxa_find_matching_catch()|0;
       $125 = tempRet0;
       $27 = $124;
       $28 = $125;
      } else {
       $20 = $30;
       $21 = 2536;
       $54 = $20;
       $19 = $54;
       $55 = $19;
       $18 = $55;
       $56 = $18;
       $17 = $56;
       $57 = $21;
       $58 = $21;
       __THREW__ = 0;
       $59 = (invoke_ii(229,($58|0))|0);
       $60 = __THREW__; __THREW__ = 0;
       $61 = $60&1;
       do {
        if ($61) {
         label = 28;
        } else {
         __THREW__ = 0;
         invoke_viii(213,($54|0),($57|0),($59|0));
         $62 = __THREW__; __THREW__ = 0;
         $63 = $62&1;
         if ($63) {
          label = 28;
         } else {
          __THREW__ = 0;
          invoke_viiid(233,($eq2|0),($v1|0),($30|0),2.0);
          $64 = __THREW__; __THREW__ = 0;
          $65 = $64&1;
          if ($65) {
           $128 = ___cxa_find_matching_catch()|0;
           $129 = tempRet0;
           $27 = $128;
           $28 = $129;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($30);
           break;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($30);
          __THREW__ = 0;
          invoke_vii(234,($c2|0),($eq2|0));
          $66 = __THREW__; __THREW__ = 0;
          $67 = $66&1;
          if ($67) {
           $130 = ___cxa_find_matching_catch()|0;
           $131 = tempRet0;
           $27 = $130;
           $28 = $131;
          } else {
           __THREW__ = 0;
           invoke_vii(235,($solver|0),($c1|0));
           $68 = __THREW__; __THREW__ = 0;
           $69 = $68&1;
           do {
            if ($69) {
             label = 31;
            } else {
             __THREW__ = 0;
             invoke_vii(235,($solver|0),($c2|0));
             $70 = __THREW__; __THREW__ = 0;
             $71 = $70&1;
             if ($71) {
              label = 31;
             } else {
              __THREW__ = 0;
              invoke_vi(236,($solver|0));
              $72 = __THREW__; __THREW__ = 0;
              $73 = $72&1;
              if ($73) {
               label = 31;
               break;
              }
              __THREW__ = 0;
              $74 = (+invoke_di(237,($v1|0)));
              $75 = __THREW__; __THREW__ = 0;
              $76 = $75&1;
              if ($76) {
               label = 31;
               break;
              }
              HEAPF64[$32>>3] = $74;
              $77 = ((($32)) + 8|0);
              __THREW__ = 0;
              $78 = (+invoke_di(237,($v2|0)));
              $79 = __THREW__; __THREW__ = 0;
              $80 = $79&1;
              if ($80) {
               label = 31;
               break;
              }
              HEAPF64[$77>>3] = $78;
              HEAP32[$31>>2] = $32;
              $81 = ((($31)) + 4|0);
              HEAP32[$81>>2] = 2;
              ;HEAP8[$16>>0]=HEAP8[$31>>0]|0;HEAP8[$16+1>>0]=HEAP8[$31+1>>0]|0;HEAP8[$16+2>>0]=HEAP8[$31+2>>0]|0;HEAP8[$16+3>>0]=HEAP8[$31+3>>0]|0;HEAP8[$16+4>>0]=HEAP8[$31+4>>0]|0;HEAP8[$16+5>>0]=HEAP8[$31+5>>0]|0;HEAP8[$16+6>>0]=HEAP8[$31+6>>0]|0;HEAP8[$16+7>>0]=HEAP8[$31+7>>0]|0;
              $13 = $agg$result;
              $82 = $13;
              $12 = $82;
              $83 = $12;
              $11 = $83;
              HEAP32[$83>>2] = 0;
              $84 = ((($83)) + 4|0);
              HEAP32[$84>>2] = 0;
              $85 = ((($83)) + 8|0);
              $9 = $85;
              HEAP32[$10>>2] = 0;
              $86 = $9;
              $8 = $10;
              $87 = $8;
              $88 = HEAP32[$87>>2]|0;
              $6 = $86;
              HEAP32[$7>>2] = $88;
              $89 = $6;
              $5 = $89;
              $4 = $7;
              $90 = $4;
              $91 = HEAP32[$90>>2]|0;
              HEAP32[$89>>2] = $91;
              $3 = $16;
              $92 = $3;
              $93 = ((($92)) + 4|0);
              $94 = HEAP32[$93>>2]|0;
              $95 = ($94>>>0)>(0);
              if (!($95)) {
               $33 = 1;
               __ZN4rhea10constraintD2Ev($c2);
               __ZN4rhea17linear_inequalityD2Ev($eq2);
               __ZN4rhea10constraintD2Ev($c1);
               __ZN4rhea15linear_equationD2Ev($eq1);
               __ZN4rhea17linear_expressionD2Ev($e1);
               __ZN4rhea14simplex_solverD2Ev($solver);
               __ZN4rhea8variableD2Ev($v2);
               __ZN4rhea8variableD2Ev($v1);
               STACKTOP = sp;return;
              }
              $2 = $16;
              $96 = $2;
              $97 = ((($96)) + 4|0);
              $98 = HEAP32[$97>>2]|0;
              __THREW__ = 0;
              invoke_vii(238,($82|0),($98|0));
              $99 = __THREW__; __THREW__ = 0;
              $100 = $99&1;
              do {
               if (!($100)) {
                $0 = $16;
                $101 = $0;
                $102 = HEAP32[$101>>2]|0;
                $1 = $16;
                $103 = $1;
                $104 = HEAP32[$103>>2]|0;
                $105 = ((($103)) + 4|0);
                $106 = HEAP32[$105>>2]|0;
                $107 = (($104) + ($106<<3)|0);
                __THREW__ = 0;
                invoke_viii(239,($82|0),($102|0),($107|0));
                $108 = __THREW__; __THREW__ = 0;
                $109 = $108&1;
                if ($109) {
                 break;
                }
                $33 = 1;
                __ZN4rhea10constraintD2Ev($c2);
                __ZN4rhea17linear_inequalityD2Ev($eq2);
                __ZN4rhea10constraintD2Ev($c1);
                __ZN4rhea15linear_equationD2Ev($eq1);
                __ZN4rhea17linear_expressionD2Ev($e1);
                __ZN4rhea14simplex_solverD2Ev($solver);
                __ZN4rhea8variableD2Ev($v2);
                __ZN4rhea8variableD2Ev($v1);
                STACKTOP = sp;return;
               }
              } while(0);
              $110 = ___cxa_find_matching_catch()|0;
              $111 = tempRet0;
              $14 = $110;
              $15 = $111;
              __ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev($82);
              $112 = $14;
              $113 = $15;
              $eh$lpad$body$index2Z2D = $113;$eh$lpad$body$indexZ2D = $112;
             }
            }
           } while(0);
           if ((label|0) == 31) {
            $132 = ___cxa_find_matching_catch()|0;
            $133 = tempRet0;
            $eh$lpad$body$index2Z2D = $133;$eh$lpad$body$indexZ2D = $132;
           }
           $27 = $eh$lpad$body$indexZ2D;
           $28 = $eh$lpad$body$index2Z2D;
           __ZN4rhea10constraintD2Ev($c2);
          }
          __ZN4rhea17linear_inequalityD2Ev($eq2);
         }
        }
       } while(0);
       if ((label|0) == 28) {
        $126 = ___cxa_find_matching_catch()|0;
        $127 = tempRet0;
        $27 = $126;
        $28 = $127;
       }
       __ZN4rhea10constraintD2Ev($c1);
      }
      __ZN4rhea15linear_equationD2Ev($eq1);
     }
     __ZN4rhea17linear_expressionD2Ev($e1);
    }
   }
  } while(0);
  if ((label|0) == 24) {
   $118 = ___cxa_find_matching_catch()|0;
   $119 = tempRet0;
   $27 = $118;
   $28 = $119;
  }
  __ZN4rhea14simplex_solverD2Ev($solver);
 }
 __ZN4rhea8variableD2Ev($v2);
 __ZN4rhea8variableD2Ev($v1);
 $134 = $27;
 $135 = $28;
 ___resumeException($134|0);
 // unreachable;
}
function __ZN4rhea14simplex_solverD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 24;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 8|0);
 $4 = 56;
 HEAP32[$3>>2] = $4;
 $5 = ((($1)) + 268|0);
 __ZNSt3__15stackIjNS_5dequeIjNS_9allocatorIjEEEEED2Ev($5);
 $6 = ((($1)) + 252|0);
 __ZNSt3__14listIN4rhea14simplex_solver9edit_infoENS_9allocatorIS3_EEED2Ev($6);
 $7 = ((($1)) + 244|0);
 __ZN4rhea8variableD2Ev($7);
 $8 = ((($1)) + 224|0);
 __ZNSt3__113unordered_mapIN4rhea8variableENS1_10constraintENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEED2Ev($8);
 $9 = ((($1)) + 204|0);
 __ZNSt3__113unordered_mapIN4rhea10constraintENS1_8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEED2Ev($9);
 $10 = ((($1)) + 184|0);
 __ZNSt3__113unordered_mapIN4rhea10constraintENS_13unordered_setINS1_8variableENS_4hashIS4_EENS_8equal_toIS4_EENS_9allocatorIS4_EEEENS5_IS2_EENS7_IS2_EENS9_INS_4pairIKS2_SB_EEEEED2Ev($10);
 $11 = ((($1)) + 172|0);
 __ZNSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEED2Ev($11);
 $12 = ((($1)) + 160|0);
 __ZNSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEED2Ev($12);
 $13 = ((($1)) + 136|0);
 __ZNSt3__18functionIFvRKN4rhea8variableERNS1_14simplex_solverEEED2Ev($13);
 $14 = ((($1)) + 112|0);
 __ZNSt3__18functionIFvRN4rhea14simplex_solverEEED2Ev($14);
 $15 = ((($1)) + 8|0);
 __ZN4rhea7tableauD2Ev($15);
 __ZN4rhea6solverD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN38EmscriptenBindingInitializer_my_moduleC2Ev($this) {
 $this = $this|0;
 var $$index1 = 0, $$index13 = 0, $$index15 = 0, $$index20 = 0, $$index22 = 0, $$index27 = 0, $$index29 = 0, $$index34 = 0, $$index6 = 0, $$index8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_getActualType$i = 0, $_getActualType$i11 = 0, $_getActualType$i18 = 0, $_getActualType$i24 = 0, $_getActualType$i30 = 0, $_getActualType$i6 = 0, $args$i = 0, $args$i$i = 0;
 var $args$i$i1 = 0, $args$i$i34 = 0, $args$i10 = 0, $args$i16 = 0, $args$i22 = 0, $args$i28 = 0, $args$i36 = 0, $args$i38 = 0, $args$i4 = 0, $args$i40 = 0, $args$i42 = 0, $args$i44 = 0, $args$i46 = 0, $args$i49 = 0, $args$i52 = 0, $destructor$i = 0, $destructor$i14 = 0, $destructor$i21 = 0, $destructor$i27 = 0, $destructor$i33 = 0;
 var $destructor$i9 = 0, $downcast$i = 0, $downcast$i13 = 0, $downcast$i20 = 0, $downcast$i26 = 0, $downcast$i32 = 0, $downcast$i8 = 0, $invoke$i = 0, $invoke$i$i = 0, $invoke$i$i2 = 0, $invoke$i$i35 = 0, $invoke$i23 = 0, $invoke$i29 = 0, $invoke$i37 = 0, $invoke$i39 = 0, $invoke$i41 = 0, $invoke$i43 = 0, $invoke$i45 = 0, $invoke$i47 = 0, $invoker$i = 0;
 var $invoker$i15 = 0, $invoker$i3 = 0, $invoker$i48 = 0, $invoker$i51 = 0, $memberFunction$i$field = 0, $memberFunction$i$field3 = 0, $memberFunction$i$index2 = 0, $memberFunction$i17$field = 0, $memberFunction$i17$field17 = 0, $memberFunction$i17$index16 = 0, $memberFunction$i5$field = 0, $memberFunction$i5$field10 = 0, $memberFunction$i5$index9 = 0, $memberFunction$i50$field = 0, $memberFunction$i50$field24 = 0, $memberFunction$i50$index23 = 0, $memberFunction$i53$field = 0, $memberFunction$i53$field31 = 0, $memberFunction$i53$index30 = 0, $upcast$i = 0;
 var $upcast$i12 = 0, $upcast$i19 = 0, $upcast$i25 = 0, $upcast$i31 = 0, $upcast$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 264|0;
 $args$i52 = sp + 559|0;
 $3 = sp + 24|0;
 $6 = sp + 96|0;
 $args$i49 = sp + 549|0;
 $7 = sp + 16|0;
 $10 = sp + 80|0;
 $args$i46 = sp + 555|0;
 $13 = sp + 104|0;
 $args$i44 = sp + 545|0;
 $16 = sp + 132|0;
 $args$i42 = sp + 550|0;
 $19 = sp + 156|0;
 $args$i40 = sp + 562|0;
 $22 = sp + 164|0;
 $args$i38 = sp + 560|0;
 $25 = sp + 196|0;
 $args$i36 = sp + 558|0;
 $args$i$i34 = sp + 556|0;
 $33 = sp + 520|0;
 $args$i28 = sp + 554|0;
 $38 = sp + 320|0;
 $args$i22 = sp + 552|0;
 $43 = sp + 368|0;
 $args$i16 = sp + 544|0;
 $44 = sp + 32|0;
 $49 = sp + 420|0;
 $args$i10 = sp + 546|0;
 $54 = sp + 464|0;
 $args$i4 = sp + 561|0;
 $55 = sp;
 $58 = sp + 488|0;
 $args$i = sp + 542|0;
 $59 = sp + 8|0;
 $args$i$i1 = sp + 540|0;
 $args$i$i = sp + 551|0;
 $69 = sp + 563|0;
 $70 = sp + 541|0;
 $71 = sp + 136|0;
 $72 = sp + 112|0;
 $73 = sp + 553|0;
 $74 = sp + 547|0;
 $75 = sp + 304|0;
 $76 = sp + 543|0;
 $77 = sp + 548|0;
 $78 = sp + 557|0;
 $79 = sp + 56|0;
 $80 = sp + 40|0;
 $68 = $this;
 __ZN10emscripten15register_vectorIdEENS_6class_INSt3__16vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc($69,2544);
 __ZN10emscripten8functionINSt3__16vectorIdNS1_9allocatorIdEEEEJEJEEEvPKcPFT_DpT0_EDpT1_(2560,240);
 __ZN10emscripten8functionIN4rhea17linear_expressionEJRNS1_8variableENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEES4_EJEEEvPKcPFT_DpT0_EDpT1_(2568,241);
 __ZN10emscripten8functionIN4rhea17linear_expressionEJRNS1_8variableENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEdEJEEEvPKcPFT_DpT0_EDpT1_(2592,230);
 __ZN10emscripten8functionIN4rhea17linear_expressionEJdNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERNS1_8variableEEJEEEvPKcPFT_DpT0_EDpT1_(2624,242);
 __ZN10emscripten8functionIN4rhea15linear_equationEJRNS1_17linear_expressionERNS1_8variableEEJEEEvPKcPFT_DpT0_EDpT1_(2656,231);
 __ZN10emscripten8functionIN4rhea15linear_equationEJRNS1_17linear_expressionES4_EJEEEvPKcPFT_DpT0_EDpT1_(2680,243);
 __ZN10emscripten8functionIN4rhea15linear_equationEJRNS1_8variableERNS1_17linear_expressionEEJEEEvPKcPFT_DpT0_EDpT1_(2704,244);
 __ZN10emscripten8functionIN4rhea15linear_equationEJRNS1_8variableES4_EJEEEvPKcPFT_DpT0_EDpT1_(2728,245);
 __ZN10emscripten8functionIN4rhea15linear_equationEJRNS1_8variableEdEJEEEvPKcPFT_DpT0_EDpT1_(2752,246);
 __ZN10emscripten8functionIN4rhea17linear_inequalityEJRNS1_17linear_expressionENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEES4_EJEEEvPKcPFT_DpT0_EDpT1_(2776,247);
 __ZN10emscripten8functionIN4rhea17linear_inequalityEJRNS1_8variableENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERNS1_17linear_expressionEEJEEEvPKcPFT_DpT0_EDpT1_(2800,248);
 __ZN10emscripten8functionIN4rhea17linear_inequalityEJRNS1_8variableENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEES4_EJEEEvPKcPFT_DpT0_EDpT1_(2824,249);
 __ZN10emscripten8functionIN4rhea17linear_inequalityEJRNS1_8variableENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEdEJEEEvPKcPFT_DpT0_EDpT1_(2848,233);
 __ZN10emscripten8functionIN4rhea10constraintEJRNS1_15linear_equationEEJEEEvPKcPFT_DpT0_EDpT1_(2880,232);
 __ZN10emscripten8functionIN4rhea10constraintEJRNS1_17linear_inequalityEEJEEEvPKcPFT_DpT0_EDpT1_(2904,234);
 $66 = $70;
 $67 = 2928;
 __ZN10emscripten8internal11NoBaseClass6verifyIN4rhea8variableEEEvv();
 $_getActualType$i = 250;
 $81 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterIN4rhea8variableEEEPFvvEv()|0);
 $upcast$i = $81;
 $82 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterIN4rhea8variableEEEPFvvEv()|0);
 $downcast$i = $82;
 $destructor$i = 251;
 $83 = (__ZN10emscripten8internal6TypeIDIN4rhea8variableEE3getEv()|0);
 $84 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4rhea8variableEEEE3getEv()|0);
 $85 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4rhea8variableEEEE3getEv()|0);
 $86 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $87 = $_getActualType$i;
 $88 = (__ZN10emscripten8internal12getSignatureIPKvJPN4rhea8variableEEEEPKcPFT_DpT0_E($87)|0);
 $89 = $_getActualType$i;
 $90 = $upcast$i;
 $91 = (__ZN10emscripten8internal12getSignatureIvJEEEPKcPFT_DpT0_E($90)|0);
 $92 = $upcast$i;
 $93 = $downcast$i;
 $94 = (__ZN10emscripten8internal12getSignatureIvJEEEPKcPFT_DpT0_E($93)|0);
 $95 = $downcast$i;
 $96 = $67;
 $97 = $destructor$i;
 $98 = (__ZN10emscripten8internal12getSignatureIvJPN4rhea8variableEEEEPKcPFT_DpT0_E($97)|0);
 $99 = $destructor$i;
 __embind_register_class(($83|0),($84|0),($85|0),($86|0),($88|0),($89|0),($91|0),($92|0),($94|0),($95|0),($96|0),($98|0),($99|0));
 $65 = $70;
 $100 = $65;
 $63 = $100;
 $64 = 252;
 $101 = $63;
 $invoke$i$i = 253;
 $102 = (__ZN10emscripten8internal6TypeIDIN4rhea8variableEE3getEv()|0);
 $103 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4rhea8variableEEE8getCountEv($args$i$i)|0);
 $104 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4rhea8variableEEE8getTypesEv($args$i$i)|0);
 $105 = $invoke$i$i;
 $106 = (__ZN10emscripten8internal12getSignatureIPN4rhea8variableEJPFS4_vEEEEPKcPFT_DpT0_E($105)|0);
 $107 = $invoke$i$i;
 $108 = $64;
 __embind_register_class_constructor(($102|0),($103|0),($104|0),($106|0),($107|0),($108|0));
 $62 = $101;
 $109 = $62;
 $60 = $109;
 $61 = 254;
 $110 = $60;
 $invoke$i$i2 = 255;
 $111 = (__ZN10emscripten8internal6TypeIDIN4rhea8variableEE3getEv()|0);
 $112 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4rhea8variableEOdEE8getCountEv($args$i$i1)|0);
 $113 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4rhea8variableEOdEE8getTypesEv($args$i$i1)|0);
 $114 = $invoke$i$i2;
 $115 = (__ZN10emscripten8internal12getSignatureIPN4rhea8variableEJPFS4_OdEdEEEPKcPFT_DpT0_E($114)|0);
 $116 = $invoke$i$i2;
 $117 = $61;
 __embind_register_class_constructor(($111|0),($112|0),($113|0),($115|0),($116|0),($117|0));
 HEAP32[$71>>2] = (237);
 $$index1 = ((($71)) + 4|0);
 HEAP32[$$index1>>2] = 0;
 ;HEAP8[$59>>0]=HEAP8[$71>>0]|0;HEAP8[$59+1>>0]=HEAP8[$71+1>>0]|0;HEAP8[$59+2>>0]=HEAP8[$71+2>>0]|0;HEAP8[$59+3>>0]=HEAP8[$71+3>>0]|0;HEAP8[$59+4>>0]=HEAP8[$71+4>>0]|0;HEAP8[$59+5>>0]=HEAP8[$71+5>>0]|0;HEAP8[$59+6>>0]=HEAP8[$71+6>>0]|0;HEAP8[$59+7>>0]=HEAP8[$71+7>>0]|0;
 $memberFunction$i$field = HEAP32[$59>>2]|0;
 $memberFunction$i$index2 = ((($59)) + 4|0);
 $memberFunction$i$field3 = HEAP32[$memberFunction$i$index2>>2]|0;
 $56 = $110;
 $57 = 2944;
 HEAP32[$58>>2] = $memberFunction$i$field;
 $$index6 = ((($58)) + 4|0);
 HEAP32[$$index6>>2] = $memberFunction$i$field3;
 $118 = $56;
 $invoker$i = 256;
 $119 = (__ZN10emscripten8internal6TypeIDIN4rhea8variableEE3getEv()|0);
 $120 = $57;
 $121 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerIKN4rhea8variableEEEEE8getCountEv($args$i)|0);
 $122 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerIKN4rhea8variableEEEEE8getTypesEv($args$i)|0);
 $123 = $invoker$i;
 $124 = (__ZN10emscripten8internal12getSignatureIdJRKMN4rhea8variableEKFdvEPKS3_EEEPKcPFT_DpT0_E($123)|0);
 $125 = $invoker$i;
 $126 = (__ZN10emscripten8internal10getContextIMN4rhea8variableEKFdvEEEPT_RKS6_($58)|0);
 __embind_register_class_function(($119|0),($120|0),($121|0),($122|0),($124|0),($125|0),($126|0),0);
 HEAP32[$72>>2] = (257);
 $$index8 = ((($72)) + 4|0);
 HEAP32[$$index8>>2] = 0;
 ;HEAP8[$55>>0]=HEAP8[$72>>0]|0;HEAP8[$55+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$55+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$55+3>>0]=HEAP8[$72+3>>0]|0;HEAP8[$55+4>>0]=HEAP8[$72+4>>0]|0;HEAP8[$55+5>>0]=HEAP8[$72+5>>0]|0;HEAP8[$55+6>>0]=HEAP8[$72+6>>0]|0;HEAP8[$55+7>>0]=HEAP8[$72+7>>0]|0;
 $memberFunction$i5$field = HEAP32[$55>>2]|0;
 $memberFunction$i5$index9 = ((($55)) + 4|0);
 $memberFunction$i5$field10 = HEAP32[$memberFunction$i5$index9>>2]|0;
 $52 = $118;
 $53 = 2952;
 HEAP32[$54>>2] = $memberFunction$i5$field;
 $$index13 = ((($54)) + 4|0);
 HEAP32[$$index13>>2] = $memberFunction$i5$field10;
 $invoker$i3 = 258;
 $127 = (__ZN10emscripten8internal6TypeIDIN4rhea8variableEE3getEv()|0);
 $128 = $53;
 $129 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIN4rhea8variableEEEdEE8getCountEv($args$i4)|0);
 $130 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIN4rhea8variableEEEdEE8getTypesEv($args$i4)|0);
 $131 = $invoker$i3;
 $132 = (__ZN10emscripten8internal12getSignatureIvJRKMN4rhea8variableEFvdEPS3_dEEEPKcPFT_DpT0_E($131)|0);
 $133 = $invoker$i3;
 $134 = (__ZN10emscripten8internal10getContextIMN4rhea8variableEFvdEEEPT_RKS6_($54)|0);
 __embind_register_class_function(($127|0),($128|0),($129|0),($130|0),($132|0),($133|0),($134|0),0);
 $50 = $73;
 $51 = 2968;
 __ZN10emscripten8internal11NoBaseClass6verifyIN4rhea10constraintEEEvv();
 $_getActualType$i6 = 259;
 $135 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterIN4rhea10constraintEEEPFvvEv()|0);
 $upcast$i7 = $135;
 $136 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterIN4rhea10constraintEEEPFvvEv()|0);
 $downcast$i8 = $136;
 $destructor$i9 = 260;
 $137 = (__ZN10emscripten8internal6TypeIDIN4rhea10constraintEE3getEv()|0);
 $138 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4rhea10constraintEEEE3getEv()|0);
 $139 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4rhea10constraintEEEE3getEv()|0);
 $140 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $141 = $_getActualType$i6;
 $142 = (__ZN10emscripten8internal12getSignatureIPKvJPN4rhea10constraintEEEEPKcPFT_DpT0_E($141)|0);
 $143 = $_getActualType$i6;
 $144 = $upcast$i7;
 $145 = (__ZN10emscripten8internal12getSignatureIvJEEEPKcPFT_DpT0_E($144)|0);
 $146 = $upcast$i7;
 $147 = $downcast$i8;
 $148 = (__ZN10emscripten8internal12getSignatureIvJEEEPKcPFT_DpT0_E($147)|0);
 $149 = $downcast$i8;
 $150 = $51;
 $151 = $destructor$i9;
 $152 = (__ZN10emscripten8internal12getSignatureIvJPN4rhea10constraintEEEEPKcPFT_DpT0_E($151)|0);
 $153 = $destructor$i9;
 __embind_register_class(($137|0),($138|0),($139|0),($140|0),($142|0),($143|0),($145|0),($146|0),($148|0),($149|0),($150|0),($152|0),($153|0));
 $47 = $73;
 $48 = 2984;
 HEAP32[$49>>2] = 261;
 $invoke$i = 262;
 $154 = (__ZN10emscripten8internal6TypeIDIN4rhea10constraintEE3getEv()|0);
 $155 = $48;
 $156 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRN4rhea10constraintEEE8getCountEv($args$i10)|0);
 $157 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRN4rhea10constraintEEE8getTypesEv($args$i10)|0);
 $158 = $invoke$i;
 $159 = (__ZN10emscripten8internal12getSignatureIbJPPFbRN4rhea10constraintEEPS3_EEEPKcPFT_DpT0_E($158)|0);
 $160 = $invoke$i;
 $161 = (__ZN10emscripten8internal10getContextIPFbRN4rhea10constraintEEEEPT_RKS7_($49)|0);
 __embind_register_class_function(($154|0),($155|0),($156|0),($157|0),($159|0),($160|0),($161|0),0);
 $45 = $74;
 $46 = 3000;
 __ZN10emscripten8internal11NoBaseClass6verifyIN4rhea17linear_expressionEEEvv();
 $_getActualType$i11 = 263;
 $162 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterIN4rhea17linear_expressionEEEPFvvEv()|0);
 $upcast$i12 = $162;
 $163 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterIN4rhea17linear_expressionEEEPFvvEv()|0);
 $downcast$i13 = $163;
 $destructor$i14 = 264;
 $164 = (__ZN10emscripten8internal6TypeIDIN4rhea17linear_expressionEE3getEv()|0);
 $165 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4rhea17linear_expressionEEEE3getEv()|0);
 $166 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4rhea17linear_expressionEEEE3getEv()|0);
 $167 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $168 = $_getActualType$i11;
 $169 = (__ZN10emscripten8internal12getSignatureIPKvJPN4rhea17linear_expressionEEEEPKcPFT_DpT0_E($168)|0);
 $170 = $_getActualType$i11;
 $171 = $upcast$i12;
 $172 = (__ZN10emscripten8internal12getSignatureIvJEEEPKcPFT_DpT0_E($171)|0);
 $173 = $upcast$i12;
 $174 = $downcast$i13;
 $175 = (__ZN10emscripten8internal12getSignatureIvJEEEPKcPFT_DpT0_E($174)|0);
 $176 = $downcast$i13;
 $177 = $46;
 $178 = $destructor$i14;
 $179 = (__ZN10emscripten8internal12getSignatureIvJPN4rhea17linear_expressionEEEEPKcPFT_DpT0_E($178)|0);
 $180 = $destructor$i14;
 __embind_register_class(($164|0),($165|0),($166|0),($167|0),($169|0),($170|0),($172|0),($173|0),($175|0),($176|0),($177|0),($179|0),($180|0));
 HEAP32[$75>>2] = (265);
 $$index15 = ((($75)) + 4|0);
 HEAP32[$$index15>>2] = 0;
 ;HEAP8[$44>>0]=HEAP8[$75>>0]|0;HEAP8[$44+1>>0]=HEAP8[$75+1>>0]|0;HEAP8[$44+2>>0]=HEAP8[$75+2>>0]|0;HEAP8[$44+3>>0]=HEAP8[$75+3>>0]|0;HEAP8[$44+4>>0]=HEAP8[$75+4>>0]|0;HEAP8[$44+5>>0]=HEAP8[$75+5>>0]|0;HEAP8[$44+6>>0]=HEAP8[$75+6>>0]|0;HEAP8[$44+7>>0]=HEAP8[$75+7>>0]|0;
 $memberFunction$i17$field = HEAP32[$44>>2]|0;
 $memberFunction$i17$index16 = ((($44)) + 4|0);
 $memberFunction$i17$field17 = HEAP32[$memberFunction$i17$index16>>2]|0;
 $41 = $74;
 $42 = 3024;
 HEAP32[$43>>2] = $memberFunction$i17$field;
 $$index20 = ((($43)) + 4|0);
 HEAP32[$$index20>>2] = $memberFunction$i17$field17;
 $invoker$i15 = 266;
 $181 = (__ZN10emscripten8internal6TypeIDIN4rhea17linear_expressionEE3getEv()|0);
 $182 = $42;
 $183 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerIKN4rhea17linear_expressionEEEEE8getCountEv($args$i16)|0);
 $184 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerIKN4rhea17linear_expressionEEEEE8getTypesEv($args$i16)|0);
 $185 = $invoker$i15;
 $186 = (__ZN10emscripten8internal12getSignatureIdJRKMN4rhea17linear_expressionEKFdvEPKS3_EEEPKcPFT_DpT0_E($185)|0);
 $187 = $invoker$i15;
 $188 = (__ZN10emscripten8internal10getContextIMN4rhea17linear_expressionEKFdvEEEPT_RKS6_($43)|0);
 __embind_register_class_function(($181|0),($182|0),($183|0),($184|0),($186|0),($187|0),($188|0),0);
 $39 = $76;
 $40 = 3040;
 __ZN10emscripten8internal11NoBaseClass6verifyIN4rhea15linear_equationEEEvv();
 $_getActualType$i18 = 267;
 $189 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterIN4rhea15linear_equationEEEPFvvEv()|0);
 $upcast$i19 = $189;
 $190 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterIN4rhea15linear_equationEEEPFvvEv()|0);
 $downcast$i20 = $190;
 $destructor$i21 = 268;
 $191 = (__ZN10emscripten8internal6TypeIDIN4rhea15linear_equationEE3getEv()|0);
 $192 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4rhea15linear_equationEEEE3getEv()|0);
 $193 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4rhea15linear_equationEEEE3getEv()|0);
 $194 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $195 = $_getActualType$i18;
 $196 = (__ZN10emscripten8internal12getSignatureIPKvJPN4rhea15linear_equationEEEEPKcPFT_DpT0_E($195)|0);
 $197 = $_getActualType$i18;
 $198 = $upcast$i19;
 $199 = (__ZN10emscripten8internal12getSignatureIvJEEEPKcPFT_DpT0_E($198)|0);
 $200 = $upcast$i19;
 $201 = $downcast$i20;
 $202 = (__ZN10emscripten8internal12getSignatureIvJEEEPKcPFT_DpT0_E($201)|0);
 $203 = $downcast$i20;
 $204 = $40;
 $205 = $destructor$i21;
 $206 = (__ZN10emscripten8internal12getSignatureIvJPN4rhea15linear_equationEEEEPKcPFT_DpT0_E($205)|0);
 $207 = $destructor$i21;
 __embind_register_class(($191|0),($192|0),($193|0),($194|0),($196|0),($197|0),($199|0),($200|0),($202|0),($203|0),($204|0),($206|0),($207|0));
 $36 = $76;
 $37 = 2984;
 HEAP32[$38>>2] = 269;
 $invoke$i23 = 270;
 $208 = (__ZN10emscripten8internal6TypeIDIN4rhea15linear_equationEE3getEv()|0);
 $209 = $37;
 $210 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRN4rhea15linear_equationEEE8getCountEv($args$i22)|0);
 $211 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRN4rhea15linear_equationEEE8getTypesEv($args$i22)|0);
 $212 = $invoke$i23;
 $213 = (__ZN10emscripten8internal12getSignatureIbJPPFbRN4rhea15linear_equationEEPS3_EEEPKcPFT_DpT0_E($212)|0);
 $214 = $invoke$i23;
 $215 = (__ZN10emscripten8internal10getContextIPFbRN4rhea15linear_equationEEEEPT_RKS7_($38)|0);
 __embind_register_class_function(($208|0),($209|0),($210|0),($211|0),($213|0),($214|0),($215|0),0);
 $34 = $77;
 $35 = 3056;
 __ZN10emscripten8internal11NoBaseClass6verifyIN4rhea17linear_inequalityEEEvv();
 $_getActualType$i24 = 271;
 $216 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterIN4rhea17linear_inequalityEEEPFvvEv()|0);
 $upcast$i25 = $216;
 $217 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterIN4rhea17linear_inequalityEEEPFvvEv()|0);
 $downcast$i26 = $217;
 $destructor$i27 = 272;
 $218 = (__ZN10emscripten8internal6TypeIDIN4rhea17linear_inequalityEE3getEv()|0);
 $219 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4rhea17linear_inequalityEEEE3getEv()|0);
 $220 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4rhea17linear_inequalityEEEE3getEv()|0);
 $221 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $222 = $_getActualType$i24;
 $223 = (__ZN10emscripten8internal12getSignatureIPKvJPN4rhea17linear_inequalityEEEEPKcPFT_DpT0_E($222)|0);
 $224 = $_getActualType$i24;
 $225 = $upcast$i25;
 $226 = (__ZN10emscripten8internal12getSignatureIvJEEEPKcPFT_DpT0_E($225)|0);
 $227 = $upcast$i25;
 $228 = $downcast$i26;
 $229 = (__ZN10emscripten8internal12getSignatureIvJEEEPKcPFT_DpT0_E($228)|0);
 $230 = $downcast$i26;
 $231 = $35;
 $232 = $destructor$i27;
 $233 = (__ZN10emscripten8internal12getSignatureIvJPN4rhea17linear_inequalityEEEEPKcPFT_DpT0_E($232)|0);
 $234 = $destructor$i27;
 __embind_register_class(($218|0),($219|0),($220|0),($221|0),($223|0),($224|0),($226|0),($227|0),($229|0),($230|0),($231|0),($233|0),($234|0));
 $31 = $77;
 $32 = 2984;
 HEAP32[$33>>2] = 273;
 $invoke$i29 = 274;
 $235 = (__ZN10emscripten8internal6TypeIDIN4rhea17linear_inequalityEE3getEv()|0);
 $236 = $32;
 $237 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRN4rhea17linear_inequalityEEE8getCountEv($args$i28)|0);
 $238 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRN4rhea17linear_inequalityEEE8getTypesEv($args$i28)|0);
 $239 = $invoke$i29;
 $240 = (__ZN10emscripten8internal12getSignatureIbJPPFbRN4rhea17linear_inequalityEEPS3_EEEPKcPFT_DpT0_E($239)|0);
 $241 = $invoke$i29;
 $242 = (__ZN10emscripten8internal10getContextIPFbRN4rhea17linear_inequalityEEEEPT_RKS7_($33)|0);
 __embind_register_class_function(($235|0),($236|0),($237|0),($238|0),($240|0),($241|0),($242|0),0);
 $29 = $78;
 $30 = 3080;
 __ZN10emscripten8internal11NoBaseClass6verifyIN4rhea14simplex_solverEEEvv();
 $_getActualType$i30 = 275;
 $243 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterIN4rhea14simplex_solverEEEPFvvEv()|0);
 $upcast$i31 = $243;
 $244 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterIN4rhea14simplex_solverEEEPFvvEv()|0);
 $downcast$i32 = $244;
 $destructor$i33 = 276;
 $245 = (__ZN10emscripten8internal6TypeIDIN4rhea14simplex_solverEE3getEv()|0);
 $246 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4rhea14simplex_solverEEEE3getEv()|0);
 $247 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4rhea14simplex_solverEEEE3getEv()|0);
 $248 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $249 = $_getActualType$i30;
 $250 = (__ZN10emscripten8internal12getSignatureIPKvJPN4rhea14simplex_solverEEEEPKcPFT_DpT0_E($249)|0);
 $251 = $_getActualType$i30;
 $252 = $upcast$i31;
 $253 = (__ZN10emscripten8internal12getSignatureIvJEEEPKcPFT_DpT0_E($252)|0);
 $254 = $upcast$i31;
 $255 = $downcast$i32;
 $256 = (__ZN10emscripten8internal12getSignatureIvJEEEPKcPFT_DpT0_E($255)|0);
 $257 = $downcast$i32;
 $258 = $30;
 $259 = $destructor$i33;
 $260 = (__ZN10emscripten8internal12getSignatureIvJPN4rhea14simplex_solverEEEEPKcPFT_DpT0_E($259)|0);
 $261 = $destructor$i33;
 __embind_register_class(($245|0),($246|0),($247|0),($248|0),($250|0),($251|0),($253|0),($254|0),($256|0),($257|0),($258|0),($260|0),($261|0));
 $28 = $78;
 $262 = $28;
 $26 = $262;
 $27 = 277;
 $263 = $26;
 $invoke$i$i35 = 278;
 $264 = (__ZN10emscripten8internal6TypeIDIN4rhea14simplex_solverEE3getEv()|0);
 $265 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4rhea14simplex_solverEEE8getCountEv($args$i$i34)|0);
 $266 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4rhea14simplex_solverEEE8getTypesEv($args$i$i34)|0);
 $267 = $invoke$i$i35;
 $268 = (__ZN10emscripten8internal12getSignatureIPN4rhea14simplex_solverEJPFS4_vEEEEPKcPFT_DpT0_E($267)|0);
 $269 = $invoke$i$i35;
 $270 = $27;
 __embind_register_class_constructor(($264|0),($265|0),($266|0),($268|0),($269|0),($270|0));
 $23 = $263;
 $24 = 3096;
 HEAP32[$25>>2] = 235;
 $271 = $23;
 $invoke$i37 = 279;
 $272 = (__ZN10emscripten8internal6TypeIDIN4rhea14simplex_solverEE3getEv()|0);
 $273 = $24;
 $274 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRN4rhea14simplex_solverERNS4_10constraintEEE8getCountEv($args$i36)|0);
 $275 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRN4rhea14simplex_solverERNS4_10constraintEEE8getTypesEv($args$i36)|0);
 $276 = $invoke$i37;
 $277 = (__ZN10emscripten8internal12getSignatureIvJPPFvRN4rhea14simplex_solverERNS2_10constraintEEPS3_PS5_EEEPKcPFT_DpT0_E($276)|0);
 $278 = $invoke$i37;
 $279 = (__ZN10emscripten8internal10getContextIPFvRN4rhea14simplex_solverERNS2_10constraintEEEEPT_RKS9_($25)|0);
 __embind_register_class_function(($272|0),($273|0),($274|0),($275|0),($277|0),($278|0),($279|0),0);
 $20 = $271;
 $21 = 3112;
 HEAP32[$22>>2] = 280;
 $280 = $20;
 $invoke$i39 = 281;
 $281 = (__ZN10emscripten8internal6TypeIDIN4rhea14simplex_solverEE3getEv()|0);
 $282 = $21;
 $283 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRN4rhea14simplex_solverERNS4_8variableEEE8getCountEv($args$i38)|0);
 $284 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRN4rhea14simplex_solverERNS4_8variableEEE8getTypesEv($args$i38)|0);
 $285 = $invoke$i39;
 $286 = (__ZN10emscripten8internal12getSignatureIvJPPFvRN4rhea14simplex_solverERNS2_8variableEEPS3_PS5_EEEPKcPFT_DpT0_E($285)|0);
 $287 = $invoke$i39;
 $288 = (__ZN10emscripten8internal10getContextIPFvRN4rhea14simplex_solverERNS2_8variableEEEEPT_RKS9_($22)|0);
 __embind_register_class_function(($281|0),($282|0),($283|0),($284|0),($286|0),($287|0),($288|0),0);
 $17 = $280;
 $18 = 3128;
 HEAP32[$19>>2] = 282;
 $289 = $17;
 $invoke$i41 = 281;
 $290 = (__ZN10emscripten8internal6TypeIDIN4rhea14simplex_solverEE3getEv()|0);
 $291 = $18;
 $292 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRN4rhea14simplex_solverERNS4_8variableEEE8getCountEv($args$i40)|0);
 $293 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRN4rhea14simplex_solverERNS4_8variableEEE8getTypesEv($args$i40)|0);
 $294 = $invoke$i41;
 $295 = (__ZN10emscripten8internal12getSignatureIvJPPFvRN4rhea14simplex_solverERNS2_8variableEEPS3_PS5_EEEPKcPFT_DpT0_E($294)|0);
 $296 = $invoke$i41;
 $297 = (__ZN10emscripten8internal10getContextIPFvRN4rhea14simplex_solverERNS2_8variableEEEEPT_RKS9_($19)|0);
 __embind_register_class_function(($290|0),($291|0),($292|0),($293|0),($295|0),($296|0),($297|0),0);
 $14 = $289;
 $15 = 3144;
 HEAP32[$16>>2] = 283;
 $298 = $14;
 $invoke$i43 = 284;
 $299 = (__ZN10emscripten8internal6TypeIDIN4rhea14simplex_solverEE3getEv()|0);
 $300 = $15;
 $301 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRN4rhea14simplex_solverERNS4_8variableEdEE8getCountEv($args$i42)|0);
 $302 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRN4rhea14simplex_solverERNS4_8variableEdEE8getTypesEv($args$i42)|0);
 $303 = $invoke$i43;
 $304 = (__ZN10emscripten8internal12getSignatureIvJPPFvRN4rhea14simplex_solverERNS2_8variableEdEPS3_PS5_dEEEPKcPFT_DpT0_E($303)|0);
 $305 = $invoke$i43;
 $306 = (__ZN10emscripten8internal10getContextIPFvRN4rhea14simplex_solverERNS2_8variableEdEEEPT_RKS9_($16)|0);
 __embind_register_class_function(($299|0),($300|0),($301|0),($302|0),($304|0),($305|0),($306|0),0);
 $11 = $298;
 $12 = 3152;
 HEAP32[$13>>2] = 285;
 $307 = $11;
 $invoke$i45 = 284;
 $308 = (__ZN10emscripten8internal6TypeIDIN4rhea14simplex_solverEE3getEv()|0);
 $309 = $12;
 $310 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRN4rhea14simplex_solverERNS4_8variableEdEE8getCountEv($args$i44)|0);
 $311 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRN4rhea14simplex_solverERNS4_8variableEdEE8getTypesEv($args$i44)|0);
 $312 = $invoke$i45;
 $313 = (__ZN10emscripten8internal12getSignatureIvJPPFvRN4rhea14simplex_solverERNS2_8variableEdEPS3_PS5_dEEEPKcPFT_DpT0_E($312)|0);
 $314 = $invoke$i45;
 $315 = (__ZN10emscripten8internal10getContextIPFvRN4rhea14simplex_solverERNS2_8variableEdEEEPT_RKS9_($13)|0);
 __embind_register_class_function(($308|0),($309|0),($310|0),($311|0),($313|0),($314|0),($315|0),0);
 $8 = $307;
 $9 = 3168;
 HEAP32[$10>>2] = 236;
 $316 = $8;
 $invoke$i47 = 286;
 $317 = (__ZN10emscripten8internal6TypeIDIN4rhea14simplex_solverEE3getEv()|0);
 $318 = $9;
 $319 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRN4rhea14simplex_solverEEE8getCountEv($args$i46)|0);
 $320 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRN4rhea14simplex_solverEEE8getTypesEv($args$i46)|0);
 $321 = $invoke$i47;
 $322 = (__ZN10emscripten8internal12getSignatureIvJPPFvRN4rhea14simplex_solverEEPS3_EEEPKcPFT_DpT0_E($321)|0);
 $323 = $invoke$i47;
 $324 = (__ZN10emscripten8internal10getContextIPFvRN4rhea14simplex_solverEEEEPT_RKS7_($10)|0);
 __embind_register_class_function(($317|0),($318|0),($319|0),($320|0),($322|0),($323|0),($324|0),0);
 HEAP32[$79>>2] = (287);
 $$index22 = ((($79)) + 4|0);
 HEAP32[$$index22>>2] = 0;
 ;HEAP8[$7>>0]=HEAP8[$79>>0]|0;HEAP8[$7+1>>0]=HEAP8[$79+1>>0]|0;HEAP8[$7+2>>0]=HEAP8[$79+2>>0]|0;HEAP8[$7+3>>0]=HEAP8[$79+3>>0]|0;HEAP8[$7+4>>0]=HEAP8[$79+4>>0]|0;HEAP8[$7+5>>0]=HEAP8[$79+5>>0]|0;HEAP8[$7+6>>0]=HEAP8[$79+6>>0]|0;HEAP8[$7+7>>0]=HEAP8[$79+7>>0]|0;
 $memberFunction$i50$field = HEAP32[$7>>2]|0;
 $memberFunction$i50$index23 = ((($7)) + 4|0);
 $memberFunction$i50$field24 = HEAP32[$memberFunction$i50$index23>>2]|0;
 $4 = $316;
 $5 = 3176;
 HEAP32[$6>>2] = $memberFunction$i50$field;
 $$index27 = ((($6)) + 4|0);
 HEAP32[$$index27>>2] = $memberFunction$i50$field24;
 $325 = $4;
 $invoker$i48 = 288;
 $326 = (__ZN10emscripten8internal6TypeIDIN4rhea14simplex_solverEE3getEv()|0);
 $327 = $5;
 $328 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJRN4rhea14simplex_solverENS0_17AllowedRawPointerIS5_EEEE8getCountEv($args$i49)|0);
 $329 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJRN4rhea14simplex_solverENS0_17AllowedRawPointerIS5_EEEE8getTypesEv($args$i49)|0);
 $330 = $invoker$i48;
 $331 = (__ZN10emscripten8internal12getSignatureIPN4rhea14simplex_solverEJRKMS3_FRS3_vES4_EEEPKcPFT_DpT0_E($330)|0);
 $332 = $invoker$i48;
 $333 = (__ZN10emscripten8internal10getContextIMN4rhea14simplex_solverEFRS3_vEEEPT_RKS7_($6)|0);
 __embind_register_class_function(($326|0),($327|0),($328|0),($329|0),($331|0),($332|0),($333|0),0);
 HEAP32[$80>>2] = (289);
 $$index29 = ((($80)) + 4|0);
 HEAP32[$$index29>>2] = 0;
 ;HEAP8[$3>>0]=HEAP8[$80>>0]|0;HEAP8[$3+1>>0]=HEAP8[$80+1>>0]|0;HEAP8[$3+2>>0]=HEAP8[$80+2>>0]|0;HEAP8[$3+3>>0]=HEAP8[$80+3>>0]|0;HEAP8[$3+4>>0]=HEAP8[$80+4>>0]|0;HEAP8[$3+5>>0]=HEAP8[$80+5>>0]|0;HEAP8[$3+6>>0]=HEAP8[$80+6>>0]|0;HEAP8[$3+7>>0]=HEAP8[$80+7>>0]|0;
 $memberFunction$i53$field = HEAP32[$3>>2]|0;
 $memberFunction$i53$index30 = ((($3)) + 4|0);
 $memberFunction$i53$field31 = HEAP32[$memberFunction$i53$index30>>2]|0;
 $0 = $325;
 $1 = 3192;
 HEAP32[$2>>2] = $memberFunction$i53$field;
 $$index34 = ((($2)) + 4|0);
 HEAP32[$$index34>>2] = $memberFunction$i53$field31;
 $invoker$i51 = 288;
 $334 = (__ZN10emscripten8internal6TypeIDIN4rhea14simplex_solverEE3getEv()|0);
 $335 = $1;
 $336 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJRN4rhea14simplex_solverENS0_17AllowedRawPointerIS5_EEEE8getCountEv($args$i52)|0);
 $337 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJRN4rhea14simplex_solverENS0_17AllowedRawPointerIS5_EEEE8getTypesEv($args$i52)|0);
 $338 = $invoker$i51;
 $339 = (__ZN10emscripten8internal12getSignatureIPN4rhea14simplex_solverEJRKMS3_FRS3_vES4_EEEPKcPFT_DpT0_E($338)|0);
 $340 = $invoker$i51;
 $341 = (__ZN10emscripten8internal10getContextIMN4rhea14simplex_solverEFRS3_vEEEPT_RKS7_($2)|0);
 __embind_register_class_function(($334|0),($335|0),($336|0),($337|0),($339|0),($340|0),($341|0),0);
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea14float_variableENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 __ZNSt3__117__compressed_pairINS_9allocatorIN4rhea14float_variableEEES3_ED2Ev($2);
 __ZNSt3__114__shared_countD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea14float_variableENS_9allocatorIS2_EEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__120__shared_ptr_emplaceIN4rhea14float_variableENS_9allocatorIS2_EEED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea14float_variableENS_9allocatorIS2_EEE16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $2;
 $4 = ((($3)) + 16|0);
 $1 = $4;
 $5 = $1;
 $0 = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vi[$8 & 511]($6);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea14float_variableENS_9allocatorIS2_EEE21__on_zero_shared_weakEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__a = sp + 44|0;
 $10 = $this;
 $11 = $10;
 $12 = ((($11)) + 16|0);
 $9 = $12;
 $13 = $9;
 $8 = $13;
 $14 = $8;
 $2 = $__a;
 $3 = $14;
 $15 = ((($11)) + 16|0);
 $1 = $15;
 $16 = $1;
 $0 = $16;
 $5 = $__a;
 $6 = $11;
 $7 = 1;
 $17 = $6;
 $4 = $17;
 $18 = $4;
 __ZdlPv($18);
 STACKTOP = sp;return;
}
function __ZN4rhea14float_variableD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea14float_variableD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK4rhea14float_variable8is_floatEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK4rhea17abstract_variable5is_fdEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 0;
}
function __ZNK4rhea12pod_variableIdE8is_dummyEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 0;
}
function __ZNK4rhea12pod_variableIdE11is_externalEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK4rhea12pod_variableIdE12is_pivotableEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 0;
}
function __ZNK4rhea12pod_variableIdE13is_restrictedEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 0;
}
function __ZNK4rhea14float_variable5valueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = +HEAPF64[$2>>3];
 STACKTOP = sp;return (+$3);
}
function __ZNK4rhea14float_variable9int_valueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = +HEAPF64[$2>>3];
 $4 = ((($1)) + 8|0);
 $5 = +HEAPF64[$4>>3];
 $6 = $5 > 0.0;
 $7 = $6 ? 0.5 : -0.5;
 $8 = $3 + $7;
 $9 = (~~(($8)));
 STACKTOP = sp;return ($9|0);
}
function __ZN4rhea12pod_variableIdE9set_valueEd($this,$new_value) {
 $this = $this|0;
 $new_value = +$new_value;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $new_value;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 8|0);
 HEAPF64[$4>>3] = $3;
 STACKTOP = sp;return;
}
function __ZN4rhea12pod_variableIdE12change_valueEd($this,$new_value) {
 $this = $this|0;
 $new_value = +$new_value;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $new_value;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 8|0);
 HEAPF64[$4>>3] = $3;
 STACKTOP = sp;return;
}
function __ZNK4rhea12pod_variableIdE9to_stringEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = $this;
 $3 = $agg$result;
 $4 = 3208;
 $6 = $3;
 $2 = $6;
 $7 = $2;
 $1 = $7;
 $8 = $1;
 $0 = $8;
 $9 = $4;
 $10 = $4;
 $11 = (__ZNSt3__111char_traitsIcE6lengthEPKc($10)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($6,$9,$11);
 STACKTOP = sp;return;
}
function __ZNK4rhea17abstract_variable8is_floatEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 0;
}
function __ZNK4rhea17abstract_variable5valueEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return +0;
}
function __ZNK4rhea17abstract_variable9int_valueEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 0;
}
function __ZN4rhea17abstract_variableD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNK4rhea17abstract_variable8is_dummyEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 0;
}
function __ZNK4rhea17abstract_variable11is_externalEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 0;
}
function __ZN4rhea17abstract_variable9set_valueEd($this,$0) {
 $this = $this|0;
 $0 = +$0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 ___assert_fail((3216|0),(3224|0),68,(2952|0));
 // unreachable;
}
function __ZN4rhea17abstract_variable12change_valueEd($this,$0) {
 $this = $this|0;
 $0 = +$0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 ___assert_fail((3216|0),(3224|0),70,(3256|0));
 // unreachable;
}
function __ZNK4rhea8strength11is_requiredEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $this;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 __ZN4rhea8strength8requiredEv($1);
 $4 = ((($1)) + 8|0);
 $5 = (__ZNK4rhea15symbolic_weighteqERKS0_($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZNK4rhea19abstract_constraint18is_edit_constraintEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 0;
}
function __ZNK4rhea19abstract_constraint13is_inequalityEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 0;
}
function __ZNK4rhea19abstract_constraint11is_requiredEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 $3 = (__ZNK4rhea8strength11is_requiredEv($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK4rhea19abstract_constraint18is_stay_constraintEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 0;
}
function __ZNK4rhea19abstract_constraint6weightEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 40|0);
 $3 = +HEAPF64[$2>>3];
 STACKTOP = sp;return (+$3);
}
function __ZN4rhea19abstract_constraintD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN4rhea19abstract_constraintD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea19abstract_constraintD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEEC2ERKS7_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 24|0;
 $6 = sp + 8|0;
 $9 = sp + 80|0;
 $10 = sp + 108|0;
 $11 = sp + 16|0;
 $15 = sp + 109|0;
 $17 = sp;
 $19 = sp + 110|0;
 $25 = sp + 111|0;
 $23 = $this;
 $24 = $__x;
 $28 = $23;
 $29 = $24;
 $22 = $29;
 $30 = $22;
 $31 = ((($30)) + 8|0);
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $18 = $33;
 $34 = $18;
 ;HEAP8[$17>>0]=HEAP8[$19>>0]|0;
 $16 = $34;
 $13 = $28;
 $14 = $25;
 $35 = $13;
 $12 = $35;
 HEAP32[$35>>2] = 0;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($35)) + 8|0);
 ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;
 $8 = $37;
 HEAP32[$9>>2] = 0;
 $38 = $8;
 $7 = $9;
 $39 = $7;
 $40 = HEAP32[$39>>2]|0;
 $1 = $11;
 ;HEAP8[$6>>0]=HEAP8[$10>>0]|0;
 $4 = $38;
 HEAP32[$5>>2] = $40;
 $41 = $4;
 $3 = $6;
 $2 = $5;
 $42 = $2;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $44 = $24;
 $0 = $44;
 $45 = $0;
 $46 = ((($45)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$45>>2]|0;
 $49 = $47;
 $50 = $48;
 $51 = (($49) - ($50))|0;
 $52 = (($51|0) / 16)&-1;
 $__n = $52;
 $53 = $__n;
 $54 = ($53>>>0)>(0);
 if (!($54)) {
  STACKTOP = sp;return;
 }
 $55 = $__n;
 __THREW__ = 0;
 invoke_vii(290,($28|0),($55|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEED2Ev($28);
  $67 = $26;
  $68 = $27;
  ___resumeException($67|0);
  // unreachable;
 }
 $58 = $24;
 $59 = HEAP32[$58>>2]|0;
 $60 = $24;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 __THREW__ = 0;
 invoke_viii(291,($28|0),($59|0),($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if ($64) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEED2Ev($28);
  $67 = $26;
  $68 = $27;
  ___resumeException($67|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN4rhea11edit_misuseD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea11edit_misuseD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK4rhea11edit_misuse4whatEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (3272|0);
}
function __ZNK4rhea10constrainteqERKS0_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $this;
 $5 = $other;
 $6 = $4;
 $7 = ((($6)) + 4|0);
 $8 = $5;
 $9 = ((($8)) + 4|0);
 $2 = $7;
 $3 = $9;
 $10 = $2;
 $1 = $10;
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $13 = $3;
 $0 = $13;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12|0)==($15|0);
 STACKTOP = sp;return ($16|0);
}
function __ZNK4rhea10constraintneERKS0_($this,$other) {
 $this = $this|0;
 $other = $other|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $other;
 $8 = $6;
 $9 = ((($8)) + 4|0);
 $10 = $7;
 $11 = ((($10)) + 4|0);
 $4 = $9;
 $5 = $11;
 $12 = $4;
 $13 = $5;
 $2 = $12;
 $3 = $13;
 $14 = $2;
 $1 = $14;
 $15 = $1;
 $16 = HEAP32[$15>>2]|0;
 $17 = $3;
 $0 = $17;
 $18 = $0;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16|0)==($19|0);
 $21 = $20 ^ 1;
 STACKTOP = sp;return ($21|0);
}
function __ZNK4rhea23edit_or_stay_constraint10expressionEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = ((($1)) + 48|0);
 $4 = (+__ZNK4rhea8variable5valueEv($3));
 __ZN4rhea17linear_expressionC2ERKNS_8variableEdd($agg$result,$2,-1.0,$4);
 STACKTOP = sp;return;
}
function __ZN4rhea23edit_or_stay_constraintD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 2368;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 48|0);
 __ZN4rhea8variableD2Ev($3);
 __ZN4rhea19abstract_constraintD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4rhea23edit_or_stay_constraintD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea23edit_or_stay_constraintD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__110shared_ptrIN4rhea15edit_constraintEE11make_sharedIJRKNS1_8variableERKNS1_8strengthERdEEES3_DpOT_($agg$result,$__args,$__args1,$__args2) {
 $agg$result = $agg$result|0;
 $__args = $__args|0;
 $__args1 = $__args1|0;
 $__args2 = $__args2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a2 = 0;
 var $__hold2 = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 880|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $26 = sp + 152|0;
 $27 = sp + 48|0;
 $28 = sp + 72|0;
 $29 = sp + 24|0;
 $34 = sp + 865|0;
 $35 = sp + 860|0;
 $36 = sp + 863|0;
 $37 = sp + 858|0;
 $48 = sp + 88|0;
 $49 = sp + 64|0;
 $50 = sp + 136|0;
 $51 = sp + 120|0;
 $54 = sp + 861|0;
 $55 = sp + 868|0;
 $56 = sp + 866|0;
 $57 = sp + 864|0;
 $59 = sp + 204|0;
 $75 = sp + 80|0;
 $76 = sp + 56|0;
 $77 = sp + 8|0;
 $78 = sp + 96|0;
 $79 = sp + 128|0;
 $82 = sp + 859|0;
 $83 = sp + 792|0;
 $84 = sp + 800|0;
 $85 = sp + 862|0;
 $86 = sp + 867|0;
 $87 = sp + 32|0;
 $88 = sp;
 $89 = sp + 144|0;
 $98 = sp + 869|0;
 $99 = sp + 284|0;
 $100 = sp + 504|0;
 $103 = sp + 112|0;
 $143 = sp + 692|0;
 $144 = sp + 104|0;
 $147 = sp + 708|0;
 $148 = sp + 712|0;
 $149 = sp + 160|0;
 $154 = sp + 744|0;
 $__a2 = sp + 870|0;
 $__hold2 = sp + 304|0;
 $184 = sp + 368|0;
 $185 = sp + 857|0;
 $188 = sp + 856|0;
 $181 = $__args;
 $182 = $__args1;
 $183 = $__args2;
 $180 = $__a2;
 $159 = $__a2;
 $160 = 1;
 $161 = 0;
 $190 = $160;
 $191 = ($190*72)|0;
 $158 = $191;
 $192 = $158;
 $193 = (__Znwj($192)|0);
 $155 = $184;
 $156 = $__a2;
 $157 = 1;
 $194 = $155;
 $195 = $156;
 HEAP32[$194>>2] = $195;
 $196 = ((($194)) + 4|0);
 $197 = $157;
 HEAP32[$196>>2] = $197;
 $151 = $__hold2;
 $152 = $193;
 $153 = $184;
 $198 = $151;
 $199 = $152;
 $200 = $153;
 $150 = $200;
 $201 = $150;
 ;HEAP32[$154>>2]=HEAP32[$201>>2]|0;HEAP32[$154+4>>2]=HEAP32[$201+4>>2]|0;
 ;HEAP8[$149>>0]=HEAP8[$154>>0]|0;HEAP8[$149+1>>0]=HEAP8[$154+1>>0]|0;HEAP8[$149+2>>0]=HEAP8[$154+2>>0]|0;HEAP8[$149+3>>0]=HEAP8[$154+3>>0]|0;HEAP8[$149+4>>0]=HEAP8[$154+4>>0]|0;HEAP8[$149+5>>0]=HEAP8[$154+5>>0]|0;HEAP8[$149+6>>0]=HEAP8[$154+6>>0]|0;HEAP8[$149+7>>0]=HEAP8[$154+7>>0]|0;
 $146 = $198;
 HEAP32[$147>>2] = $199;
 $202 = $146;
 $145 = $147;
 $203 = $145;
 $204 = HEAP32[$203>>2]|0;
 $139 = $149;
 $205 = $139;
 ;HEAP32[$148>>2]=HEAP32[$205>>2]|0;HEAP32[$148+4>>2]=HEAP32[$205+4>>2]|0;
 ;HEAP8[$144>>0]=HEAP8[$148>>0]|0;HEAP8[$144+1>>0]=HEAP8[$148+1>>0]|0;HEAP8[$144+2>>0]=HEAP8[$148+2>>0]|0;HEAP8[$144+3>>0]=HEAP8[$148+3>>0]|0;HEAP8[$144+4>>0]=HEAP8[$148+4>>0]|0;HEAP8[$144+5>>0]=HEAP8[$148+5>>0]|0;HEAP8[$144+6>>0]=HEAP8[$148+6>>0]|0;HEAP8[$144+7>>0]=HEAP8[$148+7>>0]|0;
 $142 = $202;
 HEAP32[$143>>2] = $204;
 $206 = $142;
 $141 = $143;
 $207 = $141;
 $208 = HEAP32[$207>>2]|0;
 HEAP32[$206>>2] = $208;
 $209 = ((($206)) + 4|0);
 $140 = $144;
 $210 = $140;
 ;HEAP32[$209>>2]=HEAP32[$210>>2]|0;HEAP32[$209+4>>2]=HEAP32[$210+4>>2]|0;
 $120 = $__hold2;
 $211 = $120;
 $119 = $211;
 $212 = $119;
 $118 = $212;
 $213 = $118;
 $214 = HEAP32[$213>>2]|0;
 $3 = $185;
 $4 = $__a2;
 $215 = $181;
 $2 = $215;
 $216 = $2;
 $217 = $182;
 $0 = $217;
 $218 = $0;
 $219 = $183;
 $1 = $219;
 $220 = $1;
 ;HEAP8[$103>>0]=HEAP8[$185>>0]|0;
 $94 = $214;
 $95 = $216;
 $96 = $218;
 $97 = $220;
 $221 = $94;
 $92 = $221;
 $93 = 0;
 $222 = $92;
 $223 = $93;
 $90 = $222;
 $91 = $223;
 $224 = $90;
 $225 = 10504;
 HEAP32[$224>>2] = $225;
 $226 = ((($224)) + 4|0);
 $227 = $91;
 HEAP32[$226>>2] = $227;
 $228 = 10568;
 HEAP32[$222>>2] = $228;
 $229 = ((($222)) + 8|0);
 $230 = $93;
 HEAP32[$229>>2] = $230;
 $231 = 2416;
 HEAP32[$221>>2] = $231;
 $232 = ((($221)) + 16|0);
 $60 = $103;
 $233 = $60;
 $58 = $233;
 $234 = $58;
 $52 = $59;
 $53 = $234;
 $235 = $52;
 $236 = $53;
 ;HEAP8[$48>>0]=HEAP8[$57>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$56>>0]|0;
 ;HEAP8[$50>>0]=HEAP8[$55>>0]|0;
 ;HEAP8[$51>>0]=HEAP8[$54>>0]|0;
 $46 = $235;
 $47 = $236;
 $237 = $46;
 $238 = $47;
 $45 = $238;
 $239 = $45;
 $43 = $237;
 $44 = $239;
 $240 = $43;
 $241 = $44;
 $42 = $241;
 $242 = $42;
 HEAP32[$240>>2] = $242;
 $243 = HEAP32[$59>>2]|0;
 HEAP32[$99>>2] = $243;
 $244 = $95;
 $5 = $244;
 $245 = $5;
 $246 = $96;
 $6 = $246;
 $247 = $6;
 $248 = $97;
 $7 = $248;
 $249 = $7;
 $39 = $245;
 $40 = $247;
 $41 = $249;
 $250 = $39;
 $38 = $250;
 $251 = $38;
 $252 = $40;
 $8 = $252;
 $253 = $8;
 $254 = $41;
 $9 = $254;
 $255 = $9;
 $30 = $100;
 $31 = $251;
 $32 = $253;
 $33 = $255;
 $256 = $30;
 $257 = $31;
 $258 = $32;
 $259 = $33;
 ;HEAP8[$26>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$27>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$28>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$29>>0]=HEAP8[$34>>0]|0;
 $22 = $256;
 $23 = $257;
 $24 = $258;
 $25 = $259;
 $260 = $22;
 $261 = $23;
 $21 = $261;
 $262 = $21;
 $11 = $260;
 $12 = $262;
 $263 = $11;
 $264 = $12;
 $10 = $264;
 $265 = $10;
 HEAP32[$263>>2] = $265;
 $266 = ((($260)) + 4|0);
 $267 = $24;
 $13 = $267;
 $268 = $13;
 $15 = $266;
 $16 = $268;
 $269 = $15;
 $270 = $16;
 $14 = $270;
 $271 = $14;
 HEAP32[$269>>2] = $271;
 $272 = ((($260)) + 8|0);
 $273 = $25;
 $17 = $273;
 $274 = $17;
 $19 = $272;
 $20 = $274;
 $275 = $19;
 $276 = $20;
 $18 = $276;
 $277 = $18;
 HEAP32[$275>>2] = $277;
 dest=$87; src=$100; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 ;HEAP8[$88>>0]=HEAP8[$99>>0]|0;HEAP8[$88+1>>0]=HEAP8[$99+1>>0]|0;HEAP8[$88+2>>0]=HEAP8[$99+2>>0]|0;HEAP8[$88+3>>0]=HEAP8[$99+3>>0]|0;
 ;HEAP8[$89>>0]=HEAP8[$98>>0]|0;
 $81 = $232;
 $278 = $81;
 $80 = $88;
 $279 = $80;
 ;HEAP32[$83>>2]=HEAP32[$279>>2]|0;
 $61 = $87;
 $280 = $61;
 ;HEAP32[$84>>2]=HEAP32[$280>>2]|0;HEAP32[$84+4>>2]=HEAP32[$280+4>>2]|0;HEAP32[$84+8>>2]=HEAP32[$280+8>>2]|0;
 ;HEAP8[$75>>0]=HEAP8[$86>>0]|0;
 ;HEAP8[$76>>0]=HEAP8[$85>>0]|0;
 dest=$77; src=$84; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 ;HEAP8[$78>>0]=HEAP8[$83>>0]|0;HEAP8[$78+1>>0]=HEAP8[$83+1>>0]|0;HEAP8[$78+2>>0]=HEAP8[$83+2>>0]|0;HEAP8[$78+3>>0]=HEAP8[$83+3>>0]|0;
 ;HEAP8[$79>>0]=HEAP8[$82>>0]|0;
 $74 = $278;
 $281 = $74;
 $73 = $78;
 $282 = $73;
 $72 = $282;
 $283 = $72;
 $284 = HEAP32[$283>>2]|0;
 $71 = $284;
 $63 = $77;
 $285 = $63;
 $62 = $285;
 $286 = $62;
 $287 = HEAP32[$286>>2]|0;
 $64 = $287;
 $288 = $64;
 $66 = $77;
 $289 = $66;
 $290 = ((($289)) + 4|0);
 $65 = $290;
 $291 = $65;
 $292 = HEAP32[$291>>2]|0;
 $67 = $292;
 $293 = $67;
 $69 = $77;
 $294 = $69;
 $295 = ((($294)) + 8|0);
 $68 = $295;
 $296 = $68;
 $297 = HEAP32[$296>>2]|0;
 $70 = $297;
 $298 = $70;
 $299 = +HEAPF64[$298>>3];
 __THREW__ = 0;
 invoke_viiid(292,($281|0),($288|0),($293|0),(+$299));
 $300 = __THREW__; __THREW__ = 0;
 $301 = $300&1;
 if ($301) {
  $302 = ___cxa_find_matching_catch()|0;
  $303 = tempRet0;
  $101 = $302;
  $102 = $303;
  __ZNSt3__114__shared_countD2Ev($221);
  $304 = $101;
  $305 = $102;
  $186 = $304;
  $187 = $305;
  $138 = $__hold2;
  $306 = $138;
  $136 = $306;
  $137 = 0;
  $307 = $136;
  $135 = $307;
  $308 = $135;
  $134 = $308;
  $309 = $134;
  $310 = HEAP32[$309>>2]|0;
  $__tmp$i$i3 = $310;
  $311 = $137;
  $124 = $307;
  $312 = $124;
  $123 = $312;
  $313 = $123;
  HEAP32[$313>>2] = $311;
  $314 = $__tmp$i$i3;
  $315 = ($314|0)!=(0|0);
  if (!($315)) {
   $374 = $186;
   $375 = $187;
   ___resumeException($374|0);
   // unreachable;
  }
  $122 = $307;
  $336 = $122;
  $121 = $336;
  $337 = $121;
  $338 = ((($337)) + 4|0);
  $339 = $__tmp$i$i3;
  $132 = $338;
  $133 = $339;
  $340 = $132;
  $341 = HEAP32[$340>>2]|0;
  $342 = $133;
  $343 = ((($340)) + 4|0);
  $344 = HEAP32[$343>>2]|0;
  $129 = $341;
  $130 = $342;
  $131 = $344;
  $345 = $129;
  $346 = $130;
  $347 = $131;
  $126 = $345;
  $127 = $346;
  $128 = $347;
  $348 = $127;
  $125 = $348;
  $349 = $125;
  __ZdlPv($349);
  $374 = $186;
  $375 = $187;
  ___resumeException($374|0);
  // unreachable;
 }
 $$expand_i1_val = 0;
 HEAP8[$188>>0] = $$expand_i1_val;
 $104 = $agg$result;
 $316 = $104;
 HEAP32[$316>>2] = 0;
 $317 = ((($316)) + 4|0);
 HEAP32[$317>>2] = 0;
 $107 = $__hold2;
 $318 = $107;
 $106 = $318;
 $319 = $106;
 $105 = $319;
 $320 = $105;
 $321 = HEAP32[$320>>2]|0;
 $110 = $321;
 $322 = $110;
 $323 = ((($322)) + 16|0);
 $109 = $323;
 $324 = $109;
 $108 = $324;
 $325 = $108;
 HEAP32[$agg$result>>2] = $325;
 $115 = $__hold2;
 $326 = $115;
 $114 = $326;
 $327 = $114;
 $113 = $327;
 $328 = $113;
 $329 = HEAP32[$328>>2]|0;
 $__t$i = $329;
 $112 = $326;
 $330 = $112;
 $111 = $330;
 $331 = $111;
 HEAP32[$331>>2] = 0;
 $332 = $__t$i;
 $333 = ((($agg$result)) + 4|0);
 HEAP32[$333>>2] = $332;
 $334 = HEAP32[$agg$result>>2]|0;
 $116 = $agg$result;
 $117 = $334;
 $$expand_i1_val2 = 1;
 HEAP8[$188>>0] = $$expand_i1_val2;
 $189 = 1;
 $$pre_trunc = HEAP8[$188>>0]|0;
 $335 = $$pre_trunc&1;
 if (!($335)) {
  __ZNSt3__110shared_ptrIN4rhea15edit_constraintEED2Ev($agg$result);
 }
 $179 = $__hold2;
 $350 = $179;
 $177 = $350;
 $178 = 0;
 $351 = $177;
 $176 = $351;
 $352 = $176;
 $175 = $352;
 $353 = $175;
 $354 = HEAP32[$353>>2]|0;
 $__tmp$i$i = $354;
 $355 = $178;
 $165 = $351;
 $356 = $165;
 $164 = $356;
 $357 = $164;
 HEAP32[$357>>2] = $355;
 $358 = $__tmp$i$i;
 $359 = ($358|0)!=(0|0);
 if (!($359)) {
  STACKTOP = sp;return;
 }
 $163 = $351;
 $360 = $163;
 $162 = $360;
 $361 = $162;
 $362 = ((($361)) + 4|0);
 $363 = $__tmp$i$i;
 $173 = $362;
 $174 = $363;
 $364 = $173;
 $365 = HEAP32[$364>>2]|0;
 $366 = $174;
 $367 = ((($364)) + 4|0);
 $368 = HEAP32[$367>>2]|0;
 $170 = $365;
 $171 = $366;
 $172 = $368;
 $369 = $170;
 $370 = $171;
 $371 = $172;
 $167 = $369;
 $168 = $370;
 $169 = $371;
 $372 = $168;
 $166 = $372;
 $373 = $166;
 __ZdlPv($373);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea15edit_constraintENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 2416;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 16|0);
 __ZNSt3__117__compressed_pairINS_9allocatorIN4rhea15edit_constraintEEES3_ED2Ev($3);
 __ZNSt3__114__shared_countD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea15edit_constraintENS_9allocatorIS2_EEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__120__shared_ptr_emplaceIN4rhea15edit_constraintENS_9allocatorIS2_EEED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea15edit_constraintENS_9allocatorIS2_EEE16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $2;
 $4 = ((($3)) + 16|0);
 $1 = $4;
 $5 = $1;
 $0 = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vi[$8 & 511]($6);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea15edit_constraintENS_9allocatorIS2_EEE21__on_zero_shared_weakEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__a = sp + 44|0;
 $10 = $this;
 $11 = $10;
 $12 = ((($11)) + 16|0);
 $9 = $12;
 $13 = $9;
 $8 = $13;
 $14 = $8;
 $2 = $__a;
 $3 = $14;
 $15 = ((($11)) + 16|0);
 $1 = $15;
 $16 = $1;
 $0 = $16;
 $5 = $__a;
 $6 = $11;
 $7 = 1;
 $17 = $6;
 $4 = $17;
 $18 = $4;
 __ZdlPv($18);
 STACKTOP = sp;return;
}
function __ZN4rhea15edit_constraintD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea15edit_constraintD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK4rhea15edit_constraint18is_edit_constraintEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK4rhea15edit_constraint12is_satisfiedEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 0;
}
function __ZThn8_N4rhea14simplex_solverD1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + -8|0);
 __ZN4rhea14simplex_solverD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__15stackIjNS_5dequeIjNS_9allocatorIjEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__15dequeIjNS_9allocatorIjEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__110__list_impIN4rhea14simplex_solver9edit_infoENS_9allocatorIS3_EEE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $__f = 0, $__l = 0, $__n = 0, $__na = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $11 = sp + 128|0;
 $28 = $this;
 $29 = $28;
 $27 = $29;
 $30 = $27;
 $26 = $30;
 $31 = $26;
 $32 = ((($31)) + 8|0);
 $25 = $32;
 $33 = $25;
 $24 = $33;
 $34 = $24;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0);
 if ($36) {
  STACKTOP = sp;return;
 }
 $23 = $29;
 $37 = $23;
 $38 = ((($37)) + 8|0);
 $22 = $38;
 $39 = $22;
 $21 = $39;
 $40 = $21;
 $__na = $40;
 $41 = ((($29)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $__f = $42;
 $13 = $29;
 $43 = $13;
 $12 = $43;
 $44 = $12;
 $__l = $44;
 $45 = $__f;
 $46 = $__l;
 $47 = HEAP32[$46>>2]|0;
 $4 = $45;
 $5 = $47;
 $48 = $5;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $4;
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($52)) + 4|0);
 HEAP32[$53>>2] = $50;
 $54 = $4;
 $55 = HEAP32[$54>>2]|0;
 $56 = $5;
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 HEAP32[$58>>2] = $55;
 $2 = $29;
 $59 = $2;
 $60 = ((($59)) + 8|0);
 $1 = $60;
 $61 = $1;
 $0 = $61;
 $62 = $0;
 HEAP32[$62>>2] = 0;
 while(1) {
  $63 = $__f;
  $64 = $__l;
  $65 = ($63|0)!=($64|0);
  if (!($65)) {
   break;
  }
  $66 = $__f;
  $__n = $66;
  $67 = $__f;
  $68 = ((($67)) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $__f = $69;
  $70 = $__na;
  $71 = $__n;
  $72 = ((($71)) + 8|0);
  $3 = $72;
  $73 = $3;
  $9 = $70;
  $10 = $73;
  $74 = $9;
  $75 = $10;
  ;HEAP8[$8>>0]=HEAP8[$11>>0]|0;
  $6 = $74;
  $7 = $75;
  $76 = $7;
  __ZN4rhea14simplex_solver9edit_infoD2Ev($76);
  $77 = $__na;
  $78 = $__n;
  $18 = $77;
  $19 = $78;
  $20 = 1;
  $79 = $18;
  $80 = $19;
  $81 = $20;
  $15 = $79;
  $16 = $80;
  $17 = $81;
  $82 = $16;
  $14 = $82;
  $83 = $14;
  __ZdlPv($83);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEE12__deallocateEPNS_11__hash_nodeISD_PvEE($this,$__np) {
 $this = $this|0;
 $__np = $__np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, $__next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $19 = $__np;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 8|0);
 $16 = $22;
 $23 = $16;
 $15 = $23;
 $24 = $15;
 $__na = $24;
 while(1) {
  $25 = $19;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   break;
  }
  $27 = $19;
  $28 = HEAP32[$27>>2]|0;
  $__next = $28;
  $29 = $__na;
  $30 = $19;
  $31 = ((($30)) + 8|0);
  $14 = $31;
  $32 = $14;
  $4 = $29;
  $5 = $32;
  $33 = $4;
  $34 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $33;
  $2 = $34;
  $35 = $2;
  $0 = $35;
  $36 = $0;
  __ZNSt3__14pairIKN4rhea10constraintENS_13unordered_setINS1_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEED2Ev($36);
  $37 = $__na;
  $38 = $19;
  $11 = $37;
  $12 = $38;
  $13 = 1;
  $39 = $11;
  $40 = $12;
  $41 = $13;
  $8 = $39;
  $9 = $40;
  $10 = $41;
  $42 = $9;
  $7 = $42;
  $43 = $7;
  __ZdlPv($43);
  $44 = $__next;
  $19 = $44;
 }
 STACKTOP = sp;return;
}
function __ZN4rhea7tableauD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 2496;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 84|0);
 __ZNSt3__113unordered_setIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEED2Ev($3);
 $4 = ((($1)) + 64|0);
 __ZNSt3__113unordered_setIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEED2Ev($4);
 $5 = ((($1)) + 44|0);
 __ZNSt3__113unordered_setIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEED2Ev($5);
 $6 = ((($1)) + 24|0);
 __ZNSt3__113unordered_mapIN4rhea8variableENS1_17linear_expressionENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEED2Ev($6);
 $7 = ((($1)) + 4|0);
 __ZNSt3__113unordered_mapIN4rhea8variableENS_13unordered_setIS2_NS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEES5_S7_NS8_INS_4pairIKS2_SA_EEEEED2Ev($7);
 STACKTOP = sp;return;
}
function __ZN4rhea7tableauD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea7tableauD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEE6rehashEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $21 = sp;
 $24 = sp + 144|0;
 $34 = sp + 124|0;
 $35 = sp + 92|0;
 $33 = $this;
 HEAP32[$34>>2] = $__n;
 $36 = $33;
 $37 = HEAP32[$34>>2]|0;
 $38 = ($37|0)==(1);
 if ($38) {
  HEAP32[$34>>2] = 2;
 } else {
  $39 = HEAP32[$34>>2]|0;
  $40 = HEAP32[$34>>2]|0;
  $41 = (($40) - 1)|0;
  $42 = $39 & $41;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = HEAP32[$34>>2]|0;
   $45 = (__ZNSt3__112__next_primeEj($44)|0);
   HEAP32[$34>>2] = $45;
  }
 }
 $32 = $36;
 $46 = $32;
 $31 = $46;
 $47 = $31;
 $30 = $47;
 $48 = $30;
 $29 = $48;
 $49 = $29;
 $50 = ((($49)) + 4|0);
 $28 = $50;
 $51 = $28;
 $27 = $51;
 $52 = $27;
 $26 = $52;
 $53 = $26;
 $54 = HEAP32[$53>>2]|0;
 $__bc = $54;
 $55 = HEAP32[$34>>2]|0;
 $56 = $__bc;
 $57 = ($55>>>0)>($56>>>0);
 $58 = HEAP32[$34>>2]|0;
 if ($57) {
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEE8__rehashEj($36,$58);
  STACKTOP = sp;return;
 }
 $59 = $__bc;
 $60 = ($58>>>0)<($59>>>0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $61 = $__bc;
 $25 = $61;
 $62 = $25;
 $63 = ($62>>>0)>(2);
 if ($63) {
  $64 = $25;
  $65 = $25;
  $66 = (($65) - 1)|0;
  $67 = $64 & $66;
  $68 = ($67|0)!=(0);
  $69 = $68 ^ 1;
  if ($69) {
   $14 = $36;
   $70 = $14;
   $71 = ((($70)) + 12|0);
   $13 = $71;
   $72 = $13;
   $12 = $72;
   $73 = $12;
   $74 = HEAP32[$73>>2]|0;
   $75 = (+($74>>>0));
   $2 = $36;
   $76 = $2;
   $77 = ((($76)) + 16|0);
   $1 = $77;
   $78 = $1;
   $0 = $78;
   $79 = $0;
   $80 = +HEAPF32[$79>>2];
   $81 = $75 / $80;
   $3 = $81;
   $82 = $3;
   $83 = (+Math_ceil((+$82)));
   $84 = (~~(($83))>>>0);
   $5 = $84;
   $85 = $5;
   $86 = (($85) - 1)|0;
   $4 = $86;
   $87 = $4;
   $88 = (Math_clz32(($87|0))|0);
   $89 = (32 - ($88))|0;
   $90 = 1 << $89;
   $107 = $90;
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $8 = $36;
  $91 = $8;
  $92 = ((($91)) + 12|0);
  $7 = $92;
  $93 = $7;
  $6 = $93;
  $94 = $6;
  $95 = HEAP32[$94>>2]|0;
  $96 = (+($95>>>0));
  $11 = $36;
  $97 = $11;
  $98 = ((($97)) + 16|0);
  $10 = $98;
  $99 = $10;
  $9 = $99;
  $100 = $9;
  $101 = +HEAPF32[$100>>2];
  $102 = $96 / $101;
  $15 = $102;
  $103 = $15;
  $104 = (+Math_ceil((+$103)));
  $105 = (~~(($104))>>>0);
  $106 = (__ZNSt3__112__next_primeEj($105)|0);
  $107 = $106;
 }
 HEAP32[$35>>2] = $107;
 $22 = $34;
 $23 = $35;
 $108 = $22;
 $109 = $23;
 ;HEAP8[$21>>0]=HEAP8[$24>>0]|0;
 $19 = $108;
 $20 = $109;
 $110 = $19;
 $111 = $20;
 $16 = $21;
 $17 = $110;
 $18 = $111;
 $112 = $17;
 $113 = HEAP32[$112>>2]|0;
 $114 = $18;
 $115 = HEAP32[$114>>2]|0;
 $116 = ($113>>>0)<($115>>>0);
 $117 = $20;
 $118 = $19;
 $119 = $116 ? $117 : $118;
 $120 = HEAP32[$119>>2]|0;
 HEAP32[$34>>2] = $120;
 $121 = HEAP32[$34>>2]|0;
 $122 = $__bc;
 $123 = ($121>>>0)<($122>>>0);
 if (!($123)) {
  STACKTOP = sp;return;
 }
 $124 = HEAP32[$34>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEE8__rehashEj($36,$124);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEE8__rehashEj($this,$__nbc) {
 $this = $this|0;
 $__nbc = $__nbc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__chash = 0, $__cp = 0, $__i = 0, $__np = 0, $__npa = 0, $__phash = 0, $__pp = 0, $__tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $79 = $this;
 $80 = $__nbc;
 $81 = $79;
 $78 = $81;
 $82 = $78;
 $77 = $82;
 $83 = $77;
 $76 = $83;
 $84 = $76;
 $85 = ((($84)) + 4|0);
 $64 = $85;
 $86 = $64;
 $63 = $86;
 $87 = $63;
 $62 = $87;
 $88 = $62;
 $__npa = $88;
 $89 = $80;
 $90 = ($89>>>0)>(0);
 if ($90) {
  $91 = $__npa;
  $92 = $80;
  $4 = $91;
  $5 = $92;
  $93 = $4;
  $94 = $5;
  $1 = $93;
  $2 = $94;
  $3 = 0;
  $95 = $2;
  $96 = $95<<2;
  $0 = $96;
  $97 = $0;
  $98 = (__Znwj($97)|0);
  $99 = $98;
 } else {
  $99 = 0;
 }
 $27 = $81;
 $28 = $99;
 $100 = $27;
 $26 = $100;
 $101 = $26;
 $25 = $101;
 $102 = $25;
 $103 = HEAP32[$102>>2]|0;
 $__tmp$i = $103;
 $104 = $28;
 $9 = $100;
 $105 = $9;
 $8 = $105;
 $106 = $8;
 HEAP32[$106>>2] = $104;
 $107 = $__tmp$i;
 $108 = ($107|0)!=(0|0);
 if ($108) {
  $7 = $100;
  $109 = $7;
  $6 = $109;
  $110 = $6;
  $111 = ((($110)) + 4|0);
  $112 = $__tmp$i;
  $23 = $111;
  $24 = $112;
  $113 = $23;
  $22 = $113;
  $114 = $22;
  $21 = $114;
  $115 = $21;
  $20 = $115;
  $116 = $20;
  $117 = $24;
  $12 = $113;
  $118 = $12;
  $11 = $118;
  $119 = $11;
  $10 = $119;
  $120 = $10;
  $121 = HEAP32[$120>>2]|0;
  $17 = $116;
  $18 = $117;
  $19 = $121;
  $122 = $17;
  $123 = $18;
  $124 = $19;
  $14 = $122;
  $15 = $123;
  $16 = $124;
  $125 = $15;
  $13 = $125;
  $126 = $13;
  __ZdlPv($126);
 }
 $127 = $80;
 $31 = $81;
 $128 = $31;
 $30 = $128;
 $129 = $30;
 $29 = $129;
 $130 = $29;
 $131 = ((($130)) + 4|0);
 $34 = $131;
 $132 = $34;
 $33 = $132;
 $133 = $33;
 $32 = $133;
 $134 = $32;
 HEAP32[$134>>2] = $127;
 $135 = $80;
 $136 = ($135>>>0)>(0);
 if (!($136)) {
  STACKTOP = sp;return;
 }
 $__i = 0;
 while(1) {
  $137 = $__i;
  $138 = $80;
  $139 = ($137>>>0)<($138>>>0);
  if (!($139)) {
   break;
  }
  $140 = $__i;
  $37 = $81;
  $38 = $140;
  $141 = $37;
  $142 = $38;
  $36 = $141;
  $143 = $36;
  $35 = $143;
  $144 = $35;
  $145 = HEAP32[$144>>2]|0;
  $146 = (($145) + ($142<<2)|0);
  HEAP32[$146>>2] = 0;
  $147 = $__i;
  $148 = (($147) + 1)|0;
  $__i = $148;
 }
 $149 = ((($81)) + 8|0);
 $40 = $149;
 $150 = $40;
 $39 = $150;
 $151 = $39;
 $42 = $151;
 $152 = $42;
 $41 = $152;
 $153 = $41;
 $__pp = $153;
 $154 = $__pp;
 $155 = HEAP32[$154>>2]|0;
 $__cp = $155;
 $156 = $__cp;
 $157 = ($156|0)!=(0|0);
 if (!($157)) {
  STACKTOP = sp;return;
 }
 $158 = $__cp;
 $159 = ((($158)) + 4|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = $80;
 $43 = $160;
 $44 = $161;
 $162 = $44;
 $163 = $44;
 $164 = (($163) - 1)|0;
 $165 = $162 & $164;
 $166 = ($165|0)!=(0);
 $167 = $43;
 $168 = $44;
 if ($166) {
  $171 = (($167>>>0) % ($168>>>0))&-1;
  $172 = $171;
 } else {
  $169 = (($168) - 1)|0;
  $170 = $167 & $169;
  $172 = $170;
 }
 $__chash = $172;
 $173 = $__pp;
 $174 = $__chash;
 $47 = $81;
 $48 = $174;
 $175 = $47;
 $176 = $48;
 $46 = $175;
 $177 = $46;
 $45 = $177;
 $178 = $45;
 $179 = HEAP32[$178>>2]|0;
 $180 = (($179) + ($176<<2)|0);
 HEAP32[$180>>2] = $173;
 $181 = $__chash;
 $__phash = $181;
 $182 = $__cp;
 $__pp = $182;
 $183 = $__cp;
 $184 = HEAP32[$183>>2]|0;
 $__cp = $184;
 while(1) {
  $185 = $__cp;
  $186 = ($185|0)!=(0|0);
  if (!($186)) {
   break;
  }
  $187 = $__cp;
  $188 = ((($187)) + 4|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = $80;
  $49 = $189;
  $50 = $190;
  $191 = $50;
  $192 = $50;
  $193 = (($192) - 1)|0;
  $194 = $191 & $193;
  $195 = ($194|0)!=(0);
  $196 = $49;
  $197 = $50;
  if ($195) {
   $200 = (($196>>>0) % ($197>>>0))&-1;
   $201 = $200;
  } else {
   $198 = (($197) - 1)|0;
   $199 = $196 & $198;
   $201 = $199;
  }
  $__chash = $201;
  $202 = $__chash;
  $203 = $__phash;
  $204 = ($202|0)==($203|0);
  do {
   if ($204) {
    $205 = $__cp;
    $__pp = $205;
   } else {
    $206 = $__chash;
    $53 = $81;
    $54 = $206;
    $207 = $53;
    $208 = $54;
    $52 = $207;
    $209 = $52;
    $51 = $209;
    $210 = $51;
    $211 = HEAP32[$210>>2]|0;
    $212 = (($211) + ($208<<2)|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = ($213|0)==(0|0);
    if ($214) {
     $215 = $__pp;
     $216 = $__chash;
     $57 = $81;
     $58 = $216;
     $217 = $57;
     $218 = $58;
     $56 = $217;
     $219 = $56;
     $55 = $219;
     $220 = $55;
     $221 = HEAP32[$220>>2]|0;
     $222 = (($221) + ($218<<2)|0);
     HEAP32[$222>>2] = $215;
     $223 = $__cp;
     $__pp = $223;
     $224 = $__chash;
     $__phash = $224;
     break;
    }
    $225 = $__cp;
    $__np = $225;
    while(1) {
     $226 = $__np;
     $227 = HEAP32[$226>>2]|0;
     $228 = ($227|0)!=(0|0);
     if (!($228)) {
      break;
     }
     $61 = $81;
     $229 = $61;
     $230 = ((($229)) + 16|0);
     $60 = $230;
     $231 = $60;
     $59 = $231;
     $232 = $59;
     $233 = $__cp;
     $234 = ((($233)) + 8|0);
     $235 = $__np;
     $236 = HEAP32[$235>>2]|0;
     $237 = ((($236)) + 8|0);
     $65 = $232;
     $66 = $234;
     $67 = $237;
     $238 = $65;
     $239 = $66;
     $240 = $67;
     $241 = (__ZNKSt3__18equal_toIN4rhea8variableEEclERKS2_S5_($238,$239,$240)|0);
     if (!($241)) {
      break;
     }
     $242 = $__np;
     $243 = HEAP32[$242>>2]|0;
     $__np = $243;
    }
    $244 = $__np;
    $245 = HEAP32[$244>>2]|0;
    $246 = $__pp;
    HEAP32[$246>>2] = $245;
    $247 = $__chash;
    $70 = $81;
    $71 = $247;
    $248 = $70;
    $249 = $71;
    $69 = $248;
    $250 = $69;
    $68 = $250;
    $251 = $68;
    $252 = HEAP32[$251>>2]|0;
    $253 = (($252) + ($249<<2)|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = HEAP32[$254>>2]|0;
    $256 = $__np;
    HEAP32[$256>>2] = $255;
    $257 = $__cp;
    $258 = $__chash;
    $74 = $81;
    $75 = $258;
    $259 = $74;
    $260 = $75;
    $73 = $259;
    $261 = $73;
    $72 = $261;
    $262 = $72;
    $263 = HEAP32[$262>>2]|0;
    $264 = (($263) + ($260<<2)|0);
    $265 = HEAP32[$264>>2]|0;
    HEAP32[$265>>2] = $257;
   }
  } while(0);
  $266 = $__pp;
  $267 = HEAP32[$266>>2]|0;
  $__cp = $267;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEE20__node_insert_uniqueEPNS_11__hash_nodeISC_PvEE($agg$result,$this,$__nd) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0;
 var $__inserted = 0, $__ndptr = 0, $__pn = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $33 = sp;
 $36 = sp + 376|0;
 $__inserted = sp + 377|0;
 $88 = sp + 248|0;
 $89 = sp + 364|0;
 $90 = sp + 140|0;
 $86 = $this;
 $87 = $__nd;
 $91 = $86;
 $85 = $91;
 $92 = $85;
 $93 = ((($92)) + 12|0);
 $84 = $93;
 $94 = $84;
 $83 = $94;
 $95 = $83;
 $96 = $87;
 $97 = ((($96)) + 8|0);
 $44 = $95;
 $45 = $97;
 $98 = $44;
 $99 = $45;
 $100 = (__ZNKSt3__14hashIN4rhea8variableEEclERKS2_($98,$99)|0);
 $101 = $87;
 $102 = ((($101)) + 4|0);
 HEAP32[$102>>2] = $100;
 $43 = $91;
 $103 = $43;
 $42 = $103;
 $104 = $42;
 $41 = $104;
 $105 = $41;
 $40 = $105;
 $106 = $40;
 $107 = ((($106)) + 4|0);
 $39 = $107;
 $108 = $39;
 $38 = $108;
 $109 = $38;
 $37 = $109;
 $110 = $37;
 $111 = HEAP32[$110>>2]|0;
 $__bc = $111;
 HEAP8[$__inserted>>0] = 0;
 $112 = $__bc;
 $113 = ($112|0)!=(0);
 L1: do {
  if ($113) {
   $114 = $87;
   $115 = ((($114)) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $__bc;
   $25 = $116;
   $26 = $117;
   $118 = $26;
   $119 = $26;
   $120 = (($119) - 1)|0;
   $121 = $118 & $120;
   $122 = ($121|0)!=(0);
   $123 = $25;
   $124 = $26;
   if ($122) {
    $127 = (($123>>>0) % ($124>>>0))&-1;
    $128 = $127;
   } else {
    $125 = (($124) - 1)|0;
    $126 = $123 & $125;
    $128 = $126;
   }
   $__chash = $128;
   $129 = $__chash;
   $7 = $91;
   $8 = $129;
   $130 = $7;
   $131 = $8;
   $6 = $130;
   $132 = $6;
   $5 = $132;
   $133 = $5;
   $134 = HEAP32[$133>>2]|0;
   $135 = (($134) + ($131<<2)|0);
   $136 = HEAP32[$135>>2]|0;
   $__ndptr = $136;
   $137 = $__ndptr;
   $138 = ($137|0)!=(0|0);
   if ($138) {
    $139 = $__ndptr;
    $140 = HEAP32[$139>>2]|0;
    $__ndptr = $140;
    while(1) {
     $141 = $__ndptr;
     $142 = ($141|0)!=(0|0);
     if (!($142)) {
      break L1;
     }
     $143 = $__ndptr;
     $144 = ((($143)) + 4|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = $__bc;
     $0 = $145;
     $1 = $146;
     $147 = $1;
     $148 = $1;
     $149 = (($148) - 1)|0;
     $150 = $147 & $149;
     $151 = ($150|0)!=(0);
     $152 = $0;
     $153 = $1;
     if ($151) {
      $156 = (($152>>>0) % ($153>>>0))&-1;
      $159 = $156;
     } else {
      $154 = (($153) - 1)|0;
      $155 = $152 & $154;
      $159 = $155;
     }
     $157 = $__chash;
     $158 = ($159|0)==($157|0);
     if (!($158)) {
      break L1;
     }
     $4 = $91;
     $160 = $4;
     $161 = ((($160)) + 16|0);
     $3 = $161;
     $162 = $3;
     $2 = $162;
     $163 = $2;
     $164 = $__ndptr;
     $165 = ((($164)) + 8|0);
     $166 = $87;
     $167 = ((($166)) + 8|0);
     $9 = $163;
     $10 = $165;
     $11 = $167;
     $168 = $9;
     $169 = $10;
     $170 = $11;
     $171 = (__ZNKSt3__18equal_toIN4rhea8variableEEclERKS2_S5_($168,$169,$170)|0);
     if ($171) {
      break;
     }
     $172 = $__ndptr;
     $173 = HEAP32[$172>>2]|0;
     $__ndptr = $173;
    }
    $326 = $__ndptr;
    $76 = $90;
    $77 = $326;
    $327 = $76;
    $328 = $77;
    HEAP32[$327>>2] = $328;
    $80 = $agg$result;
    $81 = $90;
    $82 = $__inserted;
    $329 = $80;
    $330 = $81;
    $79 = $330;
    $331 = $79;
    ;HEAP32[$329>>2]=HEAP32[$331>>2]|0;
    $332 = ((($329)) + 4|0);
    $333 = $82;
    $78 = $333;
    $334 = $78;
    $335 = HEAP8[$334>>0]|0;
    $336 = $335&1;
    $337 = $336&1;
    HEAP8[$332>>0] = $337;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $14 = $91;
 $174 = $14;
 $175 = ((($174)) + 12|0);
 $13 = $175;
 $176 = $13;
 $12 = $176;
 $177 = $12;
 $178 = HEAP32[$177>>2]|0;
 $179 = (($178) + 1)|0;
 $180 = (+($179>>>0));
 $181 = $__bc;
 $182 = (+($181>>>0));
 $17 = $91;
 $183 = $17;
 $184 = ((($183)) + 16|0);
 $16 = $184;
 $185 = $16;
 $15 = $185;
 $186 = $15;
 $187 = +HEAPF32[$186>>2];
 $188 = $182 * $187;
 $189 = $180 > $188;
 $190 = $__bc;
 $191 = ($190|0)==(0);
 $or$cond = $189 | $191;
 if ($or$cond) {
  $192 = $__bc;
  $193 = $192<<1;
  $194 = $__bc;
  $18 = $194;
  $195 = $18;
  $196 = ($195>>>0)>(2);
  if ($196) {
   $197 = $18;
   $198 = $18;
   $199 = (($198) - 1)|0;
   $200 = $197 & $199;
   $201 = ($200|0)!=(0);
   $202 = $201 ^ 1;
   $204 = $202;
  } else {
   $204 = 0;
  }
  $203 = $204 ^ 1;
  $205 = $203&1;
  $206 = (($193) + ($205))|0;
  HEAP32[$88>>2] = $206;
  $21 = $91;
  $207 = $21;
  $208 = ((($207)) + 12|0);
  $20 = $208;
  $209 = $20;
  $19 = $209;
  $210 = $19;
  $211 = HEAP32[$210>>2]|0;
  $212 = (($211) + 1)|0;
  $213 = (+($212>>>0));
  $24 = $91;
  $214 = $24;
  $215 = ((($214)) + 16|0);
  $23 = $215;
  $216 = $23;
  $22 = $216;
  $217 = $22;
  $218 = +HEAPF32[$217>>2];
  $219 = $213 / $218;
  $27 = $219;
  $220 = $27;
  $221 = (+Math_ceil((+$220)));
  $222 = (~~(($221))>>>0);
  HEAP32[$89>>2] = $222;
  $34 = $88;
  $35 = $89;
  $223 = $34;
  $224 = $35;
  ;HEAP8[$33>>0]=HEAP8[$36>>0]|0;
  $31 = $223;
  $32 = $224;
  $225 = $31;
  $226 = $32;
  $28 = $33;
  $29 = $225;
  $30 = $226;
  $227 = $29;
  $228 = HEAP32[$227>>2]|0;
  $229 = $30;
  $230 = HEAP32[$229>>2]|0;
  $231 = ($228>>>0)<($230>>>0);
  $232 = $32;
  $233 = $31;
  $234 = $231 ? $232 : $233;
  $235 = HEAP32[$234>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEE6rehashEj($91,$235);
  $52 = $91;
  $236 = $52;
  $51 = $236;
  $237 = $51;
  $50 = $237;
  $238 = $50;
  $49 = $238;
  $239 = $49;
  $240 = ((($239)) + 4|0);
  $48 = $240;
  $241 = $48;
  $47 = $241;
  $242 = $47;
  $46 = $242;
  $243 = $46;
  $244 = HEAP32[$243>>2]|0;
  $__bc = $244;
  $245 = $87;
  $246 = ((($245)) + 4|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = $__bc;
  $53 = $247;
  $54 = $248;
  $249 = $54;
  $250 = $54;
  $251 = (($250) - 1)|0;
  $252 = $249 & $251;
  $253 = ($252|0)!=(0);
  $254 = $53;
  $255 = $54;
  if ($253) {
   $258 = (($254>>>0) % ($255>>>0))&-1;
   $259 = $258;
  } else {
   $256 = (($255) - 1)|0;
   $257 = $254 & $256;
   $259 = $257;
  }
  $__chash = $259;
 }
 $260 = $__chash;
 $57 = $91;
 $58 = $260;
 $261 = $57;
 $262 = $58;
 $56 = $261;
 $263 = $56;
 $55 = $263;
 $264 = $55;
 $265 = HEAP32[$264>>2]|0;
 $266 = (($265) + ($262<<2)|0);
 $267 = HEAP32[$266>>2]|0;
 $__pn = $267;
 $268 = $__pn;
 $269 = ($268|0)==(0|0);
 if ($269) {
  $270 = ((($91)) + 8|0);
  $60 = $270;
  $271 = $60;
  $59 = $271;
  $272 = $59;
  $62 = $272;
  $273 = $62;
  $61 = $273;
  $274 = $61;
  $__pn = $274;
  $275 = $__pn;
  $276 = HEAP32[$275>>2]|0;
  $277 = $87;
  HEAP32[$277>>2] = $276;
  $278 = $87;
  $279 = $__pn;
  HEAP32[$279>>2] = $278;
  $280 = $__pn;
  $281 = $__chash;
  $65 = $91;
  $66 = $281;
  $282 = $65;
  $283 = $66;
  $64 = $282;
  $284 = $64;
  $63 = $284;
  $285 = $63;
  $286 = HEAP32[$285>>2]|0;
  $287 = (($286) + ($283<<2)|0);
  HEAP32[$287>>2] = $280;
  $288 = $87;
  $289 = HEAP32[$288>>2]|0;
  $290 = ($289|0)!=(0|0);
  if ($290) {
   $291 = $87;
   $292 = $87;
   $293 = HEAP32[$292>>2]|0;
   $294 = ((($293)) + 4|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = $__bc;
   $67 = $295;
   $68 = $296;
   $297 = $68;
   $298 = $68;
   $299 = (($298) - 1)|0;
   $300 = $297 & $299;
   $301 = ($300|0)!=(0);
   $302 = $67;
   $303 = $68;
   if ($301) {
    $306 = (($302>>>0) % ($303>>>0))&-1;
    $307 = $306;
   } else {
    $304 = (($303) - 1)|0;
    $305 = $302 & $304;
    $307 = $305;
   }
   $71 = $91;
   $72 = $307;
   $308 = $71;
   $309 = $72;
   $70 = $308;
   $310 = $70;
   $69 = $310;
   $311 = $69;
   $312 = HEAP32[$311>>2]|0;
   $313 = (($312) + ($309<<2)|0);
   HEAP32[$313>>2] = $291;
  }
 } else {
  $314 = $__pn;
  $315 = HEAP32[$314>>2]|0;
  $316 = $87;
  HEAP32[$316>>2] = $315;
  $317 = $87;
  $318 = $__pn;
  HEAP32[$318>>2] = $317;
 }
 $319 = $87;
 $__ndptr = $319;
 $75 = $91;
 $320 = $75;
 $321 = ((($320)) + 12|0);
 $74 = $321;
 $322 = $74;
 $73 = $322;
 $323 = $73;
 $324 = HEAP32[$323>>2]|0;
 $325 = (($324) + 1)|0;
 HEAP32[$323>>2] = $325;
 HEAP8[$__inserted>>0] = 1;
 $326 = $__ndptr;
 $76 = $90;
 $77 = $326;
 $327 = $76;
 $328 = $77;
 HEAP32[$327>>2] = $328;
 $80 = $agg$result;
 $81 = $90;
 $82 = $__inserted;
 $329 = $80;
 $330 = $81;
 $79 = $330;
 $331 = $79;
 ;HEAP32[$329>>2]=HEAP32[$331>>2]|0;
 $332 = ((($329)) + 4|0);
 $333 = $82;
 $78 = $333;
 $334 = $78;
 $335 = HEAP8[$334>>0]|0;
 $336 = $335&1;
 $337 = $336&1;
 HEAP8[$332>>0] = $337;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE6rehashEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $21 = sp;
 $24 = sp + 144|0;
 $34 = sp + 124|0;
 $35 = sp + 92|0;
 $33 = $this;
 HEAP32[$34>>2] = $__n;
 $36 = $33;
 $37 = HEAP32[$34>>2]|0;
 $38 = ($37|0)==(1);
 if ($38) {
  HEAP32[$34>>2] = 2;
 } else {
  $39 = HEAP32[$34>>2]|0;
  $40 = HEAP32[$34>>2]|0;
  $41 = (($40) - 1)|0;
  $42 = $39 & $41;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = HEAP32[$34>>2]|0;
   $45 = (__ZNSt3__112__next_primeEj($44)|0);
   HEAP32[$34>>2] = $45;
  }
 }
 $32 = $36;
 $46 = $32;
 $31 = $46;
 $47 = $31;
 $30 = $47;
 $48 = $30;
 $29 = $48;
 $49 = $29;
 $50 = ((($49)) + 4|0);
 $28 = $50;
 $51 = $28;
 $27 = $51;
 $52 = $27;
 $26 = $52;
 $53 = $26;
 $54 = HEAP32[$53>>2]|0;
 $__bc = $54;
 $55 = HEAP32[$34>>2]|0;
 $56 = $__bc;
 $57 = ($55>>>0)>($56>>>0);
 $58 = HEAP32[$34>>2]|0;
 if ($57) {
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE8__rehashEj($36,$58);
  STACKTOP = sp;return;
 }
 $59 = $__bc;
 $60 = ($58>>>0)<($59>>>0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $61 = $__bc;
 $25 = $61;
 $62 = $25;
 $63 = ($62>>>0)>(2);
 if ($63) {
  $64 = $25;
  $65 = $25;
  $66 = (($65) - 1)|0;
  $67 = $64 & $66;
  $68 = ($67|0)!=(0);
  $69 = $68 ^ 1;
  if ($69) {
   $14 = $36;
   $70 = $14;
   $71 = ((($70)) + 12|0);
   $13 = $71;
   $72 = $13;
   $12 = $72;
   $73 = $12;
   $74 = HEAP32[$73>>2]|0;
   $75 = (+($74>>>0));
   $2 = $36;
   $76 = $2;
   $77 = ((($76)) + 16|0);
   $1 = $77;
   $78 = $1;
   $0 = $78;
   $79 = $0;
   $80 = +HEAPF32[$79>>2];
   $81 = $75 / $80;
   $3 = $81;
   $82 = $3;
   $83 = (+Math_ceil((+$82)));
   $84 = (~~(($83))>>>0);
   $5 = $84;
   $85 = $5;
   $86 = (($85) - 1)|0;
   $4 = $86;
   $87 = $4;
   $88 = (Math_clz32(($87|0))|0);
   $89 = (32 - ($88))|0;
   $90 = 1 << $89;
   $107 = $90;
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $8 = $36;
  $91 = $8;
  $92 = ((($91)) + 12|0);
  $7 = $92;
  $93 = $7;
  $6 = $93;
  $94 = $6;
  $95 = HEAP32[$94>>2]|0;
  $96 = (+($95>>>0));
  $11 = $36;
  $97 = $11;
  $98 = ((($97)) + 16|0);
  $10 = $98;
  $99 = $10;
  $9 = $99;
  $100 = $9;
  $101 = +HEAPF32[$100>>2];
  $102 = $96 / $101;
  $15 = $102;
  $103 = $15;
  $104 = (+Math_ceil((+$103)));
  $105 = (~~(($104))>>>0);
  $106 = (__ZNSt3__112__next_primeEj($105)|0);
  $107 = $106;
 }
 HEAP32[$35>>2] = $107;
 $22 = $34;
 $23 = $35;
 $108 = $22;
 $109 = $23;
 ;HEAP8[$21>>0]=HEAP8[$24>>0]|0;
 $19 = $108;
 $20 = $109;
 $110 = $19;
 $111 = $20;
 $16 = $21;
 $17 = $110;
 $18 = $111;
 $112 = $17;
 $113 = HEAP32[$112>>2]|0;
 $114 = $18;
 $115 = HEAP32[$114>>2]|0;
 $116 = ($113>>>0)<($115>>>0);
 $117 = $20;
 $118 = $19;
 $119 = $116 ? $117 : $118;
 $120 = HEAP32[$119>>2]|0;
 HEAP32[$34>>2] = $120;
 $121 = HEAP32[$34>>2]|0;
 $122 = $__bc;
 $123 = ($121>>>0)<($122>>>0);
 if (!($123)) {
  STACKTOP = sp;return;
 }
 $124 = HEAP32[$34>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE8__rehashEj($36,$124);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE8__rehashEj($this,$__nbc) {
 $this = $this|0;
 $__nbc = $__nbc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__chash = 0, $__cp = 0, $__i = 0, $__np = 0, $__npa = 0, $__phash = 0, $__pp = 0, $__tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $79 = $this;
 $80 = $__nbc;
 $81 = $79;
 $78 = $81;
 $82 = $78;
 $77 = $82;
 $83 = $77;
 $76 = $83;
 $84 = $76;
 $85 = ((($84)) + 4|0);
 $64 = $85;
 $86 = $64;
 $63 = $86;
 $87 = $63;
 $62 = $87;
 $88 = $62;
 $__npa = $88;
 $89 = $80;
 $90 = ($89>>>0)>(0);
 if ($90) {
  $91 = $__npa;
  $92 = $80;
  $4 = $91;
  $5 = $92;
  $93 = $4;
  $94 = $5;
  $1 = $93;
  $2 = $94;
  $3 = 0;
  $95 = $2;
  $96 = $95<<2;
  $0 = $96;
  $97 = $0;
  $98 = (__Znwj($97)|0);
  $99 = $98;
 } else {
  $99 = 0;
 }
 $27 = $81;
 $28 = $99;
 $100 = $27;
 $26 = $100;
 $101 = $26;
 $25 = $101;
 $102 = $25;
 $103 = HEAP32[$102>>2]|0;
 $__tmp$i = $103;
 $104 = $28;
 $9 = $100;
 $105 = $9;
 $8 = $105;
 $106 = $8;
 HEAP32[$106>>2] = $104;
 $107 = $__tmp$i;
 $108 = ($107|0)!=(0|0);
 if ($108) {
  $7 = $100;
  $109 = $7;
  $6 = $109;
  $110 = $6;
  $111 = ((($110)) + 4|0);
  $112 = $__tmp$i;
  $23 = $111;
  $24 = $112;
  $113 = $23;
  $22 = $113;
  $114 = $22;
  $21 = $114;
  $115 = $21;
  $20 = $115;
  $116 = $20;
  $117 = $24;
  $12 = $113;
  $118 = $12;
  $11 = $118;
  $119 = $11;
  $10 = $119;
  $120 = $10;
  $121 = HEAP32[$120>>2]|0;
  $17 = $116;
  $18 = $117;
  $19 = $121;
  $122 = $17;
  $123 = $18;
  $124 = $19;
  $14 = $122;
  $15 = $123;
  $16 = $124;
  $125 = $15;
  $13 = $125;
  $126 = $13;
  __ZdlPv($126);
 }
 $127 = $80;
 $31 = $81;
 $128 = $31;
 $30 = $128;
 $129 = $30;
 $29 = $129;
 $130 = $29;
 $131 = ((($130)) + 4|0);
 $34 = $131;
 $132 = $34;
 $33 = $132;
 $133 = $33;
 $32 = $133;
 $134 = $32;
 HEAP32[$134>>2] = $127;
 $135 = $80;
 $136 = ($135>>>0)>(0);
 if (!($136)) {
  STACKTOP = sp;return;
 }
 $__i = 0;
 while(1) {
  $137 = $__i;
  $138 = $80;
  $139 = ($137>>>0)<($138>>>0);
  if (!($139)) {
   break;
  }
  $140 = $__i;
  $37 = $81;
  $38 = $140;
  $141 = $37;
  $142 = $38;
  $36 = $141;
  $143 = $36;
  $35 = $143;
  $144 = $35;
  $145 = HEAP32[$144>>2]|0;
  $146 = (($145) + ($142<<2)|0);
  HEAP32[$146>>2] = 0;
  $147 = $__i;
  $148 = (($147) + 1)|0;
  $__i = $148;
 }
 $149 = ((($81)) + 8|0);
 $40 = $149;
 $150 = $40;
 $39 = $150;
 $151 = $39;
 $42 = $151;
 $152 = $42;
 $41 = $152;
 $153 = $41;
 $__pp = $153;
 $154 = $__pp;
 $155 = HEAP32[$154>>2]|0;
 $__cp = $155;
 $156 = $__cp;
 $157 = ($156|0)!=(0|0);
 if (!($157)) {
  STACKTOP = sp;return;
 }
 $158 = $__cp;
 $159 = ((($158)) + 4|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = $80;
 $43 = $160;
 $44 = $161;
 $162 = $44;
 $163 = $44;
 $164 = (($163) - 1)|0;
 $165 = $162 & $164;
 $166 = ($165|0)!=(0);
 $167 = $43;
 $168 = $44;
 if ($166) {
  $171 = (($167>>>0) % ($168>>>0))&-1;
  $172 = $171;
 } else {
  $169 = (($168) - 1)|0;
  $170 = $167 & $169;
  $172 = $170;
 }
 $__chash = $172;
 $173 = $__pp;
 $174 = $__chash;
 $47 = $81;
 $48 = $174;
 $175 = $47;
 $176 = $48;
 $46 = $175;
 $177 = $46;
 $45 = $177;
 $178 = $45;
 $179 = HEAP32[$178>>2]|0;
 $180 = (($179) + ($176<<2)|0);
 HEAP32[$180>>2] = $173;
 $181 = $__chash;
 $__phash = $181;
 $182 = $__cp;
 $__pp = $182;
 $183 = $__cp;
 $184 = HEAP32[$183>>2]|0;
 $__cp = $184;
 while(1) {
  $185 = $__cp;
  $186 = ($185|0)!=(0|0);
  if (!($186)) {
   break;
  }
  $187 = $__cp;
  $188 = ((($187)) + 4|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = $80;
  $49 = $189;
  $50 = $190;
  $191 = $50;
  $192 = $50;
  $193 = (($192) - 1)|0;
  $194 = $191 & $193;
  $195 = ($194|0)!=(0);
  $196 = $49;
  $197 = $50;
  if ($195) {
   $200 = (($196>>>0) % ($197>>>0))&-1;
   $201 = $200;
  } else {
   $198 = (($197) - 1)|0;
   $199 = $196 & $198;
   $201 = $199;
  }
  $__chash = $201;
  $202 = $__chash;
  $203 = $__phash;
  $204 = ($202|0)==($203|0);
  do {
   if ($204) {
    $205 = $__cp;
    $__pp = $205;
   } else {
    $206 = $__chash;
    $53 = $81;
    $54 = $206;
    $207 = $53;
    $208 = $54;
    $52 = $207;
    $209 = $52;
    $51 = $209;
    $210 = $51;
    $211 = HEAP32[$210>>2]|0;
    $212 = (($211) + ($208<<2)|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = ($213|0)==(0|0);
    if ($214) {
     $215 = $__pp;
     $216 = $__chash;
     $57 = $81;
     $58 = $216;
     $217 = $57;
     $218 = $58;
     $56 = $217;
     $219 = $56;
     $55 = $219;
     $220 = $55;
     $221 = HEAP32[$220>>2]|0;
     $222 = (($221) + ($218<<2)|0);
     HEAP32[$222>>2] = $215;
     $223 = $__cp;
     $__pp = $223;
     $224 = $__chash;
     $__phash = $224;
     break;
    }
    $225 = $__cp;
    $__np = $225;
    while(1) {
     $226 = $__np;
     $227 = HEAP32[$226>>2]|0;
     $228 = ($227|0)!=(0|0);
     if (!($228)) {
      break;
     }
     $61 = $81;
     $229 = $61;
     $230 = ((($229)) + 16|0);
     $60 = $230;
     $231 = $60;
     $59 = $231;
     $232 = $59;
     $233 = $__cp;
     $234 = ((($233)) + 8|0);
     $235 = $__np;
     $236 = HEAP32[$235>>2]|0;
     $237 = ((($236)) + 8|0);
     $65 = $232;
     $66 = $234;
     $67 = $237;
     $238 = $65;
     $239 = $66;
     $240 = $67;
     $241 = (__ZNKSt3__18equal_toIN4rhea8variableEEclERKS2_S5_($238,$239,$240)|0);
     if (!($241)) {
      break;
     }
     $242 = $__np;
     $243 = HEAP32[$242>>2]|0;
     $__np = $243;
    }
    $244 = $__np;
    $245 = HEAP32[$244>>2]|0;
    $246 = $__pp;
    HEAP32[$246>>2] = $245;
    $247 = $__chash;
    $70 = $81;
    $71 = $247;
    $248 = $70;
    $249 = $71;
    $69 = $248;
    $250 = $69;
    $68 = $250;
    $251 = $68;
    $252 = HEAP32[$251>>2]|0;
    $253 = (($252) + ($249<<2)|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = HEAP32[$254>>2]|0;
    $256 = $__np;
    HEAP32[$256>>2] = $255;
    $257 = $__cp;
    $258 = $__chash;
    $74 = $81;
    $75 = $258;
    $259 = $74;
    $260 = $75;
    $73 = $259;
    $261 = $73;
    $72 = $261;
    $262 = $72;
    $263 = HEAP32[$262>>2]|0;
    $264 = (($263) + ($260<<2)|0);
    $265 = HEAP32[$264>>2]|0;
    HEAP32[$265>>2] = $257;
   }
  } while(0);
  $266 = $__pp;
  $267 = HEAP32[$266>>2]|0;
  $__cp = $267;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS5_PvEE($agg$result,$this,$__nd) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0;
 var $__inserted = 0, $__ndptr = 0, $__pn = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $33 = sp;
 $36 = sp + 376|0;
 $__inserted = sp + 377|0;
 $88 = sp + 248|0;
 $89 = sp + 364|0;
 $90 = sp + 140|0;
 $86 = $this;
 $87 = $__nd;
 $91 = $86;
 $85 = $91;
 $92 = $85;
 $93 = ((($92)) + 12|0);
 $84 = $93;
 $94 = $84;
 $83 = $94;
 $95 = $83;
 $96 = $87;
 $97 = ((($96)) + 8|0);
 $44 = $95;
 $45 = $97;
 $98 = $44;
 $99 = $45;
 $100 = (__ZNKSt3__14hashIN4rhea8variableEEclERKS2_($98,$99)|0);
 $101 = $87;
 $102 = ((($101)) + 4|0);
 HEAP32[$102>>2] = $100;
 $43 = $91;
 $103 = $43;
 $42 = $103;
 $104 = $42;
 $41 = $104;
 $105 = $41;
 $40 = $105;
 $106 = $40;
 $107 = ((($106)) + 4|0);
 $39 = $107;
 $108 = $39;
 $38 = $108;
 $109 = $38;
 $37 = $109;
 $110 = $37;
 $111 = HEAP32[$110>>2]|0;
 $__bc = $111;
 HEAP8[$__inserted>>0] = 0;
 $112 = $__bc;
 $113 = ($112|0)!=(0);
 L1: do {
  if ($113) {
   $114 = $87;
   $115 = ((($114)) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $__bc;
   $25 = $116;
   $26 = $117;
   $118 = $26;
   $119 = $26;
   $120 = (($119) - 1)|0;
   $121 = $118 & $120;
   $122 = ($121|0)!=(0);
   $123 = $25;
   $124 = $26;
   if ($122) {
    $127 = (($123>>>0) % ($124>>>0))&-1;
    $128 = $127;
   } else {
    $125 = (($124) - 1)|0;
    $126 = $123 & $125;
    $128 = $126;
   }
   $__chash = $128;
   $129 = $__chash;
   $7 = $91;
   $8 = $129;
   $130 = $7;
   $131 = $8;
   $6 = $130;
   $132 = $6;
   $5 = $132;
   $133 = $5;
   $134 = HEAP32[$133>>2]|0;
   $135 = (($134) + ($131<<2)|0);
   $136 = HEAP32[$135>>2]|0;
   $__ndptr = $136;
   $137 = $__ndptr;
   $138 = ($137|0)!=(0|0);
   if ($138) {
    $139 = $__ndptr;
    $140 = HEAP32[$139>>2]|0;
    $__ndptr = $140;
    while(1) {
     $141 = $__ndptr;
     $142 = ($141|0)!=(0|0);
     if (!($142)) {
      break L1;
     }
     $143 = $__ndptr;
     $144 = ((($143)) + 4|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = $__bc;
     $0 = $145;
     $1 = $146;
     $147 = $1;
     $148 = $1;
     $149 = (($148) - 1)|0;
     $150 = $147 & $149;
     $151 = ($150|0)!=(0);
     $152 = $0;
     $153 = $1;
     if ($151) {
      $156 = (($152>>>0) % ($153>>>0))&-1;
      $159 = $156;
     } else {
      $154 = (($153) - 1)|0;
      $155 = $152 & $154;
      $159 = $155;
     }
     $157 = $__chash;
     $158 = ($159|0)==($157|0);
     if (!($158)) {
      break L1;
     }
     $4 = $91;
     $160 = $4;
     $161 = ((($160)) + 16|0);
     $3 = $161;
     $162 = $3;
     $2 = $162;
     $163 = $2;
     $164 = $__ndptr;
     $165 = ((($164)) + 8|0);
     $166 = $87;
     $167 = ((($166)) + 8|0);
     $9 = $163;
     $10 = $165;
     $11 = $167;
     $168 = $9;
     $169 = $10;
     $170 = $11;
     $171 = (__ZNKSt3__18equal_toIN4rhea8variableEEclERKS2_S5_($168,$169,$170)|0);
     if ($171) {
      break;
     }
     $172 = $__ndptr;
     $173 = HEAP32[$172>>2]|0;
     $__ndptr = $173;
    }
    $326 = $__ndptr;
    $76 = $90;
    $77 = $326;
    $327 = $76;
    $328 = $77;
    HEAP32[$327>>2] = $328;
    $80 = $agg$result;
    $81 = $90;
    $82 = $__inserted;
    $329 = $80;
    $330 = $81;
    $79 = $330;
    $331 = $79;
    ;HEAP32[$329>>2]=HEAP32[$331>>2]|0;
    $332 = ((($329)) + 4|0);
    $333 = $82;
    $78 = $333;
    $334 = $78;
    $335 = HEAP8[$334>>0]|0;
    $336 = $335&1;
    $337 = $336&1;
    HEAP8[$332>>0] = $337;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $14 = $91;
 $174 = $14;
 $175 = ((($174)) + 12|0);
 $13 = $175;
 $176 = $13;
 $12 = $176;
 $177 = $12;
 $178 = HEAP32[$177>>2]|0;
 $179 = (($178) + 1)|0;
 $180 = (+($179>>>0));
 $181 = $__bc;
 $182 = (+($181>>>0));
 $17 = $91;
 $183 = $17;
 $184 = ((($183)) + 16|0);
 $16 = $184;
 $185 = $16;
 $15 = $185;
 $186 = $15;
 $187 = +HEAPF32[$186>>2];
 $188 = $182 * $187;
 $189 = $180 > $188;
 $190 = $__bc;
 $191 = ($190|0)==(0);
 $or$cond = $189 | $191;
 if ($or$cond) {
  $192 = $__bc;
  $193 = $192<<1;
  $194 = $__bc;
  $18 = $194;
  $195 = $18;
  $196 = ($195>>>0)>(2);
  if ($196) {
   $197 = $18;
   $198 = $18;
   $199 = (($198) - 1)|0;
   $200 = $197 & $199;
   $201 = ($200|0)!=(0);
   $202 = $201 ^ 1;
   $204 = $202;
  } else {
   $204 = 0;
  }
  $203 = $204 ^ 1;
  $205 = $203&1;
  $206 = (($193) + ($205))|0;
  HEAP32[$88>>2] = $206;
  $21 = $91;
  $207 = $21;
  $208 = ((($207)) + 12|0);
  $20 = $208;
  $209 = $20;
  $19 = $209;
  $210 = $19;
  $211 = HEAP32[$210>>2]|0;
  $212 = (($211) + 1)|0;
  $213 = (+($212>>>0));
  $24 = $91;
  $214 = $24;
  $215 = ((($214)) + 16|0);
  $23 = $215;
  $216 = $23;
  $22 = $216;
  $217 = $22;
  $218 = +HEAPF32[$217>>2];
  $219 = $213 / $218;
  $27 = $219;
  $220 = $27;
  $221 = (+Math_ceil((+$220)));
  $222 = (~~(($221))>>>0);
  HEAP32[$89>>2] = $222;
  $34 = $88;
  $35 = $89;
  $223 = $34;
  $224 = $35;
  ;HEAP8[$33>>0]=HEAP8[$36>>0]|0;
  $31 = $223;
  $32 = $224;
  $225 = $31;
  $226 = $32;
  $28 = $33;
  $29 = $225;
  $30 = $226;
  $227 = $29;
  $228 = HEAP32[$227>>2]|0;
  $229 = $30;
  $230 = HEAP32[$229>>2]|0;
  $231 = ($228>>>0)<($230>>>0);
  $232 = $32;
  $233 = $31;
  $234 = $231 ? $232 : $233;
  $235 = HEAP32[$234>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE6rehashEj($91,$235);
  $52 = $91;
  $236 = $52;
  $51 = $236;
  $237 = $51;
  $50 = $237;
  $238 = $50;
  $49 = $238;
  $239 = $49;
  $240 = ((($239)) + 4|0);
  $48 = $240;
  $241 = $48;
  $47 = $241;
  $242 = $47;
  $46 = $242;
  $243 = $46;
  $244 = HEAP32[$243>>2]|0;
  $__bc = $244;
  $245 = $87;
  $246 = ((($245)) + 4|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = $__bc;
  $53 = $247;
  $54 = $248;
  $249 = $54;
  $250 = $54;
  $251 = (($250) - 1)|0;
  $252 = $249 & $251;
  $253 = ($252|0)!=(0);
  $254 = $53;
  $255 = $54;
  if ($253) {
   $258 = (($254>>>0) % ($255>>>0))&-1;
   $259 = $258;
  } else {
   $256 = (($255) - 1)|0;
   $257 = $254 & $256;
   $259 = $257;
  }
  $__chash = $259;
 }
 $260 = $__chash;
 $57 = $91;
 $58 = $260;
 $261 = $57;
 $262 = $58;
 $56 = $261;
 $263 = $56;
 $55 = $263;
 $264 = $55;
 $265 = HEAP32[$264>>2]|0;
 $266 = (($265) + ($262<<2)|0);
 $267 = HEAP32[$266>>2]|0;
 $__pn = $267;
 $268 = $__pn;
 $269 = ($268|0)==(0|0);
 if ($269) {
  $270 = ((($91)) + 8|0);
  $60 = $270;
  $271 = $60;
  $59 = $271;
  $272 = $59;
  $62 = $272;
  $273 = $62;
  $61 = $273;
  $274 = $61;
  $__pn = $274;
  $275 = $__pn;
  $276 = HEAP32[$275>>2]|0;
  $277 = $87;
  HEAP32[$277>>2] = $276;
  $278 = $87;
  $279 = $__pn;
  HEAP32[$279>>2] = $278;
  $280 = $__pn;
  $281 = $__chash;
  $65 = $91;
  $66 = $281;
  $282 = $65;
  $283 = $66;
  $64 = $282;
  $284 = $64;
  $63 = $284;
  $285 = $63;
  $286 = HEAP32[$285>>2]|0;
  $287 = (($286) + ($283<<2)|0);
  HEAP32[$287>>2] = $280;
  $288 = $87;
  $289 = HEAP32[$288>>2]|0;
  $290 = ($289|0)!=(0|0);
  if ($290) {
   $291 = $87;
   $292 = $87;
   $293 = HEAP32[$292>>2]|0;
   $294 = ((($293)) + 4|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = $__bc;
   $67 = $295;
   $68 = $296;
   $297 = $68;
   $298 = $68;
   $299 = (($298) - 1)|0;
   $300 = $297 & $299;
   $301 = ($300|0)!=(0);
   $302 = $67;
   $303 = $68;
   if ($301) {
    $306 = (($302>>>0) % ($303>>>0))&-1;
    $307 = $306;
   } else {
    $304 = (($303) - 1)|0;
    $305 = $302 & $304;
    $307 = $305;
   }
   $71 = $91;
   $72 = $307;
   $308 = $71;
   $309 = $72;
   $70 = $308;
   $310 = $70;
   $69 = $310;
   $311 = $69;
   $312 = HEAP32[$311>>2]|0;
   $313 = (($312) + ($309<<2)|0);
   HEAP32[$313>>2] = $291;
  }
 } else {
  $314 = $__pn;
  $315 = HEAP32[$314>>2]|0;
  $316 = $87;
  HEAP32[$316>>2] = $315;
  $317 = $87;
  $318 = $__pn;
  HEAP32[$318>>2] = $317;
 }
 $319 = $87;
 $__ndptr = $319;
 $75 = $91;
 $320 = $75;
 $321 = ((($320)) + 12|0);
 $74 = $321;
 $322 = $74;
 $73 = $322;
 $323 = $73;
 $324 = HEAP32[$323>>2]|0;
 $325 = (($324) + 1)|0;
 HEAP32[$323>>2] = $325;
 HEAP8[$__inserted>>0] = 1;
 $326 = $__ndptr;
 $76 = $90;
 $77 = $326;
 $327 = $76;
 $328 = $77;
 HEAP32[$327>>2] = $328;
 $80 = $agg$result;
 $81 = $90;
 $82 = $__inserted;
 $329 = $80;
 $330 = $81;
 $79 = $330;
 $331 = $79;
 ;HEAP32[$329>>2]=HEAP32[$331>>2]|0;
 $332 = ((($329)) + 4|0);
 $333 = $82;
 $78 = $333;
 $334 = $78;
 $335 = HEAP8[$334>>0]|0;
 $336 = $335&1;
 $337 = $336&1;
 HEAP8[$332>>0] = $337;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE6rehashEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $21 = sp;
 $24 = sp + 144|0;
 $34 = sp + 124|0;
 $35 = sp + 92|0;
 $33 = $this;
 HEAP32[$34>>2] = $__n;
 $36 = $33;
 $37 = HEAP32[$34>>2]|0;
 $38 = ($37|0)==(1);
 if ($38) {
  HEAP32[$34>>2] = 2;
 } else {
  $39 = HEAP32[$34>>2]|0;
  $40 = HEAP32[$34>>2]|0;
  $41 = (($40) - 1)|0;
  $42 = $39 & $41;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = HEAP32[$34>>2]|0;
   $45 = (__ZNSt3__112__next_primeEj($44)|0);
   HEAP32[$34>>2] = $45;
  }
 }
 $32 = $36;
 $46 = $32;
 $31 = $46;
 $47 = $31;
 $30 = $47;
 $48 = $30;
 $29 = $48;
 $49 = $29;
 $50 = ((($49)) + 4|0);
 $28 = $50;
 $51 = $28;
 $27 = $51;
 $52 = $27;
 $26 = $52;
 $53 = $26;
 $54 = HEAP32[$53>>2]|0;
 $__bc = $54;
 $55 = HEAP32[$34>>2]|0;
 $56 = $__bc;
 $57 = ($55>>>0)>($56>>>0);
 $58 = HEAP32[$34>>2]|0;
 if ($57) {
  __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE8__rehashEj($36,$58);
  STACKTOP = sp;return;
 }
 $59 = $__bc;
 $60 = ($58>>>0)<($59>>>0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $61 = $__bc;
 $25 = $61;
 $62 = $25;
 $63 = ($62>>>0)>(2);
 if ($63) {
  $64 = $25;
  $65 = $25;
  $66 = (($65) - 1)|0;
  $67 = $64 & $66;
  $68 = ($67|0)!=(0);
  $69 = $68 ^ 1;
  if ($69) {
   $14 = $36;
   $70 = $14;
   $71 = ((($70)) + 12|0);
   $13 = $71;
   $72 = $13;
   $12 = $72;
   $73 = $12;
   $74 = HEAP32[$73>>2]|0;
   $75 = (+($74>>>0));
   $2 = $36;
   $76 = $2;
   $77 = ((($76)) + 16|0);
   $1 = $77;
   $78 = $1;
   $0 = $78;
   $79 = $0;
   $80 = +HEAPF32[$79>>2];
   $81 = $75 / $80;
   $3 = $81;
   $82 = $3;
   $83 = (+Math_ceil((+$82)));
   $84 = (~~(($83))>>>0);
   $5 = $84;
   $85 = $5;
   $86 = (($85) - 1)|0;
   $4 = $86;
   $87 = $4;
   $88 = (Math_clz32(($87|0))|0);
   $89 = (32 - ($88))|0;
   $90 = 1 << $89;
   $107 = $90;
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $8 = $36;
  $91 = $8;
  $92 = ((($91)) + 12|0);
  $7 = $92;
  $93 = $7;
  $6 = $93;
  $94 = $6;
  $95 = HEAP32[$94>>2]|0;
  $96 = (+($95>>>0));
  $11 = $36;
  $97 = $11;
  $98 = ((($97)) + 16|0);
  $10 = $98;
  $99 = $10;
  $9 = $99;
  $100 = $9;
  $101 = +HEAPF32[$100>>2];
  $102 = $96 / $101;
  $15 = $102;
  $103 = $15;
  $104 = (+Math_ceil((+$103)));
  $105 = (~~(($104))>>>0);
  $106 = (__ZNSt3__112__next_primeEj($105)|0);
  $107 = $106;
 }
 HEAP32[$35>>2] = $107;
 $22 = $34;
 $23 = $35;
 $108 = $22;
 $109 = $23;
 ;HEAP8[$21>>0]=HEAP8[$24>>0]|0;
 $19 = $108;
 $20 = $109;
 $110 = $19;
 $111 = $20;
 $16 = $21;
 $17 = $110;
 $18 = $111;
 $112 = $17;
 $113 = HEAP32[$112>>2]|0;
 $114 = $18;
 $115 = HEAP32[$114>>2]|0;
 $116 = ($113>>>0)<($115>>>0);
 $117 = $20;
 $118 = $19;
 $119 = $116 ? $117 : $118;
 $120 = HEAP32[$119>>2]|0;
 HEAP32[$34>>2] = $120;
 $121 = HEAP32[$34>>2]|0;
 $122 = $__bc;
 $123 = ($121>>>0)<($122>>>0);
 if (!($123)) {
  STACKTOP = sp;return;
 }
 $124 = HEAP32[$34>>2]|0;
 __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE8__rehashEj($36,$124);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE8__rehashEj($this,$__nbc) {
 $this = $this|0;
 $__nbc = $__nbc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__chash = 0, $__cp = 0, $__i = 0, $__np = 0, $__npa = 0, $__phash = 0, $__pp = 0, $__tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $76 = $this;
 $77 = $__nbc;
 $78 = $76;
 $75 = $78;
 $79 = $75;
 $74 = $79;
 $80 = $74;
 $73 = $80;
 $81 = $73;
 $82 = ((($81)) + 4|0);
 $64 = $82;
 $83 = $64;
 $63 = $83;
 $84 = $63;
 $62 = $84;
 $85 = $62;
 $__npa = $85;
 $86 = $77;
 $87 = ($86>>>0)>(0);
 if ($87) {
  $88 = $__npa;
  $89 = $77;
  $4 = $88;
  $5 = $89;
  $90 = $4;
  $91 = $5;
  $1 = $90;
  $2 = $91;
  $3 = 0;
  $92 = $2;
  $93 = $92<<2;
  $0 = $93;
  $94 = $0;
  $95 = (__Znwj($94)|0);
  $96 = $95;
 } else {
  $96 = 0;
 }
 $27 = $78;
 $28 = $96;
 $97 = $27;
 $26 = $97;
 $98 = $26;
 $25 = $98;
 $99 = $25;
 $100 = HEAP32[$99>>2]|0;
 $__tmp$i = $100;
 $101 = $28;
 $9 = $97;
 $102 = $9;
 $8 = $102;
 $103 = $8;
 HEAP32[$103>>2] = $101;
 $104 = $__tmp$i;
 $105 = ($104|0)!=(0|0);
 if ($105) {
  $7 = $97;
  $106 = $7;
  $6 = $106;
  $107 = $6;
  $108 = ((($107)) + 4|0);
  $109 = $__tmp$i;
  $23 = $108;
  $24 = $109;
  $110 = $23;
  $22 = $110;
  $111 = $22;
  $21 = $111;
  $112 = $21;
  $20 = $112;
  $113 = $20;
  $114 = $24;
  $12 = $110;
  $115 = $12;
  $11 = $115;
  $116 = $11;
  $10 = $116;
  $117 = $10;
  $118 = HEAP32[$117>>2]|0;
  $17 = $113;
  $18 = $114;
  $19 = $118;
  $119 = $17;
  $120 = $18;
  $121 = $19;
  $14 = $119;
  $15 = $120;
  $16 = $121;
  $122 = $15;
  $13 = $122;
  $123 = $13;
  __ZdlPv($123);
 }
 $124 = $77;
 $31 = $78;
 $125 = $31;
 $30 = $125;
 $126 = $30;
 $29 = $126;
 $127 = $29;
 $128 = ((($127)) + 4|0);
 $34 = $128;
 $129 = $34;
 $33 = $129;
 $130 = $33;
 $32 = $130;
 $131 = $32;
 HEAP32[$131>>2] = $124;
 $132 = $77;
 $133 = ($132>>>0)>(0);
 if (!($133)) {
  STACKTOP = sp;return;
 }
 $__i = 0;
 while(1) {
  $134 = $__i;
  $135 = $77;
  $136 = ($134>>>0)<($135>>>0);
  if (!($136)) {
   break;
  }
  $137 = $__i;
  $37 = $78;
  $38 = $137;
  $138 = $37;
  $139 = $38;
  $36 = $138;
  $140 = $36;
  $35 = $140;
  $141 = $35;
  $142 = HEAP32[$141>>2]|0;
  $143 = (($142) + ($139<<2)|0);
  HEAP32[$143>>2] = 0;
  $144 = $__i;
  $145 = (($144) + 1)|0;
  $__i = $145;
 }
 $146 = ((($78)) + 8|0);
 $40 = $146;
 $147 = $40;
 $39 = $147;
 $148 = $39;
 $42 = $148;
 $149 = $42;
 $41 = $149;
 $150 = $41;
 $__pp = $150;
 $151 = $__pp;
 $152 = HEAP32[$151>>2]|0;
 $__cp = $152;
 $153 = $__cp;
 $154 = ($153|0)!=(0|0);
 if (!($154)) {
  STACKTOP = sp;return;
 }
 $155 = $__cp;
 $156 = ((($155)) + 4|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = $77;
 $43 = $157;
 $44 = $158;
 $159 = $44;
 $160 = $44;
 $161 = (($160) - 1)|0;
 $162 = $159 & $161;
 $163 = ($162|0)!=(0);
 $164 = $43;
 $165 = $44;
 if ($163) {
  $168 = (($164>>>0) % ($165>>>0))&-1;
  $169 = $168;
 } else {
  $166 = (($165) - 1)|0;
  $167 = $164 & $166;
  $169 = $167;
 }
 $__chash = $169;
 $170 = $__pp;
 $171 = $__chash;
 $47 = $78;
 $48 = $171;
 $172 = $47;
 $173 = $48;
 $46 = $172;
 $174 = $46;
 $45 = $174;
 $175 = $45;
 $176 = HEAP32[$175>>2]|0;
 $177 = (($176) + ($173<<2)|0);
 HEAP32[$177>>2] = $170;
 $178 = $__chash;
 $__phash = $178;
 $179 = $__cp;
 $__pp = $179;
 $180 = $__cp;
 $181 = HEAP32[$180>>2]|0;
 $__cp = $181;
 while(1) {
  $182 = $__cp;
  $183 = ($182|0)!=(0|0);
  if (!($183)) {
   break;
  }
  $184 = $__cp;
  $185 = ((($184)) + 4|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = $77;
  $49 = $186;
  $50 = $187;
  $188 = $50;
  $189 = $50;
  $190 = (($189) - 1)|0;
  $191 = $188 & $190;
  $192 = ($191|0)!=(0);
  $193 = $49;
  $194 = $50;
  if ($192) {
   $197 = (($193>>>0) % ($194>>>0))&-1;
   $198 = $197;
  } else {
   $195 = (($194) - 1)|0;
   $196 = $193 & $195;
   $198 = $196;
  }
  $__chash = $198;
  $199 = $__chash;
  $200 = $__phash;
  $201 = ($199|0)==($200|0);
  do {
   if ($201) {
    $202 = $__cp;
    $__pp = $202;
   } else {
    $203 = $__chash;
    $53 = $78;
    $54 = $203;
    $204 = $53;
    $205 = $54;
    $52 = $204;
    $206 = $52;
    $51 = $206;
    $207 = $51;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($208) + ($205<<2)|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = ($210|0)==(0|0);
    if ($211) {
     $212 = $__pp;
     $213 = $__chash;
     $57 = $78;
     $58 = $213;
     $214 = $57;
     $215 = $58;
     $56 = $214;
     $216 = $56;
     $55 = $216;
     $217 = $55;
     $218 = HEAP32[$217>>2]|0;
     $219 = (($218) + ($215<<2)|0);
     HEAP32[$219>>2] = $212;
     $220 = $__cp;
     $__pp = $220;
     $221 = $__chash;
     $__phash = $221;
     break;
    }
    $222 = $__cp;
    $__np = $222;
    while(1) {
     $223 = $__np;
     $224 = HEAP32[$223>>2]|0;
     $225 = ($224|0)!=(0|0);
     if (!($225)) {
      break;
     }
     $61 = $78;
     $226 = $61;
     $227 = ((($226)) + 16|0);
     $60 = $227;
     $228 = $60;
     $59 = $228;
     $229 = $59;
     $230 = $__cp;
     $231 = ((($230)) + 8|0);
     $232 = $__np;
     $233 = HEAP32[$232>>2]|0;
     $234 = ((($233)) + 8|0);
     $235 = (__ZNKSt3__18equal_toIN4rhea8variableEEclERKS2_S5_($229,$231,$234)|0);
     if (!($235)) {
      break;
     }
     $236 = $__np;
     $237 = HEAP32[$236>>2]|0;
     $__np = $237;
    }
    $238 = $__np;
    $239 = HEAP32[$238>>2]|0;
    $240 = $__pp;
    HEAP32[$240>>2] = $239;
    $241 = $__chash;
    $67 = $78;
    $68 = $241;
    $242 = $67;
    $243 = $68;
    $66 = $242;
    $244 = $66;
    $65 = $244;
    $245 = $65;
    $246 = HEAP32[$245>>2]|0;
    $247 = (($246) + ($243<<2)|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = HEAP32[$248>>2]|0;
    $250 = $__np;
    HEAP32[$250>>2] = $249;
    $251 = $__cp;
    $252 = $__chash;
    $71 = $78;
    $72 = $252;
    $253 = $71;
    $254 = $72;
    $70 = $253;
    $255 = $70;
    $69 = $255;
    $256 = $69;
    $257 = HEAP32[$256>>2]|0;
    $258 = (($257) + ($254<<2)|0);
    $259 = HEAP32[$258>>2]|0;
    HEAP32[$259>>2] = $251;
   }
  } while(0);
  $260 = $__pp;
  $261 = HEAP32[$260>>2]|0;
  $__cp = $261;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($agg$result,$this,$__x) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0.0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__bc = 0, $__chash = 0, $__h = 0, $__hash = 0, $__inserted = 0, $__nd = 0, $__pn = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = sp;
 $22 = sp + 696|0;
 $54 = sp + 8|0;
 $57 = sp + 697|0;
 $135 = sp + 16|0;
 $138 = sp + 698|0;
 $__inserted = sp + 699|0;
 $__h = sp + 328|0;
 $159 = sp + 668|0;
 $162 = sp + 572|0;
 $163 = sp + 92|0;
 $157 = $this;
 $158 = $__x;
 $164 = $157;
 $156 = $164;
 $165 = $156;
 $166 = ((($165)) + 12|0);
 $155 = $166;
 $167 = $155;
 $154 = $167;
 $168 = $154;
 $169 = $158;
 $170 = (__ZNKSt3__14hashIN4rhea8variableEEclERKS2_($168,$169)|0);
 $__hash = $170;
 $121 = $164;
 $171 = $121;
 $120 = $171;
 $172 = $120;
 $119 = $172;
 $173 = $119;
 $118 = $173;
 $174 = $118;
 $175 = ((($174)) + 4|0);
 $117 = $175;
 $176 = $117;
 $116 = $176;
 $177 = $116;
 $115 = $177;
 $178 = $115;
 $179 = HEAP32[$178>>2]|0;
 $__bc = $179;
 HEAP8[$__inserted>>0] = 0;
 $180 = $__bc;
 $181 = ($180|0)!=(0);
 L1: do {
  if ($181) {
   $182 = $__hash;
   $183 = $__bc;
   $113 = $182;
   $114 = $183;
   $184 = $114;
   $185 = $114;
   $186 = (($185) - 1)|0;
   $187 = $184 & $186;
   $188 = ($187|0)!=(0);
   $189 = $113;
   $190 = $114;
   if ($188) {
    $193 = (($189>>>0) % ($190>>>0))&-1;
    $194 = $193;
   } else {
    $191 = (($190) - 1)|0;
    $192 = $189 & $191;
    $194 = $192;
   }
   $__chash = $194;
   $195 = $__chash;
   $39 = $164;
   $40 = $195;
   $196 = $39;
   $197 = $40;
   $38 = $196;
   $198 = $38;
   $37 = $198;
   $199 = $37;
   $200 = HEAP32[$199>>2]|0;
   $201 = (($200) + ($197<<2)|0);
   $202 = HEAP32[$201>>2]|0;
   $__nd = $202;
   $203 = $__nd;
   $204 = ($203|0)!=(0|0);
   if ($204) {
    $205 = $__nd;
    $206 = HEAP32[$205>>2]|0;
    $__nd = $206;
    while(1) {
     $207 = $__nd;
     $208 = ($207|0)!=(0|0);
     if (!($208)) {
      break L1;
     }
     $209 = $__nd;
     $210 = ((($209)) + 4|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = $__bc;
     $35 = $211;
     $36 = $212;
     $213 = $36;
     $214 = $36;
     $215 = (($214) - 1)|0;
     $216 = $213 & $215;
     $217 = ($216|0)!=(0);
     $218 = $35;
     $219 = $36;
     if ($217) {
      $222 = (($218>>>0) % ($219>>>0))&-1;
      $225 = $222;
     } else {
      $220 = (($219) - 1)|0;
      $221 = $218 & $220;
      $225 = $221;
     }
     $223 = $__chash;
     $224 = ($225|0)==($223|0);
     if (!($224)) {
      break L1;
     }
     $25 = $164;
     $226 = $25;
     $227 = ((($226)) + 16|0);
     $24 = $227;
     $228 = $24;
     $23 = $228;
     $229 = $23;
     $230 = $__nd;
     $231 = ((($230)) + 8|0);
     $232 = $158;
     $233 = (__ZNKSt3__18equal_toIN4rhea8variableEEclERKS2_S5_($229,$231,$232)|0);
     if ($233) {
      break;
     }
     $234 = $__nd;
     $235 = HEAP32[$234>>2]|0;
     $__nd = $235;
    }
    $487 = $__nd;
    $147 = $163;
    $148 = $487;
    $488 = $147;
    $489 = $148;
    HEAP32[$488>>2] = $489;
    $151 = $agg$result;
    $152 = $163;
    $153 = $__inserted;
    $490 = $151;
    $491 = $152;
    $150 = $491;
    $492 = $150;
    ;HEAP32[$490>>2]=HEAP32[$492>>2]|0;
    $493 = ((($490)) + 4|0);
    $494 = $153;
    $149 = $494;
    $495 = $149;
    $496 = HEAP8[$495>>0]|0;
    $497 = $496&1;
    $498 = $497&1;
    HEAP8[$493>>0] = $498;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $236 = $158;
 $237 = $__hash;
 __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE16__construct_nodeERKS2_j($__h,$164,$236,$237);
 $12 = $164;
 $238 = $12;
 $239 = ((($238)) + 12|0);
 $11 = $239;
 $240 = $11;
 $10 = $240;
 $241 = $10;
 $242 = HEAP32[$241>>2]|0;
 $243 = (($242) + 1)|0;
 $244 = (+($243>>>0));
 $245 = $__bc;
 $246 = (+($245>>>0));
 $2 = $164;
 $247 = $2;
 $248 = ((($247)) + 16|0);
 $1 = $248;
 $249 = $1;
 $0 = $249;
 $250 = $0;
 $251 = +HEAPF32[$250>>2];
 $252 = $246 * $251;
 $253 = $244 > $252;
 $254 = $__bc;
 $255 = ($254|0)==(0);
 $or$cond = $253 | $255;
 do {
  if ($or$cond) {
   $256 = $__bc;
   $257 = $256<<1;
   $258 = $__bc;
   $3 = $258;
   $259 = $3;
   $260 = ($259>>>0)>(2);
   if ($260) {
    $261 = $3;
    $262 = $3;
    $263 = (($262) - 1)|0;
    $264 = $261 & $263;
    $265 = ($264|0)!=(0);
    $266 = $265 ^ 1;
    $268 = $266;
   } else {
    $268 = 0;
   }
   $267 = $268 ^ 1;
   $269 = $267&1;
   $270 = (($257) + ($269))|0;
   HEAP32[$159>>2] = $270;
   $6 = $164;
   $271 = $6;
   $272 = ((($271)) + 12|0);
   $5 = $272;
   $273 = $5;
   $4 = $273;
   $274 = $4;
   $275 = HEAP32[$274>>2]|0;
   $276 = (($275) + 1)|0;
   $277 = (+($276>>>0));
   $9 = $164;
   $278 = $9;
   $279 = ((($278)) + 16|0);
   $8 = $279;
   $280 = $8;
   $7 = $280;
   $281 = $7;
   $282 = +HEAPF32[$281>>2];
   $283 = $277 / $282;
   $13 = $283;
   $284 = $13;
   $285 = (+Math_ceil((+$284)));
   $286 = (~~(($285))>>>0);
   HEAP32[$162>>2] = $286;
   $20 = $159;
   $21 = $162;
   $287 = $20;
   $288 = $21;
   ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
   $17 = $287;
   $18 = $288;
   $289 = $17;
   $290 = $18;
   $14 = $19;
   $15 = $289;
   $16 = $290;
   $291 = $15;
   $292 = HEAP32[$291>>2]|0;
   $293 = $16;
   $294 = HEAP32[$293>>2]|0;
   $295 = ($292>>>0)<($294>>>0);
   $296 = $18;
   $297 = $17;
   $298 = $295 ? $296 : $297;
   $299 = HEAP32[$298>>2]|0;
   __THREW__ = 0;
   invoke_vii(293,($164|0),($299|0));
   $300 = __THREW__; __THREW__ = 0;
   $301 = $300&1;
   if (!($301)) {
    $32 = $164;
    $302 = $32;
    $31 = $302;
    $303 = $31;
    $30 = $303;
    $304 = $30;
    $29 = $304;
    $305 = $29;
    $306 = ((($305)) + 4|0);
    $28 = $306;
    $307 = $28;
    $27 = $307;
    $308 = $27;
    $26 = $308;
    $309 = $26;
    $310 = HEAP32[$309>>2]|0;
    $__bc = $310;
    $311 = $__hash;
    $312 = $__bc;
    $33 = $311;
    $34 = $312;
    $313 = $34;
    $314 = $34;
    $315 = (($314) - 1)|0;
    $316 = $313 & $315;
    $317 = ($316|0)!=(0);
    $318 = $33;
    $319 = $34;
    if ($317) {
     $322 = (($318>>>0) % ($319>>>0))&-1;
     $323 = $322;
    } else {
     $320 = (($319) - 1)|0;
     $321 = $318 & $320;
     $323 = $321;
    }
    $__chash = $323;
    break;
   }
   $324 = ___cxa_find_matching_catch()|0;
   $325 = tempRet0;
   $160 = $324;
   $161 = $325;
   $65 = $__h;
   $326 = $65;
   $63 = $326;
   $64 = 0;
   $327 = $63;
   $62 = $327;
   $328 = $62;
   $61 = $328;
   $329 = $61;
   $330 = HEAP32[$329>>2]|0;
   $__tmp$i$i2 = $330;
   $331 = $64;
   $44 = $327;
   $332 = $44;
   $43 = $332;
   $333 = $43;
   HEAP32[$333>>2] = $331;
   $334 = $__tmp$i$i2;
   $335 = ($334|0)!=(0|0);
   if (!($335)) {
    $499 = $160;
    $500 = $161;
    ___resumeException($499|0);
    // unreachable;
   }
   $42 = $327;
   $336 = $42;
   $41 = $336;
   $337 = $41;
   $338 = ((($337)) + 4|0);
   $339 = $__tmp$i$i2;
   $59 = $338;
   $60 = $339;
   $340 = $59;
   $341 = ((($340)) + 4|0);
   $342 = HEAP8[$341>>0]|0;
   $343 = $342&1;
   if ($343) {
    $344 = HEAP32[$340>>2]|0;
    $345 = $60;
    $346 = ((($345)) + 8|0);
    $58 = $346;
    $347 = $58;
    $55 = $344;
    $56 = $347;
    $348 = $55;
    $349 = $56;
    ;HEAP8[$54>>0]=HEAP8[$57>>0]|0;
    $52 = $348;
    $53 = $349;
    $350 = $53;
    __ZN4rhea8variableD2Ev($350);
   }
   $351 = $60;
   $352 = ($351|0)!=(0|0);
   if (!($352)) {
    $499 = $160;
    $500 = $161;
    ___resumeException($499|0);
    // unreachable;
   }
   $353 = HEAP32[$340>>2]|0;
   $354 = $60;
   $49 = $353;
   $50 = $354;
   $51 = 1;
   $355 = $49;
   $356 = $50;
   $357 = $51;
   $46 = $355;
   $47 = $356;
   $48 = $357;
   $358 = $47;
   $45 = $358;
   $359 = $45;
   __ZdlPv($359);
   $499 = $160;
   $500 = $161;
   ___resumeException($499|0);
   // unreachable;
  }
 } while(0);
 $360 = $__chash;
 $68 = $164;
 $69 = $360;
 $361 = $68;
 $362 = $69;
 $67 = $361;
 $363 = $67;
 $66 = $363;
 $364 = $66;
 $365 = HEAP32[$364>>2]|0;
 $366 = (($365) + ($362<<2)|0);
 $367 = HEAP32[$366>>2]|0;
 $__pn = $367;
 $368 = $__pn;
 $369 = ($368|0)==(0|0);
 if ($369) {
  $370 = ((($164)) + 8|0);
  $71 = $370;
  $371 = $71;
  $70 = $371;
  $372 = $70;
  $73 = $372;
  $373 = $73;
  $72 = $373;
  $374 = $72;
  $__pn = $374;
  $375 = $__pn;
  $376 = HEAP32[$375>>2]|0;
  $76 = $__h;
  $377 = $76;
  $75 = $377;
  $378 = $75;
  $74 = $378;
  $379 = $74;
  $380 = HEAP32[$379>>2]|0;
  HEAP32[$380>>2] = $376;
  $79 = $__h;
  $381 = $79;
  $78 = $381;
  $382 = $78;
  $77 = $382;
  $383 = $77;
  $384 = HEAP32[$383>>2]|0;
  $385 = $__pn;
  HEAP32[$385>>2] = $384;
  $386 = $__pn;
  $387 = $__chash;
  $82 = $164;
  $83 = $387;
  $388 = $82;
  $389 = $83;
  $81 = $388;
  $390 = $81;
  $80 = $390;
  $391 = $80;
  $392 = HEAP32[$391>>2]|0;
  $393 = (($392) + ($389<<2)|0);
  HEAP32[$393>>2] = $386;
  $86 = $__h;
  $394 = $86;
  $85 = $394;
  $395 = $85;
  $84 = $395;
  $396 = $84;
  $397 = HEAP32[$396>>2]|0;
  $398 = HEAP32[$397>>2]|0;
  $399 = ($398|0)!=(0|0);
  if ($399) {
   $89 = $__h;
   $400 = $89;
   $88 = $400;
   $401 = $88;
   $87 = $401;
   $402 = $87;
   $403 = HEAP32[$402>>2]|0;
   $92 = $__h;
   $404 = $92;
   $91 = $404;
   $405 = $91;
   $90 = $405;
   $406 = $90;
   $407 = HEAP32[$406>>2]|0;
   $408 = HEAP32[$407>>2]|0;
   $409 = ((($408)) + 4|0);
   $410 = HEAP32[$409>>2]|0;
   $411 = $__bc;
   $93 = $410;
   $94 = $411;
   $412 = $94;
   $413 = $94;
   $414 = (($413) - 1)|0;
   $415 = $412 & $414;
   $416 = ($415|0)!=(0);
   $417 = $93;
   $418 = $94;
   if ($416) {
    $421 = (($417>>>0) % ($418>>>0))&-1;
    $422 = $421;
   } else {
    $419 = (($418) - 1)|0;
    $420 = $417 & $419;
    $422 = $420;
   }
   $97 = $164;
   $98 = $422;
   $423 = $97;
   $424 = $98;
   $96 = $423;
   $425 = $96;
   $95 = $425;
   $426 = $95;
   $427 = HEAP32[$426>>2]|0;
   $428 = (($427) + ($424<<2)|0);
   HEAP32[$428>>2] = $403;
  }
 } else {
  $429 = $__pn;
  $430 = HEAP32[$429>>2]|0;
  $101 = $__h;
  $431 = $101;
  $100 = $431;
  $432 = $100;
  $99 = $432;
  $433 = $99;
  $434 = HEAP32[$433>>2]|0;
  HEAP32[$434>>2] = $430;
  $104 = $__h;
  $435 = $104;
  $103 = $435;
  $436 = $103;
  $102 = $436;
  $437 = $102;
  $438 = HEAP32[$437>>2]|0;
  $439 = $__pn;
  HEAP32[$439>>2] = $438;
 }
 $109 = $__h;
 $440 = $109;
 $108 = $440;
 $441 = $108;
 $107 = $441;
 $442 = $107;
 $443 = HEAP32[$442>>2]|0;
 $__t$i = $443;
 $106 = $440;
 $444 = $106;
 $105 = $444;
 $445 = $105;
 HEAP32[$445>>2] = 0;
 $446 = $__t$i;
 $__nd = $446;
 $112 = $164;
 $447 = $112;
 $448 = ((($447)) + 12|0);
 $111 = $448;
 $449 = $111;
 $110 = $449;
 $450 = $110;
 $451 = HEAP32[$450>>2]|0;
 $452 = (($451) + 1)|0;
 HEAP32[$450>>2] = $452;
 HEAP8[$__inserted>>0] = 1;
 $146 = $__h;
 $453 = $146;
 $144 = $453;
 $145 = 0;
 $454 = $144;
 $143 = $454;
 $455 = $143;
 $142 = $455;
 $456 = $142;
 $457 = HEAP32[$456>>2]|0;
 $__tmp$i$i = $457;
 $458 = $145;
 $125 = $454;
 $459 = $125;
 $124 = $459;
 $460 = $124;
 HEAP32[$460>>2] = $458;
 $461 = $__tmp$i$i;
 $462 = ($461|0)!=(0|0);
 if (!($462)) {
  $487 = $__nd;
  $147 = $163;
  $148 = $487;
  $488 = $147;
  $489 = $148;
  HEAP32[$488>>2] = $489;
  $151 = $agg$result;
  $152 = $163;
  $153 = $__inserted;
  $490 = $151;
  $491 = $152;
  $150 = $491;
  $492 = $150;
  ;HEAP32[$490>>2]=HEAP32[$492>>2]|0;
  $493 = ((($490)) + 4|0);
  $494 = $153;
  $149 = $494;
  $495 = $149;
  $496 = HEAP8[$495>>0]|0;
  $497 = $496&1;
  $498 = $497&1;
  HEAP8[$493>>0] = $498;
  STACKTOP = sp;return;
 }
 $123 = $454;
 $463 = $123;
 $122 = $463;
 $464 = $122;
 $465 = ((($464)) + 4|0);
 $466 = $__tmp$i$i;
 $140 = $465;
 $141 = $466;
 $467 = $140;
 $468 = ((($467)) + 4|0);
 $469 = HEAP8[$468>>0]|0;
 $470 = $469&1;
 if ($470) {
  $471 = HEAP32[$467>>2]|0;
  $472 = $141;
  $473 = ((($472)) + 8|0);
  $139 = $473;
  $474 = $139;
  $136 = $471;
  $137 = $474;
  $475 = $136;
  $476 = $137;
  ;HEAP8[$135>>0]=HEAP8[$138>>0]|0;
  $133 = $475;
  $134 = $476;
  $477 = $134;
  __ZN4rhea8variableD2Ev($477);
 }
 $478 = $141;
 $479 = ($478|0)!=(0|0);
 if (!($479)) {
  $487 = $__nd;
  $147 = $163;
  $148 = $487;
  $488 = $147;
  $489 = $148;
  HEAP32[$488>>2] = $489;
  $151 = $agg$result;
  $152 = $163;
  $153 = $__inserted;
  $490 = $151;
  $491 = $152;
  $150 = $491;
  $492 = $150;
  ;HEAP32[$490>>2]=HEAP32[$492>>2]|0;
  $493 = ((($490)) + 4|0);
  $494 = $153;
  $149 = $494;
  $495 = $149;
  $496 = HEAP8[$495>>0]|0;
  $497 = $496&1;
  $498 = $497&1;
  HEAP8[$493>>0] = $498;
  STACKTOP = sp;return;
 }
 $480 = HEAP32[$467>>2]|0;
 $481 = $141;
 $130 = $480;
 $131 = $481;
 $132 = 1;
 $482 = $130;
 $483 = $131;
 $484 = $132;
 $127 = $482;
 $128 = $483;
 $129 = $484;
 $485 = $128;
 $126 = $485;
 $486 = $126;
 __ZdlPv($486);
 $487 = $__nd;
 $147 = $163;
 $148 = $487;
 $488 = $147;
 $489 = $148;
 HEAP32[$488>>2] = $489;
 $151 = $agg$result;
 $152 = $163;
 $153 = $__inserted;
 $490 = $151;
 $491 = $152;
 $150 = $491;
 $492 = $150;
 ;HEAP32[$490>>2]=HEAP32[$492>>2]|0;
 $493 = ((($490)) + 4|0);
 $494 = $153;
 $149 = $494;
 $495 = $149;
 $496 = HEAP8[$495>>0]|0;
 $497 = $496&1;
 $498 = $497&1;
 HEAP8[$493>>0] = $498;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEE6rehashEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $21 = sp;
 $24 = sp + 144|0;
 $34 = sp + 124|0;
 $35 = sp + 92|0;
 $33 = $this;
 HEAP32[$34>>2] = $__n;
 $36 = $33;
 $37 = HEAP32[$34>>2]|0;
 $38 = ($37|0)==(1);
 if ($38) {
  HEAP32[$34>>2] = 2;
 } else {
  $39 = HEAP32[$34>>2]|0;
  $40 = HEAP32[$34>>2]|0;
  $41 = (($40) - 1)|0;
  $42 = $39 & $41;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = HEAP32[$34>>2]|0;
   $45 = (__ZNSt3__112__next_primeEj($44)|0);
   HEAP32[$34>>2] = $45;
  }
 }
 $32 = $36;
 $46 = $32;
 $31 = $46;
 $47 = $31;
 $30 = $47;
 $48 = $30;
 $29 = $48;
 $49 = $29;
 $50 = ((($49)) + 4|0);
 $28 = $50;
 $51 = $28;
 $27 = $51;
 $52 = $27;
 $26 = $52;
 $53 = $26;
 $54 = HEAP32[$53>>2]|0;
 $__bc = $54;
 $55 = HEAP32[$34>>2]|0;
 $56 = $__bc;
 $57 = ($55>>>0)>($56>>>0);
 $58 = HEAP32[$34>>2]|0;
 if ($57) {
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEE8__rehashEj($36,$58);
  STACKTOP = sp;return;
 }
 $59 = $__bc;
 $60 = ($58>>>0)<($59>>>0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $61 = $__bc;
 $25 = $61;
 $62 = $25;
 $63 = ($62>>>0)>(2);
 if ($63) {
  $64 = $25;
  $65 = $25;
  $66 = (($65) - 1)|0;
  $67 = $64 & $66;
  $68 = ($67|0)!=(0);
  $69 = $68 ^ 1;
  if ($69) {
   $14 = $36;
   $70 = $14;
   $71 = ((($70)) + 12|0);
   $13 = $71;
   $72 = $13;
   $12 = $72;
   $73 = $12;
   $74 = HEAP32[$73>>2]|0;
   $75 = (+($74>>>0));
   $2 = $36;
   $76 = $2;
   $77 = ((($76)) + 16|0);
   $1 = $77;
   $78 = $1;
   $0 = $78;
   $79 = $0;
   $80 = +HEAPF32[$79>>2];
   $81 = $75 / $80;
   $3 = $81;
   $82 = $3;
   $83 = (+Math_ceil((+$82)));
   $84 = (~~(($83))>>>0);
   $5 = $84;
   $85 = $5;
   $86 = (($85) - 1)|0;
   $4 = $86;
   $87 = $4;
   $88 = (Math_clz32(($87|0))|0);
   $89 = (32 - ($88))|0;
   $90 = 1 << $89;
   $107 = $90;
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $8 = $36;
  $91 = $8;
  $92 = ((($91)) + 12|0);
  $7 = $92;
  $93 = $7;
  $6 = $93;
  $94 = $6;
  $95 = HEAP32[$94>>2]|0;
  $96 = (+($95>>>0));
  $11 = $36;
  $97 = $11;
  $98 = ((($97)) + 16|0);
  $10 = $98;
  $99 = $10;
  $9 = $99;
  $100 = $9;
  $101 = +HEAPF32[$100>>2];
  $102 = $96 / $101;
  $15 = $102;
  $103 = $15;
  $104 = (+Math_ceil((+$103)));
  $105 = (~~(($104))>>>0);
  $106 = (__ZNSt3__112__next_primeEj($105)|0);
  $107 = $106;
 }
 HEAP32[$35>>2] = $107;
 $22 = $34;
 $23 = $35;
 $108 = $22;
 $109 = $23;
 ;HEAP8[$21>>0]=HEAP8[$24>>0]|0;
 $19 = $108;
 $20 = $109;
 $110 = $19;
 $111 = $20;
 $16 = $21;
 $17 = $110;
 $18 = $111;
 $112 = $17;
 $113 = HEAP32[$112>>2]|0;
 $114 = $18;
 $115 = HEAP32[$114>>2]|0;
 $116 = ($113>>>0)<($115>>>0);
 $117 = $20;
 $118 = $19;
 $119 = $116 ? $117 : $118;
 $120 = HEAP32[$119>>2]|0;
 HEAP32[$34>>2] = $120;
 $121 = HEAP32[$34>>2]|0;
 $122 = $__bc;
 $123 = ($121>>>0)<($122>>>0);
 if (!($123)) {
  STACKTOP = sp;return;
 }
 $124 = HEAP32[$34>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEE8__rehashEj($36,$124);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEE8__rehashEj($this,$__nbc) {
 $this = $this|0;
 $__nbc = $__nbc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__chash = 0, $__cp = 0, $__i = 0, $__np = 0, $__npa = 0;
 var $__phash = 0, $__pp = 0, $__tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $82 = $this;
 $83 = $__nbc;
 $84 = $82;
 $81 = $84;
 $85 = $81;
 $80 = $85;
 $86 = $80;
 $79 = $86;
 $87 = $79;
 $88 = ((($87)) + 4|0);
 $64 = $88;
 $89 = $64;
 $63 = $89;
 $90 = $63;
 $62 = $90;
 $91 = $62;
 $__npa = $91;
 $92 = $83;
 $93 = ($92>>>0)>(0);
 if ($93) {
  $94 = $__npa;
  $95 = $83;
  $4 = $94;
  $5 = $95;
  $96 = $4;
  $97 = $5;
  $1 = $96;
  $2 = $97;
  $3 = 0;
  $98 = $2;
  $99 = $98<<2;
  $0 = $99;
  $100 = $0;
  $101 = (__Znwj($100)|0);
  $102 = $101;
 } else {
  $102 = 0;
 }
 $27 = $84;
 $28 = $102;
 $103 = $27;
 $26 = $103;
 $104 = $26;
 $25 = $104;
 $105 = $25;
 $106 = HEAP32[$105>>2]|0;
 $__tmp$i = $106;
 $107 = $28;
 $9 = $103;
 $108 = $9;
 $8 = $108;
 $109 = $8;
 HEAP32[$109>>2] = $107;
 $110 = $__tmp$i;
 $111 = ($110|0)!=(0|0);
 if ($111) {
  $7 = $103;
  $112 = $7;
  $6 = $112;
  $113 = $6;
  $114 = ((($113)) + 4|0);
  $115 = $__tmp$i;
  $23 = $114;
  $24 = $115;
  $116 = $23;
  $22 = $116;
  $117 = $22;
  $21 = $117;
  $118 = $21;
  $20 = $118;
  $119 = $20;
  $120 = $24;
  $12 = $116;
  $121 = $12;
  $11 = $121;
  $122 = $11;
  $10 = $122;
  $123 = $10;
  $124 = HEAP32[$123>>2]|0;
  $17 = $119;
  $18 = $120;
  $19 = $124;
  $125 = $17;
  $126 = $18;
  $127 = $19;
  $14 = $125;
  $15 = $126;
  $16 = $127;
  $128 = $15;
  $13 = $128;
  $129 = $13;
  __ZdlPv($129);
 }
 $130 = $83;
 $31 = $84;
 $131 = $31;
 $30 = $131;
 $132 = $30;
 $29 = $132;
 $133 = $29;
 $134 = ((($133)) + 4|0);
 $34 = $134;
 $135 = $34;
 $33 = $135;
 $136 = $33;
 $32 = $136;
 $137 = $32;
 HEAP32[$137>>2] = $130;
 $138 = $83;
 $139 = ($138>>>0)>(0);
 if (!($139)) {
  STACKTOP = sp;return;
 }
 $__i = 0;
 while(1) {
  $140 = $__i;
  $141 = $83;
  $142 = ($140>>>0)<($141>>>0);
  if (!($142)) {
   break;
  }
  $143 = $__i;
  $37 = $84;
  $38 = $143;
  $144 = $37;
  $145 = $38;
  $36 = $144;
  $146 = $36;
  $35 = $146;
  $147 = $35;
  $148 = HEAP32[$147>>2]|0;
  $149 = (($148) + ($145<<2)|0);
  HEAP32[$149>>2] = 0;
  $150 = $__i;
  $151 = (($150) + 1)|0;
  $__i = $151;
 }
 $152 = ((($84)) + 8|0);
 $40 = $152;
 $153 = $40;
 $39 = $153;
 $154 = $39;
 $42 = $154;
 $155 = $42;
 $41 = $155;
 $156 = $41;
 $__pp = $156;
 $157 = $__pp;
 $158 = HEAP32[$157>>2]|0;
 $__cp = $158;
 $159 = $__cp;
 $160 = ($159|0)!=(0|0);
 if (!($160)) {
  STACKTOP = sp;return;
 }
 $161 = $__cp;
 $162 = ((($161)) + 4|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = $83;
 $43 = $163;
 $44 = $164;
 $165 = $44;
 $166 = $44;
 $167 = (($166) - 1)|0;
 $168 = $165 & $167;
 $169 = ($168|0)!=(0);
 $170 = $43;
 $171 = $44;
 if ($169) {
  $174 = (($170>>>0) % ($171>>>0))&-1;
  $175 = $174;
 } else {
  $172 = (($171) - 1)|0;
  $173 = $170 & $172;
  $175 = $173;
 }
 $__chash = $175;
 $176 = $__pp;
 $177 = $__chash;
 $47 = $84;
 $48 = $177;
 $178 = $47;
 $179 = $48;
 $46 = $178;
 $180 = $46;
 $45 = $180;
 $181 = $45;
 $182 = HEAP32[$181>>2]|0;
 $183 = (($182) + ($179<<2)|0);
 HEAP32[$183>>2] = $176;
 $184 = $__chash;
 $__phash = $184;
 $185 = $__cp;
 $__pp = $185;
 $186 = $__cp;
 $187 = HEAP32[$186>>2]|0;
 $__cp = $187;
 while(1) {
  $188 = $__cp;
  $189 = ($188|0)!=(0|0);
  if (!($189)) {
   break;
  }
  $190 = $__cp;
  $191 = ((($190)) + 4|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = $83;
  $49 = $192;
  $50 = $193;
  $194 = $50;
  $195 = $50;
  $196 = (($195) - 1)|0;
  $197 = $194 & $196;
  $198 = ($197|0)!=(0);
  $199 = $49;
  $200 = $50;
  if ($198) {
   $203 = (($199>>>0) % ($200>>>0))&-1;
   $204 = $203;
  } else {
   $201 = (($200) - 1)|0;
   $202 = $199 & $201;
   $204 = $202;
  }
  $__chash = $204;
  $205 = $__chash;
  $206 = $__phash;
  $207 = ($205|0)==($206|0);
  do {
   if ($207) {
    $208 = $__cp;
    $__pp = $208;
   } else {
    $209 = $__chash;
    $53 = $84;
    $54 = $209;
    $210 = $53;
    $211 = $54;
    $52 = $210;
    $212 = $52;
    $51 = $212;
    $213 = $51;
    $214 = HEAP32[$213>>2]|0;
    $215 = (($214) + ($211<<2)|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = ($216|0)==(0|0);
    if ($217) {
     $218 = $__pp;
     $219 = $__chash;
     $57 = $84;
     $58 = $219;
     $220 = $57;
     $221 = $58;
     $56 = $220;
     $222 = $56;
     $55 = $222;
     $223 = $55;
     $224 = HEAP32[$223>>2]|0;
     $225 = (($224) + ($221<<2)|0);
     HEAP32[$225>>2] = $218;
     $226 = $__cp;
     $__pp = $226;
     $227 = $__chash;
     $__phash = $227;
     break;
    }
    $228 = $__cp;
    $__np = $228;
    while(1) {
     $229 = $__np;
     $230 = HEAP32[$229>>2]|0;
     $231 = ($230|0)!=(0|0);
     if (!($231)) {
      break;
     }
     $61 = $84;
     $232 = $61;
     $233 = ((($232)) + 16|0);
     $60 = $233;
     $234 = $60;
     $59 = $234;
     $235 = $59;
     $236 = $__cp;
     $237 = ((($236)) + 8|0);
     $238 = $__np;
     $239 = HEAP32[$238>>2]|0;
     $240 = ((($239)) + 8|0);
     $68 = $235;
     $69 = $237;
     $70 = $240;
     $241 = $68;
     $242 = $69;
     $243 = $70;
     $65 = $241;
     $66 = $242;
     $67 = $243;
     $244 = $66;
     $245 = HEAP32[$244>>2]|0;
     $246 = HEAP32[$245>>2]|0;
     $247 = $67;
     $248 = (FUNCTION_TABLE_iii[$246 & 511]($244,$247)|0);
     if (!($248)) {
      break;
     }
     $249 = $__np;
     $250 = HEAP32[$249>>2]|0;
     $__np = $250;
    }
    $251 = $__np;
    $252 = HEAP32[$251>>2]|0;
    $253 = $__pp;
    HEAP32[$253>>2] = $252;
    $254 = $__chash;
    $73 = $84;
    $74 = $254;
    $255 = $73;
    $256 = $74;
    $72 = $255;
    $257 = $72;
    $71 = $257;
    $258 = $71;
    $259 = HEAP32[$258>>2]|0;
    $260 = (($259) + ($256<<2)|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = HEAP32[$261>>2]|0;
    $263 = $__np;
    HEAP32[$263>>2] = $262;
    $264 = $__cp;
    $265 = $__chash;
    $77 = $84;
    $78 = $265;
    $266 = $77;
    $267 = $78;
    $76 = $266;
    $268 = $76;
    $75 = $268;
    $269 = $75;
    $270 = HEAP32[$269>>2]|0;
    $271 = (($270) + ($267<<2)|0);
    $272 = HEAP32[$271>>2]|0;
    HEAP32[$272>>2] = $264;
   }
  } while(0);
  $273 = $__pp;
  $274 = HEAP32[$273>>2]|0;
  $__cp = $274;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEE20__node_insert_uniqueEPNS_11__hash_nodeISD_PvEE($agg$result,$this,$__nd) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__inserted = 0, $__ndptr = 0, $__pn = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $36 = sp;
 $39 = sp + 388|0;
 $__inserted = sp + 389|0;
 $91 = sp + 172|0;
 $92 = sp + 236|0;
 $93 = sp + 152|0;
 $89 = $this;
 $90 = $__nd;
 $94 = $89;
 $88 = $94;
 $95 = $88;
 $96 = ((($95)) + 12|0);
 $87 = $96;
 $97 = $87;
 $86 = $97;
 $98 = $86;
 $99 = $90;
 $100 = ((($99)) + 8|0);
 $47 = $98;
 $48 = $100;
 $101 = $47;
 $102 = $48;
 $103 = (__ZNKSt3__14hashIN4rhea10constraintEEclERKS2_($101,$102)|0);
 $104 = $90;
 $105 = ((($104)) + 4|0);
 HEAP32[$105>>2] = $103;
 $46 = $94;
 $106 = $46;
 $45 = $106;
 $107 = $45;
 $44 = $107;
 $108 = $44;
 $43 = $108;
 $109 = $43;
 $110 = ((($109)) + 4|0);
 $42 = $110;
 $111 = $42;
 $41 = $111;
 $112 = $41;
 $40 = $112;
 $113 = $40;
 $114 = HEAP32[$113>>2]|0;
 $__bc = $114;
 HEAP8[$__inserted>>0] = 0;
 $115 = $__bc;
 $116 = ($115|0)!=(0);
 L1: do {
  if ($116) {
   $117 = $90;
   $118 = ((($117)) + 4|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $__bc;
   $28 = $119;
   $29 = $120;
   $121 = $29;
   $122 = $29;
   $123 = (($122) - 1)|0;
   $124 = $121 & $123;
   $125 = ($124|0)!=(0);
   $126 = $28;
   $127 = $29;
   if ($125) {
    $130 = (($126>>>0) % ($127>>>0))&-1;
    $131 = $130;
   } else {
    $128 = (($127) - 1)|0;
    $129 = $126 & $128;
    $131 = $129;
   }
   $__chash = $131;
   $132 = $__chash;
   $7 = $94;
   $8 = $132;
   $133 = $7;
   $134 = $8;
   $6 = $133;
   $135 = $6;
   $5 = $135;
   $136 = $5;
   $137 = HEAP32[$136>>2]|0;
   $138 = (($137) + ($134<<2)|0);
   $139 = HEAP32[$138>>2]|0;
   $__ndptr = $139;
   $140 = $__ndptr;
   $141 = ($140|0)!=(0|0);
   if ($141) {
    $142 = $__ndptr;
    $143 = HEAP32[$142>>2]|0;
    $__ndptr = $143;
    while(1) {
     $144 = $__ndptr;
     $145 = ($144|0)!=(0|0);
     if (!($145)) {
      break L1;
     }
     $146 = $__ndptr;
     $147 = ((($146)) + 4|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = $__bc;
     $0 = $148;
     $1 = $149;
     $150 = $1;
     $151 = $1;
     $152 = (($151) - 1)|0;
     $153 = $150 & $152;
     $154 = ($153|0)!=(0);
     $155 = $0;
     $156 = $1;
     if ($154) {
      $159 = (($155>>>0) % ($156>>>0))&-1;
      $162 = $159;
     } else {
      $157 = (($156) - 1)|0;
      $158 = $155 & $157;
      $162 = $158;
     }
     $160 = $__chash;
     $161 = ($162|0)==($160|0);
     if (!($161)) {
      break L1;
     }
     $4 = $94;
     $163 = $4;
     $164 = ((($163)) + 16|0);
     $3 = $164;
     $165 = $3;
     $2 = $165;
     $166 = $2;
     $167 = $__ndptr;
     $168 = ((($167)) + 8|0);
     $169 = $90;
     $170 = ((($169)) + 8|0);
     $12 = $166;
     $13 = $168;
     $14 = $170;
     $171 = $12;
     $172 = $13;
     $173 = $14;
     $9 = $171;
     $10 = $172;
     $11 = $173;
     $174 = $10;
     $175 = HEAP32[$174>>2]|0;
     $176 = HEAP32[$175>>2]|0;
     $177 = $11;
     $178 = (FUNCTION_TABLE_iii[$176 & 511]($174,$177)|0);
     if ($178) {
      break;
     }
     $179 = $__ndptr;
     $180 = HEAP32[$179>>2]|0;
     $__ndptr = $180;
    }
    $333 = $__ndptr;
    $79 = $93;
    $80 = $333;
    $334 = $79;
    $335 = $80;
    HEAP32[$334>>2] = $335;
    $83 = $agg$result;
    $84 = $93;
    $85 = $__inserted;
    $336 = $83;
    $337 = $84;
    $82 = $337;
    $338 = $82;
    ;HEAP32[$336>>2]=HEAP32[$338>>2]|0;
    $339 = ((($336)) + 4|0);
    $340 = $85;
    $81 = $340;
    $341 = $81;
    $342 = HEAP8[$341>>0]|0;
    $343 = $342&1;
    $344 = $343&1;
    HEAP8[$339>>0] = $344;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $17 = $94;
 $181 = $17;
 $182 = ((($181)) + 12|0);
 $16 = $182;
 $183 = $16;
 $15 = $183;
 $184 = $15;
 $185 = HEAP32[$184>>2]|0;
 $186 = (($185) + 1)|0;
 $187 = (+($186>>>0));
 $188 = $__bc;
 $189 = (+($188>>>0));
 $20 = $94;
 $190 = $20;
 $191 = ((($190)) + 16|0);
 $19 = $191;
 $192 = $19;
 $18 = $192;
 $193 = $18;
 $194 = +HEAPF32[$193>>2];
 $195 = $189 * $194;
 $196 = $187 > $195;
 $197 = $__bc;
 $198 = ($197|0)==(0);
 $or$cond = $196 | $198;
 if ($or$cond) {
  $199 = $__bc;
  $200 = $199<<1;
  $201 = $__bc;
  $21 = $201;
  $202 = $21;
  $203 = ($202>>>0)>(2);
  if ($203) {
   $204 = $21;
   $205 = $21;
   $206 = (($205) - 1)|0;
   $207 = $204 & $206;
   $208 = ($207|0)!=(0);
   $209 = $208 ^ 1;
   $211 = $209;
  } else {
   $211 = 0;
  }
  $210 = $211 ^ 1;
  $212 = $210&1;
  $213 = (($200) + ($212))|0;
  HEAP32[$91>>2] = $213;
  $24 = $94;
  $214 = $24;
  $215 = ((($214)) + 12|0);
  $23 = $215;
  $216 = $23;
  $22 = $216;
  $217 = $22;
  $218 = HEAP32[$217>>2]|0;
  $219 = (($218) + 1)|0;
  $220 = (+($219>>>0));
  $27 = $94;
  $221 = $27;
  $222 = ((($221)) + 16|0);
  $26 = $222;
  $223 = $26;
  $25 = $223;
  $224 = $25;
  $225 = +HEAPF32[$224>>2];
  $226 = $220 / $225;
  $30 = $226;
  $227 = $30;
  $228 = (+Math_ceil((+$227)));
  $229 = (~~(($228))>>>0);
  HEAP32[$92>>2] = $229;
  $37 = $91;
  $38 = $92;
  $230 = $37;
  $231 = $38;
  ;HEAP8[$36>>0]=HEAP8[$39>>0]|0;
  $34 = $230;
  $35 = $231;
  $232 = $34;
  $233 = $35;
  $31 = $36;
  $32 = $232;
  $33 = $233;
  $234 = $32;
  $235 = HEAP32[$234>>2]|0;
  $236 = $33;
  $237 = HEAP32[$236>>2]|0;
  $238 = ($235>>>0)<($237>>>0);
  $239 = $35;
  $240 = $34;
  $241 = $238 ? $239 : $240;
  $242 = HEAP32[$241>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEE6rehashEj($94,$242);
  $55 = $94;
  $243 = $55;
  $54 = $243;
  $244 = $54;
  $53 = $244;
  $245 = $53;
  $52 = $245;
  $246 = $52;
  $247 = ((($246)) + 4|0);
  $51 = $247;
  $248 = $51;
  $50 = $248;
  $249 = $50;
  $49 = $249;
  $250 = $49;
  $251 = HEAP32[$250>>2]|0;
  $__bc = $251;
  $252 = $90;
  $253 = ((($252)) + 4|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = $__bc;
  $56 = $254;
  $57 = $255;
  $256 = $57;
  $257 = $57;
  $258 = (($257) - 1)|0;
  $259 = $256 & $258;
  $260 = ($259|0)!=(0);
  $261 = $56;
  $262 = $57;
  if ($260) {
   $265 = (($261>>>0) % ($262>>>0))&-1;
   $266 = $265;
  } else {
   $263 = (($262) - 1)|0;
   $264 = $261 & $263;
   $266 = $264;
  }
  $__chash = $266;
 }
 $267 = $__chash;
 $60 = $94;
 $61 = $267;
 $268 = $60;
 $269 = $61;
 $59 = $268;
 $270 = $59;
 $58 = $270;
 $271 = $58;
 $272 = HEAP32[$271>>2]|0;
 $273 = (($272) + ($269<<2)|0);
 $274 = HEAP32[$273>>2]|0;
 $__pn = $274;
 $275 = $__pn;
 $276 = ($275|0)==(0|0);
 if ($276) {
  $277 = ((($94)) + 8|0);
  $63 = $277;
  $278 = $63;
  $62 = $278;
  $279 = $62;
  $65 = $279;
  $280 = $65;
  $64 = $280;
  $281 = $64;
  $__pn = $281;
  $282 = $__pn;
  $283 = HEAP32[$282>>2]|0;
  $284 = $90;
  HEAP32[$284>>2] = $283;
  $285 = $90;
  $286 = $__pn;
  HEAP32[$286>>2] = $285;
  $287 = $__pn;
  $288 = $__chash;
  $68 = $94;
  $69 = $288;
  $289 = $68;
  $290 = $69;
  $67 = $289;
  $291 = $67;
  $66 = $291;
  $292 = $66;
  $293 = HEAP32[$292>>2]|0;
  $294 = (($293) + ($290<<2)|0);
  HEAP32[$294>>2] = $287;
  $295 = $90;
  $296 = HEAP32[$295>>2]|0;
  $297 = ($296|0)!=(0|0);
  if ($297) {
   $298 = $90;
   $299 = $90;
   $300 = HEAP32[$299>>2]|0;
   $301 = ((($300)) + 4|0);
   $302 = HEAP32[$301>>2]|0;
   $303 = $__bc;
   $70 = $302;
   $71 = $303;
   $304 = $71;
   $305 = $71;
   $306 = (($305) - 1)|0;
   $307 = $304 & $306;
   $308 = ($307|0)!=(0);
   $309 = $70;
   $310 = $71;
   if ($308) {
    $313 = (($309>>>0) % ($310>>>0))&-1;
    $314 = $313;
   } else {
    $311 = (($310) - 1)|0;
    $312 = $309 & $311;
    $314 = $312;
   }
   $74 = $94;
   $75 = $314;
   $315 = $74;
   $316 = $75;
   $73 = $315;
   $317 = $73;
   $72 = $317;
   $318 = $72;
   $319 = HEAP32[$318>>2]|0;
   $320 = (($319) + ($316<<2)|0);
   HEAP32[$320>>2] = $298;
  }
 } else {
  $321 = $__pn;
  $322 = HEAP32[$321>>2]|0;
  $323 = $90;
  HEAP32[$323>>2] = $322;
  $324 = $90;
  $325 = $__pn;
  HEAP32[$325>>2] = $324;
 }
 $326 = $90;
 $__ndptr = $326;
 $78 = $94;
 $327 = $78;
 $328 = ((($327)) + 12|0);
 $77 = $328;
 $329 = $77;
 $76 = $329;
 $330 = $76;
 $331 = HEAP32[$330>>2]|0;
 $332 = (($331) + 1)|0;
 HEAP32[$330>>2] = $332;
 HEAP8[$__inserted>>0] = 1;
 $333 = $__ndptr;
 $79 = $93;
 $80 = $333;
 $334 = $79;
 $335 = $80;
 HEAP32[$334>>2] = $335;
 $83 = $agg$result;
 $84 = $93;
 $85 = $__inserted;
 $336 = $83;
 $337 = $84;
 $82 = $337;
 $338 = $82;
 ;HEAP32[$336>>2]=HEAP32[$338>>2]|0;
 $339 = ((($336)) + 4|0);
 $340 = $85;
 $81 = $340;
 $341 = $81;
 $342 = HEAP8[$341>>0]|0;
 $343 = $342&1;
 $344 = $343&1;
 HEAP8[$339>>0] = $344;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS2_8variableEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE6rehashEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $21 = sp;
 $24 = sp + 144|0;
 $34 = sp + 124|0;
 $35 = sp + 92|0;
 $33 = $this;
 HEAP32[$34>>2] = $__n;
 $36 = $33;
 $37 = HEAP32[$34>>2]|0;
 $38 = ($37|0)==(1);
 if ($38) {
  HEAP32[$34>>2] = 2;
 } else {
  $39 = HEAP32[$34>>2]|0;
  $40 = HEAP32[$34>>2]|0;
  $41 = (($40) - 1)|0;
  $42 = $39 & $41;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = HEAP32[$34>>2]|0;
   $45 = (__ZNSt3__112__next_primeEj($44)|0);
   HEAP32[$34>>2] = $45;
  }
 }
 $32 = $36;
 $46 = $32;
 $31 = $46;
 $47 = $31;
 $30 = $47;
 $48 = $30;
 $29 = $48;
 $49 = $29;
 $50 = ((($49)) + 4|0);
 $28 = $50;
 $51 = $28;
 $27 = $51;
 $52 = $27;
 $26 = $52;
 $53 = $26;
 $54 = HEAP32[$53>>2]|0;
 $__bc = $54;
 $55 = HEAP32[$34>>2]|0;
 $56 = $__bc;
 $57 = ($55>>>0)>($56>>>0);
 $58 = HEAP32[$34>>2]|0;
 if ($57) {
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS2_8variableEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE8__rehashEj($36,$58);
  STACKTOP = sp;return;
 }
 $59 = $__bc;
 $60 = ($58>>>0)<($59>>>0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $61 = $__bc;
 $25 = $61;
 $62 = $25;
 $63 = ($62>>>0)>(2);
 if ($63) {
  $64 = $25;
  $65 = $25;
  $66 = (($65) - 1)|0;
  $67 = $64 & $66;
  $68 = ($67|0)!=(0);
  $69 = $68 ^ 1;
  if ($69) {
   $14 = $36;
   $70 = $14;
   $71 = ((($70)) + 12|0);
   $13 = $71;
   $72 = $13;
   $12 = $72;
   $73 = $12;
   $74 = HEAP32[$73>>2]|0;
   $75 = (+($74>>>0));
   $2 = $36;
   $76 = $2;
   $77 = ((($76)) + 16|0);
   $1 = $77;
   $78 = $1;
   $0 = $78;
   $79 = $0;
   $80 = +HEAPF32[$79>>2];
   $81 = $75 / $80;
   $3 = $81;
   $82 = $3;
   $83 = (+Math_ceil((+$82)));
   $84 = (~~(($83))>>>0);
   $5 = $84;
   $85 = $5;
   $86 = (($85) - 1)|0;
   $4 = $86;
   $87 = $4;
   $88 = (Math_clz32(($87|0))|0);
   $89 = (32 - ($88))|0;
   $90 = 1 << $89;
   $107 = $90;
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $8 = $36;
  $91 = $8;
  $92 = ((($91)) + 12|0);
  $7 = $92;
  $93 = $7;
  $6 = $93;
  $94 = $6;
  $95 = HEAP32[$94>>2]|0;
  $96 = (+($95>>>0));
  $11 = $36;
  $97 = $11;
  $98 = ((($97)) + 16|0);
  $10 = $98;
  $99 = $10;
  $9 = $99;
  $100 = $9;
  $101 = +HEAPF32[$100>>2];
  $102 = $96 / $101;
  $15 = $102;
  $103 = $15;
  $104 = (+Math_ceil((+$103)));
  $105 = (~~(($104))>>>0);
  $106 = (__ZNSt3__112__next_primeEj($105)|0);
  $107 = $106;
 }
 HEAP32[$35>>2] = $107;
 $22 = $34;
 $23 = $35;
 $108 = $22;
 $109 = $23;
 ;HEAP8[$21>>0]=HEAP8[$24>>0]|0;
 $19 = $108;
 $20 = $109;
 $110 = $19;
 $111 = $20;
 $16 = $21;
 $17 = $110;
 $18 = $111;
 $112 = $17;
 $113 = HEAP32[$112>>2]|0;
 $114 = $18;
 $115 = HEAP32[$114>>2]|0;
 $116 = ($113>>>0)<($115>>>0);
 $117 = $20;
 $118 = $19;
 $119 = $116 ? $117 : $118;
 $120 = HEAP32[$119>>2]|0;
 HEAP32[$34>>2] = $120;
 $121 = HEAP32[$34>>2]|0;
 $122 = $__bc;
 $123 = ($121>>>0)<($122>>>0);
 if (!($123)) {
  STACKTOP = sp;return;
 }
 $124 = HEAP32[$34>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS2_8variableEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE8__rehashEj($36,$124);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS2_8variableEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE8__rehashEj($this,$__nbc) {
 $this = $this|0;
 $__nbc = $__nbc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__chash = 0, $__cp = 0, $__i = 0, $__np = 0, $__npa = 0;
 var $__phash = 0, $__pp = 0, $__tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $82 = $this;
 $83 = $__nbc;
 $84 = $82;
 $81 = $84;
 $85 = $81;
 $80 = $85;
 $86 = $80;
 $79 = $86;
 $87 = $79;
 $88 = ((($87)) + 4|0);
 $64 = $88;
 $89 = $64;
 $63 = $89;
 $90 = $63;
 $62 = $90;
 $91 = $62;
 $__npa = $91;
 $92 = $83;
 $93 = ($92>>>0)>(0);
 if ($93) {
  $94 = $__npa;
  $95 = $83;
  $4 = $94;
  $5 = $95;
  $96 = $4;
  $97 = $5;
  $1 = $96;
  $2 = $97;
  $3 = 0;
  $98 = $2;
  $99 = $98<<2;
  $0 = $99;
  $100 = $0;
  $101 = (__Znwj($100)|0);
  $102 = $101;
 } else {
  $102 = 0;
 }
 $27 = $84;
 $28 = $102;
 $103 = $27;
 $26 = $103;
 $104 = $26;
 $25 = $104;
 $105 = $25;
 $106 = HEAP32[$105>>2]|0;
 $__tmp$i = $106;
 $107 = $28;
 $9 = $103;
 $108 = $9;
 $8 = $108;
 $109 = $8;
 HEAP32[$109>>2] = $107;
 $110 = $__tmp$i;
 $111 = ($110|0)!=(0|0);
 if ($111) {
  $7 = $103;
  $112 = $7;
  $6 = $112;
  $113 = $6;
  $114 = ((($113)) + 4|0);
  $115 = $__tmp$i;
  $23 = $114;
  $24 = $115;
  $116 = $23;
  $22 = $116;
  $117 = $22;
  $21 = $117;
  $118 = $21;
  $20 = $118;
  $119 = $20;
  $120 = $24;
  $12 = $116;
  $121 = $12;
  $11 = $121;
  $122 = $11;
  $10 = $122;
  $123 = $10;
  $124 = HEAP32[$123>>2]|0;
  $17 = $119;
  $18 = $120;
  $19 = $124;
  $125 = $17;
  $126 = $18;
  $127 = $19;
  $14 = $125;
  $15 = $126;
  $16 = $127;
  $128 = $15;
  $13 = $128;
  $129 = $13;
  __ZdlPv($129);
 }
 $130 = $83;
 $31 = $84;
 $131 = $31;
 $30 = $131;
 $132 = $30;
 $29 = $132;
 $133 = $29;
 $134 = ((($133)) + 4|0);
 $34 = $134;
 $135 = $34;
 $33 = $135;
 $136 = $33;
 $32 = $136;
 $137 = $32;
 HEAP32[$137>>2] = $130;
 $138 = $83;
 $139 = ($138>>>0)>(0);
 if (!($139)) {
  STACKTOP = sp;return;
 }
 $__i = 0;
 while(1) {
  $140 = $__i;
  $141 = $83;
  $142 = ($140>>>0)<($141>>>0);
  if (!($142)) {
   break;
  }
  $143 = $__i;
  $37 = $84;
  $38 = $143;
  $144 = $37;
  $145 = $38;
  $36 = $144;
  $146 = $36;
  $35 = $146;
  $147 = $35;
  $148 = HEAP32[$147>>2]|0;
  $149 = (($148) + ($145<<2)|0);
  HEAP32[$149>>2] = 0;
  $150 = $__i;
  $151 = (($150) + 1)|0;
  $__i = $151;
 }
 $152 = ((($84)) + 8|0);
 $40 = $152;
 $153 = $40;
 $39 = $153;
 $154 = $39;
 $42 = $154;
 $155 = $42;
 $41 = $155;
 $156 = $41;
 $__pp = $156;
 $157 = $__pp;
 $158 = HEAP32[$157>>2]|0;
 $__cp = $158;
 $159 = $__cp;
 $160 = ($159|0)!=(0|0);
 if (!($160)) {
  STACKTOP = sp;return;
 }
 $161 = $__cp;
 $162 = ((($161)) + 4|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = $83;
 $43 = $163;
 $44 = $164;
 $165 = $44;
 $166 = $44;
 $167 = (($166) - 1)|0;
 $168 = $165 & $167;
 $169 = ($168|0)!=(0);
 $170 = $43;
 $171 = $44;
 if ($169) {
  $174 = (($170>>>0) % ($171>>>0))&-1;
  $175 = $174;
 } else {
  $172 = (($171) - 1)|0;
  $173 = $170 & $172;
  $175 = $173;
 }
 $__chash = $175;
 $176 = $__pp;
 $177 = $__chash;
 $47 = $84;
 $48 = $177;
 $178 = $47;
 $179 = $48;
 $46 = $178;
 $180 = $46;
 $45 = $180;
 $181 = $45;
 $182 = HEAP32[$181>>2]|0;
 $183 = (($182) + ($179<<2)|0);
 HEAP32[$183>>2] = $176;
 $184 = $__chash;
 $__phash = $184;
 $185 = $__cp;
 $__pp = $185;
 $186 = $__cp;
 $187 = HEAP32[$186>>2]|0;
 $__cp = $187;
 while(1) {
  $188 = $__cp;
  $189 = ($188|0)!=(0|0);
  if (!($189)) {
   break;
  }
  $190 = $__cp;
  $191 = ((($190)) + 4|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = $83;
  $49 = $192;
  $50 = $193;
  $194 = $50;
  $195 = $50;
  $196 = (($195) - 1)|0;
  $197 = $194 & $196;
  $198 = ($197|0)!=(0);
  $199 = $49;
  $200 = $50;
  if ($198) {
   $203 = (($199>>>0) % ($200>>>0))&-1;
   $204 = $203;
  } else {
   $201 = (($200) - 1)|0;
   $202 = $199 & $201;
   $204 = $202;
  }
  $__chash = $204;
  $205 = $__chash;
  $206 = $__phash;
  $207 = ($205|0)==($206|0);
  do {
   if ($207) {
    $208 = $__cp;
    $__pp = $208;
   } else {
    $209 = $__chash;
    $53 = $84;
    $54 = $209;
    $210 = $53;
    $211 = $54;
    $52 = $210;
    $212 = $52;
    $51 = $212;
    $213 = $51;
    $214 = HEAP32[$213>>2]|0;
    $215 = (($214) + ($211<<2)|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = ($216|0)==(0|0);
    if ($217) {
     $218 = $__pp;
     $219 = $__chash;
     $57 = $84;
     $58 = $219;
     $220 = $57;
     $221 = $58;
     $56 = $220;
     $222 = $56;
     $55 = $222;
     $223 = $55;
     $224 = HEAP32[$223>>2]|0;
     $225 = (($224) + ($221<<2)|0);
     HEAP32[$225>>2] = $218;
     $226 = $__cp;
     $__pp = $226;
     $227 = $__chash;
     $__phash = $227;
     break;
    }
    $228 = $__cp;
    $__np = $228;
    while(1) {
     $229 = $__np;
     $230 = HEAP32[$229>>2]|0;
     $231 = ($230|0)!=(0|0);
     if (!($231)) {
      break;
     }
     $61 = $84;
     $232 = $61;
     $233 = ((($232)) + 16|0);
     $60 = $233;
     $234 = $60;
     $59 = $234;
     $235 = $59;
     $236 = $__cp;
     $237 = ((($236)) + 8|0);
     $238 = $__np;
     $239 = HEAP32[$238>>2]|0;
     $240 = ((($239)) + 8|0);
     $68 = $235;
     $69 = $237;
     $70 = $240;
     $241 = $68;
     $242 = $69;
     $243 = $70;
     $65 = $241;
     $66 = $242;
     $67 = $243;
     $244 = $66;
     $245 = HEAP32[$244>>2]|0;
     $246 = HEAP32[$245>>2]|0;
     $247 = $67;
     $248 = (FUNCTION_TABLE_iii[$246 & 511]($244,$247)|0);
     if (!($248)) {
      break;
     }
     $249 = $__np;
     $250 = HEAP32[$249>>2]|0;
     $__np = $250;
    }
    $251 = $__np;
    $252 = HEAP32[$251>>2]|0;
    $253 = $__pp;
    HEAP32[$253>>2] = $252;
    $254 = $__chash;
    $73 = $84;
    $74 = $254;
    $255 = $73;
    $256 = $74;
    $72 = $255;
    $257 = $72;
    $71 = $257;
    $258 = $71;
    $259 = HEAP32[$258>>2]|0;
    $260 = (($259) + ($256<<2)|0);
    $261 = HEAP32[$260>>2]|0;
    $262 = HEAP32[$261>>2]|0;
    $263 = $__np;
    HEAP32[$263>>2] = $262;
    $264 = $__cp;
    $265 = $__chash;
    $77 = $84;
    $78 = $265;
    $266 = $77;
    $267 = $78;
    $76 = $266;
    $268 = $76;
    $75 = $268;
    $269 = $75;
    $270 = HEAP32[$269>>2]|0;
    $271 = (($270) + ($267<<2)|0);
    $272 = HEAP32[$271>>2]|0;
    HEAP32[$272>>2] = $264;
   }
  } while(0);
  $273 = $__pp;
  $274 = HEAP32[$273>>2]|0;
  $__cp = $274;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS2_8variableEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS5_PvEE($agg$result,$this,$__nd) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0.0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__inserted = 0, $__ndptr = 0, $__pn = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $36 = sp;
 $39 = sp + 388|0;
 $__inserted = sp + 389|0;
 $91 = sp + 172|0;
 $92 = sp + 236|0;
 $93 = sp + 152|0;
 $89 = $this;
 $90 = $__nd;
 $94 = $89;
 $88 = $94;
 $95 = $88;
 $96 = ((($95)) + 12|0);
 $87 = $96;
 $97 = $87;
 $86 = $97;
 $98 = $86;
 $99 = $90;
 $100 = ((($99)) + 8|0);
 $47 = $98;
 $48 = $100;
 $101 = $47;
 $102 = $48;
 $103 = (__ZNKSt3__14hashIN4rhea10constraintEEclERKS2_($101,$102)|0);
 $104 = $90;
 $105 = ((($104)) + 4|0);
 HEAP32[$105>>2] = $103;
 $46 = $94;
 $106 = $46;
 $45 = $106;
 $107 = $45;
 $44 = $107;
 $108 = $44;
 $43 = $108;
 $109 = $43;
 $110 = ((($109)) + 4|0);
 $42 = $110;
 $111 = $42;
 $41 = $111;
 $112 = $41;
 $40 = $112;
 $113 = $40;
 $114 = HEAP32[$113>>2]|0;
 $__bc = $114;
 HEAP8[$__inserted>>0] = 0;
 $115 = $__bc;
 $116 = ($115|0)!=(0);
 L1: do {
  if ($116) {
   $117 = $90;
   $118 = ((($117)) + 4|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $__bc;
   $28 = $119;
   $29 = $120;
   $121 = $29;
   $122 = $29;
   $123 = (($122) - 1)|0;
   $124 = $121 & $123;
   $125 = ($124|0)!=(0);
   $126 = $28;
   $127 = $29;
   if ($125) {
    $130 = (($126>>>0) % ($127>>>0))&-1;
    $131 = $130;
   } else {
    $128 = (($127) - 1)|0;
    $129 = $126 & $128;
    $131 = $129;
   }
   $__chash = $131;
   $132 = $__chash;
   $7 = $94;
   $8 = $132;
   $133 = $7;
   $134 = $8;
   $6 = $133;
   $135 = $6;
   $5 = $135;
   $136 = $5;
   $137 = HEAP32[$136>>2]|0;
   $138 = (($137) + ($134<<2)|0);
   $139 = HEAP32[$138>>2]|0;
   $__ndptr = $139;
   $140 = $__ndptr;
   $141 = ($140|0)!=(0|0);
   if ($141) {
    $142 = $__ndptr;
    $143 = HEAP32[$142>>2]|0;
    $__ndptr = $143;
    while(1) {
     $144 = $__ndptr;
     $145 = ($144|0)!=(0|0);
     if (!($145)) {
      break L1;
     }
     $146 = $__ndptr;
     $147 = ((($146)) + 4|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = $__bc;
     $0 = $148;
     $1 = $149;
     $150 = $1;
     $151 = $1;
     $152 = (($151) - 1)|0;
     $153 = $150 & $152;
     $154 = ($153|0)!=(0);
     $155 = $0;
     $156 = $1;
     if ($154) {
      $159 = (($155>>>0) % ($156>>>0))&-1;
      $162 = $159;
     } else {
      $157 = (($156) - 1)|0;
      $158 = $155 & $157;
      $162 = $158;
     }
     $160 = $__chash;
     $161 = ($162|0)==($160|0);
     if (!($161)) {
      break L1;
     }
     $4 = $94;
     $163 = $4;
     $164 = ((($163)) + 16|0);
     $3 = $164;
     $165 = $3;
     $2 = $165;
     $166 = $2;
     $167 = $__ndptr;
     $168 = ((($167)) + 8|0);
     $169 = $90;
     $170 = ((($169)) + 8|0);
     $12 = $166;
     $13 = $168;
     $14 = $170;
     $171 = $12;
     $172 = $13;
     $173 = $14;
     $9 = $171;
     $10 = $172;
     $11 = $173;
     $174 = $10;
     $175 = HEAP32[$174>>2]|0;
     $176 = HEAP32[$175>>2]|0;
     $177 = $11;
     $178 = (FUNCTION_TABLE_iii[$176 & 511]($174,$177)|0);
     if ($178) {
      break;
     }
     $179 = $__ndptr;
     $180 = HEAP32[$179>>2]|0;
     $__ndptr = $180;
    }
    $333 = $__ndptr;
    $79 = $93;
    $80 = $333;
    $334 = $79;
    $335 = $80;
    HEAP32[$334>>2] = $335;
    $83 = $agg$result;
    $84 = $93;
    $85 = $__inserted;
    $336 = $83;
    $337 = $84;
    $82 = $337;
    $338 = $82;
    ;HEAP32[$336>>2]=HEAP32[$338>>2]|0;
    $339 = ((($336)) + 4|0);
    $340 = $85;
    $81 = $340;
    $341 = $81;
    $342 = HEAP8[$341>>0]|0;
    $343 = $342&1;
    $344 = $343&1;
    HEAP8[$339>>0] = $344;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $17 = $94;
 $181 = $17;
 $182 = ((($181)) + 12|0);
 $16 = $182;
 $183 = $16;
 $15 = $183;
 $184 = $15;
 $185 = HEAP32[$184>>2]|0;
 $186 = (($185) + 1)|0;
 $187 = (+($186>>>0));
 $188 = $__bc;
 $189 = (+($188>>>0));
 $20 = $94;
 $190 = $20;
 $191 = ((($190)) + 16|0);
 $19 = $191;
 $192 = $19;
 $18 = $192;
 $193 = $18;
 $194 = +HEAPF32[$193>>2];
 $195 = $189 * $194;
 $196 = $187 > $195;
 $197 = $__bc;
 $198 = ($197|0)==(0);
 $or$cond = $196 | $198;
 if ($or$cond) {
  $199 = $__bc;
  $200 = $199<<1;
  $201 = $__bc;
  $21 = $201;
  $202 = $21;
  $203 = ($202>>>0)>(2);
  if ($203) {
   $204 = $21;
   $205 = $21;
   $206 = (($205) - 1)|0;
   $207 = $204 & $206;
   $208 = ($207|0)!=(0);
   $209 = $208 ^ 1;
   $211 = $209;
  } else {
   $211 = 0;
  }
  $210 = $211 ^ 1;
  $212 = $210&1;
  $213 = (($200) + ($212))|0;
  HEAP32[$91>>2] = $213;
  $24 = $94;
  $214 = $24;
  $215 = ((($214)) + 12|0);
  $23 = $215;
  $216 = $23;
  $22 = $216;
  $217 = $22;
  $218 = HEAP32[$217>>2]|0;
  $219 = (($218) + 1)|0;
  $220 = (+($219>>>0));
  $27 = $94;
  $221 = $27;
  $222 = ((($221)) + 16|0);
  $26 = $222;
  $223 = $26;
  $25 = $223;
  $224 = $25;
  $225 = +HEAPF32[$224>>2];
  $226 = $220 / $225;
  $30 = $226;
  $227 = $30;
  $228 = (+Math_ceil((+$227)));
  $229 = (~~(($228))>>>0);
  HEAP32[$92>>2] = $229;
  $37 = $91;
  $38 = $92;
  $230 = $37;
  $231 = $38;
  ;HEAP8[$36>>0]=HEAP8[$39>>0]|0;
  $34 = $230;
  $35 = $231;
  $232 = $34;
  $233 = $35;
  $31 = $36;
  $32 = $232;
  $33 = $233;
  $234 = $32;
  $235 = HEAP32[$234>>2]|0;
  $236 = $33;
  $237 = HEAP32[$236>>2]|0;
  $238 = ($235>>>0)<($237>>>0);
  $239 = $35;
  $240 = $34;
  $241 = $238 ? $239 : $240;
  $242 = HEAP32[$241>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS2_8variableEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE6rehashEj($94,$242);
  $55 = $94;
  $243 = $55;
  $54 = $243;
  $244 = $54;
  $53 = $244;
  $245 = $53;
  $52 = $245;
  $246 = $52;
  $247 = ((($246)) + 4|0);
  $51 = $247;
  $248 = $51;
  $50 = $248;
  $249 = $50;
  $49 = $249;
  $250 = $49;
  $251 = HEAP32[$250>>2]|0;
  $__bc = $251;
  $252 = $90;
  $253 = ((($252)) + 4|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = $__bc;
  $56 = $254;
  $57 = $255;
  $256 = $57;
  $257 = $57;
  $258 = (($257) - 1)|0;
  $259 = $256 & $258;
  $260 = ($259|0)!=(0);
  $261 = $56;
  $262 = $57;
  if ($260) {
   $265 = (($261>>>0) % ($262>>>0))&-1;
   $266 = $265;
  } else {
   $263 = (($262) - 1)|0;
   $264 = $261 & $263;
   $266 = $264;
  }
  $__chash = $266;
 }
 $267 = $__chash;
 $60 = $94;
 $61 = $267;
 $268 = $60;
 $269 = $61;
 $59 = $268;
 $270 = $59;
 $58 = $270;
 $271 = $58;
 $272 = HEAP32[$271>>2]|0;
 $273 = (($272) + ($269<<2)|0);
 $274 = HEAP32[$273>>2]|0;
 $__pn = $274;
 $275 = $__pn;
 $276 = ($275|0)==(0|0);
 if ($276) {
  $277 = ((($94)) + 8|0);
  $63 = $277;
  $278 = $63;
  $62 = $278;
  $279 = $62;
  $65 = $279;
  $280 = $65;
  $64 = $280;
  $281 = $64;
  $__pn = $281;
  $282 = $__pn;
  $283 = HEAP32[$282>>2]|0;
  $284 = $90;
  HEAP32[$284>>2] = $283;
  $285 = $90;
  $286 = $__pn;
  HEAP32[$286>>2] = $285;
  $287 = $__pn;
  $288 = $__chash;
  $68 = $94;
  $69 = $288;
  $289 = $68;
  $290 = $69;
  $67 = $289;
  $291 = $67;
  $66 = $291;
  $292 = $66;
  $293 = HEAP32[$292>>2]|0;
  $294 = (($293) + ($290<<2)|0);
  HEAP32[$294>>2] = $287;
  $295 = $90;
  $296 = HEAP32[$295>>2]|0;
  $297 = ($296|0)!=(0|0);
  if ($297) {
   $298 = $90;
   $299 = $90;
   $300 = HEAP32[$299>>2]|0;
   $301 = ((($300)) + 4|0);
   $302 = HEAP32[$301>>2]|0;
   $303 = $__bc;
   $70 = $302;
   $71 = $303;
   $304 = $71;
   $305 = $71;
   $306 = (($305) - 1)|0;
   $307 = $304 & $306;
   $308 = ($307|0)!=(0);
   $309 = $70;
   $310 = $71;
   if ($308) {
    $313 = (($309>>>0) % ($310>>>0))&-1;
    $314 = $313;
   } else {
    $311 = (($310) - 1)|0;
    $312 = $309 & $311;
    $314 = $312;
   }
   $74 = $94;
   $75 = $314;
   $315 = $74;
   $316 = $75;
   $73 = $315;
   $317 = $73;
   $72 = $317;
   $318 = $72;
   $319 = HEAP32[$318>>2]|0;
   $320 = (($319) + ($316<<2)|0);
   HEAP32[$320>>2] = $298;
  }
 } else {
  $321 = $__pn;
  $322 = HEAP32[$321>>2]|0;
  $323 = $90;
  HEAP32[$323>>2] = $322;
  $324 = $90;
  $325 = $__pn;
  HEAP32[$325>>2] = $324;
 }
 $326 = $90;
 $__ndptr = $326;
 $78 = $94;
 $327 = $78;
 $328 = ((($327)) + 12|0);
 $77 = $328;
 $329 = $77;
 $76 = $329;
 $330 = $76;
 $331 = HEAP32[$330>>2]|0;
 $332 = (($331) + 1)|0;
 HEAP32[$330>>2] = $332;
 HEAP8[$__inserted>>0] = 1;
 $333 = $__ndptr;
 $79 = $93;
 $80 = $333;
 $334 = $79;
 $335 = $80;
 HEAP32[$334>>2] = $335;
 $83 = $agg$result;
 $84 = $93;
 $85 = $__inserted;
 $336 = $83;
 $337 = $84;
 $82 = $337;
 $338 = $82;
 ;HEAP32[$336>>2]=HEAP32[$338>>2]|0;
 $339 = ((($336)) + 4|0);
 $340 = $85;
 $81 = $340;
 $341 = $81;
 $342 = HEAP8[$341>>0]|0;
 $343 = $342&1;
 $344 = $343&1;
 HEAP8[$339>>0] = $344;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE6rehashEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $21 = sp;
 $24 = sp + 144|0;
 $34 = sp + 124|0;
 $35 = sp + 92|0;
 $33 = $this;
 HEAP32[$34>>2] = $__n;
 $36 = $33;
 $37 = HEAP32[$34>>2]|0;
 $38 = ($37|0)==(1);
 if ($38) {
  HEAP32[$34>>2] = 2;
 } else {
  $39 = HEAP32[$34>>2]|0;
  $40 = HEAP32[$34>>2]|0;
  $41 = (($40) - 1)|0;
  $42 = $39 & $41;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = HEAP32[$34>>2]|0;
   $45 = (__ZNSt3__112__next_primeEj($44)|0);
   HEAP32[$34>>2] = $45;
  }
 }
 $32 = $36;
 $46 = $32;
 $31 = $46;
 $47 = $31;
 $30 = $47;
 $48 = $30;
 $29 = $48;
 $49 = $29;
 $50 = ((($49)) + 4|0);
 $28 = $50;
 $51 = $28;
 $27 = $51;
 $52 = $27;
 $26 = $52;
 $53 = $26;
 $54 = HEAP32[$53>>2]|0;
 $__bc = $54;
 $55 = HEAP32[$34>>2]|0;
 $56 = $__bc;
 $57 = ($55>>>0)>($56>>>0);
 $58 = HEAP32[$34>>2]|0;
 if ($57) {
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE8__rehashEj($36,$58);
  STACKTOP = sp;return;
 }
 $59 = $__bc;
 $60 = ($58>>>0)<($59>>>0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $61 = $__bc;
 $25 = $61;
 $62 = $25;
 $63 = ($62>>>0)>(2);
 if ($63) {
  $64 = $25;
  $65 = $25;
  $66 = (($65) - 1)|0;
  $67 = $64 & $66;
  $68 = ($67|0)!=(0);
  $69 = $68 ^ 1;
  if ($69) {
   $14 = $36;
   $70 = $14;
   $71 = ((($70)) + 12|0);
   $13 = $71;
   $72 = $13;
   $12 = $72;
   $73 = $12;
   $74 = HEAP32[$73>>2]|0;
   $75 = (+($74>>>0));
   $2 = $36;
   $76 = $2;
   $77 = ((($76)) + 16|0);
   $1 = $77;
   $78 = $1;
   $0 = $78;
   $79 = $0;
   $80 = +HEAPF32[$79>>2];
   $81 = $75 / $80;
   $3 = $81;
   $82 = $3;
   $83 = (+Math_ceil((+$82)));
   $84 = (~~(($83))>>>0);
   $5 = $84;
   $85 = $5;
   $86 = (($85) - 1)|0;
   $4 = $86;
   $87 = $4;
   $88 = (Math_clz32(($87|0))|0);
   $89 = (32 - ($88))|0;
   $90 = 1 << $89;
   $107 = $90;
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $8 = $36;
  $91 = $8;
  $92 = ((($91)) + 12|0);
  $7 = $92;
  $93 = $7;
  $6 = $93;
  $94 = $6;
  $95 = HEAP32[$94>>2]|0;
  $96 = (+($95>>>0));
  $11 = $36;
  $97 = $11;
  $98 = ((($97)) + 16|0);
  $10 = $98;
  $99 = $10;
  $9 = $99;
  $100 = $9;
  $101 = +HEAPF32[$100>>2];
  $102 = $96 / $101;
  $15 = $102;
  $103 = $15;
  $104 = (+Math_ceil((+$103)));
  $105 = (~~(($104))>>>0);
  $106 = (__ZNSt3__112__next_primeEj($105)|0);
  $107 = $106;
 }
 HEAP32[$35>>2] = $107;
 $22 = $34;
 $23 = $35;
 $108 = $22;
 $109 = $23;
 ;HEAP8[$21>>0]=HEAP8[$24>>0]|0;
 $19 = $108;
 $20 = $109;
 $110 = $19;
 $111 = $20;
 $16 = $21;
 $17 = $110;
 $18 = $111;
 $112 = $17;
 $113 = HEAP32[$112>>2]|0;
 $114 = $18;
 $115 = HEAP32[$114>>2]|0;
 $116 = ($113>>>0)<($115>>>0);
 $117 = $20;
 $118 = $19;
 $119 = $116 ? $117 : $118;
 $120 = HEAP32[$119>>2]|0;
 HEAP32[$34>>2] = $120;
 $121 = HEAP32[$34>>2]|0;
 $122 = $__bc;
 $123 = ($121>>>0)<($122>>>0);
 if (!($123)) {
  STACKTOP = sp;return;
 }
 $124 = HEAP32[$34>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE8__rehashEj($36,$124);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE8__rehashEj($this,$__nbc) {
 $this = $this|0;
 $__nbc = $__nbc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__chash = 0, $__cp = 0, $__i = 0, $__np = 0, $__npa = 0, $__phash = 0, $__pp = 0, $__tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $79 = $this;
 $80 = $__nbc;
 $81 = $79;
 $78 = $81;
 $82 = $78;
 $77 = $82;
 $83 = $77;
 $76 = $83;
 $84 = $76;
 $85 = ((($84)) + 4|0);
 $64 = $85;
 $86 = $64;
 $63 = $86;
 $87 = $63;
 $62 = $87;
 $88 = $62;
 $__npa = $88;
 $89 = $80;
 $90 = ($89>>>0)>(0);
 if ($90) {
  $91 = $__npa;
  $92 = $80;
  $4 = $91;
  $5 = $92;
  $93 = $4;
  $94 = $5;
  $1 = $93;
  $2 = $94;
  $3 = 0;
  $95 = $2;
  $96 = $95<<2;
  $0 = $96;
  $97 = $0;
  $98 = (__Znwj($97)|0);
  $99 = $98;
 } else {
  $99 = 0;
 }
 $27 = $81;
 $28 = $99;
 $100 = $27;
 $26 = $100;
 $101 = $26;
 $25 = $101;
 $102 = $25;
 $103 = HEAP32[$102>>2]|0;
 $__tmp$i = $103;
 $104 = $28;
 $9 = $100;
 $105 = $9;
 $8 = $105;
 $106 = $8;
 HEAP32[$106>>2] = $104;
 $107 = $__tmp$i;
 $108 = ($107|0)!=(0|0);
 if ($108) {
  $7 = $100;
  $109 = $7;
  $6 = $109;
  $110 = $6;
  $111 = ((($110)) + 4|0);
  $112 = $__tmp$i;
  $23 = $111;
  $24 = $112;
  $113 = $23;
  $22 = $113;
  $114 = $22;
  $21 = $114;
  $115 = $21;
  $20 = $115;
  $116 = $20;
  $117 = $24;
  $12 = $113;
  $118 = $12;
  $11 = $118;
  $119 = $11;
  $10 = $119;
  $120 = $10;
  $121 = HEAP32[$120>>2]|0;
  $17 = $116;
  $18 = $117;
  $19 = $121;
  $122 = $17;
  $123 = $18;
  $124 = $19;
  $14 = $122;
  $15 = $123;
  $16 = $124;
  $125 = $15;
  $13 = $125;
  $126 = $13;
  __ZdlPv($126);
 }
 $127 = $80;
 $31 = $81;
 $128 = $31;
 $30 = $128;
 $129 = $30;
 $29 = $129;
 $130 = $29;
 $131 = ((($130)) + 4|0);
 $34 = $131;
 $132 = $34;
 $33 = $132;
 $133 = $33;
 $32 = $133;
 $134 = $32;
 HEAP32[$134>>2] = $127;
 $135 = $80;
 $136 = ($135>>>0)>(0);
 if (!($136)) {
  STACKTOP = sp;return;
 }
 $__i = 0;
 while(1) {
  $137 = $__i;
  $138 = $80;
  $139 = ($137>>>0)<($138>>>0);
  if (!($139)) {
   break;
  }
  $140 = $__i;
  $37 = $81;
  $38 = $140;
  $141 = $37;
  $142 = $38;
  $36 = $141;
  $143 = $36;
  $35 = $143;
  $144 = $35;
  $145 = HEAP32[$144>>2]|0;
  $146 = (($145) + ($142<<2)|0);
  HEAP32[$146>>2] = 0;
  $147 = $__i;
  $148 = (($147) + 1)|0;
  $__i = $148;
 }
 $149 = ((($81)) + 8|0);
 $40 = $149;
 $150 = $40;
 $39 = $150;
 $151 = $39;
 $42 = $151;
 $152 = $42;
 $41 = $152;
 $153 = $41;
 $__pp = $153;
 $154 = $__pp;
 $155 = HEAP32[$154>>2]|0;
 $__cp = $155;
 $156 = $__cp;
 $157 = ($156|0)!=(0|0);
 if (!($157)) {
  STACKTOP = sp;return;
 }
 $158 = $__cp;
 $159 = ((($158)) + 4|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = $80;
 $43 = $160;
 $44 = $161;
 $162 = $44;
 $163 = $44;
 $164 = (($163) - 1)|0;
 $165 = $162 & $164;
 $166 = ($165|0)!=(0);
 $167 = $43;
 $168 = $44;
 if ($166) {
  $171 = (($167>>>0) % ($168>>>0))&-1;
  $172 = $171;
 } else {
  $169 = (($168) - 1)|0;
  $170 = $167 & $169;
  $172 = $170;
 }
 $__chash = $172;
 $173 = $__pp;
 $174 = $__chash;
 $47 = $81;
 $48 = $174;
 $175 = $47;
 $176 = $48;
 $46 = $175;
 $177 = $46;
 $45 = $177;
 $178 = $45;
 $179 = HEAP32[$178>>2]|0;
 $180 = (($179) + ($176<<2)|0);
 HEAP32[$180>>2] = $173;
 $181 = $__chash;
 $__phash = $181;
 $182 = $__cp;
 $__pp = $182;
 $183 = $__cp;
 $184 = HEAP32[$183>>2]|0;
 $__cp = $184;
 while(1) {
  $185 = $__cp;
  $186 = ($185|0)!=(0|0);
  if (!($186)) {
   break;
  }
  $187 = $__cp;
  $188 = ((($187)) + 4|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = $80;
  $49 = $189;
  $50 = $190;
  $191 = $50;
  $192 = $50;
  $193 = (($192) - 1)|0;
  $194 = $191 & $193;
  $195 = ($194|0)!=(0);
  $196 = $49;
  $197 = $50;
  if ($195) {
   $200 = (($196>>>0) % ($197>>>0))&-1;
   $201 = $200;
  } else {
   $198 = (($197) - 1)|0;
   $199 = $196 & $198;
   $201 = $199;
  }
  $__chash = $201;
  $202 = $__chash;
  $203 = $__phash;
  $204 = ($202|0)==($203|0);
  do {
   if ($204) {
    $205 = $__cp;
    $__pp = $205;
   } else {
    $206 = $__chash;
    $53 = $81;
    $54 = $206;
    $207 = $53;
    $208 = $54;
    $52 = $207;
    $209 = $52;
    $51 = $209;
    $210 = $51;
    $211 = HEAP32[$210>>2]|0;
    $212 = (($211) + ($208<<2)|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = ($213|0)==(0|0);
    if ($214) {
     $215 = $__pp;
     $216 = $__chash;
     $57 = $81;
     $58 = $216;
     $217 = $57;
     $218 = $58;
     $56 = $217;
     $219 = $56;
     $55 = $219;
     $220 = $55;
     $221 = HEAP32[$220>>2]|0;
     $222 = (($221) + ($218<<2)|0);
     HEAP32[$222>>2] = $215;
     $223 = $__cp;
     $__pp = $223;
     $224 = $__chash;
     $__phash = $224;
     break;
    }
    $225 = $__cp;
    $__np = $225;
    while(1) {
     $226 = $__np;
     $227 = HEAP32[$226>>2]|0;
     $228 = ($227|0)!=(0|0);
     if (!($228)) {
      break;
     }
     $61 = $81;
     $229 = $61;
     $230 = ((($229)) + 16|0);
     $60 = $230;
     $231 = $60;
     $59 = $231;
     $232 = $59;
     $233 = $__cp;
     $234 = ((($233)) + 8|0);
     $235 = $__np;
     $236 = HEAP32[$235>>2]|0;
     $237 = ((($236)) + 8|0);
     $65 = $232;
     $66 = $234;
     $67 = $237;
     $238 = $65;
     $239 = $66;
     $240 = $67;
     $241 = (__ZNKSt3__18equal_toIN4rhea8variableEEclERKS2_S5_($238,$239,$240)|0);
     if (!($241)) {
      break;
     }
     $242 = $__np;
     $243 = HEAP32[$242>>2]|0;
     $__np = $243;
    }
    $244 = $__np;
    $245 = HEAP32[$244>>2]|0;
    $246 = $__pp;
    HEAP32[$246>>2] = $245;
    $247 = $__chash;
    $70 = $81;
    $71 = $247;
    $248 = $70;
    $249 = $71;
    $69 = $248;
    $250 = $69;
    $68 = $250;
    $251 = $68;
    $252 = HEAP32[$251>>2]|0;
    $253 = (($252) + ($249<<2)|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = HEAP32[$254>>2]|0;
    $256 = $__np;
    HEAP32[$256>>2] = $255;
    $257 = $__cp;
    $258 = $__chash;
    $74 = $81;
    $75 = $258;
    $259 = $74;
    $260 = $75;
    $73 = $259;
    $261 = $73;
    $72 = $261;
    $262 = $72;
    $263 = HEAP32[$262>>2]|0;
    $264 = (($263) + ($260<<2)|0);
    $265 = HEAP32[$264>>2]|0;
    HEAP32[$265>>2] = $257;
   }
  } while(0);
  $266 = $__pp;
  $267 = HEAP32[$266>>2]|0;
  $__cp = $267;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS5_PvEE($agg$result,$this,$__nd) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0.0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0.0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0;
 var $__inserted = 0, $__ndptr = 0, $__pn = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $33 = sp;
 $36 = sp + 376|0;
 $__inserted = sp + 377|0;
 $88 = sp + 248|0;
 $89 = sp + 364|0;
 $90 = sp + 140|0;
 $86 = $this;
 $87 = $__nd;
 $91 = $86;
 $85 = $91;
 $92 = $85;
 $93 = ((($92)) + 12|0);
 $84 = $93;
 $94 = $84;
 $83 = $94;
 $95 = $83;
 $96 = $87;
 $97 = ((($96)) + 8|0);
 $44 = $95;
 $45 = $97;
 $98 = $44;
 $99 = $45;
 $100 = (__ZNKSt3__14hashIN4rhea8variableEEclERKS2_($98,$99)|0);
 $101 = $87;
 $102 = ((($101)) + 4|0);
 HEAP32[$102>>2] = $100;
 $43 = $91;
 $103 = $43;
 $42 = $103;
 $104 = $42;
 $41 = $104;
 $105 = $41;
 $40 = $105;
 $106 = $40;
 $107 = ((($106)) + 4|0);
 $39 = $107;
 $108 = $39;
 $38 = $108;
 $109 = $38;
 $37 = $109;
 $110 = $37;
 $111 = HEAP32[$110>>2]|0;
 $__bc = $111;
 HEAP8[$__inserted>>0] = 0;
 $112 = $__bc;
 $113 = ($112|0)!=(0);
 L1: do {
  if ($113) {
   $114 = $87;
   $115 = ((($114)) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $__bc;
   $25 = $116;
   $26 = $117;
   $118 = $26;
   $119 = $26;
   $120 = (($119) - 1)|0;
   $121 = $118 & $120;
   $122 = ($121|0)!=(0);
   $123 = $25;
   $124 = $26;
   if ($122) {
    $127 = (($123>>>0) % ($124>>>0))&-1;
    $128 = $127;
   } else {
    $125 = (($124) - 1)|0;
    $126 = $123 & $125;
    $128 = $126;
   }
   $__chash = $128;
   $129 = $__chash;
   $7 = $91;
   $8 = $129;
   $130 = $7;
   $131 = $8;
   $6 = $130;
   $132 = $6;
   $5 = $132;
   $133 = $5;
   $134 = HEAP32[$133>>2]|0;
   $135 = (($134) + ($131<<2)|0);
   $136 = HEAP32[$135>>2]|0;
   $__ndptr = $136;
   $137 = $__ndptr;
   $138 = ($137|0)!=(0|0);
   if ($138) {
    $139 = $__ndptr;
    $140 = HEAP32[$139>>2]|0;
    $__ndptr = $140;
    while(1) {
     $141 = $__ndptr;
     $142 = ($141|0)!=(0|0);
     if (!($142)) {
      break L1;
     }
     $143 = $__ndptr;
     $144 = ((($143)) + 4|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = $__bc;
     $0 = $145;
     $1 = $146;
     $147 = $1;
     $148 = $1;
     $149 = (($148) - 1)|0;
     $150 = $147 & $149;
     $151 = ($150|0)!=(0);
     $152 = $0;
     $153 = $1;
     if ($151) {
      $156 = (($152>>>0) % ($153>>>0))&-1;
      $159 = $156;
     } else {
      $154 = (($153) - 1)|0;
      $155 = $152 & $154;
      $159 = $155;
     }
     $157 = $__chash;
     $158 = ($159|0)==($157|0);
     if (!($158)) {
      break L1;
     }
     $4 = $91;
     $160 = $4;
     $161 = ((($160)) + 16|0);
     $3 = $161;
     $162 = $3;
     $2 = $162;
     $163 = $2;
     $164 = $__ndptr;
     $165 = ((($164)) + 8|0);
     $166 = $87;
     $167 = ((($166)) + 8|0);
     $9 = $163;
     $10 = $165;
     $11 = $167;
     $168 = $9;
     $169 = $10;
     $170 = $11;
     $171 = (__ZNKSt3__18equal_toIN4rhea8variableEEclERKS2_S5_($168,$169,$170)|0);
     if ($171) {
      break;
     }
     $172 = $__ndptr;
     $173 = HEAP32[$172>>2]|0;
     $__ndptr = $173;
    }
    $326 = $__ndptr;
    $76 = $90;
    $77 = $326;
    $327 = $76;
    $328 = $77;
    HEAP32[$327>>2] = $328;
    $80 = $agg$result;
    $81 = $90;
    $82 = $__inserted;
    $329 = $80;
    $330 = $81;
    $79 = $330;
    $331 = $79;
    ;HEAP32[$329>>2]=HEAP32[$331>>2]|0;
    $332 = ((($329)) + 4|0);
    $333 = $82;
    $78 = $333;
    $334 = $78;
    $335 = HEAP8[$334>>0]|0;
    $336 = $335&1;
    $337 = $336&1;
    HEAP8[$332>>0] = $337;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $14 = $91;
 $174 = $14;
 $175 = ((($174)) + 12|0);
 $13 = $175;
 $176 = $13;
 $12 = $176;
 $177 = $12;
 $178 = HEAP32[$177>>2]|0;
 $179 = (($178) + 1)|0;
 $180 = (+($179>>>0));
 $181 = $__bc;
 $182 = (+($181>>>0));
 $17 = $91;
 $183 = $17;
 $184 = ((($183)) + 16|0);
 $16 = $184;
 $185 = $16;
 $15 = $185;
 $186 = $15;
 $187 = +HEAPF32[$186>>2];
 $188 = $182 * $187;
 $189 = $180 > $188;
 $190 = $__bc;
 $191 = ($190|0)==(0);
 $or$cond = $189 | $191;
 if ($or$cond) {
  $192 = $__bc;
  $193 = $192<<1;
  $194 = $__bc;
  $18 = $194;
  $195 = $18;
  $196 = ($195>>>0)>(2);
  if ($196) {
   $197 = $18;
   $198 = $18;
   $199 = (($198) - 1)|0;
   $200 = $197 & $199;
   $201 = ($200|0)!=(0);
   $202 = $201 ^ 1;
   $204 = $202;
  } else {
   $204 = 0;
  }
  $203 = $204 ^ 1;
  $205 = $203&1;
  $206 = (($193) + ($205))|0;
  HEAP32[$88>>2] = $206;
  $21 = $91;
  $207 = $21;
  $208 = ((($207)) + 12|0);
  $20 = $208;
  $209 = $20;
  $19 = $209;
  $210 = $19;
  $211 = HEAP32[$210>>2]|0;
  $212 = (($211) + 1)|0;
  $213 = (+($212>>>0));
  $24 = $91;
  $214 = $24;
  $215 = ((($214)) + 16|0);
  $23 = $215;
  $216 = $23;
  $22 = $216;
  $217 = $22;
  $218 = +HEAPF32[$217>>2];
  $219 = $213 / $218;
  $27 = $219;
  $220 = $27;
  $221 = (+Math_ceil((+$220)));
  $222 = (~~(($221))>>>0);
  HEAP32[$89>>2] = $222;
  $34 = $88;
  $35 = $89;
  $223 = $34;
  $224 = $35;
  ;HEAP8[$33>>0]=HEAP8[$36>>0]|0;
  $31 = $223;
  $32 = $224;
  $225 = $31;
  $226 = $32;
  $28 = $33;
  $29 = $225;
  $30 = $226;
  $227 = $29;
  $228 = HEAP32[$227>>2]|0;
  $229 = $30;
  $230 = HEAP32[$229>>2]|0;
  $231 = ($228>>>0)<($230>>>0);
  $232 = $32;
  $233 = $31;
  $234 = $231 ? $232 : $233;
  $235 = HEAP32[$234>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE6rehashEj($91,$235);
  $52 = $91;
  $236 = $52;
  $51 = $236;
  $237 = $51;
  $50 = $237;
  $238 = $50;
  $49 = $238;
  $239 = $49;
  $240 = ((($239)) + 4|0);
  $48 = $240;
  $241 = $48;
  $47 = $241;
  $242 = $47;
  $46 = $242;
  $243 = $46;
  $244 = HEAP32[$243>>2]|0;
  $__bc = $244;
  $245 = $87;
  $246 = ((($245)) + 4|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = $__bc;
  $53 = $247;
  $54 = $248;
  $249 = $54;
  $250 = $54;
  $251 = (($250) - 1)|0;
  $252 = $249 & $251;
  $253 = ($252|0)!=(0);
  $254 = $53;
  $255 = $54;
  if ($253) {
   $258 = (($254>>>0) % ($255>>>0))&-1;
   $259 = $258;
  } else {
   $256 = (($255) - 1)|0;
   $257 = $254 & $256;
   $259 = $257;
  }
  $__chash = $259;
 }
 $260 = $__chash;
 $57 = $91;
 $58 = $260;
 $261 = $57;
 $262 = $58;
 $56 = $261;
 $263 = $56;
 $55 = $263;
 $264 = $55;
 $265 = HEAP32[$264>>2]|0;
 $266 = (($265) + ($262<<2)|0);
 $267 = HEAP32[$266>>2]|0;
 $__pn = $267;
 $268 = $__pn;
 $269 = ($268|0)==(0|0);
 if ($269) {
  $270 = ((($91)) + 8|0);
  $60 = $270;
  $271 = $60;
  $59 = $271;
  $272 = $59;
  $62 = $272;
  $273 = $62;
  $61 = $273;
  $274 = $61;
  $__pn = $274;
  $275 = $__pn;
  $276 = HEAP32[$275>>2]|0;
  $277 = $87;
  HEAP32[$277>>2] = $276;
  $278 = $87;
  $279 = $__pn;
  HEAP32[$279>>2] = $278;
  $280 = $__pn;
  $281 = $__chash;
  $65 = $91;
  $66 = $281;
  $282 = $65;
  $283 = $66;
  $64 = $282;
  $284 = $64;
  $63 = $284;
  $285 = $63;
  $286 = HEAP32[$285>>2]|0;
  $287 = (($286) + ($283<<2)|0);
  HEAP32[$287>>2] = $280;
  $288 = $87;
  $289 = HEAP32[$288>>2]|0;
  $290 = ($289|0)!=(0|0);
  if ($290) {
   $291 = $87;
   $292 = $87;
   $293 = HEAP32[$292>>2]|0;
   $294 = ((($293)) + 4|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = $__bc;
   $67 = $295;
   $68 = $296;
   $297 = $68;
   $298 = $68;
   $299 = (($298) - 1)|0;
   $300 = $297 & $299;
   $301 = ($300|0)!=(0);
   $302 = $67;
   $303 = $68;
   if ($301) {
    $306 = (($302>>>0) % ($303>>>0))&-1;
    $307 = $306;
   } else {
    $304 = (($303) - 1)|0;
    $305 = $302 & $304;
    $307 = $305;
   }
   $71 = $91;
   $72 = $307;
   $308 = $71;
   $309 = $72;
   $70 = $308;
   $310 = $70;
   $69 = $310;
   $311 = $69;
   $312 = HEAP32[$311>>2]|0;
   $313 = (($312) + ($309<<2)|0);
   HEAP32[$313>>2] = $291;
  }
 } else {
  $314 = $__pn;
  $315 = HEAP32[$314>>2]|0;
  $316 = $87;
  HEAP32[$316>>2] = $315;
  $317 = $87;
  $318 = $__pn;
  HEAP32[$318>>2] = $317;
 }
 $319 = $87;
 $__ndptr = $319;
 $75 = $91;
 $320 = $75;
 $321 = ((($320)) + 12|0);
 $74 = $321;
 $322 = $74;
 $73 = $322;
 $323 = $73;
 $324 = HEAP32[$323>>2]|0;
 $325 = (($324) + 1)|0;
 HEAP32[$323>>2] = $325;
 HEAP8[$__inserted>>0] = 1;
 $326 = $__ndptr;
 $76 = $90;
 $77 = $326;
 $327 = $76;
 $328 = $77;
 HEAP32[$327>>2] = $328;
 $80 = $agg$result;
 $81 = $90;
 $82 = $__inserted;
 $329 = $80;
 $330 = $81;
 $79 = $330;
 $331 = $79;
 ;HEAP32[$329>>2]=HEAP32[$331>>2]|0;
 $332 = ((($329)) + 4|0);
 $333 = $82;
 $78 = $333;
 $334 = $78;
 $335 = HEAP8[$334>>0]|0;
 $336 = $335&1;
 $337 = $336&1;
 HEAP8[$332>>0] = $337;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPjNS_9allocatorIS1_EEE9push_backEOS1_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 204|0;
 $$byval_copy = sp + 368|0;
 $12 = sp + 8|0;
 $15 = sp + 388|0;
 $__t$i3 = sp + 108|0;
 $__t$i2 = sp + 72|0;
 $__t$i1 = sp + 156|0;
 $__t$i = sp + 384|0;
 $67 = sp;
 $72 = sp + 389|0;
 $78 = sp + 344|0;
 $79 = sp + 12|0;
 $__t = sp + 16|0;
 $80 = sp + 184|0;
 $83 = sp + 84|0;
 $76 = $this;
 $77 = $__x;
 $84 = $76;
 $85 = ((($84)) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 $75 = $84;
 $87 = $75;
 $88 = ((($87)) + 12|0);
 $74 = $88;
 $89 = $74;
 $73 = $89;
 $90 = $73;
 $91 = HEAP32[$90>>2]|0;
 $92 = ($86|0)==($91|0);
 do {
  if ($92) {
   $93 = ((($84)) + 4|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = HEAP32[$84>>2]|0;
   $96 = ($94>>>0)>($95>>>0);
   if ($96) {
    $97 = ((($84)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = HEAP32[$84>>2]|0;
    $100 = $98;
    $101 = $99;
    $102 = (($100) - ($101))|0;
    $103 = (($102|0) / 4)&-1;
    $__d = $103;
    $104 = $__d;
    $105 = (($104) + 1)|0;
    $106 = (($105|0) / 2)&-1;
    $__d = $106;
    $107 = ((($84)) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ((($84)) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ((($84)) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $__d;
    $114 = (0 - ($113))|0;
    $115 = (($112) + ($114<<2)|0);
    $51 = $108;
    $52 = $110;
    $53 = $115;
    $116 = $51;
    $50 = $116;
    $117 = $50;
    $118 = $52;
    $45 = $118;
    $119 = $45;
    $120 = $53;
    $46 = $120;
    $121 = $46;
    $47 = $117;
    $48 = $119;
    $49 = $121;
    $122 = $48;
    $123 = $47;
    $124 = $122;
    $125 = $123;
    $126 = (($124) - ($125))|0;
    $127 = (($126|0) / 4)&-1;
    $__n$i$i = $127;
    $128 = $49;
    $129 = $47;
    $130 = $__n$i$i;
    $131 = $130<<2;
    _memmove(($128|0),($129|0),($131|0))|0;
    $132 = $49;
    $133 = $__n$i$i;
    $134 = (($132) + ($133<<2)|0);
    $135 = ((($84)) + 8|0);
    HEAP32[$135>>2] = $134;
    $136 = $__d;
    $137 = ((($84)) + 4|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (0 - ($136))|0;
    $140 = (($138) + ($139<<2)|0);
    HEAP32[$137>>2] = $140;
    break;
   }
   $44 = $84;
   $141 = $44;
   $142 = ((($141)) + 12|0);
   $43 = $142;
   $143 = $43;
   $42 = $143;
   $144 = $42;
   $145 = HEAP32[$144>>2]|0;
   $146 = HEAP32[$84>>2]|0;
   $147 = $145;
   $148 = $146;
   $149 = (($147) - ($148))|0;
   $150 = (($149|0) / 4)&-1;
   $151 = $150<<1;
   HEAP32[$78>>2] = $151;
   HEAP32[$79>>2] = 1;
   $13 = $78;
   $14 = $79;
   $152 = $13;
   $153 = $14;
   ;HEAP8[$12>>0]=HEAP8[$15>>0]|0;
   $10 = $152;
   $11 = $153;
   $154 = $10;
   $155 = $11;
   $7 = $12;
   $8 = $154;
   $9 = $155;
   $156 = $8;
   $157 = HEAP32[$156>>2]|0;
   $158 = $9;
   $159 = HEAP32[$158>>2]|0;
   $160 = ($157>>>0)<($159>>>0);
   $161 = $11;
   $162 = $10;
   $163 = $160 ? $161 : $162;
   $164 = HEAP32[$163>>2]|0;
   $__c = $164;
   $165 = $__c;
   $166 = $__c;
   $167 = (($166>>>0) / 4)&-1;
   $2 = $84;
   $168 = $2;
   $169 = ((($168)) + 12|0);
   $1 = $169;
   $170 = $1;
   $0 = $170;
   $171 = $0;
   __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEEC2EjjS4_($__t,$165,$167,$171);
   $172 = ((($84)) + 4|0);
   $173 = HEAP32[$172>>2]|0;
   $3 = $80;
   $4 = $173;
   $174 = $3;
   $175 = $4;
   HEAP32[$174>>2] = $175;
   $176 = ((($84)) + 8|0);
   $177 = HEAP32[$176>>2]|0;
   $5 = $83;
   $6 = $177;
   $178 = $5;
   $179 = $6;
   HEAP32[$178>>2] = $179;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$80>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$83>>2]|0;
   invoke_viii(294,($__t|0),($$byval_copy|0),($$byval_copy1|0));
   $180 = __THREW__; __THREW__ = 0;
   $181 = $180&1;
   if ($181) {
    $234 = ___cxa_find_matching_catch()|0;
    $235 = tempRet0;
    $81 = $234;
    $82 = $235;
    __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEED2Ev($__t);
    $236 = $81;
    $237 = $82;
    ___resumeException($236|0);
    // unreachable;
   } else {
    $19 = $84;
    $20 = $__t;
    $182 = $19;
    $18 = $182;
    $183 = $18;
    $184 = HEAP32[$183>>2]|0;
    HEAP32[$__t$i3>>2] = $184;
    $185 = $20;
    $16 = $185;
    $186 = $16;
    $187 = HEAP32[$186>>2]|0;
    $188 = $19;
    HEAP32[$188>>2] = $187;
    $17 = $__t$i3;
    $189 = $17;
    $190 = HEAP32[$189>>2]|0;
    $191 = $20;
    HEAP32[$191>>2] = $190;
    $192 = ((($84)) + 4|0);
    $193 = ((($__t)) + 4|0);
    $24 = $192;
    $25 = $193;
    $194 = $24;
    $23 = $194;
    $195 = $23;
    $196 = HEAP32[$195>>2]|0;
    HEAP32[$__t$i2>>2] = $196;
    $197 = $25;
    $21 = $197;
    $198 = $21;
    $199 = HEAP32[$198>>2]|0;
    $200 = $24;
    HEAP32[$200>>2] = $199;
    $22 = $__t$i2;
    $201 = $22;
    $202 = HEAP32[$201>>2]|0;
    $203 = $25;
    HEAP32[$203>>2] = $202;
    $204 = ((($84)) + 8|0);
    $205 = ((($__t)) + 8|0);
    $29 = $204;
    $30 = $205;
    $206 = $29;
    $28 = $206;
    $207 = $28;
    $208 = HEAP32[$207>>2]|0;
    HEAP32[$__t$i1>>2] = $208;
    $209 = $30;
    $26 = $209;
    $210 = $26;
    $211 = HEAP32[$210>>2]|0;
    $212 = $29;
    HEAP32[$212>>2] = $211;
    $27 = $__t$i1;
    $213 = $27;
    $214 = HEAP32[$213>>2]|0;
    $215 = $30;
    HEAP32[$215>>2] = $214;
    $33 = $84;
    $216 = $33;
    $217 = ((($216)) + 12|0);
    $32 = $217;
    $218 = $32;
    $31 = $218;
    $219 = $31;
    $36 = $__t;
    $220 = $36;
    $221 = ((($220)) + 12|0);
    $35 = $221;
    $222 = $35;
    $34 = $222;
    $223 = $34;
    $40 = $219;
    $41 = $223;
    $224 = $40;
    $39 = $224;
    $225 = $39;
    $226 = HEAP32[$225>>2]|0;
    HEAP32[$__t$i>>2] = $226;
    $227 = $41;
    $37 = $227;
    $228 = $37;
    $229 = HEAP32[$228>>2]|0;
    $230 = $40;
    HEAP32[$230>>2] = $229;
    $38 = $__t$i;
    $231 = $38;
    $232 = HEAP32[$231>>2]|0;
    $233 = $41;
    HEAP32[$233>>2] = $232;
    __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEED2Ev($__t);
    break;
   }
  }
 } while(0);
 $56 = $84;
 $238 = $56;
 $239 = ((($238)) + 12|0);
 $55 = $239;
 $240 = $55;
 $54 = $240;
 $241 = $54;
 $242 = ((($84)) + 8|0);
 $243 = HEAP32[$242>>2]|0;
 $57 = $243;
 $244 = $57;
 $245 = $77;
 $58 = $245;
 $246 = $58;
 $69 = $241;
 $70 = $244;
 $71 = $246;
 $247 = $69;
 $248 = $70;
 $249 = $71;
 $68 = $249;
 $250 = $68;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $64 = $247;
 $65 = $248;
 $66 = $250;
 $251 = $64;
 $252 = $65;
 $253 = $66;
 $63 = $253;
 $254 = $63;
 $60 = $251;
 $61 = $252;
 $62 = $254;
 $255 = $61;
 $256 = $62;
 $59 = $256;
 $257 = $59;
 $258 = HEAP32[$257>>2]|0;
 HEAP32[$255>>2] = $258;
 $259 = ((($84)) + 8|0);
 $260 = HEAP32[$259>>2]|0;
 $261 = ((($260)) + 4|0);
 HEAP32[$259>>2] = $261;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPjNS_9allocatorIS1_EEE10push_frontEOS1_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0;
 var $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 192|0;
 $$byval_copy = sp + 184|0;
 $8 = sp + 8|0;
 $11 = sp + 400|0;
 $__t$i3 = sp + 104|0;
 $__t$i2 = sp + 60|0;
 $__t$i1 = sp + 152|0;
 $__t$i = sp + 200|0;
 $70 = sp;
 $75 = sp + 401|0;
 $81 = sp + 168|0;
 $82 = sp + 352|0;
 $__t = sp + 252|0;
 $83 = sp + 84|0;
 $86 = sp + 52|0;
 $79 = $this;
 $80 = $__x;
 $87 = $79;
 $88 = ((($87)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = HEAP32[$87>>2]|0;
 $91 = ($89|0)==($90|0);
 do {
  if ($91) {
   $92 = ((($87)) + 8|0);
   $93 = HEAP32[$92>>2]|0;
   $78 = $87;
   $94 = $78;
   $95 = ((($94)) + 12|0);
   $77 = $95;
   $96 = $77;
   $76 = $96;
   $97 = $76;
   $98 = HEAP32[$97>>2]|0;
   $99 = ($93>>>0)<($98>>>0);
   if ($99) {
    $56 = $87;
    $100 = $56;
    $101 = ((($100)) + 12|0);
    $55 = $101;
    $102 = $55;
    $54 = $102;
    $103 = $54;
    $104 = HEAP32[$103>>2]|0;
    $105 = ((($87)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $104;
    $108 = $106;
    $109 = (($107) - ($108))|0;
    $110 = (($109|0) / 4)&-1;
    $__d = $110;
    $111 = $__d;
    $112 = (($111) + 1)|0;
    $113 = (($112|0) / 2)&-1;
    $__d = $113;
    $114 = ((($87)) + 4|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($87)) + 8|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($87)) + 8|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $__d;
    $121 = (($119) + ($120<<2)|0);
    $51 = $115;
    $52 = $117;
    $53 = $121;
    $122 = $51;
    $50 = $122;
    $123 = $50;
    $124 = $52;
    $45 = $124;
    $125 = $45;
    $126 = $53;
    $46 = $126;
    $127 = $46;
    $47 = $123;
    $48 = $125;
    $49 = $127;
    $128 = $48;
    $129 = $47;
    $130 = $128;
    $131 = $129;
    $132 = (($130) - ($131))|0;
    $133 = (($132|0) / 4)&-1;
    $__n$i$i = $133;
    $134 = $__n$i$i;
    $135 = $49;
    $136 = (0 - ($134))|0;
    $137 = (($135) + ($136<<2)|0);
    $49 = $137;
    $138 = $49;
    $139 = $47;
    $140 = $__n$i$i;
    $141 = $140<<2;
    _memmove(($138|0),($139|0),($141|0))|0;
    $142 = $49;
    $143 = ((($87)) + 4|0);
    HEAP32[$143>>2] = $142;
    $144 = $__d;
    $145 = ((($87)) + 8|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (($146) + ($144<<2)|0);
    HEAP32[$145>>2] = $147;
    break;
   }
   $18 = $87;
   $148 = $18;
   $149 = ((($148)) + 12|0);
   $17 = $149;
   $150 = $17;
   $16 = $150;
   $151 = $16;
   $152 = HEAP32[$151>>2]|0;
   $153 = HEAP32[$87>>2]|0;
   $154 = $152;
   $155 = $153;
   $156 = (($154) - ($155))|0;
   $157 = (($156|0) / 4)&-1;
   $158 = $157<<1;
   HEAP32[$81>>2] = $158;
   HEAP32[$82>>2] = 1;
   $9 = $81;
   $10 = $82;
   $159 = $9;
   $160 = $10;
   ;HEAP8[$8>>0]=HEAP8[$11>>0]|0;
   $6 = $159;
   $7 = $160;
   $161 = $6;
   $162 = $7;
   $3 = $8;
   $4 = $161;
   $5 = $162;
   $163 = $4;
   $164 = HEAP32[$163>>2]|0;
   $165 = $5;
   $166 = HEAP32[$165>>2]|0;
   $167 = ($164>>>0)<($166>>>0);
   $168 = $7;
   $169 = $6;
   $170 = $167 ? $168 : $169;
   $171 = HEAP32[$170>>2]|0;
   $__c = $171;
   $172 = $__c;
   $173 = $__c;
   $174 = (($173) + 3)|0;
   $175 = (($174>>>0) / 4)&-1;
   $2 = $87;
   $176 = $2;
   $177 = ((($176)) + 12|0);
   $1 = $177;
   $178 = $1;
   $0 = $178;
   $179 = $0;
   __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEEC2EjjS4_($__t,$172,$175,$179);
   $180 = ((($87)) + 4|0);
   $181 = HEAP32[$180>>2]|0;
   $12 = $83;
   $13 = $181;
   $182 = $12;
   $183 = $13;
   HEAP32[$182>>2] = $183;
   $184 = ((($87)) + 8|0);
   $185 = HEAP32[$184>>2]|0;
   $14 = $86;
   $15 = $185;
   $186 = $14;
   $187 = $15;
   HEAP32[$186>>2] = $187;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$83>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$86>>2]|0;
   invoke_viii(294,($__t|0),($$byval_copy|0),($$byval_copy1|0));
   $188 = __THREW__; __THREW__ = 0;
   $189 = $188&1;
   if ($189) {
    $242 = ___cxa_find_matching_catch()|0;
    $243 = tempRet0;
    $84 = $242;
    $85 = $243;
    __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEED2Ev($__t);
    $244 = $84;
    $245 = $85;
    ___resumeException($244|0);
    // unreachable;
   } else {
    $22 = $87;
    $23 = $__t;
    $190 = $22;
    $21 = $190;
    $191 = $21;
    $192 = HEAP32[$191>>2]|0;
    HEAP32[$__t$i3>>2] = $192;
    $193 = $23;
    $19 = $193;
    $194 = $19;
    $195 = HEAP32[$194>>2]|0;
    $196 = $22;
    HEAP32[$196>>2] = $195;
    $20 = $__t$i3;
    $197 = $20;
    $198 = HEAP32[$197>>2]|0;
    $199 = $23;
    HEAP32[$199>>2] = $198;
    $200 = ((($87)) + 4|0);
    $201 = ((($__t)) + 4|0);
    $27 = $200;
    $28 = $201;
    $202 = $27;
    $26 = $202;
    $203 = $26;
    $204 = HEAP32[$203>>2]|0;
    HEAP32[$__t$i2>>2] = $204;
    $205 = $28;
    $24 = $205;
    $206 = $24;
    $207 = HEAP32[$206>>2]|0;
    $208 = $27;
    HEAP32[$208>>2] = $207;
    $25 = $__t$i2;
    $209 = $25;
    $210 = HEAP32[$209>>2]|0;
    $211 = $28;
    HEAP32[$211>>2] = $210;
    $212 = ((($87)) + 8|0);
    $213 = ((($__t)) + 8|0);
    $32 = $212;
    $33 = $213;
    $214 = $32;
    $31 = $214;
    $215 = $31;
    $216 = HEAP32[$215>>2]|0;
    HEAP32[$__t$i1>>2] = $216;
    $217 = $33;
    $29 = $217;
    $218 = $29;
    $219 = HEAP32[$218>>2]|0;
    $220 = $32;
    HEAP32[$220>>2] = $219;
    $30 = $__t$i1;
    $221 = $30;
    $222 = HEAP32[$221>>2]|0;
    $223 = $33;
    HEAP32[$223>>2] = $222;
    $36 = $87;
    $224 = $36;
    $225 = ((($224)) + 12|0);
    $35 = $225;
    $226 = $35;
    $34 = $226;
    $227 = $34;
    $39 = $__t;
    $228 = $39;
    $229 = ((($228)) + 12|0);
    $38 = $229;
    $230 = $38;
    $37 = $230;
    $231 = $37;
    $43 = $227;
    $44 = $231;
    $232 = $43;
    $42 = $232;
    $233 = $42;
    $234 = HEAP32[$233>>2]|0;
    HEAP32[$__t$i>>2] = $234;
    $235 = $44;
    $40 = $235;
    $236 = $40;
    $237 = HEAP32[$236>>2]|0;
    $238 = $43;
    HEAP32[$238>>2] = $237;
    $41 = $__t$i;
    $239 = $41;
    $240 = HEAP32[$239>>2]|0;
    $241 = $44;
    HEAP32[$241>>2] = $240;
    __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEED2Ev($__t);
    break;
   }
  }
 } while(0);
 $59 = $87;
 $246 = $59;
 $247 = ((($246)) + 12|0);
 $58 = $247;
 $248 = $58;
 $57 = $248;
 $249 = $57;
 $250 = ((($87)) + 4|0);
 $251 = HEAP32[$250>>2]|0;
 $252 = ((($251)) + -4|0);
 $60 = $252;
 $253 = $60;
 $254 = $80;
 $61 = $254;
 $255 = $61;
 $72 = $249;
 $73 = $253;
 $74 = $255;
 $256 = $72;
 $257 = $73;
 $258 = $74;
 $71 = $258;
 $259 = $71;
 ;HEAP8[$70>>0]=HEAP8[$75>>0]|0;
 $67 = $256;
 $68 = $257;
 $69 = $259;
 $260 = $67;
 $261 = $68;
 $262 = $69;
 $66 = $262;
 $263 = $66;
 $63 = $260;
 $64 = $261;
 $65 = $263;
 $264 = $64;
 $265 = $65;
 $62 = $265;
 $266 = $62;
 $267 = HEAP32[$266>>2]|0;
 HEAP32[$264>>2] = $267;
 $268 = ((($87)) + 4|0);
 $269 = HEAP32[$268>>2]|0;
 $270 = ((($269)) + -4|0);
 HEAP32[$268>>2] = $270;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEE9push_backEOS1_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 204|0;
 $$byval_copy = sp + 368|0;
 $12 = sp + 8|0;
 $15 = sp + 388|0;
 $__t$i3 = sp + 108|0;
 $__t$i2 = sp + 72|0;
 $__t$i1 = sp + 156|0;
 $__t$i = sp + 384|0;
 $67 = sp;
 $72 = sp + 389|0;
 $78 = sp + 344|0;
 $79 = sp + 12|0;
 $__t = sp + 16|0;
 $80 = sp + 184|0;
 $83 = sp + 84|0;
 $76 = $this;
 $77 = $__x;
 $84 = $76;
 $85 = ((($84)) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 $75 = $84;
 $87 = $75;
 $88 = ((($87)) + 12|0);
 $74 = $88;
 $89 = $74;
 $73 = $89;
 $90 = $73;
 $91 = HEAP32[$90>>2]|0;
 $92 = ($86|0)==($91|0);
 do {
  if ($92) {
   $93 = ((($84)) + 4|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = HEAP32[$84>>2]|0;
   $96 = ($94>>>0)>($95>>>0);
   if ($96) {
    $97 = ((($84)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = HEAP32[$84>>2]|0;
    $100 = $98;
    $101 = $99;
    $102 = (($100) - ($101))|0;
    $103 = (($102|0) / 4)&-1;
    $__d = $103;
    $104 = $__d;
    $105 = (($104) + 1)|0;
    $106 = (($105|0) / 2)&-1;
    $__d = $106;
    $107 = ((($84)) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ((($84)) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ((($84)) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $__d;
    $114 = (0 - ($113))|0;
    $115 = (($112) + ($114<<2)|0);
    $51 = $108;
    $52 = $110;
    $53 = $115;
    $116 = $51;
    $50 = $116;
    $117 = $50;
    $118 = $52;
    $45 = $118;
    $119 = $45;
    $120 = $53;
    $46 = $120;
    $121 = $46;
    $47 = $117;
    $48 = $119;
    $49 = $121;
    $122 = $48;
    $123 = $47;
    $124 = $122;
    $125 = $123;
    $126 = (($124) - ($125))|0;
    $127 = (($126|0) / 4)&-1;
    $__n$i$i = $127;
    $128 = $49;
    $129 = $47;
    $130 = $__n$i$i;
    $131 = $130<<2;
    _memmove(($128|0),($129|0),($131|0))|0;
    $132 = $49;
    $133 = $__n$i$i;
    $134 = (($132) + ($133<<2)|0);
    $135 = ((($84)) + 8|0);
    HEAP32[$135>>2] = $134;
    $136 = $__d;
    $137 = ((($84)) + 4|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (0 - ($136))|0;
    $140 = (($138) + ($139<<2)|0);
    HEAP32[$137>>2] = $140;
    break;
   }
   $44 = $84;
   $141 = $44;
   $142 = ((($141)) + 12|0);
   $43 = $142;
   $143 = $43;
   $42 = $143;
   $144 = $42;
   $145 = HEAP32[$144>>2]|0;
   $146 = HEAP32[$84>>2]|0;
   $147 = $145;
   $148 = $146;
   $149 = (($147) - ($148))|0;
   $150 = (($149|0) / 4)&-1;
   $151 = $150<<1;
   HEAP32[$78>>2] = $151;
   HEAP32[$79>>2] = 1;
   $13 = $78;
   $14 = $79;
   $152 = $13;
   $153 = $14;
   ;HEAP8[$12>>0]=HEAP8[$15>>0]|0;
   $10 = $152;
   $11 = $153;
   $154 = $10;
   $155 = $11;
   $7 = $12;
   $8 = $154;
   $9 = $155;
   $156 = $8;
   $157 = HEAP32[$156>>2]|0;
   $158 = $9;
   $159 = HEAP32[$158>>2]|0;
   $160 = ($157>>>0)<($159>>>0);
   $161 = $11;
   $162 = $10;
   $163 = $160 ? $161 : $162;
   $164 = HEAP32[$163>>2]|0;
   $__c = $164;
   $165 = $__c;
   $166 = $__c;
   $167 = (($166>>>0) / 4)&-1;
   $2 = $84;
   $168 = $2;
   $169 = ((($168)) + 12|0);
   $1 = $169;
   $170 = $1;
   $0 = $170;
   $171 = $0;
   $172 = ((($171)) + 4|0);
   $173 = HEAP32[$172>>2]|0;
   __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEEC2EjjS4_($__t,$165,$167,$173);
   $174 = ((($84)) + 4|0);
   $175 = HEAP32[$174>>2]|0;
   $3 = $80;
   $4 = $175;
   $176 = $3;
   $177 = $4;
   HEAP32[$176>>2] = $177;
   $178 = ((($84)) + 8|0);
   $179 = HEAP32[$178>>2]|0;
   $5 = $83;
   $6 = $179;
   $180 = $5;
   $181 = $6;
   HEAP32[$180>>2] = $181;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$80>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$83>>2]|0;
   invoke_viii(294,($__t|0),($$byval_copy|0),($$byval_copy1|0));
   $182 = __THREW__; __THREW__ = 0;
   $183 = $182&1;
   if ($183) {
    $236 = ___cxa_find_matching_catch()|0;
    $237 = tempRet0;
    $81 = $236;
    $82 = $237;
    __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEED2Ev($__t);
    $238 = $81;
    $239 = $82;
    ___resumeException($238|0);
    // unreachable;
   } else {
    $19 = $84;
    $20 = $__t;
    $184 = $19;
    $18 = $184;
    $185 = $18;
    $186 = HEAP32[$185>>2]|0;
    HEAP32[$__t$i3>>2] = $186;
    $187 = $20;
    $16 = $187;
    $188 = $16;
    $189 = HEAP32[$188>>2]|0;
    $190 = $19;
    HEAP32[$190>>2] = $189;
    $17 = $__t$i3;
    $191 = $17;
    $192 = HEAP32[$191>>2]|0;
    $193 = $20;
    HEAP32[$193>>2] = $192;
    $194 = ((($84)) + 4|0);
    $195 = ((($__t)) + 4|0);
    $24 = $194;
    $25 = $195;
    $196 = $24;
    $23 = $196;
    $197 = $23;
    $198 = HEAP32[$197>>2]|0;
    HEAP32[$__t$i2>>2] = $198;
    $199 = $25;
    $21 = $199;
    $200 = $21;
    $201 = HEAP32[$200>>2]|0;
    $202 = $24;
    HEAP32[$202>>2] = $201;
    $22 = $__t$i2;
    $203 = $22;
    $204 = HEAP32[$203>>2]|0;
    $205 = $25;
    HEAP32[$205>>2] = $204;
    $206 = ((($84)) + 8|0);
    $207 = ((($__t)) + 8|0);
    $29 = $206;
    $30 = $207;
    $208 = $29;
    $28 = $208;
    $209 = $28;
    $210 = HEAP32[$209>>2]|0;
    HEAP32[$__t$i1>>2] = $210;
    $211 = $30;
    $26 = $211;
    $212 = $26;
    $213 = HEAP32[$212>>2]|0;
    $214 = $29;
    HEAP32[$214>>2] = $213;
    $27 = $__t$i1;
    $215 = $27;
    $216 = HEAP32[$215>>2]|0;
    $217 = $30;
    HEAP32[$217>>2] = $216;
    $33 = $84;
    $218 = $33;
    $219 = ((($218)) + 12|0);
    $32 = $219;
    $220 = $32;
    $31 = $220;
    $221 = $31;
    $36 = $__t;
    $222 = $36;
    $223 = ((($222)) + 12|0);
    $35 = $223;
    $224 = $35;
    $34 = $224;
    $225 = $34;
    $40 = $221;
    $41 = $225;
    $226 = $40;
    $39 = $226;
    $227 = $39;
    $228 = HEAP32[$227>>2]|0;
    HEAP32[$__t$i>>2] = $228;
    $229 = $41;
    $37 = $229;
    $230 = $37;
    $231 = HEAP32[$230>>2]|0;
    $232 = $40;
    HEAP32[$232>>2] = $231;
    $38 = $__t$i;
    $233 = $38;
    $234 = HEAP32[$233>>2]|0;
    $235 = $41;
    HEAP32[$235>>2] = $234;
    __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEED2Ev($__t);
    break;
   }
  }
 } while(0);
 $56 = $84;
 $240 = $56;
 $241 = ((($240)) + 12|0);
 $55 = $241;
 $242 = $55;
 $54 = $242;
 $243 = $54;
 $244 = ((($243)) + 4|0);
 $245 = HEAP32[$244>>2]|0;
 $246 = ((($84)) + 8|0);
 $247 = HEAP32[$246>>2]|0;
 $57 = $247;
 $248 = $57;
 $249 = $77;
 $58 = $249;
 $250 = $58;
 $69 = $245;
 $70 = $248;
 $71 = $250;
 $251 = $69;
 $252 = $70;
 $253 = $71;
 $68 = $253;
 $254 = $68;
 ;HEAP8[$67>>0]=HEAP8[$72>>0]|0;
 $64 = $251;
 $65 = $252;
 $66 = $254;
 $255 = $64;
 $256 = $65;
 $257 = $66;
 $63 = $257;
 $258 = $63;
 $60 = $255;
 $61 = $256;
 $62 = $258;
 $259 = $61;
 $260 = $62;
 $59 = $260;
 $261 = $59;
 $262 = HEAP32[$261>>2]|0;
 HEAP32[$259>>2] = $262;
 $263 = ((($84)) + 8|0);
 $264 = HEAP32[$263>>2]|0;
 $265 = ((($264)) + 4|0);
 HEAP32[$263>>2] = $265;
 STACKTOP = sp;return;
}
function __ZN4rheaplERKNS_8variableES2_($agg$result,$v,$w) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $w = $w|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $v;
 $1 = $w;
 $5 = $0;
 __ZN4rhea17linear_expressionC2ERKNS_8variableEdd($2,$5,1.0,0.0);
 $6 = $1;
 __THREW__ = 0;
 $7 = (invoke_iii(295,($2|0),($6|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  invoke_vii(296,($agg$result|0),($7|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __ZN4rhea17linear_expressionD2Ev($2);
   STACKTOP = sp;return;
  }
 }
 $12 = ___cxa_find_matching_catch()|0;
 $13 = tempRet0;
 $3 = $12;
 $4 = $13;
 __ZN4rhea17linear_expressionD2Ev($2);
 $14 = $3;
 $15 = $4;
 ___resumeException($14|0);
 // unreachable;
}
function __ZN4rheamiERKNS_8variableES2_($agg$result,$v,$w) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $w = $w|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $v;
 $1 = $w;
 $5 = $0;
 __ZN4rhea17linear_expressionC2ERKNS_8variableEdd($2,$5,1.0,0.0);
 $6 = $1;
 __THREW__ = 0;
 $7 = (invoke_iii(297,($2|0),($6|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  invoke_vii(296,($agg$result|0),($7|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __ZN4rhea17linear_expressionD2Ev($2);
   STACKTOP = sp;return;
  }
 }
 $12 = ___cxa_find_matching_catch()|0;
 $13 = tempRet0;
 $3 = $12;
 $4 = $13;
 __ZN4rhea17linear_expressionD2Ev($2);
 $14 = $3;
 $15 = $4;
 ___resumeException($14|0);
 // unreachable;
}
function __ZN4rheaplERKNS_8variableEd($agg$result,$v,$x) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $x = +$x;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $x;
 $2 = $0;
 $3 = $1;
 __ZN4rhea17linear_expressionC2ERKNS_8variableEdd($agg$result,$2,1.0,$3);
 STACKTOP = sp;return;
}
function __ZN4rheamiERKNS_8variableEd($agg$result,$v,$x) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $x = +$x;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $x;
 $2 = $0;
 $3 = $1;
 $4 = -$3;
 __ZN4rhea17linear_expressionC2ERKNS_8variableEdd($agg$result,$2,1.0,$4);
 STACKTOP = sp;return;
}
function __ZN4rheamlERKNS_8variableEd($agg$result,$v,$x) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $x = +$x;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $x;
 $2 = $0;
 $3 = $1;
 __ZN4rhea17linear_expressionC2ERKNS_8variableEdd($agg$result,$2,$3,0.0);
 STACKTOP = sp;return;
}
function __ZN4rheadvERKNS_8variableEd($agg$result,$v,$x) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $x = +$x;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $x;
 $2 = $0;
 $3 = $1;
 $4 = 1.0 / $3;
 __ZN4rhea17linear_expressionC2ERKNS_8variableEdd($agg$result,$2,$4,0.0);
 STACKTOP = sp;return;
}
function __ZN4rhea8variableC2Ed($this,$value) {
 $this = $this|0;
 $value = +$value;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $6 = sp + 8|0;
 $7 = sp + 40|0;
 $8 = sp + 24|0;
 $5 = $this;
 HEAPF64[$6>>3] = $value;
 $9 = $5;
 $4 = $6;
 $10 = $4;
 $3 = $10;
 $11 = $3;
 __ZNSt3__110shared_ptrIN4rhea14float_variableEE11make_sharedIJRdEEES3_DpOT_($7,$11);
 ;HEAP32[$8>>2]=0|0;
 ;HEAP8[$2>>0]=HEAP8[$8>>0]|0;HEAP8[$2+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[$8+3>>0]|0;
 $0 = $9;
 $1 = $7;
 $12 = $0;
 $13 = $1;
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$12>>2] = $14;
 $15 = ((($12)) + 4|0);
 $16 = $1;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$15>>2] = $18;
 $19 = $1;
 HEAP32[$19>>2] = 0;
 $20 = $1;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = 0;
 __ZNSt3__110shared_ptrIN4rhea14float_variableEED2Ev($7);
 STACKTOP = sp;return;
}
function __ZN4rhea8variableD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__110shared_ptrIN4rhea17abstract_variableEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4rheamiEdRKNS_8variableE($agg$result,$x,$v) {
 $agg$result = $agg$result|0;
 $x = +$x;
 $v = $v|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $v;
 $2 = $1;
 $3 = $0;
 __ZN4rhea17linear_expressionC2ERKNS_8variableEdd($agg$result,$2,-1.0,$3);
 STACKTOP = sp;return;
}
function __ZN4rheamlEdRKNS_8variableE($agg$result,$x,$v) {
 $agg$result = $agg$result|0;
 $x = +$x;
 $v = $v|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $v;
 $2 = $1;
 $3 = $0;
 __ZN4rhea17linear_expressionC2ERKNS_8variableEdd($agg$result,$2,$3,0.0);
 STACKTOP = sp;return;
}
function __ZN4rhea17linear_expressionC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = +HEAPF64[$4>>3];
 HEAPF64[$3>>3] = $5;
 $6 = ((($3)) + 8|0);
 $7 = $2;
 $8 = ((($7)) + 8|0);
 __ZN4rhea8flat_mapINS_8variableEdNSt3__14lessIS1_EENS2_9allocatorINS2_4pairIS1_dEEEEEC2ERKS9_($6,$8);
 $9 = $2;
 $10 = +HEAPF64[$9>>3];
 HEAPF64[$3>>3] = $10;
 STACKTOP = sp;return;
}
function __ZN4rheaeqENS_17linear_expressionERKNS_8variableE($agg$result,$lhs,$rhs) {
 $agg$result = $agg$result|0;
 $lhs = $lhs|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 32|0;
 $2 = sp;
 $0 = $rhs;
 $5 = $0;
 $6 = (__ZN4rhea17linear_expressionmIERKNS_8variableE($lhs,$5)|0);
 __ZN4rhea17linear_expressionC2ERKS0_($1,$6);
 __THREW__ = 0;
 invoke_vi(298,($2|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  __THREW__ = 0;
  invoke_viiid(299,($agg$result|0),($1|0),($2|0),1.0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   __ZN4rhea17linear_expressionD2Ev($1);
   STACKTOP = sp;return;
  }
 }
 $11 = ___cxa_find_matching_catch()|0;
 $12 = tempRet0;
 $3 = $11;
 $4 = $12;
 __ZN4rhea17linear_expressionD2Ev($1);
 $13 = $3;
 $14 = $4;
 ___resumeException($13|0);
 // unreachable;
}
function __ZN4rhea17linear_expressionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 __ZN4rhea8flat_mapINS_8variableEdNSt3__14lessIS1_EENS2_9allocatorINS2_4pairIS1_dEEEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN4rheaeqENS_17linear_expressionERKS0_($agg$result,$lhs,$rhs) {
 $agg$result = $agg$result|0;
 $lhs = $lhs|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 32|0;
 $2 = sp;
 $0 = $rhs;
 $5 = $0;
 $6 = (__ZN4rhea17linear_expressionmIERKS0_($lhs,$5)|0);
 __ZN4rhea17linear_expressionC2ERKS0_($1,$6);
 __THREW__ = 0;
 invoke_vi(298,($2|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  __THREW__ = 0;
  invoke_viiid(299,($agg$result|0),($1|0),($2|0),1.0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   __ZN4rhea17linear_expressionD2Ev($1);
   STACKTOP = sp;return;
  }
 }
 $11 = ___cxa_find_matching_catch()|0;
 $12 = tempRet0;
 $3 = $11;
 $4 = $12;
 __ZN4rhea17linear_expressionD2Ev($1);
 $13 = $3;
 $14 = $4;
 ___resumeException($13|0);
 // unreachable;
}
function __ZN4rheaeqERKNS_8variableERKNS_17linear_expressionE($agg$result,$lhs,$rhs) {
 $agg$result = $agg$result|0;
 $lhs = $lhs|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $3 = sp + 56|0;
 $4 = sp + 80|0;
 $7 = sp + 24|0;
 $0 = $lhs;
 $1 = $rhs;
 $8 = $1;
 __ZN4rhea17linear_expressionC2ERKS0_($3,$8);
 $9 = $0;
 __THREW__ = 0;
 invoke_viidd(300,($4|0),($9|0),1.0,0.0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $5 = $18;
  $6 = $19;
  __ZN4rhea17linear_expressionD2Ev($3);
  $24 = $5;
  $25 = $6;
  ___resumeException($24|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_viii(301,($2|0),($3|0),($4|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $5 = $20;
  $6 = $21;
 } else {
  __THREW__ = 0;
  invoke_vi(298,($7|0));
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if (!($15)) {
   __THREW__ = 0;
   invoke_viiid(299,($agg$result|0),($2|0),($7|0),1.0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if (!($17)) {
    __ZN4rhea17linear_expressionD2Ev($2);
    __ZN4rhea17linear_expressionD2Ev($4);
    __ZN4rhea17linear_expressionD2Ev($3);
    STACKTOP = sp;return;
   }
  }
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  $5 = $22;
  $6 = $23;
  __ZN4rhea17linear_expressionD2Ev($2);
 }
 __ZN4rhea17linear_expressionD2Ev($4);
 __ZN4rhea17linear_expressionD2Ev($3);
 $24 = $5;
 $25 = $6;
 ___resumeException($24|0);
 // unreachable;
}
function __ZN4rheaeqERKNS_8variableES2_($agg$result,$lhs,$rhs) {
 $agg$result = $agg$result|0;
 $lhs = $lhs|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 32|0;
 $3 = sp + 56|0;
 $6 = sp;
 $0 = $lhs;
 $1 = $rhs;
 $7 = $0;
 __ZN4rhea17linear_expressionC2ERKNS_8variableEdd($3,$7,1.0,0.0);
 $8 = $1;
 __THREW__ = 0;
 $9 = (invoke_iii(297,($3|0),($8|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  __THREW__ = 0;
  invoke_vii(296,($2|0),($9|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if (!($13)) {
   __THREW__ = 0;
   invoke_vi(298,($6|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    __THREW__ = 0;
    invoke_viiid(299,($agg$result|0),($2|0),($6|0),1.0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     __ZN4rhea17linear_expressionD2Ev($2);
     __ZN4rhea17linear_expressionD2Ev($3);
     STACKTOP = sp;return;
    }
   }
   $20 = ___cxa_find_matching_catch()|0;
   $21 = tempRet0;
   $4 = $20;
   $5 = $21;
   __ZN4rhea17linear_expressionD2Ev($2);
   __ZN4rhea17linear_expressionD2Ev($3);
   $22 = $4;
   $23 = $5;
   ___resumeException($22|0);
   // unreachable;
  }
 }
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 $4 = $18;
 $5 = $19;
 __ZN4rhea17linear_expressionD2Ev($3);
 $22 = $4;
 $23 = $5;
 ___resumeException($22|0);
 // unreachable;
}
function __ZN4rheaeqERKNS_8variableEd($agg$result,$lhs,$rhs) {
 $agg$result = $agg$result|0;
 $lhs = $lhs|0;
 $rhs = +$rhs;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 32|0;
 $3 = sp;
 $0 = $lhs;
 $1 = $rhs;
 $6 = $0;
 $7 = $1;
 $8 = -$7;
 __ZN4rhea17linear_expressionC2ERKNS_8variableEdd($2,$6,1.0,$8);
 __THREW__ = 0;
 invoke_vi(298,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  __THREW__ = 0;
  invoke_viiid(299,($agg$result|0),($2|0),($3|0),1.0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   __ZN4rhea17linear_expressionD2Ev($2);
   STACKTOP = sp;return;
  }
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $4 = $13;
 $5 = $14;
 __ZN4rhea17linear_expressionD2Ev($2);
 $15 = $4;
 $16 = $5;
 ___resumeException($15|0);
 // unreachable;
}
function __ZN4rhealeERKNS_17linear_expressionES2_($agg$result,$lhs,$rhs) {
 $agg$result = $agg$result|0;
 $lhs = $lhs|0;
 $rhs = $rhs|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 92|0;
 $2 = sp + 56|0;
 $3 = sp + 100|0;
 $6 = sp + 32|0;
 $7 = sp;
 $0 = $lhs;
 $1 = $rhs;
 $8 = $0;
 __ZN4rhea17linear_expressionC2ERKS0_($2,$8);
 __THREW__ = 0;
 invoke_vii(302,($3|0),1);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  $11 = $1;
  __THREW__ = 0;
  invoke_vii(296,($6|0),($11|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if (!($13)) {
   __THREW__ = 0;
   invoke_vi(298,($7|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
    invoke_viiiiid(303,($agg$result|0),($2|0),($$byval_copy|0),($6|0),($7|0),1.0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     __ZN4rhea17linear_expressionD2Ev($6);
     __ZN4rhea17linear_expressionD2Ev($2);
     STACKTOP = sp;return;
    }
   }
   $20 = ___cxa_find_matching_catch()|0;
   $21 = tempRet0;
   $4 = $20;
   $5 = $21;
   __ZN4rhea17linear_expressionD2Ev($6);
   __ZN4rhea17linear_expressionD2Ev($2);
   $22 = $4;
   $23 = $5;
   ___resumeException($22|0);
   // unreachable;
  }
 }
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 $4 = $18;
 $5 = $19;
 __ZN4rhea17linear_expressionD2Ev($2);
 $22 = $4;
 $23 = $5;
 ___resumeException($22|0);
 // unreachable;
}
function __ZN4rheageERKNS_17linear_expressionES2_($agg$result,$lhs,$rhs) {
 $agg$result = $agg$result|0;
 $lhs = $lhs|0;
 $rhs = $rhs|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 92|0;
 $2 = sp + 56|0;
 $3 = sp + 100|0;
 $6 = sp + 32|0;
 $7 = sp;
 $0 = $lhs;
 $1 = $rhs;
 $8 = $0;
 __ZN4rhea17linear_expressionC2ERKS0_($2,$8);
 __THREW__ = 0;
 invoke_vii(302,($3|0),-1);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  $11 = $1;
  __THREW__ = 0;
  invoke_vii(296,($6|0),($11|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if (!($13)) {
   __THREW__ = 0;
   invoke_vi(298,($7|0));
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    __THREW__ = 0;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;
    invoke_viiiiid(303,($agg$result|0),($2|0),($$byval_copy|0),($6|0),($7|0),1.0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     __ZN4rhea17linear_expressionD2Ev($6);
     __ZN4rhea17linear_expressionD2Ev($2);
     STACKTOP = sp;return;
    }
   }
   $20 = ___cxa_find_matching_catch()|0;
   $21 = tempRet0;
   $4 = $20;
   $5 = $21;
   __ZN4rhea17linear_expressionD2Ev($6);
   __ZN4rhea17linear_expressionD2Ev($2);
   $22 = $4;
   $23 = $5;
   ___resumeException($22|0);
   // unreachable;
  }
 }
 $18 = ___cxa_find_matching_catch()|0;
 $19 = tempRet0;
 $4 = $18;
 $5 = $19;
 __ZN4rhea17linear_expressionD2Ev($2);
 $22 = $4;
 $23 = $5;
 ___resumeException($22|0);
 // unreachable;
}
function __ZN4rhealeERKNS_8variableERKNS_17linear_expressionE($agg$result,$lhs,$rhs) {
 $agg$result = $agg$result|0;
 $lhs = $lhs|0;
 $rhs = $rhs|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 72|0;
 $2 = sp + 68|0;
 $3 = sp + 32|0;
 $4 = sp;
 $0 = $lhs;
 $1 = $rhs;
 $7 = $0;
 __ZN4rhea8relationC2ENS0_6comp_tE($2,1);
 $8 = $1;
 __ZN4rhea17linear_expressionC2ERKS0_($3,$8);
 __THREW__ = 0;
 invoke_vi(298,($4|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  __THREW__ = 0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
  invoke_viiiiid(304,($agg$result|0),($7|0),($$byval_copy|0),($3|0),($4|0),1.0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   __ZN4rhea17linear_expressionD2Ev($3);
   STACKTOP = sp;return;
  }
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $5 = $13;
 $6 = $14;
 __ZN4rhea17linear_expressionD2Ev($3);
 $15 = $5;
 $16 = $6;
 ___resumeException($15|0);
 // unreachable;
}
function __ZN4rheageERKNS_8variableERKNS_17linear_expressionE($agg$result,$lhs,$rhs) {
 $agg$result = $agg$result|0;
 $lhs = $lhs|0;
 $rhs = $rhs|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 72|0;
 $2 = sp + 68|0;
 $3 = sp + 32|0;
 $4 = sp;
 $0 = $lhs;
 $1 = $rhs;
 $7 = $0;
 __ZN4rhea8relationC2ENS0_6comp_tE($2,-1);
 $8 = $1;
 __ZN4rhea17linear_expressionC2ERKS0_($3,$8);
 __THREW__ = 0;
 invoke_vi(298,($4|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  __THREW__ = 0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
  invoke_viiiiid(304,($agg$result|0),($7|0),($$byval_copy|0),($3|0),($4|0),1.0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   __ZN4rhea17linear_expressionD2Ev($3);
   STACKTOP = sp;return;
  }
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $5 = $13;
 $6 = $14;
 __ZN4rhea17linear_expressionD2Ev($3);
 $15 = $5;
 $16 = $6;
 ___resumeException($15|0);
 // unreachable;
}
function __ZN4rhealeERKNS_8variableES2_($agg$result,$lhs,$rhs) {
 $agg$result = $agg$result|0;
 $lhs = $lhs|0;
 $rhs = $rhs|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 72|0;
 $2 = sp + 68|0;
 $3 = sp + 32|0;
 $4 = sp;
 $0 = $lhs;
 $1 = $rhs;
 $7 = $0;
 __ZN4rhea8relationC2ENS0_6comp_tE($2,1);
 $8 = $1;
 __ZN4rhea17linear_expressionC2ERKNS_8variableEdd($3,$8,1.0,0.0);
 __THREW__ = 0;
 invoke_vi(298,($4|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  __THREW__ = 0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
  invoke_viiiiid(304,($agg$result|0),($7|0),($$byval_copy|0),($3|0),($4|0),1.0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   __ZN4rhea17linear_expressionD2Ev($3);
   STACKTOP = sp;return;
  }
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $5 = $13;
 $6 = $14;
 __ZN4rhea17linear_expressionD2Ev($3);
 $15 = $5;
 $16 = $6;
 ___resumeException($15|0);
 // unreachable;
}
function __ZN4rheageERKNS_8variableES2_($agg$result,$lhs,$rhs) {
 $agg$result = $agg$result|0;
 $lhs = $lhs|0;
 $rhs = $rhs|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 72|0;
 $2 = sp + 68|0;
 $3 = sp + 32|0;
 $4 = sp;
 $0 = $lhs;
 $1 = $rhs;
 $7 = $0;
 __ZN4rhea8relationC2ENS0_6comp_tE($2,-1);
 $8 = $1;
 __ZN4rhea17linear_expressionC2ERKNS_8variableEdd($3,$8,1.0,0.0);
 __THREW__ = 0;
 invoke_vi(298,($4|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  __THREW__ = 0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
  invoke_viiiiid(304,($agg$result|0),($7|0),($$byval_copy|0),($3|0),($4|0),1.0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   __ZN4rhea17linear_expressionD2Ev($3);
   STACKTOP = sp;return;
  }
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $5 = $13;
 $6 = $14;
 __ZN4rhea17linear_expressionD2Ev($3);
 $15 = $5;
 $16 = $6;
 ___resumeException($15|0);
 // unreachable;
}
function __ZN4rhealeERKNS_8variableEd($agg$result,$lhs,$rhs) {
 $agg$result = $agg$result|0;
 $lhs = $lhs|0;
 $rhs = +$rhs;
 var $$byval_copy = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 76|0;
 $2 = sp + 72|0;
 $3 = sp + 32|0;
 $4 = sp;
 $0 = $lhs;
 $1 = $rhs;
 $7 = $0;
 __ZN4rhea8relationC2ENS0_6comp_tE($2,1);
 $8 = $1;
 __ZN4rhea17linear_expressionC2Ed($3,$8);
 __THREW__ = 0;
 invoke_vi(298,($4|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  __THREW__ = 0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
  invoke_viiiiid(304,($agg$result|0),($7|0),($$byval_copy|0),($3|0),($4|0),1.0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   __ZN4rhea17linear_expressionD2Ev($3);
   STACKTOP = sp;return;
  }
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $5 = $13;
 $6 = $14;
 __ZN4rhea17linear_expressionD2Ev($3);
 $15 = $5;
 $16 = $6;
 ___resumeException($15|0);
 // unreachable;
}
function __ZN4rheageERKNS_8variableEd($agg$result,$lhs,$rhs) {
 $agg$result = $agg$result|0;
 $lhs = $lhs|0;
 $rhs = +$rhs;
 var $$byval_copy = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 76|0;
 $2 = sp + 72|0;
 $3 = sp + 32|0;
 $4 = sp;
 $0 = $lhs;
 $1 = $rhs;
 $7 = $0;
 __ZN4rhea8relationC2ENS0_6comp_tE($2,-1);
 $8 = $1;
 __ZN4rhea17linear_expressionC2Ed($3,$8);
 __THREW__ = 0;
 invoke_vi(298,($4|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if (!($10)) {
  __THREW__ = 0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
  invoke_viiiiid(304,($agg$result|0),($7|0),($$byval_copy|0),($3|0),($4|0),1.0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   __ZN4rhea17linear_expressionD2Ev($3);
   STACKTOP = sp;return;
  }
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $5 = $13;
 $6 = $14;
 __ZN4rhea17linear_expressionD2Ev($3);
 $15 = $5;
 $16 = $6;
 ___resumeException($15|0);
 // unreachable;
}
function __ZN4rhea10constraintC2ERKNS_15linear_equationE($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $7 = sp + 32|0;
 $8 = sp + 16|0;
 $5 = $this;
 $6 = $eq;
 $9 = $5;
 $10 = 2352;
 HEAP32[$9>>2] = $10;
 $11 = ((($9)) + 4|0);
 $12 = $6;
 $4 = $12;
 $13 = $4;
 $3 = $13;
 $14 = $3;
 __ZNSt3__110shared_ptrIN4rhea15linear_equationEE11make_sharedIJRKS2_EEES3_DpOT_($7,$14);
 ;HEAP32[$8>>2]=0|0;
 ;HEAP8[$2>>0]=HEAP8[$8>>0]|0;HEAP8[$2+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[$8+3>>0]|0;
 $0 = $11;
 $1 = $7;
 $15 = $0;
 $16 = $1;
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$15>>2] = $17;
 $18 = ((($15)) + 4|0);
 $19 = $1;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$18>>2] = $21;
 $22 = $1;
 HEAP32[$22>>2] = 0;
 $23 = $1;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = 0;
 __ZNSt3__110shared_ptrIN4rhea15linear_equationEED2Ev($7);
 STACKTOP = sp;return;
}
function __ZN4rhea10constraintC2ERKNS_17linear_inequalityE($this,$eq) {
 $this = $this|0;
 $eq = $eq|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $7 = sp + 32|0;
 $8 = sp + 16|0;
 $5 = $this;
 $6 = $eq;
 $9 = $5;
 $10 = 2352;
 HEAP32[$9>>2] = $10;
 $11 = ((($9)) + 4|0);
 $12 = $6;
 $4 = $12;
 $13 = $4;
 $3 = $13;
 $14 = $3;
 __ZNSt3__110shared_ptrIN4rhea17linear_inequalityEE11make_sharedIJRKS2_EEES3_DpOT_($7,$14);
 ;HEAP32[$8>>2]=0|0;
 ;HEAP8[$2>>0]=HEAP8[$8>>0]|0;HEAP8[$2+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[$8+3>>0]|0;
 $0 = $11;
 $1 = $7;
 $15 = $0;
 $16 = $1;
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$15>>2] = $17;
 $18 = ((($15)) + 4|0);
 $19 = $1;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$18>>2] = $21;
 $22 = $1;
 HEAP32[$22>>2] = 0;
 $23 = $1;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = 0;
 __ZNSt3__110shared_ptrIN4rhea17linear_inequalityEED2Ev($7);
 STACKTOP = sp;return;
}
function __ZNK4rhea10constraint12is_satisfiedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $0 = $3;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 511]($5)|0);
 STACKTOP = sp;return ($9|0);
}
function __ZN4rhea6solver14add_constraintERKNS_10constraintE($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $c;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 (FUNCTION_TABLE_iii[$5 & 511]($2,$6)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN4rhea8strength4weakEv($agg$result) {
 $agg$result = $agg$result|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4rhea8strengthC2Eddd($agg$result,0.0,0.0,1.0);
 return;
}
function __ZN4rhea6solver8add_stayERKNS_8variableERKNS_8strengthEd($this,$v,$s,$weight) {
 $this = $this|0;
 $v = $v|0;
 $s = $s|0;
 $weight = +$weight;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp;
 $10 = sp + 20|0;
 $11 = sp + 8|0;
 $6 = $this;
 $7 = $v;
 $8 = $s;
 HEAPF64[$9>>3] = $weight;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $3 = $15;
 $4 = $16;
 $5 = $9;
 $17 = $3;
 $2 = $17;
 $18 = $2;
 $19 = $4;
 $1 = $19;
 $20 = $1;
 $21 = $5;
 $0 = $21;
 $22 = $0;
 __ZNSt3__110shared_ptrIN4rhea15stay_constraintEE11make_sharedIJRKNS1_8variableERKNS1_8strengthERdEEES3_DpOT_($11,$18,$20,$22);
 __THREW__ = 0;
 invoke_vii(305,($10|0),($11|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $27 = ___cxa_find_matching_catch()|0;
  $28 = tempRet0;
  $12 = $27;
  $13 = $28;
  __ZNSt3__110shared_ptrIN4rhea15stay_constraintEED2Ev($11);
  $31 = $12;
  $32 = $13;
  ___resumeException($31|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(306,($14|0),($10|0))|0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if (!($26)) {
  __ZN4rhea10constraintD2Ev($10);
  __ZNSt3__110shared_ptrIN4rhea15stay_constraintEED2Ev($11);
  STACKTOP = sp;return ($14|0);
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $12 = $29;
 $13 = $30;
 __ZN4rhea10constraintD2Ev($10);
 __ZNSt3__110shared_ptrIN4rhea15stay_constraintEED2Ev($11);
 $31 = $12;
 $32 = $13;
 ___resumeException($31|0);
 // unreachable;
 return (0)|0;
}
function __ZN4rhea8strength6strongEv($agg$result) {
 $agg$result = $agg$result|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4rhea8strengthC2Eddd($agg$result,1.0,0.0,0.0);
 return;
}
function __ZN4rhea14simplex_solver12add_edit_varERKNS_8variableERKNS_8strengthEd($this,$v,$s,$weight) {
 $this = $this|0;
 $v = $v|0;
 $s = $s|0;
 $weight = +$weight;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp;
 $10 = sp + 20|0;
 $11 = sp + 8|0;
 $6 = $this;
 $7 = $v;
 $8 = $s;
 HEAPF64[$9>>3] = $weight;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $3 = $15;
 $4 = $16;
 $5 = $9;
 $17 = $3;
 $2 = $17;
 $18 = $2;
 $19 = $4;
 $1 = $19;
 $20 = $1;
 $21 = $5;
 $0 = $21;
 $22 = $0;
 __ZNSt3__110shared_ptrIN4rhea15edit_constraintEE11make_sharedIJRKNS1_8variableERKNS1_8strengthERdEEES3_DpOT_($11,$18,$20,$22);
 __THREW__ = 0;
 invoke_vii(307,($10|0),($11|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $27 = ___cxa_find_matching_catch()|0;
  $28 = tempRet0;
  $12 = $27;
  $13 = $28;
  __ZNSt3__110shared_ptrIN4rhea15edit_constraintEED2Ev($11);
  $31 = $12;
  $32 = $13;
  ___resumeException($31|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(306,($14|0),($10|0))|0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if (!($26)) {
  __ZN4rhea10constraintD2Ev($10);
  __ZNSt3__110shared_ptrIN4rhea15edit_constraintEED2Ev($11);
  STACKTOP = sp;return ($14|0);
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $12 = $29;
 $13 = $30;
 __ZN4rhea10constraintD2Ev($10);
 __ZNSt3__110shared_ptrIN4rhea15edit_constraintEED2Ev($11);
 $31 = $12;
 $32 = $13;
 ___resumeException($31|0);
 // unreachable;
 return (0)|0;
}
function __ZN4rhea8variableC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $6 = sp + 16|0;
 $7 = sp;
 $8 = sp + 32|0;
 $5 = $this;
 $9 = $5;
 HEAPF64[$7>>3] = 0.0;
 $4 = $7;
 $10 = $4;
 $3 = $10;
 $11 = $3;
 __ZNSt3__110shared_ptrIN4rhea14float_variableEE11make_sharedIJdEEES3_DpOT_($6,$11);
 ;HEAP32[$8>>2]=0|0;
 ;HEAP8[$2>>0]=HEAP8[$8>>0]|0;HEAP8[$2+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[$8+3>>0]|0;
 $0 = $9;
 $1 = $6;
 $12 = $0;
 $13 = $1;
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$12>>2] = $14;
 $15 = ((($12)) + 4|0);
 $16 = $1;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$15>>2] = $18;
 $19 = $1;
 HEAP32[$19>>2] = 0;
 $20 = $1;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = 0;
 __ZNSt3__110shared_ptrIN4rhea14float_variableEED2Ev($6);
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s;
 $1 = $0;
 $2 = (_strlen(($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK4rhea8variable5valueEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = (__ZNK4rhea8variable6is_nilEv($2)|0);
 if ($3) {
  ___assert_fail((5640|0),(5656|0),205,(2944|0));
  // unreachable;
 } else {
  $0 = $2;
  $4 = $0;
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (+FUNCTION_TABLE_di[$8 & 511]($5));
  STACKTOP = sp;return (+$9);
 }
 return +(0.0);
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
  // unreachable;
 } else {
  $11 = $14;
  $18 = $11;
  $19 = ((($18)) + 8|0);
  $10 = $19;
  $20 = $10;
  $9 = $20;
  $21 = $9;
  $22 = $13;
  $7 = $21;
  $8 = $22;
  $23 = $7;
  $24 = $8;
  $4 = $23;
  $5 = $24;
  $6 = 0;
  $25 = $5;
  $26 = $25<<3;
  $3 = $26;
  $27 = $3;
  $28 = (__Znwj($27)|0);
  $29 = ((($14)) + 4|0);
  HEAP32[$29>>2] = $28;
  HEAP32[$14>>2] = $28;
  $30 = HEAP32[$14>>2]|0;
  $31 = $13;
  $32 = (($30) + ($31<<3)|0);
  $2 = $14;
  $33 = $2;
  $34 = ((($33)) + 8|0);
  $1 = $34;
  $35 = $1;
  $0 = $35;
  $36 = $0;
  HEAP32[$36>>2] = $32;
  __ZNKSt3__16vectorIdNS_9allocatorIdEEE14__annotate_newEj($14,0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endIPKdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator,$21,1);
  $29 = $__a;
  $30 = ((($21)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  $45 = +HEAPF64[$44>>3];
  HEAPF64[$42>>3] = $45;
  __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $46 = ((($21)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 8|0);
  HEAP32[$46>>2] = $48;
  $49 = $19;
  $50 = ((($49)) + 8|0);
  $19 = $50;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -8|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 8)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZN4rhea10constraintD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 2352;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 __ZNSt3__110shared_ptrIN4rhea19abstract_constraintEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN4rhea17linear_inequalityD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea17linear_constraintD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4rhea15linear_equationD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea17linear_constraintD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__14listIN4rhea14simplex_solver9edit_infoENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__110__list_impIN4rhea14simplex_solver9edit_infoENS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapIN4rhea8variableENS1_10constraintENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapIN4rhea10constraintENS1_8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS2_8variableEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapIN4rhea10constraintENS_13unordered_setINS1_8variableENS_4hashIS4_EENS_8equal_toIS4_EENS_9allocatorIS4_EEEENS5_IS2_EENS7_IS2_EENS9_INS_4pairIKS2_SB_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN4rhea8variableENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__18functionIFvRKN4rhea8variableERNS1_14simplex_solverEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 $5 = ((($1)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 if ($4) {
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vi[$9 & 511]($6);
  STACKTOP = sp;return;
 }
 $10 = ($6|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = ((($1)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 FUNCTION_TABLE_vi[$15 & 511]($12);
 STACKTOP = sp;return;
}
function __ZNSt3__18functionIFvRN4rhea14simplex_solverEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 $5 = ((($1)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 if ($4) {
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vi[$9 & 511]($6);
  STACKTOP = sp;return;
 }
 $10 = ($6|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = ((($1)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 FUNCTION_TABLE_vi[$15 & 511]($12);
 STACKTOP = sp;return;
}
function __ZN4rhea6solverD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN10emscripten15register_vectorIdEENS_6class_INSt3__16vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc($agg$result,$name) {
 $agg$result = $agg$result|0;
 $name = $name|0;
 var $$field = 0, $$field14 = 0, $$field17 = 0, $$field4 = 0, $$index12 = 0, $$index16 = 0, $$index20 = 0, $$index25 = 0, $$index27 = 0, $$index3 = 0, $$index32 = 0, $$index7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_getActualType$i = 0, $args$i = 0, $args$i$i = 0, $args$i2 = 0, $args$i5 = 0, $args$i7 = 0, $args$i8 = 0;
 var $destructor$i = 0, $downcast$i = 0, $invoke$i = 0, $invoke$i$i = 0, $invoke$i9 = 0, $invoker$i = 0, $invoker$i1 = 0, $invoker$i4 = 0, $memberFunction$i$field = 0, $memberFunction$i$field9 = 0, $memberFunction$i$index8 = 0, $memberFunction$i3$field = 0, $memberFunction$i3$field22 = 0, $memberFunction$i3$index21 = 0, $memberFunction$i6$field = 0, $memberFunction$i6$field29 = 0, $memberFunction$i6$index28 = 0, $push_back = 0, $push_back$index1 = 0, $resize = 0;
 var $resize$index2 = 0, $upcast$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 24|0;
 $args$i8 = sp + 227|0;
 $5 = sp + 92|0;
 $args$i7 = sp + 224|0;
 $8 = sp + 64|0;
 $args$i5 = sp + 225|0;
 $9 = sp + 16|0;
 $12 = sp + 208|0;
 $args$i2 = sp + 229|0;
 $13 = sp;
 $16 = sp + 136|0;
 $args$i = sp + 228|0;
 $17 = sp + 8|0;
 $args$i$i = sp + 226|0;
 $push_back = sp + 152|0;
 $resize = sp + 112|0;
 $24 = sp + 230|0;
 $25 = sp + 80|0;
 $26 = sp + 40|0;
 $27 = sp + 168|0;
 $23 = $name;
 HEAP32[$push_back>>2] = (308);
 $push_back$index1 = ((($push_back)) + 4|0);
 HEAP32[$push_back$index1>>2] = 0;
 HEAP32[$resize>>2] = (309);
 $resize$index2 = ((($resize)) + 4|0);
 HEAP32[$resize$index2>>2] = 0;
 $28 = $23;
 $21 = $24;
 $22 = $28;
 __ZN10emscripten8internal11NoBaseClass6verifyINSt3__16vectorIdNS3_9allocatorIdEEEEEEvv();
 $_getActualType$i = 310;
 $29 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__16vectorIdNS3_9allocatorIdEEEEEEPFvvEv()|0);
 $upcast$i = $29;
 $30 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__16vectorIdNS3_9allocatorIdEEEEEEPFvvEv()|0);
 $downcast$i = $30;
 $destructor$i = 311;
 $31 = (__ZN10emscripten8internal6TypeIDINSt3__16vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $32 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__16vectorIdNS3_9allocatorIdEEEEEEE3getEv()|0);
 $33 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__16vectorIdNS3_9allocatorIdEEEEEEE3getEv()|0);
 $34 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $35 = $_getActualType$i;
 $36 = (__ZN10emscripten8internal12getSignatureIPKvJPNSt3__16vectorIdNS4_9allocatorIdEEEEEEEPKcPFT_DpT0_E($35)|0);
 $37 = $_getActualType$i;
 $38 = $upcast$i;
 $39 = (__ZN10emscripten8internal12getSignatureIvJEEEPKcPFT_DpT0_E($38)|0);
 $40 = $upcast$i;
 $41 = $downcast$i;
 $42 = (__ZN10emscripten8internal12getSignatureIvJEEEPKcPFT_DpT0_E($41)|0);
 $43 = $downcast$i;
 $44 = $22;
 $45 = $destructor$i;
 $46 = (__ZN10emscripten8internal12getSignatureIvJPNSt3__16vectorIdNS2_9allocatorIdEEEEEEEPKcPFT_DpT0_E($45)|0);
 $47 = $destructor$i;
 __embind_register_class(($31|0),($32|0),($33|0),($34|0),($36|0),($37|0),($39|0),($40|0),($42|0),($43|0),($44|0),($46|0),($47|0));
 $20 = $24;
 $48 = $20;
 $18 = $48;
 $19 = 312;
 $49 = $18;
 $invoke$i$i = 313;
 $50 = (__ZN10emscripten8internal6TypeIDINSt3__16vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $51 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__16vectorIdNS5_9allocatorIdEEEEEE8getCountEv($args$i$i)|0);
 $52 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__16vectorIdNS5_9allocatorIdEEEEEE8getTypesEv($args$i$i)|0);
 $53 = $invoke$i$i;
 $54 = (__ZN10emscripten8internal12getSignatureIPNSt3__16vectorIdNS2_9allocatorIdEEEEJPFS7_vEEEEPKcPFT_DpT0_E($53)|0);
 $55 = $invoke$i$i;
 $56 = $19;
 __embind_register_class_constructor(($50|0),($51|0),($52|0),($54|0),($55|0),($56|0));
 $$field = HEAP32[$push_back>>2]|0;
 $$index3 = ((($push_back)) + 4|0);
 $$field4 = HEAP32[$$index3>>2]|0;
 HEAP32[$25>>2] = $$field;
 $$index7 = ((($25)) + 4|0);
 HEAP32[$$index7>>2] = $$field4;
 ;HEAP8[$17>>0]=HEAP8[$25>>0]|0;HEAP8[$17+1>>0]=HEAP8[$25+1>>0]|0;HEAP8[$17+2>>0]=HEAP8[$25+2>>0]|0;HEAP8[$17+3>>0]=HEAP8[$25+3>>0]|0;HEAP8[$17+4>>0]=HEAP8[$25+4>>0]|0;HEAP8[$17+5>>0]=HEAP8[$25+5>>0]|0;HEAP8[$17+6>>0]=HEAP8[$25+6>>0]|0;HEAP8[$17+7>>0]=HEAP8[$25+7>>0]|0;
 $memberFunction$i$field = HEAP32[$17>>2]|0;
 $memberFunction$i$index8 = ((($17)) + 4|0);
 $memberFunction$i$field9 = HEAP32[$memberFunction$i$index8>>2]|0;
 $14 = $49;
 $15 = 5304;
 HEAP32[$16>>2] = $memberFunction$i$field;
 $$index12 = ((($16)) + 4|0);
 HEAP32[$$index12>>2] = $memberFunction$i$field9;
 $57 = $14;
 $invoker$i = 314;
 $58 = (__ZN10emscripten8internal6TypeIDINSt3__16vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $59 = $15;
 $60 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__16vectorIdNS5_9allocatorIdEEEEEERKdEE8getCountEv($args$i)|0);
 $61 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__16vectorIdNS5_9allocatorIdEEEEEERKdEE8getTypesEv($args$i)|0);
 $62 = $invoker$i;
 $63 = (__ZN10emscripten8internal12getSignatureIvJRKMNSt3__16vectorIdNS2_9allocatorIdEEEEFvRKdEPS6_dEEEPKcPFT_DpT0_E($62)|0);
 $64 = $invoker$i;
 $65 = (__ZN10emscripten8internal10getContextIMNSt3__16vectorIdNS2_9allocatorIdEEEEFvRKdEEEPT_RKSB_($16)|0);
 __embind_register_class_function(($58|0),($59|0),($60|0),($61|0),($63|0),($64|0),($65|0),0);
 $$field14 = HEAP32[$resize>>2]|0;
 $$index16 = ((($resize)) + 4|0);
 $$field17 = HEAP32[$$index16>>2]|0;
 HEAP32[$26>>2] = $$field14;
 $$index20 = ((($26)) + 4|0);
 HEAP32[$$index20>>2] = $$field17;
 ;HEAP8[$13>>0]=HEAP8[$26>>0]|0;HEAP8[$13+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$13+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$13+3>>0]=HEAP8[$26+3>>0]|0;HEAP8[$13+4>>0]=HEAP8[$26+4>>0]|0;HEAP8[$13+5>>0]=HEAP8[$26+5>>0]|0;HEAP8[$13+6>>0]=HEAP8[$26+6>>0]|0;HEAP8[$13+7>>0]=HEAP8[$26+7>>0]|0;
 $memberFunction$i3$field = HEAP32[$13>>2]|0;
 $memberFunction$i3$index21 = ((($13)) + 4|0);
 $memberFunction$i3$field22 = HEAP32[$memberFunction$i3$index21>>2]|0;
 $10 = $57;
 $11 = 5320;
 HEAP32[$12>>2] = $memberFunction$i3$field;
 $$index25 = ((($12)) + 4|0);
 HEAP32[$$index25>>2] = $memberFunction$i3$field22;
 $66 = $10;
 $invoker$i1 = 315;
 $67 = (__ZN10emscripten8internal6TypeIDINSt3__16vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $68 = $11;
 $69 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__16vectorIdNS5_9allocatorIdEEEEEEjRKdEE8getCountEv($args$i2)|0);
 $70 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__16vectorIdNS5_9allocatorIdEEEEEEjRKdEE8getTypesEv($args$i2)|0);
 $71 = $invoker$i1;
 $72 = (__ZN10emscripten8internal12getSignatureIvJRKMNSt3__16vectorIdNS2_9allocatorIdEEEEFvjRKdEPS6_jdEEEPKcPFT_DpT0_E($71)|0);
 $73 = $invoker$i1;
 $74 = (__ZN10emscripten8internal10getContextIMNSt3__16vectorIdNS2_9allocatorIdEEEEFvjRKdEEEPT_RKSB_($12)|0);
 __embind_register_class_function(($67|0),($68|0),($69|0),($70|0),($72|0),($73|0),($74|0),0);
 HEAP32[$27>>2] = (316);
 $$index27 = ((($27)) + 4|0);
 HEAP32[$$index27>>2] = 0;
 ;HEAP8[$9>>0]=HEAP8[$27>>0]|0;HEAP8[$9+1>>0]=HEAP8[$27+1>>0]|0;HEAP8[$9+2>>0]=HEAP8[$27+2>>0]|0;HEAP8[$9+3>>0]=HEAP8[$27+3>>0]|0;HEAP8[$9+4>>0]=HEAP8[$27+4>>0]|0;HEAP8[$9+5>>0]=HEAP8[$27+5>>0]|0;HEAP8[$9+6>>0]=HEAP8[$27+6>>0]|0;HEAP8[$9+7>>0]=HEAP8[$27+7>>0]|0;
 $memberFunction$i6$field = HEAP32[$9>>2]|0;
 $memberFunction$i6$index28 = ((($9)) + 4|0);
 $memberFunction$i6$field29 = HEAP32[$memberFunction$i6$index28>>2]|0;
 $6 = $66;
 $7 = 5328;
 HEAP32[$8>>2] = $memberFunction$i6$field;
 $$index32 = ((($8)) + 4|0);
 HEAP32[$$index32>>2] = $memberFunction$i6$field29;
 $75 = $6;
 $invoker$i4 = 317;
 $76 = (__ZN10emscripten8internal6TypeIDINSt3__16vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $77 = $7;
 $78 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__16vectorIdNS5_9allocatorIdEEEEEEEE8getCountEv($args$i5)|0);
 $79 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__16vectorIdNS5_9allocatorIdEEEEEEEE8getTypesEv($args$i5)|0);
 $80 = $invoker$i4;
 $81 = (__ZN10emscripten8internal12getSignatureIjJRKMNSt3__16vectorIdNS2_9allocatorIdEEEEKFjvEPKS6_EEEPKcPFT_DpT0_E($80)|0);
 $82 = $invoker$i4;
 $83 = (__ZN10emscripten8internal10getContextIMNSt3__16vectorIdNS2_9allocatorIdEEEEKFjvEEEPT_RKS9_($8)|0);
 __embind_register_class_function(($76|0),($77|0),($78|0),($79|0),($81|0),($82|0),($83|0),0);
 $3 = $75;
 $4 = 5336;
 HEAP32[$5>>2] = 318;
 $84 = $3;
 $invoke$i = 319;
 $85 = (__ZN10emscripten8internal6TypeIDINSt3__16vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $86 = $4;
 $87 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__16vectorIdNS5_9allocatorIdEEEEjEE8getCountEv($args$i7)|0);
 $88 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__16vectorIdNS5_9allocatorIdEEEEjEE8getTypesEv($args$i7)|0);
 $89 = $invoke$i;
 $90 = (__ZN10emscripten8internal12getSignatureIPNS0_7_EM_VALEJPPFNS_3valERKNSt3__16vectorIdNS5_9allocatorIdEEEEjEPS9_jEEEPKcPFT_DpT0_E($89)|0);
 $91 = $invoke$i;
 $92 = (__ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__16vectorIdNS3_9allocatorIdEEEEjEEEPT_RKSC_($5)|0);
 __embind_register_class_function(($85|0),($86|0),($87|0),($88|0),($90|0),($91|0),($92|0),0);
 $0 = $84;
 $1 = 5344;
 HEAP32[$2>>2] = 320;
 $invoke$i9 = 321;
 $93 = (__ZN10emscripten8internal6TypeIDINSt3__16vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $94 = $1;
 $95 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__16vectorIdNS4_9allocatorIdEEEEjRKdEE8getCountEv($args$i8)|0);
 $96 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__16vectorIdNS4_9allocatorIdEEEEjRKdEE8getTypesEv($args$i8)|0);
 $97 = $invoke$i9;
 $98 = (__ZN10emscripten8internal12getSignatureIbJPPFbRNSt3__16vectorIdNS2_9allocatorIdEEEEjRKdEPS6_jdEEEPKcPFT_DpT0_E($97)|0);
 $99 = $invoke$i9;
 $100 = (__ZN10emscripten8internal10getContextIPFbRNSt3__16vectorIdNS2_9allocatorIdEEEEjRKdEEEPT_RKSC_($2)|0);
 __embind_register_class_function(($93|0),($94|0),($95|0),($96|0),($98|0),($99|0),($100|0),0);
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionINSt3__16vectorIdNS1_9allocatorIdEEEEJEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 12|0;
 $0 = $name;
 $1 = $fn;
 $invoker = 322;
 $2 = $0;
 $3 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__16vectorIdNS4_9allocatorIdEEEEEE8getCountEv($args)|0);
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__16vectorIdNS4_9allocatorIdEEEEEE8getTypesEv($args)|0);
 $5 = $invoker;
 $6 = (__ZN10emscripten8internal12getSignatureIPNSt3__16vectorIdNS2_9allocatorIdEEEEJPFS6_vEEEEPKcPFT_DpT0_E($5)|0);
 $7 = $invoker;
 $8 = $1;
 __embind_register_function(($2|0),($3|0),($4|0),($6|0),($7|0),($8|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4rhea17linear_expressionEJRNS1_8variableENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEES4_EJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 12|0;
 $0 = $name;
 $1 = $fn;
 $invoker = 323;
 $2 = $0;
 $3 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_expressionERNS4_8variableENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEES7_EE8getCountEv($args)|0);
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_expressionERNS4_8variableENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEES7_EE8getTypesEv($args)|0);
 $5 = $invoker;
 $6 = (__ZN10emscripten8internal12getSignatureIPN4rhea17linear_expressionEJPFS3_RNS2_8variableENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEES6_EPS5_PNS0_11BindingTypeISD_EUt_ESG_EEEPKcPFT_DpT0_E($5)|0);
 $7 = $invoker;
 $8 = $1;
 __embind_register_function(($2|0),($3|0),($4|0),($6|0),($7|0),($8|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4rhea17linear_expressionEJRNS1_8variableENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEdEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 12|0;
 $0 = $name;
 $1 = $fn;
 $invoker = 324;
 $2 = $0;
 $3 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_expressionERNS4_8variableENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEdEE8getCountEv($args)|0);
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_expressionERNS4_8variableENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEdEE8getTypesEv($args)|0);
 $5 = $invoker;
 $6 = (__ZN10emscripten8internal12getSignatureIPN4rhea17linear_expressionEJPFS3_RNS2_8variableENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEdEPS5_PNS0_11BindingTypeISD_EUt_EdEEEPKcPFT_DpT0_E($5)|0);
 $7 = $invoker;
 $8 = $1;
 __embind_register_function(($2|0),($3|0),($4|0),($6|0),($7|0),($8|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4rhea17linear_expressionEJdNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERNS1_8variableEEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 12|0;
 $0 = $name;
 $1 = $fn;
 $invoker = 325;
 $2 = $0;
 $3 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_expressionEdNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERNS4_8variableEEE8getCountEv($args)|0);
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_expressionEdNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERNS4_8variableEEE8getTypesEv($args)|0);
 $5 = $invoker;
 $6 = (__ZN10emscripten8internal12getSignatureIPN4rhea17linear_expressionEJPFS3_dNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERNS2_8variableEEdPNS0_11BindingTypeISB_EUt_EPSC_EEEPKcPFT_DpT0_E($5)|0);
 $7 = $invoker;
 $8 = $1;
 __embind_register_function(($2|0),($3|0),($4|0),($6|0),($7|0),($8|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4rhea15linear_equationEJRNS1_17linear_expressionERNS1_8variableEEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 12|0;
 $0 = $name;
 $1 = $fn;
 $invoker = 326;
 $2 = $0;
 $3 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea15linear_equationERNS4_17linear_expressionERNS4_8variableEEE8getCountEv($args)|0);
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea15linear_equationERNS4_17linear_expressionERNS4_8variableEEE8getTypesEv($args)|0);
 $5 = $invoker;
 $6 = (__ZN10emscripten8internal12getSignatureIPN4rhea15linear_equationEJPFS3_RNS2_17linear_expressionERNS2_8variableEEPS5_PS7_EEEPKcPFT_DpT0_E($5)|0);
 $7 = $invoker;
 $8 = $1;
 __embind_register_function(($2|0),($3|0),($4|0),($6|0),($7|0),($8|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4rhea15linear_equationEJRNS1_17linear_expressionES4_EJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 12|0;
 $0 = $name;
 $1 = $fn;
 $invoker = 327;
 $2 = $0;
 $3 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea15linear_equationERNS4_17linear_expressionES7_EE8getCountEv($args)|0);
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea15linear_equationERNS4_17linear_expressionES7_EE8getTypesEv($args)|0);
 $5 = $invoker;
 $6 = (__ZN10emscripten8internal12getSignatureIPN4rhea15linear_equationEJPFS3_RNS2_17linear_expressionES6_EPS5_S9_EEEPKcPFT_DpT0_E($5)|0);
 $7 = $invoker;
 $8 = $1;
 __embind_register_function(($2|0),($3|0),($4|0),($6|0),($7|0),($8|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4rhea15linear_equationEJRNS1_8variableERNS1_17linear_expressionEEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 12|0;
 $0 = $name;
 $1 = $fn;
 $invoker = 328;
 $2 = $0;
 $3 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea15linear_equationERNS4_8variableERNS4_17linear_expressionEEE8getCountEv($args)|0);
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea15linear_equationERNS4_8variableERNS4_17linear_expressionEEE8getTypesEv($args)|0);
 $5 = $invoker;
 $6 = (__ZN10emscripten8internal12getSignatureIPN4rhea15linear_equationEJPFS3_RNS2_8variableERNS2_17linear_expressionEEPS5_PS7_EEEPKcPFT_DpT0_E($5)|0);
 $7 = $invoker;
 $8 = $1;
 __embind_register_function(($2|0),($3|0),($4|0),($6|0),($7|0),($8|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4rhea15linear_equationEJRNS1_8variableES4_EJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 12|0;
 $0 = $name;
 $1 = $fn;
 $invoker = 329;
 $2 = $0;
 $3 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea15linear_equationERNS4_8variableES7_EE8getCountEv($args)|0);
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea15linear_equationERNS4_8variableES7_EE8getTypesEv($args)|0);
 $5 = $invoker;
 $6 = (__ZN10emscripten8internal12getSignatureIPN4rhea15linear_equationEJPFS3_RNS2_8variableES6_EPS5_S9_EEEPKcPFT_DpT0_E($5)|0);
 $7 = $invoker;
 $8 = $1;
 __embind_register_function(($2|0),($3|0),($4|0),($6|0),($7|0),($8|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4rhea15linear_equationEJRNS1_8variableEdEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 12|0;
 $0 = $name;
 $1 = $fn;
 $invoker = 330;
 $2 = $0;
 $3 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea15linear_equationERNS4_8variableEdEE8getCountEv($args)|0);
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea15linear_equationERNS4_8variableEdEE8getTypesEv($args)|0);
 $5 = $invoker;
 $6 = (__ZN10emscripten8internal12getSignatureIPN4rhea15linear_equationEJPFS3_RNS2_8variableEdEPS5_dEEEPKcPFT_DpT0_E($5)|0);
 $7 = $invoker;
 $8 = $1;
 __embind_register_function(($2|0),($3|0),($4|0),($6|0),($7|0),($8|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4rhea17linear_inequalityEJRNS1_17linear_expressionENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEES4_EJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 12|0;
 $0 = $name;
 $1 = $fn;
 $invoker = 331;
 $2 = $0;
 $3 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_inequalityERNS4_17linear_expressionENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEES7_EE8getCountEv($args)|0);
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_inequalityERNS4_17linear_expressionENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEES7_EE8getTypesEv($args)|0);
 $5 = $invoker;
 $6 = (__ZN10emscripten8internal12getSignatureIPN4rhea17linear_inequalityEJPFS3_RNS2_17linear_expressionENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEES6_EPS5_PNS0_11BindingTypeISD_EUt_ESG_EEEPKcPFT_DpT0_E($5)|0);
 $7 = $invoker;
 $8 = $1;
 __embind_register_function(($2|0),($3|0),($4|0),($6|0),($7|0),($8|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4rhea17linear_inequalityEJRNS1_8variableENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERNS1_17linear_expressionEEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 12|0;
 $0 = $name;
 $1 = $fn;
 $invoker = 332;
 $2 = $0;
 $3 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_inequalityERNS4_8variableENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEERNS4_17linear_expressionEEE8getCountEv($args)|0);
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_inequalityERNS4_8variableENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEERNS4_17linear_expressionEEE8getTypesEv($args)|0);
 $5 = $invoker;
 $6 = (__ZN10emscripten8internal12getSignatureIPN4rhea17linear_inequalityEJPFS3_RNS2_8variableENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEERNS2_17linear_expressionEEPS5_PNS0_11BindingTypeISD_EUt_EPSE_EEEPKcPFT_DpT0_E($5)|0);
 $7 = $invoker;
 $8 = $1;
 __embind_register_function(($2|0),($3|0),($4|0),($6|0),($7|0),($8|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4rhea17linear_inequalityEJRNS1_8variableENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEES4_EJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 12|0;
 $0 = $name;
 $1 = $fn;
 $invoker = 333;
 $2 = $0;
 $3 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_inequalityERNS4_8variableENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEES7_EE8getCountEv($args)|0);
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_inequalityERNS4_8variableENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEES7_EE8getTypesEv($args)|0);
 $5 = $invoker;
 $6 = (__ZN10emscripten8internal12getSignatureIPN4rhea17linear_inequalityEJPFS3_RNS2_8variableENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEES6_EPS5_PNS0_11BindingTypeISD_EUt_ESG_EEEPKcPFT_DpT0_E($5)|0);
 $7 = $invoker;
 $8 = $1;
 __embind_register_function(($2|0),($3|0),($4|0),($6|0),($7|0),($8|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4rhea17linear_inequalityEJRNS1_8variableENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEdEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 12|0;
 $0 = $name;
 $1 = $fn;
 $invoker = 334;
 $2 = $0;
 $3 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_inequalityERNS4_8variableENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEdEE8getCountEv($args)|0);
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_inequalityERNS4_8variableENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEdEE8getTypesEv($args)|0);
 $5 = $invoker;
 $6 = (__ZN10emscripten8internal12getSignatureIPN4rhea17linear_inequalityEJPFS3_RNS2_8variableENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEdEPS5_PNS0_11BindingTypeISD_EUt_EdEEEPKcPFT_DpT0_E($5)|0);
 $7 = $invoker;
 $8 = $1;
 __embind_register_function(($2|0),($3|0),($4|0),($6|0),($7|0),($8|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4rhea10constraintEJRNS1_15linear_equationEEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 12|0;
 $0 = $name;
 $1 = $fn;
 $invoker = 335;
 $2 = $0;
 $3 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea10constraintERNS4_15linear_equationEEE8getCountEv($args)|0);
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea10constraintERNS4_15linear_equationEEE8getTypesEv($args)|0);
 $5 = $invoker;
 $6 = (__ZN10emscripten8internal12getSignatureIPN4rhea10constraintEJPFS3_RNS2_15linear_equationEEPS5_EEEPKcPFT_DpT0_E($5)|0);
 $7 = $invoker;
 $8 = $1;
 __embind_register_function(($2|0),($3|0),($4|0),($6|0),($7|0),($8|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionIN4rhea10constraintEJRNS1_17linear_inequalityEEJEEEvPKcPFT_DpT0_EDpT1_($name,$fn) {
 $name = $name|0;
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $args = 0, $invoker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $args = sp + 12|0;
 $0 = $name;
 $1 = $fn;
 $invoker = 336;
 $2 = $0;
 $3 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea10constraintERNS4_17linear_inequalityEEE8getCountEv($args)|0);
 $4 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea10constraintERNS4_17linear_inequalityEEE8getTypesEv($args)|0);
 $5 = $invoker;
 $6 = (__ZN10emscripten8internal12getSignatureIPN4rhea10constraintEJPFS3_RNS2_17linear_inequalityEEPS5_EEEPKcPFT_DpT0_E($5)|0);
 $7 = $invoker;
 $8 = $1;
 __embind_register_function(($2|0),($3|0),($4|0),($6|0),($7|0),($8|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyIN4rhea8variableEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeIN4rhea8variableEEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = (__ZN10emscripten8internal14getLightTypeIDIN4rhea8variableEEEPKvRKT_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterIN4rhea8variableEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterIN4rhea8variableEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorIN4rhea8variableEEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZN4rhea8variableD2Ev($1);
  __ZdlPv($1);
 }
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIN4rhea8variableEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIN4rhea8variableEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4rhea8variableEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPN4rhea8variableEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4rhea8variableEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKN4rhea8variableEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11NoBaseClass3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal12getSignatureIPKvJPN4rhea8variableEEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4496|0);
}
function __ZN10emscripten8internal12getSignatureIvJEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4488|0);
}
function __ZN10emscripten8internal12getSignatureIvJPN4rhea8variableEEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4480|0);
}
function __ZN10emscripten8internal12operator_newIN4rhea8variableEJEEEPT_DpOT0_() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = (__Znwj(8)|0);
 __THREW__ = 0;
 invoke_vi(227,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  $0 = $5;
  $1 = $6;
  __ZdlPv($2);
  $7 = $0;
  $8 = $1;
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal7InvokerIPN4rhea8variableEJEE6invokeEPFS4_vE($fn) {
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $0;
 $2 = (FUNCTION_TABLE_i[$1 & 511]()|0);
 $3 = (__ZN10emscripten8internal11BindingTypeIPN4rhea8variableEE10toWireTypeES4_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4rhea8variableEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4rhea8variableEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerIN4rhea8variableEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPN4rhea8variableEJPFS4_vEEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4464|0);
}
function __ZN10emscripten8internal12operator_newIN4rhea8variableEJdEEEPT_DpOT0_($args) {
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $args;
 $4 = (__Znwj(8)|0);
 $5 = $1;
 $0 = $5;
 $6 = $0;
 $7 = +HEAPF64[$6>>3];
 __THREW__ = 0;
 invoke_vid(337,($4|0),(+$7));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  $2 = $10;
  $3 = $11;
  __ZdlPv($4);
  $12 = $2;
  $13 = $3;
  ___resumeException($12|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal7InvokerIPN4rhea8variableEJOdEE6invokeEPFS4_S5_Ed($fn,$args) {
 $fn = $fn|0;
 $args = +$args;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $fn;
 $1 = $args;
 $3 = $0;
 $4 = $1;
 $5 = (+__ZN10emscripten8internal11BindingTypeIOdE12fromWireTypeEd($4));
 HEAPF64[$2>>3] = $5;
 $6 = (FUNCTION_TABLE_ii[$3 & 511]($2)|0);
 $7 = (__ZN10emscripten8internal11BindingTypeIPN4rhea8variableEE10toWireTypeES4_($6)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4rhea8variableEOdEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4rhea8variableEOdEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerIN4rhea8variableEEEOdEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPN4rhea8variableEJPFS4_OdEdEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4448|0);
}
function __ZN10emscripten8internal13MethodInvokerIMN4rhea8variableEKFdvEdPKS3_JEE6invokeERKS5_S7_($method,$wireThis) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $method;
 $1 = $wireThis;
 $3 = $0;
 $$field = HEAP32[$3>>2]|0;
 $$index1 = ((($3)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal11BindingTypeIPKN4rhea8variableEE12fromWireTypeES5_($4)|0);
 $6 = $$field2 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$field2 & 1;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$field)|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 } else {
  $13 = $$field;
  $14 = $13;
 }
 $15 = (+FUNCTION_TABLE_di[$14 & 511]($7));
 HEAPF64[$2>>3] = $15;
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($2));
 STACKTOP = sp;return (+$16);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerIKN4rhea8variableEEEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerIKN4rhea8variableEEEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerIKN4rhea8variableEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIdJRKMN4rhea8variableEKFdvEPKS3_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4392|0);
}
function __ZN10emscripten8internal10getContextIMN4rhea8variableEKFdvEEEPT_RKS6_($t) {
 $t = $t|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(8)|0);
 $2 = $0;
 $$field = HEAP32[$2>>2]|0;
 $$index1 = ((($2)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($1|0);
}
function __ZN4rhea8variable9set_valueEd($this,$x) {
 $this = $this|0;
 $x = +$x;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $x;
 $3 = $1;
 $0 = $3;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 FUNCTION_TABLE_vid[$8 & 511]($5,$9);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal13MethodInvokerIMN4rhea8variableEFvdEvPS3_JdEE6invokeERKS5_S6_d($method,$wireThis,$args) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 $args = +$args;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $method;
 $1 = $wireThis;
 $2 = $args;
 $3 = $0;
 $$field = HEAP32[$3>>2]|0;
 $$index1 = ((($3)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal11BindingTypeIPN4rhea8variableEE12fromWireTypeES4_($4)|0);
 $6 = $$field2 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$field2 & 1;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$field)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 } else {
  $13 = $$field;
  $16 = $13;
 }
 $14 = $2;
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($14));
 FUNCTION_TABLE_vid[$16 & 511]($7,$15);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIN4rhea8variableEEEdEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIN4rhea8variableEEEdEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerIN4rhea8variableEEEdEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIvJRKMN4rhea8variableEFvdEPS3_dEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4328|0);
}
function __ZN10emscripten8internal10getContextIMN4rhea8variableEFvdEEEPT_RKS6_($t) {
 $t = $t|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(8)|0);
 $2 = $0;
 $$field = HEAP32[$2>>2]|0;
 $$index1 = ((($2)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyIN4rhea10constraintEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeIN4rhea10constraintEEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = (__ZN10emscripten8internal14getLightTypeIDIN4rhea10constraintEEEPKvRKT_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterIN4rhea10constraintEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterIN4rhea10constraintEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorIN4rhea10constraintEEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  __ZN4rhea10constraintD2Ev($1);
  __ZdlPv($1);
 }
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIN4rhea10constraintEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIN4rhea10constraintEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4rhea10constraintEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPN4rhea10constraintEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4rhea10constraintEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKN4rhea10constraintEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal12getSignatureIPKvJPN4rhea10constraintEEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4240|0);
}
function __ZN10emscripten8internal12getSignatureIvJPN4rhea10constraintEEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4232|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRN4rhea10constraintEEbS4_JEE6invokeEPS6_PS3_($function,$wireThis) {
 $function = $function|0;
 $wireThis = $wireThis|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $function;
 $1 = $wireThis;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea10constraintEE12fromWireTypeEPS3_($4)|0);
 $6 = (FUNCTION_TABLE_ii[$3 & 511]($5)|0);
 $7 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($6)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRN4rhea10constraintEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRN4rhea10constraintEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRN4rhea10constraintEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIbJPPFbRN4rhea10constraintEEPS3_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4216|0);
}
function __ZN10emscripten8internal10getContextIPFbRN4rhea10constraintEEEEPT_RKS7_($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(4)|0);
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyIN4rhea17linear_expressionEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeIN4rhea17linear_expressionEEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = (__ZN10emscripten8internal14getLightTypeIDIN4rhea17linear_expressionEEEPKvRKT_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterIN4rhea17linear_expressionEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterIN4rhea17linear_expressionEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorIN4rhea17linear_expressionEEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 __ZN4rhea17linear_expressionD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIN4rhea17linear_expressionEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIN4rhea17linear_expressionEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4rhea17linear_expressionEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPN4rhea17linear_expressionEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4rhea17linear_expressionEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKN4rhea17linear_expressionEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal12getSignatureIPKvJPN4rhea17linear_expressionEEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4160|0);
}
function __ZN10emscripten8internal12getSignatureIvJPN4rhea17linear_expressionEEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4152|0);
}
function __ZN10emscripten8internal13MethodInvokerIMN4rhea17linear_expressionEKFdvEdPKS3_JEE6invokeERKS5_S7_($method,$wireThis) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $method;
 $1 = $wireThis;
 $3 = $0;
 $$field = HEAP32[$3>>2]|0;
 $$index1 = ((($3)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal11BindingTypeIPKN4rhea17linear_expressionEE12fromWireTypeES5_($4)|0);
 $6 = $$field2 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$field2 & 1;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$field)|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 } else {
  $13 = $$field;
  $14 = $13;
 }
 $15 = (+FUNCTION_TABLE_di[$14 & 511]($7));
 HEAPF64[$2>>3] = $15;
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($2));
 STACKTOP = sp;return (+$16);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerIKN4rhea17linear_expressionEEEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerIKN4rhea17linear_expressionEEEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerIKN4rhea17linear_expressionEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIdJRKMN4rhea17linear_expressionEKFdvEPKS3_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4048|0);
}
function __ZN10emscripten8internal10getContextIMN4rhea17linear_expressionEKFdvEEEPT_RKS6_($t) {
 $t = $t|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(8)|0);
 $2 = $0;
 $$field = HEAP32[$2>>2]|0;
 $$index1 = ((($2)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyIN4rhea15linear_equationEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeIN4rhea15linear_equationEEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = (__ZN10emscripten8internal14getLightTypeIDIN4rhea15linear_equationEEEPKvRKT_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterIN4rhea15linear_equationEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterIN4rhea15linear_equationEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorIN4rhea15linear_equationEEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIN4rhea15linear_equationEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIN4rhea15linear_equationEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4rhea15linear_equationEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPN4rhea15linear_equationEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4rhea15linear_equationEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKN4rhea15linear_equationEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal12getSignatureIPKvJPN4rhea15linear_equationEEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (3944|0);
}
function __ZN10emscripten8internal12getSignatureIvJPN4rhea15linear_equationEEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (3936|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRN4rhea15linear_equationEEbS4_JEE6invokeEPS6_PS3_($function,$wireThis) {
 $function = $function|0;
 $wireThis = $wireThis|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $function;
 $1 = $wireThis;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea15linear_equationEE12fromWireTypeEPS3_($4)|0);
 $6 = (FUNCTION_TABLE_ii[$3 & 511]($5)|0);
 $7 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($6)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRN4rhea15linear_equationEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRN4rhea15linear_equationEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRN4rhea15linear_equationEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIbJPPFbRN4rhea15linear_equationEEPS3_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (3872|0);
}
function __ZN10emscripten8internal10getContextIPFbRN4rhea15linear_equationEEEEPT_RKS7_($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(4)|0);
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyIN4rhea17linear_inequalityEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeIN4rhea17linear_inequalityEEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = (__ZN10emscripten8internal14getLightTypeIDIN4rhea17linear_inequalityEEEPKvRKT_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterIN4rhea17linear_inequalityEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterIN4rhea17linear_inequalityEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorIN4rhea17linear_inequalityEEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIN4rhea17linear_inequalityEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIN4rhea17linear_inequalityEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4rhea17linear_inequalityEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPN4rhea17linear_inequalityEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4rhea17linear_inequalityEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKN4rhea17linear_inequalityEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal12getSignatureIPKvJPN4rhea17linear_inequalityEEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (3768|0);
}
function __ZN10emscripten8internal12getSignatureIvJPN4rhea17linear_inequalityEEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (3760|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRN4rhea17linear_inequalityEEbS4_JEE6invokeEPS6_PS3_($function,$wireThis) {
 $function = $function|0;
 $wireThis = $wireThis|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $function;
 $1 = $wireThis;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea17linear_inequalityEE12fromWireTypeEPS3_($4)|0);
 $6 = (FUNCTION_TABLE_ii[$3 & 511]($5)|0);
 $7 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($6)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRN4rhea17linear_inequalityEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRN4rhea17linear_inequalityEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRN4rhea17linear_inequalityEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIbJPPFbRN4rhea17linear_inequalityEEPS3_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (3648|0);
}
function __ZN10emscripten8internal10getContextIPFbRN4rhea17linear_inequalityEEEEPT_RKS7_($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(4)|0);
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyIN4rhea14simplex_solverEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeIN4rhea14simplex_solverEEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = (__ZN10emscripten8internal14getLightTypeIDIN4rhea14simplex_solverEEEPKvRKT_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterIN4rhea14simplex_solverEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterIN4rhea14simplex_solverEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorIN4rhea14simplex_solverEEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 511]($1);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIN4rhea14simplex_solverEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIN4rhea14simplex_solverEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4rhea14simplex_solverEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPN4rhea14simplex_solverEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4rhea14simplex_solverEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKN4rhea14simplex_solverEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal12getSignatureIPKvJPN4rhea14simplex_solverEEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (3592|0);
}
function __ZN10emscripten8internal12getSignatureIvJPN4rhea14simplex_solverEEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (3584|0);
}
function __ZN10emscripten8internal12operator_newIN4rhea14simplex_solverEJEEEPT_DpOT0_() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = (__Znwj(296)|0);
 __THREW__ = 0;
 invoke_vi(228,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  $0 = $5;
  $1 = $6;
  __ZdlPv($2);
  $7 = $0;
  $8 = $1;
  ___resumeException($7|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal7InvokerIPN4rhea14simplex_solverEJEE6invokeEPFS4_vE($fn) {
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $0;
 $2 = (FUNCTION_TABLE_i[$1 & 511]()|0);
 $3 = (__ZN10emscripten8internal11BindingTypeIPN4rhea14simplex_solverEE10toWireTypeES4_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4rhea14simplex_solverEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4rhea14simplex_solverEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerIN4rhea14simplex_solverEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPN4rhea14simplex_solverEJPFS4_vEEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (3568|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFvRN4rhea14simplex_solverERNS2_10constraintEEvS4_JS6_EE6invokeEPS8_PS3_PS5_($function,$wireThis,$args) {
 $function = $function|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $function;
 $1 = $wireThis;
 $2 = $args;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea14simplex_solverEE12fromWireTypeEPS3_($5)|0);
 $7 = $2;
 $8 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea10constraintEE12fromWireTypeEPS3_($7)|0);
 FUNCTION_TABLE_vii[$4 & 511]($6,$8);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRN4rhea14simplex_solverERNS4_10constraintEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRN4rhea14simplex_solverERNS4_10constraintEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRN4rhea14simplex_solverERNS3_10constraintEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIvJPPFvRN4rhea14simplex_solverERNS2_10constraintEEPS3_PS5_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (3544|0);
}
function __ZN10emscripten8internal10getContextIPFvRN4rhea14simplex_solverERNS2_10constraintEEEEPT_RKS9_($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(4)|0);
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFvRN4rhea14simplex_solverERNS2_8variableEEvS4_JS6_EE6invokeEPS8_PS3_PS5_($function,$wireThis,$args) {
 $function = $function|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $function;
 $1 = $wireThis;
 $2 = $args;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea14simplex_solverEE12fromWireTypeEPS3_($5)|0);
 $7 = $2;
 $8 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea8variableEE12fromWireTypeEPS3_($7)|0);
 FUNCTION_TABLE_vii[$4 & 511]($6,$8);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRN4rhea14simplex_solverERNS4_8variableEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRN4rhea14simplex_solverERNS4_8variableEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRN4rhea14simplex_solverERNS3_8variableEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIvJPPFvRN4rhea14simplex_solverERNS2_8variableEEPS3_PS5_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (3520|0);
}
function __ZN10emscripten8internal10getContextIPFvRN4rhea14simplex_solverERNS2_8variableEEEEPT_RKS9_($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(4)|0);
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFvRN4rhea14simplex_solverERNS2_8variableEdEvS4_JS6_dEE6invokeEPS8_PS3_PS5_d($function,$wireThis,$args,$args1) {
 $function = $function|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 $args1 = +$args1;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $function;
 $1 = $wireThis;
 $2 = $args;
 $3 = $args1;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea14simplex_solverEE12fromWireTypeEPS3_($6)|0);
 $8 = $2;
 $9 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea8variableEE12fromWireTypeEPS3_($8)|0);
 $10 = $3;
 $11 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($10));
 FUNCTION_TABLE_viid[$5 & 511]($7,$9,$11);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRN4rhea14simplex_solverERNS4_8variableEdEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRN4rhea14simplex_solverERNS4_8variableEdEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRN4rhea14simplex_solverERNS3_8variableEdEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIvJPPFvRN4rhea14simplex_solverERNS2_8variableEdEPS3_PS5_dEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (3464|0);
}
function __ZN10emscripten8internal10getContextIPFvRN4rhea14simplex_solverERNS2_8variableEdEEEPT_RKS9_($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(4)|0);
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFvRN4rhea14simplex_solverEEvS4_JEE6invokeEPS6_PS3_($function,$wireThis) {
 $function = $function|0;
 $wireThis = $wireThis|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $function;
 $1 = $wireThis;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea14simplex_solverEE12fromWireTypeEPS3_($4)|0);
 FUNCTION_TABLE_vi[$3 & 511]($5);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRN4rhea14simplex_solverEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRN4rhea14simplex_solverEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRN4rhea14simplex_solverEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIvJPPFvRN4rhea14simplex_solverEEPS3_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (3448|0);
}
function __ZN10emscripten8internal10getContextIPFvRN4rhea14simplex_solverEEEEPT_RKS7_($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(4)|0);
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIMN4rhea14simplex_solverEFRS3_vES4_PS3_JEE6invokeERKS6_S7_($method,$wireThis) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $method;
 $1 = $wireThis;
 $2 = $0;
 $$field = HEAP32[$2>>2]|0;
 $$index1 = ((($2)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $3 = $1;
 $4 = (__ZN10emscripten8internal11BindingTypeIPN4rhea14simplex_solverEE12fromWireTypeES4_($3)|0);
 $5 = $$field2 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$field2 & 1;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$field)|0);
  $11 = HEAP32[$10>>2]|0;
  $13 = $11;
 } else {
  $12 = $$field;
  $13 = $12;
 }
 $14 = (FUNCTION_TABLE_ii[$13 & 511]($6)|0);
 $15 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea14simplex_solverEE10toWireTypeERKS3_($14)|0);
 STACKTOP = sp;return ($15|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJRN4rhea14simplex_solverENS0_17AllowedRawPointerIS5_EEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJRN4rhea14simplex_solverENS0_17AllowedRawPointerIS5_EEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJRN4rhea14simplex_solverENS0_17AllowedRawPointerIS4_EEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPN4rhea14simplex_solverEJRKMS3_FRS3_vES4_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (3352|0);
}
function __ZN10emscripten8internal10getContextIMN4rhea14simplex_solverEFRS3_vEEEPT_RKS7_($t) {
 $t = $t|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(8)|0);
 $2 = $0;
 $$field = HEAP32[$2>>2]|0;
 $$index1 = ((($2)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__117__compressed_pairINS_9allocatorIN4rhea14float_variableEEES3_ED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__128__libcpp_compressed_pair_impINS_9allocatorIN4rhea14float_variableEEES3_Lj1EED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4rhea14float_variableD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea12pod_variableIdED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4rhea8strength8requiredEv($agg$result) {
 $agg$result = $agg$result|0;
 var $z = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $z = 1.7976931348623157E+308;
 __ZN4rhea8strengthC2Eddd($agg$result,1.7976931348623157E+308,1.7976931348623157E+308,1.7976931348623157E+308);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
  // unreachable;
 } else {
  $11 = $14;
  $18 = $11;
  $19 = ((($18)) + 8|0);
  $10 = $19;
  $20 = $10;
  $9 = $20;
  $21 = $9;
  $22 = $13;
  $7 = $21;
  $8 = $22;
  $23 = $7;
  $24 = $8;
  $4 = $23;
  $5 = $24;
  $6 = 0;
  $25 = $5;
  $26 = $25<<4;
  $3 = $26;
  $27 = $3;
  $28 = (__Znwj($27)|0);
  $29 = ((($14)) + 4|0);
  HEAP32[$29>>2] = $28;
  HEAP32[$14>>2] = $28;
  $30 = HEAP32[$14>>2]|0;
  $31 = $13;
  $32 = (($30) + ($31<<4)|0);
  $2 = $14;
  $33 = $2;
  $34 = ((($33)) + 8|0);
  $1 = $34;
  $35 = $1;
  $0 = $35;
  $36 = $0;
  HEAP32[$36>>2] = $32;
  __ZNKSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEE14__annotate_newEj($14,0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp;
 $21 = sp + 117|0;
 $__annotator = sp + 116|0;
 $26 = $this;
 $27 = $__first;
 $28 = $__last;
 $29 = $26;
 $25 = $29;
 $30 = $25;
 $31 = ((($30)) + 8|0);
 $24 = $31;
 $32 = $24;
 $23 = $32;
 $33 = $23;
 $__a = $33;
 while(1) {
  $34 = $27;
  $35 = $28;
  $36 = ($34|0)!=($35|0);
  if (!($36)) {
   break;
  }
  __ZNSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator,$29,1);
  $37 = $__a;
  $38 = ((($29)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $22 = $39;
  $40 = $22;
  $41 = $27;
  $18 = $37;
  $19 = $40;
  $20 = $41;
  $42 = $18;
  $43 = $19;
  $44 = $20;
  $17 = $44;
  $45 = $17;
  ;HEAP8[$16>>0]=HEAP8[$21>>0]|0;
  $13 = $42;
  $14 = $43;
  $15 = $45;
  $46 = $13;
  $47 = $14;
  $48 = $15;
  $12 = $48;
  $49 = $12;
  $9 = $46;
  $10 = $47;
  $11 = $49;
  $50 = $10;
  $51 = $11;
  $8 = $51;
  $52 = $8;
  $6 = $50;
  $7 = $52;
  $53 = $6;
  $54 = $7;
  $5 = $54;
  $55 = $5;
  $4 = $55;
  $56 = $4;
  $0 = $56;
  $57 = $0;
  __ZN4rhea8variableC2ERKS0_($53,$57);
  $58 = ((($53)) + 8|0);
  $59 = $7;
  $2 = $59;
  $60 = $2;
  $1 = $60;
  $61 = $1;
  $62 = ((($61)) + 8|0);
  $3 = $62;
  $63 = $3;
  $64 = +HEAPF64[$63>>3];
  HEAPF64[$58>>3] = $64;
  __ZNSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $65 = ((($29)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($66)) + 16|0);
  HEAP32[$65>>2] = $67;
  $68 = $27;
  $69 = ((($68)) + 16|0);
  $27 = $69;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -16|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
  $52 = $15;
  __ZNSt3__14pairIN4rhea8variableEdED2Ev($52);
 }
 $13 = $30;
 $53 = $13;
 $54 = ((($53)) + 8|0);
 $12 = $54;
 $55 = $12;
 $11 = $55;
 $56 = $11;
 $57 = HEAP32[$30>>2]|0;
 $3 = $30;
 $58 = $3;
 $2 = $58;
 $59 = $2;
 $60 = ((($59)) + 8|0);
 $1 = $60;
 $61 = $1;
 $0 = $61;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$58>>2]|0;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = (($67|0) / 16)&-1;
 $8 = $56;
 $9 = $57;
 $10 = $68;
 $69 = $8;
 $70 = $9;
 $71 = $10;
 $5 = $69;
 $6 = $70;
 $7 = $71;
 $72 = $6;
 $4 = $72;
 $73 = $4;
 __ZdlPv($73);
 STACKTOP = sp;return;
}
function __ZN4rhea11edit_misuseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea5errorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4rhea15edit_constraintC2ERKNS_8variableERKNS_8strengthEd($this,$v,$s,$weight) {
 $this = $this|0;
 $v = $v|0;
 $s = $s|0;
 $weight = +$weight;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $0 = $this;
 $1 = $v;
 $2 = $s;
 $3 = $weight;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 __ZN4rhea8strengthC2ERKS0_($4,$7);
 $8 = $3;
 __ZN4rhea23edit_or_stay_constraintC2ERKNS_8variableENS_8strengthEd($5,$6,$4,$8);
 $9 = 2448;
 HEAP32[$5>>2] = $9;
 STACKTOP = sp;return;
}
function __ZNSt3__110shared_ptrIN4rhea15edit_constraintEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 __ZNSt3__119__shared_weak_count16__release_sharedEv($6);
 STACKTOP = sp;return;
}
function __ZNSt3__117__compressed_pairINS_9allocatorIN4rhea15edit_constraintEEES3_ED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__128__libcpp_compressed_pair_impINS_9allocatorIN4rhea15edit_constraintEEES3_Lj1EED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4rhea15edit_constraintD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea23edit_or_stay_constraintD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__15dequeIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__deque_baseIjNS_9allocatorIjEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4rhea14simplex_solver9edit_infoD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 28|0);
 __ZN4rhea8variableD2Ev($2);
 $3 = ((($1)) + 20|0);
 __ZN4rhea8variableD2Ev($3);
 $4 = ((($1)) + 8|0);
 __ZN4rhea10constraintD2Ev($4);
 __ZN4rhea8variableD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKN4rhea10constraintENS_13unordered_setINS1_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 __ZNSt3__113unordered_setIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEED2Ev($2);
 __ZN4rhea10constraintD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_setIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapIN4rhea8variableENS1_17linear_expressionENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapIN4rhea8variableENS_13unordered_setIS2_NS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEES5_S7_NS8_INS_4pairIKS2_SA_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__18equal_toIN4rhea8variableEEclERKS2_S5_($this,$a,$b) {
 $this = $this|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $1;
 $4 = $2;
 $5 = (__ZNK4rhea8variable2isERKS0_($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__14hashIN4rhea8variableEEclERKS2_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $v;
 $2 = $1;
 $3 = (__ZNK4rhea8variable4hashEv($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE16__construct_nodeERKS2_j($agg$result,$this,$__v,$__hash) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 $__hash = $__hash|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__na = 0, $__t$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 500|0;
 $29 = sp + 136|0;
 $30 = sp + 8|0;
 $33 = sp + 160|0;
 $34 = sp + 152|0;
 $35 = sp + 40|0;
 $46 = sp + 216|0;
 $64 = sp + 16|0;
 $67 = sp + 501|0;
 $80 = sp + 364|0;
 $81 = sp + 24|0;
 $84 = sp + 380|0;
 $85 = sp + 384|0;
 $86 = sp + 32|0;
 $91 = sp + 416|0;
 $__h = sp + 432|0;
 $107 = sp + 304|0;
 $104 = $this;
 $105 = $__v;
 $106 = $__hash;
 $109 = $104;
 $103 = $109;
 $110 = $103;
 $111 = ((($110)) + 8|0);
 $102 = $111;
 $112 = $102;
 $101 = $112;
 $113 = $101;
 $__na = $113;
 $114 = $__na;
 $99 = $114;
 $100 = 1;
 $115 = $99;
 $116 = $100;
 $96 = $115;
 $97 = $116;
 $98 = 0;
 $117 = $97;
 $118 = $117<<4;
 $95 = $118;
 $119 = $95;
 $120 = (__Znwj($119)|0);
 $121 = $__na;
 $92 = $107;
 $93 = $121;
 $94 = 0;
 $122 = $92;
 $123 = $93;
 HEAP32[$122>>2] = $123;
 $124 = ((($122)) + 4|0);
 $125 = $94;
 $126 = $125&1;
 $127 = $126&1;
 HEAP8[$124>>0] = $127;
 $88 = $__h;
 $89 = $120;
 $90 = $107;
 $128 = $88;
 $129 = $89;
 $130 = $90;
 $87 = $130;
 $131 = $87;
 ;HEAP32[$91>>2]=HEAP32[$131>>2]|0;HEAP32[$91+4>>2]=HEAP32[$131+4>>2]|0;
 ;HEAP8[$86>>0]=HEAP8[$91>>0]|0;HEAP8[$86+1>>0]=HEAP8[$91+1>>0]|0;HEAP8[$86+2>>0]=HEAP8[$91+2>>0]|0;HEAP8[$86+3>>0]=HEAP8[$91+3>>0]|0;HEAP8[$86+4>>0]=HEAP8[$91+4>>0]|0;HEAP8[$86+5>>0]=HEAP8[$91+5>>0]|0;HEAP8[$86+6>>0]=HEAP8[$91+6>>0]|0;HEAP8[$86+7>>0]=HEAP8[$91+7>>0]|0;
 $83 = $128;
 HEAP32[$84>>2] = $129;
 $132 = $83;
 $82 = $84;
 $133 = $82;
 $134 = HEAP32[$133>>2]|0;
 $76 = $86;
 $135 = $76;
 ;HEAP32[$85>>2]=HEAP32[$135>>2]|0;HEAP32[$85+4>>2]=HEAP32[$135+4>>2]|0;
 ;HEAP8[$81>>0]=HEAP8[$85>>0]|0;HEAP8[$81+1>>0]=HEAP8[$85+1>>0]|0;HEAP8[$81+2>>0]=HEAP8[$85+2>>0]|0;HEAP8[$81+3>>0]=HEAP8[$85+3>>0]|0;HEAP8[$81+4>>0]=HEAP8[$85+4>>0]|0;HEAP8[$81+5>>0]=HEAP8[$85+5>>0]|0;HEAP8[$81+6>>0]=HEAP8[$85+6>>0]|0;HEAP8[$81+7>>0]=HEAP8[$85+7>>0]|0;
 $79 = $132;
 HEAP32[$80>>2] = $134;
 $136 = $79;
 $78 = $80;
 $137 = $78;
 $138 = HEAP32[$137>>2]|0;
 HEAP32[$136>>2] = $138;
 $139 = ((($136)) + 4|0);
 $77 = $81;
 $140 = $77;
 ;HEAP32[$139>>2]=HEAP32[$140>>2]|0;HEAP32[$139+4>>2]=HEAP32[$140+4>>2]|0;
 $141 = $__na;
 $50 = $__h;
 $142 = $50;
 $49 = $142;
 $143 = $49;
 $48 = $143;
 $144 = $48;
 $145 = HEAP32[$144>>2]|0;
 $146 = ((($145)) + 8|0);
 $47 = $146;
 $147 = $47;
 $148 = $105;
 $10 = $141;
 $11 = $147;
 $12 = $148;
 $149 = $10;
 $150 = $11;
 $151 = $12;
 $9 = $151;
 $152 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $149;
 $6 = $150;
 $7 = $152;
 $153 = $5;
 $154 = $6;
 $155 = $7;
 $4 = $155;
 $156 = $4;
 $1 = $153;
 $2 = $154;
 $3 = $156;
 $157 = $2;
 $158 = $3;
 $0 = $158;
 $159 = $0;
 __ZN4rhea8variableC2ERKS0_($157,$159);
 $16 = $__h;
 $160 = $16;
 $15 = $160;
 $161 = $15;
 $14 = $161;
 $162 = $14;
 $163 = ((($162)) + 4|0);
 $164 = ((($163)) + 4|0);
 HEAP8[$164>>0] = 1;
 $165 = $106;
 $19 = $__h;
 $166 = $19;
 $18 = $166;
 $167 = $18;
 $17 = $167;
 $168 = $17;
 $169 = HEAP32[$168>>2]|0;
 $170 = ((($169)) + 4|0);
 HEAP32[$170>>2] = $165;
 $22 = $__h;
 $171 = $22;
 $21 = $171;
 $172 = $21;
 $20 = $172;
 $173 = $20;
 $174 = HEAP32[$173>>2]|0;
 HEAP32[$174>>2] = 0;
 $23 = $__h;
 $175 = $23;
 $44 = $agg$result;
 $45 = $175;
 $176 = $44;
 $177 = $45;
 $43 = $177;
 $178 = $43;
 $42 = $178;
 $179 = $42;
 $41 = $179;
 $180 = $41;
 $181 = HEAP32[$180>>2]|0;
 $__t$i$i = $181;
 $40 = $178;
 $182 = $40;
 $39 = $182;
 $183 = $39;
 HEAP32[$183>>2] = 0;
 $184 = $__t$i$i;
 $185 = $45;
 $38 = $185;
 $186 = $38;
 $37 = $186;
 $187 = $37;
 $36 = $187;
 $188 = $36;
 $189 = ((($188)) + 4|0);
 $24 = $189;
 $190 = $24;
 ;HEAP32[$46>>2]=HEAP32[$190>>2]|0;HEAP32[$46+4>>2]=HEAP32[$190+4>>2]|0;
 ;HEAP8[$35>>0]=HEAP8[$46>>0]|0;HEAP8[$35+1>>0]=HEAP8[$46+1>>0]|0;HEAP8[$35+2>>0]=HEAP8[$46+2>>0]|0;HEAP8[$35+3>>0]=HEAP8[$46+3>>0]|0;HEAP8[$35+4>>0]=HEAP8[$46+4>>0]|0;HEAP8[$35+5>>0]=HEAP8[$46+5>>0]|0;HEAP8[$35+6>>0]=HEAP8[$46+6>>0]|0;HEAP8[$35+7>>0]=HEAP8[$46+7>>0]|0;
 $32 = $176;
 HEAP32[$33>>2] = $184;
 $191 = $32;
 $31 = $33;
 $192 = $31;
 $193 = HEAP32[$192>>2]|0;
 $25 = $35;
 $194 = $25;
 ;HEAP32[$34>>2]=HEAP32[$194>>2]|0;HEAP32[$34+4>>2]=HEAP32[$194+4>>2]|0;
 ;HEAP8[$30>>0]=HEAP8[$34>>0]|0;HEAP8[$30+1>>0]=HEAP8[$34+1>>0]|0;HEAP8[$30+2>>0]=HEAP8[$34+2>>0]|0;HEAP8[$30+3>>0]=HEAP8[$34+3>>0]|0;HEAP8[$30+4>>0]=HEAP8[$34+4>>0]|0;HEAP8[$30+5>>0]=HEAP8[$34+5>>0]|0;HEAP8[$30+6>>0]=HEAP8[$34+6>>0]|0;HEAP8[$30+7>>0]=HEAP8[$34+7>>0]|0;
 $28 = $191;
 HEAP32[$29>>2] = $193;
 $195 = $28;
 $27 = $29;
 $196 = $27;
 $197 = HEAP32[$196>>2]|0;
 HEAP32[$195>>2] = $197;
 $198 = ((($195)) + 4|0);
 $26 = $30;
 $199 = $26;
 ;HEAP32[$198>>2]=HEAP32[$199>>2]|0;HEAP32[$198+4>>2]=HEAP32[$199+4>>2]|0;
 $108 = 1;
 $75 = $__h;
 $200 = $75;
 $73 = $200;
 $74 = 0;
 $201 = $73;
 $72 = $201;
 $202 = $72;
 $71 = $202;
 $203 = $71;
 $204 = HEAP32[$203>>2]|0;
 $__tmp$i$i1 = $204;
 $205 = $74;
 $54 = $201;
 $206 = $54;
 $53 = $206;
 $207 = $53;
 HEAP32[$207>>2] = $205;
 $208 = $__tmp$i$i1;
 $209 = ($208|0)!=(0|0);
 if (!($209)) {
  STACKTOP = sp;return;
 }
 $52 = $201;
 $210 = $52;
 $51 = $210;
 $211 = $51;
 $212 = ((($211)) + 4|0);
 $213 = $__tmp$i$i1;
 $69 = $212;
 $70 = $213;
 $214 = $69;
 $215 = ((($214)) + 4|0);
 $216 = HEAP8[$215>>0]|0;
 $217 = $216&1;
 if ($217) {
  $218 = HEAP32[$214>>2]|0;
  $219 = $70;
  $220 = ((($219)) + 8|0);
  $68 = $220;
  $221 = $68;
  $65 = $218;
  $66 = $221;
  $222 = $65;
  $223 = $66;
  ;HEAP8[$64>>0]=HEAP8[$67>>0]|0;
  $62 = $222;
  $63 = $223;
  $224 = $63;
  __ZN4rhea8variableD2Ev($224);
 }
 $225 = $70;
 $226 = ($225|0)!=(0|0);
 if (!($226)) {
  STACKTOP = sp;return;
 }
 $227 = HEAP32[$214>>2]|0;
 $228 = $70;
 $59 = $227;
 $60 = $228;
 $61 = 1;
 $229 = $59;
 $230 = $60;
 $231 = $61;
 $56 = $229;
 $57 = $230;
 $58 = $231;
 $232 = $57;
 $55 = $232;
 $233 = $55;
 __ZdlPv($233);
 STACKTOP = sp;return;
}
function __ZNKSt3__14hashIN4rhea10constraintEEclERKS2_($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $c;
 $2 = $1;
 $3 = (__ZNK4rhea10constraint4hashEv($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEEC2EjjS4_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 60|0;
 $20 = sp + 68|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEE18__construct_at_endINS_13move_iteratorIPS1_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp;
 $19 = sp + 100|0;
 $24 = $this;
 $25 = $24;
 $23 = $25;
 $26 = $23;
 $27 = ((($26)) + 12|0);
 $22 = $27;
 $28 = $22;
 $21 = $28;
 $29 = $21;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $__a = $31;
 while(1) {
  $2 = $__first;
  $3 = $__last;
  $32 = $2;
  $1 = $32;
  $33 = $1;
  $34 = HEAP32[$33>>2]|0;
  $35 = $3;
  $0 = $35;
  $36 = $0;
  $37 = HEAP32[$36>>2]|0;
  $38 = ($34|0)!=($37|0);
  if (!($38)) {
   break;
  }
  $39 = $__a;
  $40 = ((($25)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $4 = $41;
  $42 = $4;
  $5 = $__first;
  $43 = $5;
  $44 = HEAP32[$43>>2]|0;
  $16 = $39;
  $17 = $42;
  $18 = $44;
  $45 = $16;
  $46 = $17;
  $47 = $18;
  $15 = $47;
  $48 = $15;
  ;HEAP8[$14>>0]=HEAP8[$19>>0]|0;
  $11 = $45;
  $12 = $46;
  $13 = $48;
  $49 = $11;
  $50 = $12;
  $51 = $13;
  $10 = $51;
  $52 = $10;
  $7 = $49;
  $8 = $50;
  $9 = $52;
  $53 = $8;
  $54 = $9;
  $6 = $54;
  $55 = $6;
  $56 = HEAP32[$55>>2]|0;
  HEAP32[$53>>2] = $56;
  $57 = ((($25)) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($58)) + 4|0);
  HEAP32[$57>>2] = $59;
  $20 = $__first;
  $60 = $20;
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + 4|0);
  HEAP32[$60>>2] = $62;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 132|0;
 $28 = sp + 8|0;
 $31 = sp + 133|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_binding_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN38EmscriptenBindingInitializer_my_moduleC2Ev(3304);
 return;
}
function __ZNK4rhea10constraint4hashEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__u$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u$i$i = sp + 12|0;
 $2 = sp + 29|0;
 $6 = sp + 30|0;
 $8 = sp + 28|0;
 $7 = $this;
 $9 = $7;
 $10 = ((($9)) + 4|0);
 $4 = $8;
 $5 = $10;
 $11 = $5;
 $3 = $11;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $0 = $6;
 $1 = $13;
 $14 = $1;
 HEAP32[$__u$i$i>>2] = $14;
 __THREW__ = 0;
 $15 = (invoke_iiii(338,($2|0),($__u$i$i|0),4)|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 } else {
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZNSt3__121__murmur2_or_cityhashIjLj32EEclEPKvj($this,$__key,$__len) {
 $this = $this|0;
 $__key = $__key|0;
 $__len = $__len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__data = 0, $__h = 0, $__k = 0, $__m = 0, $__r = 0, $__r$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__r$i = sp + 16|0;
 $1 = $this;
 $2 = $__key;
 $3 = $__len;
 $__m = 1540483477;
 $__r = 24;
 $4 = $3;
 $__h = $4;
 $5 = $2;
 $__data = $5;
 while(1) {
  $6 = $3;
  $7 = ($6>>>0)>=(4);
  if (!($7)) {
   break;
  }
  $8 = $__data;
  $0 = $8;
  $9 = $0;
  ;HEAP8[$__r$i>>0]=HEAP8[$9>>0]|0;HEAP8[$__r$i+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$__r$i+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$__r$i+3>>0]=HEAP8[$9+3>>0]|0;
  $10 = HEAP32[$__r$i>>2]|0;
  $__k = $10;
  $11 = $__k;
  $12 = Math_imul($11, 1540483477)|0;
  $__k = $12;
  $13 = $__k;
  $14 = $13 >>> 24;
  $15 = $__k;
  $16 = $15 ^ $14;
  $__k = $16;
  $17 = $__k;
  $18 = Math_imul($17, 1540483477)|0;
  $__k = $18;
  $19 = $__h;
  $20 = Math_imul($19, 1540483477)|0;
  $__h = $20;
  $21 = $__k;
  $22 = $__h;
  $23 = $22 ^ $21;
  $__h = $23;
  $24 = $__data;
  $25 = ((($24)) + 4|0);
  $__data = $25;
  $26 = $3;
  $27 = (($26) - 4)|0;
  $3 = $27;
 }
 $28 = $3;
 if ((($28|0) == 3)) {
  $29 = $__data;
  $30 = ((($29)) + 2|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $32 << 16;
  $34 = $__h;
  $35 = $34 ^ $33;
  $__h = $35;
  label = 6;
 } else if ((($28|0) == 2)) {
  label = 6;
 } else if (!((($28|0) == 1))) {
  $50 = $__h;
  $51 = $50 >>> 13;
  $52 = $__h;
  $53 = $52 ^ $51;
  $__h = $53;
  $54 = $__h;
  $55 = Math_imul($54, 1540483477)|0;
  $__h = $55;
  $56 = $__h;
  $57 = $56 >>> 15;
  $58 = $__h;
  $59 = $58 ^ $57;
  $__h = $59;
  $60 = $__h;
  STACKTOP = sp;return ($60|0);
 }
 if ((label|0) == 6) {
  $36 = $__data;
  $37 = ((($36)) + 1|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $39 << 8;
  $41 = $__h;
  $42 = $41 ^ $40;
  $__h = $42;
 }
 $43 = $__data;
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = $__h;
 $47 = $46 ^ $45;
 $__h = $47;
 $48 = $__h;
 $49 = Math_imul($48, 1540483477)|0;
 $__h = $49;
 $50 = $__h;
 $51 = $50 >>> 13;
 $52 = $__h;
 $53 = $52 ^ $51;
 $__h = $53;
 $54 = $__h;
 $55 = Math_imul($54, 1540483477)|0;
 $__h = $55;
 $56 = $__h;
 $57 = $56 >>> 15;
 $58 = $__h;
 $59 = $58 ^ $57;
 $__h = $59;
 $60 = $__h;
 STACKTOP = sp;return ($60|0);
}
function __ZN4rhea8variableC2ERKS0_($this,$copy) {
 $this = $this|0;
 $copy = $copy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $copy;
 $4 = $2;
 $5 = $3;
 $0 = $4;
 $1 = $5;
 $6 = $0;
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($6)) + 4|0);
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$9>>2] = $12;
 $13 = ((($6)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ((($6)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 __ZNSt3__119__shared_weak_count12__add_sharedEv($17);
 STACKTOP = sp;return;
}
function __ZNK4rhea8variable4hashEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK4rhea8variable2idEv($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK4rhea8variable2idEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZNK4rhea17abstract_variable2idEv($4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZNK4rhea17abstract_variable2idEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK4rhea8variable2isERKS0_($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $this;
 $5 = $x;
 $6 = $4;
 $7 = $5;
 $2 = $6;
 $3 = $7;
 $8 = $2;
 $1 = $8;
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $11 = $3;
 $0 = $11;
 $12 = $0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)==($13|0);
 STACKTOP = sp;return ($14|0);
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__tmp$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $25 = $this;
 $26 = $25;
 $27 = ((($26)) + 8|0);
 $24 = $27;
 $28 = $24;
 $23 = $28;
 $29 = $23;
 $30 = HEAP32[$29>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEE12__deallocateEPNS_11__hash_nodeISC_PvEE($26,$30);
 $22 = $26;
 $31 = $22;
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $19 = $33;
 $34 = $19;
 $35 = HEAP32[$34>>2]|0;
 $__tmp$i$i = $35;
 $3 = $32;
 $36 = $3;
 $2 = $36;
 $37 = $2;
 HEAP32[$37>>2] = 0;
 $38 = $__tmp$i$i;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $1 = $32;
 $40 = $1;
 $0 = $40;
 $41 = $0;
 $42 = ((($41)) + 4|0);
 $43 = $__tmp$i$i;
 $17 = $42;
 $18 = $43;
 $44 = $17;
 $16 = $44;
 $45 = $16;
 $15 = $45;
 $46 = $15;
 $14 = $46;
 $47 = $14;
 $48 = $18;
 $6 = $44;
 $49 = $6;
 $5 = $49;
 $50 = $5;
 $4 = $50;
 $51 = $4;
 $52 = HEAP32[$51>>2]|0;
 $11 = $47;
 $12 = $48;
 $13 = $52;
 $53 = $11;
 $54 = $12;
 $55 = $13;
 $8 = $53;
 $9 = $54;
 $10 = $55;
 $56 = $9;
 $7 = $56;
 $57 = $7;
 __ZdlPv($57);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEE12__deallocateEPNS_11__hash_nodeISC_PvEE($this,$__np) {
 $this = $this|0;
 $__np = $__np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, $__next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $19 = $__np;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 8|0);
 $16 = $22;
 $23 = $16;
 $15 = $23;
 $24 = $15;
 $__na = $24;
 while(1) {
  $25 = $19;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   break;
  }
  $27 = $19;
  $28 = HEAP32[$27>>2]|0;
  $__next = $28;
  $29 = $__na;
  $30 = $19;
  $31 = ((($30)) + 8|0);
  $14 = $31;
  $32 = $14;
  $4 = $29;
  $5 = $32;
  $33 = $4;
  $34 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $33;
  $2 = $34;
  $35 = $2;
  $0 = $35;
  $36 = $0;
  __ZNSt3__14pairIKN4rhea8variableENS_13unordered_setIS2_NS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEEED2Ev($36);
  $37 = $__na;
  $38 = $19;
  $11 = $37;
  $12 = $38;
  $13 = 1;
  $39 = $11;
  $40 = $12;
  $41 = $13;
  $8 = $39;
  $9 = $40;
  $10 = $41;
  $42 = $9;
  $7 = $42;
  $43 = $7;
  __ZdlPv($43);
  $44 = $__next;
  $19 = $44;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKN4rhea8variableENS_13unordered_setIS2_NS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 __ZNSt3__113unordered_setIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEED2Ev($2);
 __ZN4rhea8variableD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__tmp$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $25 = $this;
 $26 = $25;
 $27 = ((($26)) + 8|0);
 $24 = $27;
 $28 = $24;
 $23 = $28;
 $29 = $23;
 $30 = HEAP32[$29>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE12__deallocateEPNS_11__hash_nodeIS5_PvEE($26,$30);
 $22 = $26;
 $31 = $22;
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $19 = $33;
 $34 = $19;
 $35 = HEAP32[$34>>2]|0;
 $__tmp$i$i = $35;
 $3 = $32;
 $36 = $3;
 $2 = $36;
 $37 = $2;
 HEAP32[$37>>2] = 0;
 $38 = $__tmp$i$i;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $1 = $32;
 $40 = $1;
 $0 = $40;
 $41 = $0;
 $42 = ((($41)) + 4|0);
 $43 = $__tmp$i$i;
 $17 = $42;
 $18 = $43;
 $44 = $17;
 $16 = $44;
 $45 = $16;
 $15 = $45;
 $46 = $15;
 $14 = $46;
 $47 = $14;
 $48 = $18;
 $6 = $44;
 $49 = $6;
 $5 = $49;
 $50 = $5;
 $4 = $50;
 $51 = $4;
 $52 = HEAP32[$51>>2]|0;
 $11 = $47;
 $12 = $48;
 $13 = $52;
 $53 = $11;
 $54 = $12;
 $55 = $13;
 $8 = $53;
 $9 = $54;
 $10 = $55;
 $56 = $9;
 $7 = $56;
 $57 = $7;
 __ZdlPv($57);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE12__deallocateEPNS_11__hash_nodeIS5_PvEE($this,$__np) {
 $this = $this|0;
 $__np = $__np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, $__next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $19 = $__np;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 8|0);
 $16 = $22;
 $23 = $16;
 $15 = $23;
 $24 = $15;
 $__na = $24;
 while(1) {
  $25 = $19;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   break;
  }
  $27 = $19;
  $28 = HEAP32[$27>>2]|0;
  $__next = $28;
  $29 = $__na;
  $30 = $19;
  $31 = ((($30)) + 8|0);
  $14 = $31;
  $32 = $14;
  $4 = $29;
  $5 = $32;
  $33 = $4;
  $34 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $33;
  $2 = $34;
  $35 = $2;
  $0 = $35;
  $36 = $0;
  __ZNSt3__14pairIKN4rhea8variableENS1_17linear_expressionEED2Ev($36);
  $37 = $__na;
  $38 = $19;
  $11 = $37;
  $12 = $38;
  $13 = 1;
  $39 = $11;
  $40 = $12;
  $41 = $13;
  $8 = $39;
  $9 = $40;
  $10 = $41;
  $42 = $9;
  $7 = $42;
  $43 = $7;
  __ZdlPv($43);
  $44 = $__next;
  $19 = $44;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKN4rhea8variableENS1_17linear_expressionEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 __ZN4rhea17linear_expressionD2Ev($2);
 __ZN4rhea8variableD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__tmp$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $25 = $this;
 $26 = $25;
 $27 = ((($26)) + 8|0);
 $24 = $27;
 $28 = $24;
 $23 = $28;
 $29 = $23;
 $30 = HEAP32[$29>>2]|0;
 __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE12__deallocateEPNS_11__hash_nodeIS2_PvEE($26,$30);
 $22 = $26;
 $31 = $22;
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $19 = $33;
 $34 = $19;
 $35 = HEAP32[$34>>2]|0;
 $__tmp$i$i = $35;
 $3 = $32;
 $36 = $3;
 $2 = $36;
 $37 = $2;
 HEAP32[$37>>2] = 0;
 $38 = $__tmp$i$i;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $1 = $32;
 $40 = $1;
 $0 = $40;
 $41 = $0;
 $42 = ((($41)) + 4|0);
 $43 = $__tmp$i$i;
 $17 = $42;
 $18 = $43;
 $44 = $17;
 $16 = $44;
 $45 = $16;
 $15 = $45;
 $46 = $15;
 $14 = $46;
 $47 = $14;
 $48 = $18;
 $6 = $44;
 $49 = $6;
 $5 = $49;
 $50 = $5;
 $4 = $50;
 $51 = $4;
 $52 = HEAP32[$51>>2]|0;
 $11 = $47;
 $12 = $48;
 $13 = $52;
 $53 = $11;
 $54 = $12;
 $55 = $13;
 $8 = $53;
 $9 = $54;
 $10 = $55;
 $56 = $9;
 $7 = $56;
 $57 = $7;
 __ZdlPv($57);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE12__deallocateEPNS_11__hash_nodeIS2_PvEE($this,$__np) {
 $this = $this|0;
 $__np = $__np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__na = 0, $__next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $5 = sp + 80|0;
 $17 = $this;
 $18 = $__np;
 $19 = $17;
 $16 = $19;
 $20 = $16;
 $21 = ((($20)) + 8|0);
 $15 = $21;
 $22 = $15;
 $14 = $22;
 $23 = $14;
 $__na = $23;
 while(1) {
  $24 = $18;
  $25 = ($24|0)!=(0|0);
  if (!($25)) {
   break;
  }
  $26 = $18;
  $27 = HEAP32[$26>>2]|0;
  $__next = $27;
  $28 = $__na;
  $29 = $18;
  $30 = ((($29)) + 8|0);
  $13 = $30;
  $31 = $13;
  $3 = $28;
  $4 = $31;
  $32 = $3;
  $33 = $4;
  ;HEAP8[$2>>0]=HEAP8[$5>>0]|0;
  $0 = $32;
  $1 = $33;
  $34 = $1;
  __ZN4rhea8variableD2Ev($34);
  $35 = $__na;
  $36 = $18;
  $10 = $35;
  $11 = $36;
  $12 = 1;
  $37 = $10;
  $38 = $11;
  $39 = $12;
  $7 = $37;
  $8 = $38;
  $9 = $39;
  $40 = $8;
  $6 = $40;
  $41 = $6;
  __ZdlPv($41);
  $42 = $__next;
  $18 = $42;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__deque_baseIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__e = 0, $__i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $12;
 __ZNSt3__112__deque_baseIjNS_9allocatorIjEEE5clearEv($13);
 $11 = $13;
 $14 = $11;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $__i = $16;
 $10 = $13;
 $17 = $10;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $__e = $19;
 while(1) {
  $20 = $__i;
  $21 = $__e;
  $22 = ($20|0)!=($21|0);
  if (!($22)) {
   break;
  }
  $9 = $13;
  $23 = $9;
  $24 = ((($23)) + 20|0);
  $8 = $24;
  $25 = $8;
  $7 = $25;
  $26 = $7;
  $27 = $__i;
  $28 = HEAP32[$27>>2]|0;
  $4 = $26;
  $5 = $28;
  $6 = 1024;
  $29 = $4;
  $30 = $5;
  $31 = $6;
  $1 = $29;
  $2 = $30;
  $3 = $31;
  $32 = $2;
  $0 = $32;
  $33 = $0;
  __ZdlPv($33);
  $34 = $__i;
  $35 = ((($34)) + 4|0);
  $__i = $35;
 }
 __ZNSt3__114__split_bufferIPjNS_9allocatorIS1_EEED2Ev($13);
 STACKTOP = sp;return;
}
function __ZNSt3__112__deque_baseIjNS_9allocatorIjEEE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__e = 0, $__i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 176|0;
 $25 = sp;
 $28 = sp + 177|0;
 $__i = sp + 120|0;
 $__e = sp + 32|0;
 $38 = $this;
 $39 = $38;
 $37 = $39;
 $40 = $37;
 $41 = ((($40)) + 20|0);
 $36 = $41;
 $42 = $36;
 $35 = $42;
 $43 = $35;
 $__a = $43;
 __ZNSt3__112__deque_baseIjNS_9allocatorIjEEE5beginEv($__i,$39);
 __ZNSt3__112__deque_baseIjNS_9allocatorIjEEE3endEv($__e,$39);
 while(1) {
  $33 = $__i;
  $34 = $__e;
  $44 = $33;
  $45 = $34;
  $31 = $44;
  $32 = $45;
  $46 = $31;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $32;
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($48|0)==($51|0);
  $53 = $52 ^ 1;
  if (!($53)) {
   break;
  }
  $54 = $__a;
  $15 = $__i;
  $55 = $15;
  $56 = ((($55)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $0 = $57;
  $58 = $0;
  $6 = $54;
  $7 = $58;
  $59 = $6;
  $60 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $59;
  $4 = $60;
  $61 = $3;
  $62 = $4;
  $1 = $61;
  $2 = $62;
  $9 = $__i;
  $63 = $9;
  $64 = ((($63)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ((($65)) + 4|0);
  HEAP32[$64>>2] = $66;
  $67 = HEAP32[$63>>2]|0;
  $68 = HEAP32[$67>>2]|0;
  $69 = $66;
  $70 = $68;
  $71 = (($69) - ($70))|0;
  $72 = (($71|0) / 4)&-1;
  $73 = ($72|0)==(1024);
  if (!($73)) {
   continue;
  }
  $74 = HEAP32[$63>>2]|0;
  $75 = ((($74)) + 4|0);
  HEAP32[$63>>2] = $75;
  $76 = HEAP32[$63>>2]|0;
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($63)) + 4|0);
  HEAP32[$78>>2] = $77;
 }
 $12 = $39;
 $79 = $12;
 $80 = ((($79)) + 20|0);
 $11 = $80;
 $81 = $11;
 $10 = $81;
 $82 = $10;
 HEAP32[$82>>2] = 0;
 while(1) {
  $13 = $39;
  $83 = $13;
  $84 = ((($83)) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ((($83)) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $85;
  $89 = $87;
  $90 = (($88) - ($89))|0;
  $91 = (($90|0) / 4)&-1;
  $92 = ($91>>>0)>(2);
  if (!($92)) {
   break;
  }
  $93 = $__a;
  $14 = $39;
  $94 = $14;
  $95 = ((($94)) + 4|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = HEAP32[$96>>2]|0;
  $20 = $93;
  $21 = $97;
  $22 = 1024;
  $98 = $20;
  $99 = $21;
  $100 = $22;
  $17 = $98;
  $18 = $99;
  $19 = $100;
  $101 = $18;
  $16 = $101;
  $102 = $16;
  __ZdlPv($102);
  $29 = $39;
  $103 = $29;
  $104 = ((($103)) + 4|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ((($105)) + 4|0);
  $26 = $103;
  $27 = $106;
  $107 = $26;
  $108 = $27;
  ;HEAP8[$25>>0]=HEAP8[$28>>0]|0;
  $23 = $107;
  $24 = $108;
  $109 = $23;
  $110 = $24;
  $111 = ((($109)) + 4|0);
  HEAP32[$111>>2] = $110;
 }
 $30 = $39;
 $112 = $30;
 $113 = ((($112)) + 8|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ((($112)) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $114;
 $118 = $116;
 $119 = (($117) - ($118))|0;
 $120 = (($119|0) / 4)&-1;
 if ((($120|0) == 2)) {
  $122 = ((($39)) + 16|0);
  HEAP32[$122>>2] = 1024;
  STACKTOP = sp;return;
 } else if ((($120|0) == 1)) {
  $121 = ((($39)) + 16|0);
  HEAP32[$121>>2] = 512;
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__split_bufferIPjNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 132|0;
 $28 = sp + 8|0;
 $31 = sp + 133|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($40)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($50)) + -4|0);
  HEAP32[$49>>2] = $51;
  $22 = $51;
  $52 = $22;
  $19 = $48;
  $20 = $52;
  $53 = $19;
  $54 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $53;
  $17 = $54;
  $55 = $16;
  $56 = $17;
  $14 = $55;
  $15 = $56;
 }
 $57 = HEAP32[$34>>2]|0;
 $58 = ($57|0)!=(0|0);
 if (!($58)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $59 = $13;
 $60 = ((($59)) + 12|0);
 $12 = $60;
 $61 = $12;
 $11 = $61;
 $62 = $11;
 $63 = HEAP32[$34>>2]|0;
 $3 = $34;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = ((($65)) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 4)&-1;
 $8 = $62;
 $9 = $63;
 $10 = $74;
 $75 = $8;
 $76 = $9;
 $77 = $10;
 $5 = $75;
 $6 = $76;
 $7 = $77;
 $78 = $6;
 $4 = $78;
 $79 = $4;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNSt3__112__deque_baseIjNS_9allocatorIjEEE5beginEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__mp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = $this;
 $6 = $5;
 $4 = $6;
 $7 = $4;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($6)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11>>>0) / 1024)&-1;
 $13 = (($9) + ($12<<2)|0);
 $__mp = $13;
 $14 = $__mp;
 $3 = $6;
 $15 = $3;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($15)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($17|0)==($19|0);
 if ($20) {
  $27 = 0;
 } else {
  $21 = $__mp;
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($6)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24>>>0) % 1024)&-1;
  $26 = (($22) + ($25<<2)|0);
  $27 = $26;
 }
 $0 = $agg$result;
 $1 = $14;
 $2 = $27;
 $28 = $0;
 $29 = $1;
 HEAP32[$28>>2] = $29;
 $30 = ((($28)) + 4|0);
 $31 = $2;
 HEAP32[$30>>2] = $31;
 STACKTOP = sp;return;
}
function __ZNSt3__112__deque_baseIjNS_9allocatorIjEEE3endEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__mp = 0, $__p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = $this;
 $9 = $8;
 $7 = $9;
 $10 = $7;
 $11 = ((($10)) + 20|0);
 $6 = $11;
 $12 = $6;
 $5 = $12;
 $13 = $5;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($9)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + ($16))|0;
 $__p = $17;
 $4 = $9;
 $18 = $4;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $__p;
 $22 = (($21>>>0) / 1024)&-1;
 $23 = (($20) + ($22<<2)|0);
 $__mp = $23;
 $24 = $__mp;
 $0 = $9;
 $25 = $0;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($25)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($27|0)==($29|0);
 if ($30) {
  $36 = 0;
 } else {
  $31 = $__mp;
  $32 = HEAP32[$31>>2]|0;
  $33 = $__p;
  $34 = (($33>>>0) % 1024)&-1;
  $35 = (($32) + ($34<<2)|0);
  $36 = $35;
 }
 $1 = $agg$result;
 $2 = $24;
 $3 = $36;
 $37 = $1;
 $38 = $2;
 HEAP32[$37>>2] = $38;
 $39 = ((($37)) + 4|0);
 $40 = $3;
 HEAP32[$39>>2] = $40;
 STACKTOP = sp;return;
}
function __ZNSt3__128__libcpp_compressed_pair_impINS_9allocatorIN4rhea15edit_constraintEEES3_Lj1EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea15edit_constraintD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4rhea8strengthC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = 2264;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 8|0);
 $6 = $2;
 $7 = ((($6)) + 8|0);
 ;HEAP32[$5>>2]=HEAP32[$7>>2]|0;HEAP32[$5+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$5+20>>2]=HEAP32[$7+20>>2]|0;
 STACKTOP = sp;return;
}
function __ZN4rhea23edit_or_stay_constraintC2ERKNS_8variableENS_8strengthEd($this,$v,$s,$weight) {
 $this = $this|0;
 $v = $v|0;
 $s = $s|0;
 $weight = +$weight;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $this;
 $1 = $v;
 $2 = $weight;
 $6 = $0;
 __ZN4rhea8strengthC2ERKS0_($3,$s);
 $7 = $2;
 __ZN4rhea19abstract_constraintC2ENS_8strengthEd($6,$3,$7);
 $8 = 2368;
 HEAP32[$6>>2] = $8;
 $9 = ((($6)) + 48|0);
 $10 = $1;
 __THREW__ = 0;
 invoke_vii(339,($9|0),($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $4 = $13;
  $5 = $14;
  __ZN4rhea19abstract_constraintD2Ev($6);
  $15 = $4;
  $16 = $5;
  ___resumeException($15|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN4rhea19abstract_constraintC2ENS_8strengthEd($this,$s,$weight) {
 $this = $this|0;
 $s = $s|0;
 $weight = +$weight;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $weight;
 $5 = $1;
 $6 = 2280;
 HEAP32[$5>>2] = $6;
 $7 = ((($5)) + 8|0);
 $0 = $s;
 $8 = $0;
 __ZN4rhea8strengthC2EOS0_($7,$8);
 $9 = ((($5)) + 40|0);
 $10 = $2;
 HEAPF64[$9>>3] = $10;
 $11 = ((($5)) + 40|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $12 == 0.0;
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(178,($14|0),(3312|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  $3 = $17;
  $4 = $18;
  ___cxa_free_exception(($14|0));
  $19 = $3;
  $20 = $4;
  ___resumeException($19|0);
  // unreachable;
 } else {
  ___cxa_throw(($14|0),(8240|0),(147|0));
  // unreachable;
 }
}
function __ZN4rhea8strengthC2EOS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = 2264;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 8|0);
 $6 = $2;
 $7 = ((($6)) + 8|0);
 ;HEAP32[$5>>2]=HEAP32[$7>>2]|0;HEAP32[$5+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$5+20>>2]=HEAP32[$7+20>>2]|0;
 STACKTOP = sp;return;
}
function __ZN4rhea5errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIN4rhea8variableEdED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea8variableD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 76|0;
 $11 = sp + 8|0;
 $13 = sp + 77|0;
 $18 = sp + 16|0;
 $19 = sp + 68|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 268435455;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 16)&-1;
 $55 = (($42) + ($54<<4)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<4)|0);
 __ZNKSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN4rhea8strengthC2Eddd($this,$a,$b,$c) {
 $this = $this|0;
 $a = +$a;
 $b = +$b;
 $c = +$c;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $0;
 $5 = 2264;
 HEAP32[$4>>2] = $5;
 $6 = ((($4)) + 8|0);
 $7 = $1;
 $8 = $2;
 $9 = $3;
 __ZN4rhea15symbolic_weightC2Eddd($6,$7,$8,$9);
 STACKTOP = sp;return;
}
function __ZN4rhea12pod_variableIdED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea17abstract_variableD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__128__libcpp_compressed_pair_impINS_9allocatorIN4rhea14float_variableEEES3_Lj1EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea14float_variableD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJRN4rhea14simplex_solverENS0_17AllowedRawPointerIS4_EEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3360|0);
}
function __ZN10emscripten8internal11BindingTypeIPN4rhea14simplex_solverEE12fromWireTypeES4_($wt) {
 $wt = $wt|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $wt;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal18GenericBindingTypeIN4rhea14simplex_solverEE10toWireTypeERKS3_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $3 = (__Znwj(296)|0);
 $4 = $0;
 __THREW__ = 0;
 invoke_vii(340,($3|0),($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch()|0;
  $8 = tempRet0;
  $1 = $7;
  $2 = $8;
  __ZdlPv($3);
  $9 = $1;
  $10 = $2;
  ___resumeException($9|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($3|0);
 }
 return (0)|0;
}
function __ZN4rhea14simplex_solverC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $0;
 $7 = $3;
 $8 = $4;
 __ZN4rhea6solverC2ERKS0_($7,$8);
 $9 = ((($7)) + 8|0);
 $10 = $4;
 $11 = ((($10)) + 8|0);
 __THREW__ = 0;
 invoke_vii(341,($9|0),($11|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $72 = ___cxa_find_matching_catch()|0;
  $73 = tempRet0;
  $5 = $72;
  $6 = $73;
  __ZN4rhea6solverD2Ev($7);
  $95 = $5;
  $96 = $6;
  ___resumeException($95|0);
  // unreachable;
 }
 $14 = 24;
 HEAP32[$7>>2] = $14;
 $15 = ((($7)) + 8|0);
 $16 = 56;
 HEAP32[$15>>2] = $16;
 $17 = ((($7)) + 112|0);
 $18 = $4;
 $19 = ((($18)) + 112|0);
 __THREW__ = 0;
 invoke_vii(342,($17|0),($19|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $74 = ___cxa_find_matching_catch()|0;
  $75 = tempRet0;
  $5 = $74;
  $6 = $75;
 } else {
  $22 = ((($7)) + 136|0);
  $23 = $4;
  $24 = ((($23)) + 136|0);
  __THREW__ = 0;
  invoke_vii(343,($22|0),($24|0));
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   $76 = ___cxa_find_matching_catch()|0;
   $77 = tempRet0;
   $5 = $76;
   $6 = $77;
  } else {
   $27 = ((($7)) + 160|0);
   $28 = $4;
   $29 = ((($28)) + 160|0);
   __THREW__ = 0;
   invoke_vii(344,($27|0),($29|0));
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $78 = ___cxa_find_matching_catch()|0;
    $79 = tempRet0;
    $5 = $78;
    $6 = $79;
   } else {
    $32 = ((($7)) + 172|0);
    $33 = $4;
    $34 = ((($33)) + 172|0);
    __THREW__ = 0;
    invoke_vii(344,($32|0),($34|0));
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     $80 = ___cxa_find_matching_catch()|0;
     $81 = tempRet0;
     $5 = $80;
     $6 = $81;
    } else {
     $37 = ((($7)) + 184|0);
     $38 = $4;
     $39 = ((($38)) + 184|0);
     __THREW__ = 0;
     invoke_vii(345,($37|0),($39|0));
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if ($41) {
      $82 = ___cxa_find_matching_catch()|0;
      $83 = tempRet0;
      $5 = $82;
      $6 = $83;
     } else {
      $42 = ((($7)) + 204|0);
      $43 = $4;
      $44 = ((($43)) + 204|0);
      __THREW__ = 0;
      invoke_vii(346,($42|0),($44|0));
      $45 = __THREW__; __THREW__ = 0;
      $46 = $45&1;
      if ($46) {
       $84 = ___cxa_find_matching_catch()|0;
       $85 = tempRet0;
       $5 = $84;
       $6 = $85;
      } else {
       $47 = ((($7)) + 224|0);
       $48 = $4;
       $49 = ((($48)) + 224|0);
       __THREW__ = 0;
       invoke_vii(347,($47|0),($49|0));
       $50 = __THREW__; __THREW__ = 0;
       $51 = $50&1;
       if ($51) {
        $86 = ___cxa_find_matching_catch()|0;
        $87 = tempRet0;
        $5 = $86;
        $6 = $87;
       } else {
        $52 = ((($7)) + 244|0);
        $53 = $4;
        $54 = ((($53)) + 244|0);
        __THREW__ = 0;
        invoke_vii(339,($52|0),($54|0));
        $55 = __THREW__; __THREW__ = 0;
        $56 = $55&1;
        if ($56) {
         $88 = ___cxa_find_matching_catch()|0;
         $89 = tempRet0;
         $5 = $88;
         $6 = $89;
        } else {
         $57 = ((($7)) + 252|0);
         $58 = $4;
         $59 = ((($58)) + 252|0);
         __THREW__ = 0;
         invoke_vii(348,($57|0),($59|0));
         $60 = __THREW__; __THREW__ = 0;
         $61 = $60&1;
         do {
          if ($61) {
           $90 = ___cxa_find_matching_catch()|0;
           $91 = tempRet0;
           $5 = $90;
           $6 = $91;
          } else {
           $62 = ((($7)) + 264|0);
           $63 = $4;
           $64 = ((($63)) + 264|0);
           ;HEAP8[$62>>0]=HEAP8[$64>>0]|0;HEAP8[$62+1>>0]=HEAP8[$64+1>>0]|0;HEAP8[$62+2>>0]=HEAP8[$64+2>>0]|0;
           $65 = ((($7)) + 268|0);
           $66 = $4;
           $67 = ((($66)) + 268|0);
           $1 = $65;
           $2 = $67;
           $68 = $1;
           $69 = $2;
           __THREW__ = 0;
           invoke_vii(349,($68|0),($69|0));
           $70 = __THREW__; __THREW__ = 0;
           $71 = $70&1;
           if ($71) {
            $92 = ___cxa_find_matching_catch()|0;
            $93 = tempRet0;
            $5 = $92;
            $6 = $93;
            __ZNSt3__14listIN4rhea14simplex_solver9edit_infoENS_9allocatorIS3_EEED2Ev($57);
            break;
           } else {
            STACKTOP = sp;return;
           }
          }
         } while(0);
         __ZN4rhea8variableD2Ev($52);
        }
        __ZNSt3__113unordered_mapIN4rhea8variableENS1_10constraintENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEED2Ev($47);
       }
       __ZNSt3__113unordered_mapIN4rhea10constraintENS1_8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEED2Ev($42);
      }
      __ZNSt3__113unordered_mapIN4rhea10constraintENS_13unordered_setINS1_8variableENS_4hashIS4_EENS_8equal_toIS4_EENS_9allocatorIS4_EEEENS5_IS2_EENS7_IS2_EENS9_INS_4pairIKS2_SB_EEEEED2Ev($37);
     }
     __ZNSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEED2Ev($32);
    }
    __ZNSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEED2Ev($27);
   }
   __ZNSt3__18functionIFvRKN4rhea8variableERNS1_14simplex_solverEEED2Ev($22);
  }
  __ZNSt3__18functionIFvRN4rhea14simplex_solverEEED2Ev($17);
 }
 $94 = ((($7)) + 8|0);
 __ZN4rhea7tableauD2Ev($94);
 __ZN4rhea6solverD2Ev($7);
 $95 = $5;
 $96 = $6;
 ___resumeException($95|0);
 // unreachable;
}
function __ZN4rhea6solverC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = 3424;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&1;
 $10 = $9&1;
 HEAP8[$5>>0] = $10;
 STACKTOP = sp;return;
}
function __ZN4rhea7tableauC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $5 = $1;
 $6 = 2496;
 HEAP32[$5>>2] = $6;
 $7 = ((($5)) + 4|0);
 $8 = $2;
 $9 = ((($8)) + 4|0);
 __ZNSt3__113unordered_mapIN4rhea8variableENS_13unordered_setIS2_NS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEES5_S7_NS8_INS_4pairIKS2_SA_EEEEEC2ERKSF_($7,$9);
 $10 = ((($5)) + 24|0);
 $11 = $2;
 $12 = ((($11)) + 24|0);
 __THREW__ = 0;
 invoke_vii(350,($10|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $30 = ___cxa_find_matching_catch()|0;
  $31 = tempRet0;
  $3 = $30;
  $4 = $31;
  __ZNSt3__113unordered_mapIN4rhea8variableENS_13unordered_setIS2_NS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEES5_S7_NS8_INS_4pairIKS2_SA_EEEEED2Ev($7);
  $38 = $3;
  $39 = $4;
  ___resumeException($38|0);
  // unreachable;
 }
 $15 = ((($5)) + 44|0);
 $16 = $2;
 $17 = ((($16)) + 44|0);
 __THREW__ = 0;
 invoke_vii(351,($15|0),($17|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  $3 = $32;
  $4 = $33;
 } else {
  $20 = ((($5)) + 64|0);
  $21 = $2;
  $22 = ((($21)) + 64|0);
  __THREW__ = 0;
  invoke_vii(351,($20|0),($22|0));
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  do {
   if ($24) {
    $34 = ___cxa_find_matching_catch()|0;
    $35 = tempRet0;
    $3 = $34;
    $4 = $35;
   } else {
    $25 = ((($5)) + 84|0);
    $26 = $2;
    $27 = ((($26)) + 84|0);
    __THREW__ = 0;
    invoke_vii(351,($25|0),($27|0));
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     $36 = ___cxa_find_matching_catch()|0;
     $37 = tempRet0;
     $3 = $36;
     $4 = $37;
     __ZNSt3__113unordered_setIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEED2Ev($20);
     break;
    } else {
     STACKTOP = sp;return;
    }
   }
  } while(0);
  __ZNSt3__113unordered_setIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEED2Ev($15);
 }
 __ZNSt3__113unordered_mapIN4rhea8variableENS1_17linear_expressionENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEED2Ev($10);
 __ZNSt3__113unordered_mapIN4rhea8variableENS_13unordered_setIS2_NS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEES5_S7_NS8_INS_4pairIKS2_SA_EEEEED2Ev($7);
 $38 = $3;
 $39 = $4;
 ___resumeException($38|0);
 // unreachable;
}
function __ZNSt3__18functionIFvRN4rhea14simplex_solverEEEC2ERKS5_($this,$__f) {
 $this = $this|0;
 $__f = $__f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__f;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = ((($2)) + 16|0);
  HEAP32[$7>>2] = 0;
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = ($10|0)==($11|0);
 if ($12) {
  $13 = ((($2)) + 16|0);
  HEAP32[$13>>2] = $2;
  $14 = $1;
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($2)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_vii[$19 & 511]($16,$21);
  STACKTOP = sp;return;
 } else {
  $22 = $1;
  $23 = ((($22)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (FUNCTION_TABLE_ii[$27 & 511]($24)|0);
  $29 = ((($2)) + 16|0);
  HEAP32[$29>>2] = $28;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__18functionIFvRKN4rhea8variableERNS1_14simplex_solverEEEC2ERKS8_($this,$__f) {
 $this = $this|0;
 $__f = $__f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__f;
 $2 = $0;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = ((($2)) + 16|0);
  HEAP32[$7>>2] = 0;
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = ($10|0)==($11|0);
 if ($12) {
  $13 = ((($2)) + 16|0);
  HEAP32[$13>>2] = $2;
  $14 = $1;
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($2)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_vii[$19 & 511]($16,$21);
  STACKTOP = sp;return;
 } else {
  $22 = $1;
  $23 = ((($22)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (FUNCTION_TABLE_ii[$27 & 511]($24)|0);
  $29 = ((($2)) + 16|0);
  HEAP32[$29>>2] = $28;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEEC2ERKS5_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 24|0;
 $6 = sp + 8|0;
 $9 = sp + 80|0;
 $10 = sp + 108|0;
 $11 = sp + 16|0;
 $15 = sp + 109|0;
 $17 = sp;
 $19 = sp + 110|0;
 $25 = sp + 111|0;
 $23 = $this;
 $24 = $__x;
 $28 = $23;
 $29 = $24;
 $22 = $29;
 $30 = $22;
 $31 = ((($30)) + 8|0);
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $18 = $33;
 $34 = $18;
 ;HEAP8[$17>>0]=HEAP8[$19>>0]|0;
 $16 = $34;
 $13 = $28;
 $14 = $25;
 $35 = $13;
 $12 = $35;
 HEAP32[$35>>2] = 0;
 $36 = ((($35)) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($35)) + 8|0);
 ;HEAP8[$11>>0]=HEAP8[$15>>0]|0;
 $8 = $37;
 HEAP32[$9>>2] = 0;
 $38 = $8;
 $7 = $9;
 $39 = $7;
 $40 = HEAP32[$39>>2]|0;
 $1 = $11;
 ;HEAP8[$6>>0]=HEAP8[$10>>0]|0;
 $4 = $38;
 HEAP32[$5>>2] = $40;
 $41 = $4;
 $3 = $6;
 $2 = $5;
 $42 = $2;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $44 = $24;
 $0 = $44;
 $45 = $0;
 $46 = ((($45)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$45>>2]|0;
 $49 = $47;
 $50 = $48;
 $51 = (($49) - ($50))|0;
 $52 = (($51|0) / 8)&-1;
 $__n = $52;
 $53 = $__n;
 $54 = ($53>>>0)>(0);
 if (!($54)) {
  STACKTOP = sp;return;
 }
 $55 = $__n;
 __THREW__ = 0;
 invoke_vii(352,($28|0),($55|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if ($57) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseIN4rhea8variableENS_9allocatorIS2_EEED2Ev($28);
  $67 = $26;
  $68 = $27;
  ___resumeException($67|0);
  // unreachable;
 }
 $58 = $24;
 $59 = HEAP32[$58>>2]|0;
 $60 = $24;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 __THREW__ = 0;
 invoke_viii(353,($28|0),($59|0),($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if ($64) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $26 = $65;
  $27 = $66;
  __ZNSt3__113__vector_baseIN4rhea8variableENS_9allocatorIS2_EEED2Ev($28);
  $67 = $26;
  $68 = $27;
  ___resumeException($67|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__113unordered_mapIN4rhea10constraintENS_13unordered_setINS1_8variableENS_4hashIS4_EENS_8equal_toIS4_EENS_9allocatorIS4_EEEENS5_IS2_EENS7_IS2_EENS9_INS_4pairIKS2_SB_EEEEEC2ERKSI_($this,$__u) {
 $this = $this|0;
 $__u = $__u|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 24|0;
 $4 = sp + 176|0;
 $6 = sp + 96|0;
 $8 = sp + 72|0;
 $22 = sp + 192|0;
 $23 = sp;
 $24 = sp + 8|0;
 $26 = sp + 16|0;
 $31 = sp + 132|0;
 $33 = sp + 140|0;
 $35 = sp + 148|0;
 $48 = sp + 184|0;
 $49 = sp + 32|0;
 $44 = $this;
 $45 = $__u;
 $50 = $44;
 $51 = $45;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEEC2ERKSL_($50,$51);
 $52 = $45;
 $43 = $52;
 $53 = $43;
 $42 = $53;
 $54 = $42;
 $41 = $54;
 $55 = $41;
 $40 = $55;
 $56 = $40;
 $39 = $56;
 $57 = $39;
 $58 = ((($57)) + 4|0);
 $38 = $58;
 $59 = $38;
 $37 = $59;
 $60 = $37;
 $36 = $60;
 $61 = $36;
 $62 = HEAP32[$61>>2]|0;
 __THREW__ = 0;
 invoke_vii(354,($50|0),($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if ($64) {
  $107 = ___cxa_find_matching_catch()|0;
  $108 = tempRet0;
  $46 = $107;
  $47 = $108;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEED2Ev($50);
  $109 = $46;
  $110 = $47;
  ___resumeException($109|0);
  // unreachable;
 }
 $65 = $45;
 $34 = $65;
 $66 = $34;
 $32 = $66;
 $67 = $32;
 $68 = ((($67)) + 8|0);
 $30 = $68;
 $69 = $30;
 $29 = $69;
 $70 = $29;
 $71 = HEAP32[$70>>2]|0;
 $27 = $31;
 $28 = $71;
 $72 = $27;
 $73 = $28;
 HEAP32[$72>>2] = $73;
 $74 = HEAP32[$31>>2]|0;
 HEAP32[$35>>2] = $74;
 ;HEAP8[$26>>0]=HEAP8[$35>>0]|0;HEAP8[$26+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$26+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$26+3>>0]=HEAP8[$35+3>>0]|0;
 $25 = $33;
 $75 = $25;
 ;HEAP32[$75>>2]=HEAP32[$26>>2]|0;
 $76 = HEAP32[$33>>2]|0;
 HEAP32[$48>>2] = $76;
 $77 = $45;
 $7 = $77;
 $78 = $7;
 $5 = $78;
 $2 = $4;
 $3 = 0;
 $79 = $2;
 $80 = $3;
 HEAP32[$79>>2] = $80;
 $81 = HEAP32[$4>>2]|0;
 HEAP32[$8>>2] = $81;
 ;HEAP8[$1>>0]=HEAP8[$8>>0]|0;HEAP8[$1+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$1+3>>0]=HEAP8[$8+3>>0]|0;
 $0 = $6;
 $82 = $0;
 ;HEAP32[$82>>2]=HEAP32[$1>>2]|0;
 $83 = HEAP32[$6>>2]|0;
 HEAP32[$49>>2] = $83;
 ;HEAP8[$23>>0]=HEAP8[$49>>0]|0;HEAP8[$23+1>>0]=HEAP8[$49+1>>0]|0;HEAP8[$23+2>>0]=HEAP8[$49+2>>0]|0;HEAP8[$23+3>>0]=HEAP8[$49+3>>0]|0;
 ;HEAP8[$24>>0]=HEAP8[$48>>0]|0;HEAP8[$24+1>>0]=HEAP8[$48+1>>0]|0;HEAP8[$24+2>>0]=HEAP8[$48+2>>0]|0;HEAP8[$24+3>>0]=HEAP8[$48+3>>0]|0;
 $21 = $50;
 $84 = $21;
 while(1) {
  $19 = $24;
  $20 = $23;
  $85 = $19;
  $86 = $20;
  $17 = $85;
  $18 = $86;
  $87 = $17;
  $88 = $18;
  $15 = $87;
  $16 = $88;
  $89 = $15;
  $90 = HEAP32[$89>>2]|0;
  $91 = $16;
  $92 = HEAP32[$91>>2]|0;
  $93 = ($90|0)==($92|0);
  $94 = $93 ^ 1;
  if (!($94)) {
   label = 6;
   break;
  }
  $12 = $24;
  $95 = $12;
  $11 = $95;
  $96 = $11;
  $97 = HEAP32[$96>>2]|0;
  $98 = ((($97)) + 8|0);
  $10 = $98;
  $99 = $10;
  $9 = $99;
  $100 = $9;
  __THREW__ = 0;
  invoke_viii(355,($22|0),($84|0),($100|0));
  $101 = __THREW__; __THREW__ = 0;
  $102 = $101&1;
  if ($102) {
   label = 7;
   break;
  }
  $14 = $24;
  $103 = $14;
  $13 = $103;
  $104 = $13;
  $105 = HEAP32[$104>>2]|0;
  $106 = HEAP32[$105>>2]|0;
  HEAP32[$104>>2] = $106;
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  $107 = ___cxa_find_matching_catch()|0;
  $108 = tempRet0;
  $46 = $107;
  $47 = $108;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEED2Ev($50);
  $109 = $46;
  $110 = $47;
  ___resumeException($109|0);
  // unreachable;
 }
}
function __ZNSt3__113unordered_mapIN4rhea10constraintENS1_8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEC2ERKSD_($this,$__u) {
 $this = $this|0;
 $__u = $__u|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 24|0;
 $4 = sp + 176|0;
 $6 = sp + 96|0;
 $8 = sp + 72|0;
 $22 = sp + 192|0;
 $23 = sp;
 $24 = sp + 8|0;
 $26 = sp + 16|0;
 $31 = sp + 132|0;
 $33 = sp + 140|0;
 $35 = sp + 148|0;
 $48 = sp + 184|0;
 $49 = sp + 32|0;
 $44 = $this;
 $45 = $__u;
 $50 = $44;
 $51 = $45;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS2_8variableEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEEC2ERKSG_($50,$51);
 $52 = $45;
 $43 = $52;
 $53 = $43;
 $42 = $53;
 $54 = $42;
 $41 = $54;
 $55 = $41;
 $40 = $55;
 $56 = $40;
 $39 = $56;
 $57 = $39;
 $58 = ((($57)) + 4|0);
 $38 = $58;
 $59 = $38;
 $37 = $59;
 $60 = $37;
 $36 = $60;
 $61 = $36;
 $62 = HEAP32[$61>>2]|0;
 __THREW__ = 0;
 invoke_vii(356,($50|0),($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if ($64) {
  $107 = ___cxa_find_matching_catch()|0;
  $108 = tempRet0;
  $46 = $107;
  $47 = $108;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS2_8variableEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEED2Ev($50);
  $109 = $46;
  $110 = $47;
  ___resumeException($109|0);
  // unreachable;
 }
 $65 = $45;
 $34 = $65;
 $66 = $34;
 $32 = $66;
 $67 = $32;
 $68 = ((($67)) + 8|0);
 $30 = $68;
 $69 = $30;
 $29 = $69;
 $70 = $29;
 $71 = HEAP32[$70>>2]|0;
 $27 = $31;
 $28 = $71;
 $72 = $27;
 $73 = $28;
 HEAP32[$72>>2] = $73;
 $74 = HEAP32[$31>>2]|0;
 HEAP32[$35>>2] = $74;
 ;HEAP8[$26>>0]=HEAP8[$35>>0]|0;HEAP8[$26+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$26+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$26+3>>0]=HEAP8[$35+3>>0]|0;
 $25 = $33;
 $75 = $25;
 ;HEAP32[$75>>2]=HEAP32[$26>>2]|0;
 $76 = HEAP32[$33>>2]|0;
 HEAP32[$48>>2] = $76;
 $77 = $45;
 $7 = $77;
 $78 = $7;
 $5 = $78;
 $2 = $4;
 $3 = 0;
 $79 = $2;
 $80 = $3;
 HEAP32[$79>>2] = $80;
 $81 = HEAP32[$4>>2]|0;
 HEAP32[$8>>2] = $81;
 ;HEAP8[$1>>0]=HEAP8[$8>>0]|0;HEAP8[$1+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$1+3>>0]=HEAP8[$8+3>>0]|0;
 $0 = $6;
 $82 = $0;
 ;HEAP32[$82>>2]=HEAP32[$1>>2]|0;
 $83 = HEAP32[$6>>2]|0;
 HEAP32[$49>>2] = $83;
 ;HEAP8[$23>>0]=HEAP8[$49>>0]|0;HEAP8[$23+1>>0]=HEAP8[$49+1>>0]|0;HEAP8[$23+2>>0]=HEAP8[$49+2>>0]|0;HEAP8[$23+3>>0]=HEAP8[$49+3>>0]|0;
 ;HEAP8[$24>>0]=HEAP8[$48>>0]|0;HEAP8[$24+1>>0]=HEAP8[$48+1>>0]|0;HEAP8[$24+2>>0]=HEAP8[$48+2>>0]|0;HEAP8[$24+3>>0]=HEAP8[$48+3>>0]|0;
 $21 = $50;
 $84 = $21;
 while(1) {
  $19 = $24;
  $20 = $23;
  $85 = $19;
  $86 = $20;
  $17 = $85;
  $18 = $86;
  $87 = $17;
  $88 = $18;
  $15 = $87;
  $16 = $88;
  $89 = $15;
  $90 = HEAP32[$89>>2]|0;
  $91 = $16;
  $92 = HEAP32[$91>>2]|0;
  $93 = ($90|0)==($92|0);
  $94 = $93 ^ 1;
  if (!($94)) {
   label = 6;
   break;
  }
  $12 = $24;
  $95 = $12;
  $11 = $95;
  $96 = $11;
  $97 = HEAP32[$96>>2]|0;
  $98 = ((($97)) + 8|0);
  $10 = $98;
  $99 = $10;
  $9 = $99;
  $100 = $9;
  __THREW__ = 0;
  invoke_viii(357,($22|0),($84|0),($100|0));
  $101 = __THREW__; __THREW__ = 0;
  $102 = $101&1;
  if ($102) {
   label = 7;
   break;
  }
  $14 = $24;
  $103 = $14;
  $13 = $103;
  $104 = $13;
  $105 = HEAP32[$104>>2]|0;
  $106 = HEAP32[$105>>2]|0;
  HEAP32[$104>>2] = $106;
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  $107 = ___cxa_find_matching_catch()|0;
  $108 = tempRet0;
  $46 = $107;
  $47 = $108;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS2_8variableEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEED2Ev($50);
  $109 = $46;
  $110 = $47;
  ___resumeException($109|0);
  // unreachable;
 }
}
function __ZNSt3__113unordered_mapIN4rhea8variableENS1_10constraintENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEC2ERKSD_($this,$__u) {
 $this = $this|0;
 $__u = $__u|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 24|0;
 $4 = sp + 176|0;
 $6 = sp + 96|0;
 $8 = sp + 72|0;
 $22 = sp + 192|0;
 $23 = sp;
 $24 = sp + 8|0;
 $26 = sp + 16|0;
 $31 = sp + 132|0;
 $33 = sp + 140|0;
 $35 = sp + 148|0;
 $48 = sp + 184|0;
 $49 = sp + 32|0;
 $44 = $this;
 $45 = $__u;
 $50 = $44;
 $51 = $45;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEEC2ERKSG_($50,$51);
 $52 = $45;
 $43 = $52;
 $53 = $43;
 $42 = $53;
 $54 = $42;
 $41 = $54;
 $55 = $41;
 $40 = $55;
 $56 = $40;
 $39 = $56;
 $57 = $39;
 $58 = ((($57)) + 4|0);
 $38 = $58;
 $59 = $38;
 $37 = $59;
 $60 = $37;
 $36 = $60;
 $61 = $36;
 $62 = HEAP32[$61>>2]|0;
 __THREW__ = 0;
 invoke_vii(358,($50|0),($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if ($64) {
  $107 = ___cxa_find_matching_catch()|0;
  $108 = tempRet0;
  $46 = $107;
  $47 = $108;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEED2Ev($50);
  $109 = $46;
  $110 = $47;
  ___resumeException($109|0);
  // unreachable;
 }
 $65 = $45;
 $34 = $65;
 $66 = $34;
 $32 = $66;
 $67 = $32;
 $68 = ((($67)) + 8|0);
 $30 = $68;
 $69 = $30;
 $29 = $69;
 $70 = $29;
 $71 = HEAP32[$70>>2]|0;
 $27 = $31;
 $28 = $71;
 $72 = $27;
 $73 = $28;
 HEAP32[$72>>2] = $73;
 $74 = HEAP32[$31>>2]|0;
 HEAP32[$35>>2] = $74;
 ;HEAP8[$26>>0]=HEAP8[$35>>0]|0;HEAP8[$26+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$26+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$26+3>>0]=HEAP8[$35+3>>0]|0;
 $25 = $33;
 $75 = $25;
 ;HEAP32[$75>>2]=HEAP32[$26>>2]|0;
 $76 = HEAP32[$33>>2]|0;
 HEAP32[$48>>2] = $76;
 $77 = $45;
 $7 = $77;
 $78 = $7;
 $5 = $78;
 $2 = $4;
 $3 = 0;
 $79 = $2;
 $80 = $3;
 HEAP32[$79>>2] = $80;
 $81 = HEAP32[$4>>2]|0;
 HEAP32[$8>>2] = $81;
 ;HEAP8[$1>>0]=HEAP8[$8>>0]|0;HEAP8[$1+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$1+3>>0]=HEAP8[$8+3>>0]|0;
 $0 = $6;
 $82 = $0;
 ;HEAP32[$82>>2]=HEAP32[$1>>2]|0;
 $83 = HEAP32[$6>>2]|0;
 HEAP32[$49>>2] = $83;
 ;HEAP8[$23>>0]=HEAP8[$49>>0]|0;HEAP8[$23+1>>0]=HEAP8[$49+1>>0]|0;HEAP8[$23+2>>0]=HEAP8[$49+2>>0]|0;HEAP8[$23+3>>0]=HEAP8[$49+3>>0]|0;
 ;HEAP8[$24>>0]=HEAP8[$48>>0]|0;HEAP8[$24+1>>0]=HEAP8[$48+1>>0]|0;HEAP8[$24+2>>0]=HEAP8[$48+2>>0]|0;HEAP8[$24+3>>0]=HEAP8[$48+3>>0]|0;
 $21 = $50;
 $84 = $21;
 while(1) {
  $19 = $24;
  $20 = $23;
  $85 = $19;
  $86 = $20;
  $17 = $85;
  $18 = $86;
  $87 = $17;
  $88 = $18;
  $15 = $87;
  $16 = $88;
  $89 = $15;
  $90 = HEAP32[$89>>2]|0;
  $91 = $16;
  $92 = HEAP32[$91>>2]|0;
  $93 = ($90|0)==($92|0);
  $94 = $93 ^ 1;
  if (!($94)) {
   label = 6;
   break;
  }
  $12 = $24;
  $95 = $12;
  $11 = $95;
  $96 = $11;
  $97 = HEAP32[$96>>2]|0;
  $98 = ((($97)) + 8|0);
  $10 = $98;
  $99 = $10;
  $9 = $99;
  $100 = $9;
  __THREW__ = 0;
  invoke_viii(359,($22|0),($84|0),($100|0));
  $101 = __THREW__; __THREW__ = 0;
  $102 = $101&1;
  if ($102) {
   label = 7;
   break;
  }
  $14 = $24;
  $103 = $14;
  $13 = $103;
  $104 = $13;
  $105 = HEAP32[$104>>2]|0;
  $106 = HEAP32[$105>>2]|0;
  HEAP32[$104>>2] = $106;
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  $107 = ___cxa_find_matching_catch()|0;
  $108 = tempRet0;
  $46 = $107;
  $47 = $108;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEED2Ev($50);
  $109 = $46;
  $110 = $47;
  ___resumeException($109|0);
  // unreachable;
 }
}
function __ZNSt3__14listIN4rhea14simplex_solver9edit_infoENS_9allocatorIS3_EEEC2ERKS6_($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__e = 0, $__i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 128|0;
 $7 = sp + 16|0;
 $10 = sp + 44|0;
 $11 = sp + 228|0;
 $12 = sp + 8|0;
 $22 = sp + 229|0;
 $25 = sp + 208|0;
 $27 = sp + 220|0;
 $33 = sp + 136|0;
 $35 = sp + 144|0;
 $46 = sp;
 $48 = sp + 230|0;
 $54 = sp + 231|0;
 $55 = sp + 232|0;
 $__i = sp + 112|0;
 $__e = sp + 28|0;
 $52 = $this;
 $53 = $__c;
 $58 = $52;
 $59 = $53;
 $51 = $59;
 $60 = $51;
 $61 = ((($60)) + 8|0);
 $50 = $61;
 $62 = $50;
 $49 = $62;
 $63 = $49;
 $47 = $63;
 $64 = $47;
 ;HEAP8[$46>>0]=HEAP8[$48>>0]|0;
 $45 = $64;
 $42 = $54;
 $43 = $55;
 $20 = $58;
 $21 = $54;
 $65 = $20;
 $19 = $65;
 $66 = $19;
 $18 = $66;
 $67 = $18;
 $17 = $67;
 $68 = $17;
 $16 = $68;
 $69 = $16;
 HEAP32[$66>>2] = $69;
 $70 = ((($66)) + 4|0);
 $15 = $66;
 $71 = $15;
 $14 = $71;
 $72 = $14;
 $13 = $72;
 $73 = $13;
 HEAP32[$70>>2] = $73;
 $74 = ((($65)) + 8|0);
 $75 = $21;
 $0 = $22;
 $1 = $75;
 ;HEAP8[$12>>0]=HEAP8[$22>>0]|0;
 $9 = $74;
 HEAP32[$10>>2] = 0;
 $76 = $9;
 $8 = $10;
 $77 = $8;
 $78 = HEAP32[$77>>2]|0;
 $2 = $12;
 ;HEAP8[$7>>0]=HEAP8[$11>>0]|0;
 $5 = $76;
 HEAP32[$6>>2] = $78;
 $79 = $5;
 $4 = $7;
 $3 = $6;
 $80 = $3;
 $81 = HEAP32[$80>>2]|0;
 HEAP32[$79>>2] = $81;
 $82 = $53;
 $28 = $82;
 $83 = $28;
 $26 = $83;
 $84 = $26;
 $85 = ((($84)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $23 = $25;
 $24 = $86;
 $87 = $23;
 $88 = $24;
 HEAP32[$87>>2] = $88;
 $89 = HEAP32[$25>>2]|0;
 HEAP32[$27>>2] = $89;
 $90 = HEAP32[$27>>2]|0;
 HEAP32[$__i>>2] = $90;
 $91 = $53;
 $36 = $91;
 $92 = $36;
 $34 = $92;
 $93 = $34;
 $32 = $93;
 $94 = $32;
 $31 = $94;
 $95 = $31;
 $29 = $33;
 $30 = $95;
 $96 = $29;
 $97 = $30;
 HEAP32[$96>>2] = $97;
 $98 = HEAP32[$33>>2]|0;
 HEAP32[$35>>2] = $98;
 $99 = HEAP32[$35>>2]|0;
 HEAP32[$__e>>2] = $99;
 while(1) {
  $39 = $__i;
  $40 = $__e;
  $100 = $39;
  $101 = $40;
  $37 = $100;
  $38 = $101;
  $102 = $37;
  $103 = HEAP32[$102>>2]|0;
  $104 = $38;
  $105 = HEAP32[$104>>2]|0;
  $106 = ($103|0)==($105|0);
  $107 = $106 ^ 1;
  if (!($107)) {
   label = 6;
   break;
  }
  $41 = $__i;
  $108 = $41;
  $109 = HEAP32[$108>>2]|0;
  $110 = ((($109)) + 8|0);
  __THREW__ = 0;
  invoke_vii(360,($58|0),($110|0));
  $111 = __THREW__; __THREW__ = 0;
  $112 = $111&1;
  if ($112) {
   label = 5;
   break;
  }
  $44 = $__i;
  $113 = $44;
  $114 = HEAP32[$113>>2]|0;
  $115 = ((($114)) + 4|0);
  $116 = HEAP32[$115>>2]|0;
  HEAP32[$113>>2] = $116;
 }
 if ((label|0) == 5) {
  $117 = ___cxa_find_matching_catch()|0;
  $118 = tempRet0;
  $56 = $117;
  $57 = $118;
  __ZNSt3__110__list_impIN4rhea14simplex_solver9edit_infoENS_9allocatorIS3_EEED2Ev($58);
  $119 = $56;
  $120 = $57;
  ___resumeException($119|0);
  // unreachable;
 }
 else if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__15dequeIjNS_9allocatorIjEEEC2ERKS3_($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 176|0;
 $$byval_copy = sp + 184|0;
 $6 = sp + 84|0;
 $7 = sp + 32|0;
 $10 = sp + 60|0;
 $11 = sp + 211|0;
 $12 = sp;
 $17 = sp + 192|0;
 $18 = sp + 16|0;
 $21 = sp + 104|0;
 $22 = sp + 208|0;
 $23 = sp + 8|0;
 $26 = sp + 209|0;
 $31 = sp + 214|0;
 $32 = sp + 212|0;
 $34 = sp + 24|0;
 $36 = sp + 210|0;
 $42 = sp + 213|0;
 $43 = sp + 160|0;
 $44 = sp + 128|0;
 $40 = $this;
 $41 = $__c;
 $47 = $40;
 $48 = $41;
 $39 = $48;
 $49 = $39;
 $50 = ((($49)) + 20|0);
 $38 = $50;
 $51 = $38;
 $37 = $51;
 $52 = $37;
 $35 = $52;
 $53 = $35;
 ;HEAP8[$34>>0]=HEAP8[$36>>0]|0;
 $33 = $53;
 $29 = $47;
 $30 = $42;
 $54 = $29;
 $55 = $30;
 $27 = $31;
 $28 = $55;
 $24 = $54;
 $25 = $31;
 $56 = $24;
 HEAP32[$56>>2] = 0;
 $57 = ((($56)) + 4|0);
 HEAP32[$57>>2] = 0;
 $58 = ((($56)) + 8|0);
 HEAP32[$58>>2] = 0;
 $59 = ((($56)) + 12|0);
 ;HEAP8[$23>>0]=HEAP8[$26>>0]|0;
 $20 = $59;
 HEAP32[$21>>2] = 0;
 $60 = $20;
 $19 = $21;
 $61 = $19;
 $62 = HEAP32[$61>>2]|0;
 $13 = $23;
 ;HEAP8[$18>>0]=HEAP8[$22>>0]|0;
 $16 = $60;
 HEAP32[$17>>2] = $62;
 $63 = $16;
 $15 = $18;
 $14 = $17;
 $64 = $14;
 $65 = HEAP32[$64>>2]|0;
 HEAP32[$63>>2] = $65;
 $66 = ((($54)) + 16|0);
 HEAP32[$66>>2] = 0;
 $67 = ((($54)) + 20|0);
 ;HEAP8[$12>>0]=HEAP8[$32>>0]|0;
 $9 = $67;
 HEAP32[$10>>2] = 0;
 $68 = $9;
 $8 = $10;
 $69 = $8;
 $70 = HEAP32[$69>>2]|0;
 $2 = $12;
 ;HEAP8[$7>>0]=HEAP8[$11>>0]|0;
 $5 = $68;
 HEAP32[$6>>2] = $70;
 $71 = $5;
 $4 = $7;
 $3 = $6;
 $72 = $3;
 $73 = HEAP32[$72>>2]|0;
 HEAP32[$71>>2] = $73;
 $74 = $41;
 $0 = $74;
 $75 = $0;
 __ZNKSt3__112__deque_baseIjNS_9allocatorIjEEE5beginEv($43,$75);
 $76 = $41;
 $1 = $76;
 $77 = $1;
 __ZNKSt3__112__deque_baseIjNS_9allocatorIjEEE3endEv($44,$77);
 __THREW__ = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$43>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$43+4>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$44>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$44+4>>2]|0;
 invoke_viiii(361,($47|0),($$byval_copy|0),($$byval_copy1|0),(0|0));
 $78 = __THREW__; __THREW__ = 0;
 $79 = $78&1;
 if ($79) {
  $80 = ___cxa_find_matching_catch()|0;
  $81 = tempRet0;
  $45 = $80;
  $46 = $81;
  __ZNSt3__112__deque_baseIjNS_9allocatorIjEEED2Ev($47);
  $82 = $45;
  $83 = $46;
  ___resumeException($82|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__112__deque_baseIjNS_9allocatorIjEEE5beginEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__mp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = $this;
 $6 = $5;
 $4 = $6;
 $7 = $4;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($6)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11>>>0) / 1024)&-1;
 $13 = (($9) + ($12<<2)|0);
 $__mp = $13;
 $14 = $__mp;
 $3 = $6;
 $15 = $3;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($15)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($17|0)==($19|0);
 if ($20) {
  $27 = 0;
 } else {
  $21 = $__mp;
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($6)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24>>>0) % 1024)&-1;
  $26 = (($22) + ($25<<2)|0);
  $27 = $26;
 }
 $0 = $agg$result;
 $1 = $14;
 $2 = $27;
 $28 = $0;
 $29 = $1;
 HEAP32[$28>>2] = $29;
 $30 = ((($28)) + 4|0);
 $31 = $2;
 HEAP32[$30>>2] = $31;
 STACKTOP = sp;return;
}
function __ZNKSt3__112__deque_baseIjNS_9allocatorIjEEE3endEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__mp = 0, $__p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = $this;
 $9 = $8;
 $7 = $9;
 $10 = $7;
 $11 = ((($10)) + 20|0);
 $6 = $11;
 $12 = $6;
 $5 = $12;
 $13 = $5;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($9)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + ($16))|0;
 $__p = $17;
 $4 = $9;
 $18 = $4;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $__p;
 $22 = (($21>>>0) / 1024)&-1;
 $23 = (($20) + ($22<<2)|0);
 $__mp = $23;
 $24 = $__mp;
 $0 = $9;
 $25 = $0;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($25)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($27|0)==($29|0);
 if ($30) {
  $36 = 0;
 } else {
  $31 = $__mp;
  $32 = HEAP32[$31>>2]|0;
  $33 = $__p;
  $34 = (($33>>>0) % 1024)&-1;
  $35 = (($32) + ($34<<2)|0);
  $36 = $35;
 }
 $1 = $agg$result;
 $2 = $24;
 $3 = $36;
 $37 = $1;
 $38 = $2;
 HEAP32[$37>>2] = $38;
 $39 = ((($37)) + 4|0);
 $40 = $3;
 HEAP32[$39>>2] = $40;
 STACKTOP = sp;return;
}
function __ZNSt3__15dequeIjNS_9allocatorIjEEE8__appendINS_16__deque_iteratorIjPKjRS6_PKS7_iLi1024EEEEEvT_SC_PNS_9enable_ifIXsr21__is_forward_iteratorISC_EE5valueEvE4typeE($this,$__f,$__l,$0) {
 $this = $this|0;
 $__f = $__f|0;
 $__l = $__l|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__back_capacity = 0, $__i = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $26 = sp + 16|0;
 $31 = sp + 292|0;
 $44 = sp;
 $45 = sp + 24|0;
 $46 = sp + 8|0;
 $47 = sp + 224|0;
 $48 = sp + 56|0;
 $49 = sp + 293|0;
 $50 = sp + 40|0;
 $51 = sp + 32|0;
 $54 = sp + 264|0;
 $55 = sp + 96|0;
 $__i = sp + 240|0;
 $52 = $this;
 $53 = $0;
 $56 = $52;
 ;HEAP32[$54>>2]=HEAP32[$__f>>2]|0;HEAP32[$54+4>>2]=HEAP32[$__f+4>>2]|0;
 ;HEAP32[$55>>2]=HEAP32[$__l>>2]|0;HEAP32[$55+4>>2]=HEAP32[$__l+4>>2]|0;
 ;HEAP8[$50>>0]=HEAP8[$55>>0]|0;HEAP8[$50+1>>0]=HEAP8[$55+1>>0]|0;HEAP8[$50+2>>0]=HEAP8[$55+2>>0]|0;HEAP8[$50+3>>0]=HEAP8[$55+3>>0]|0;HEAP8[$50+4>>0]=HEAP8[$55+4>>0]|0;HEAP8[$50+5>>0]=HEAP8[$55+5>>0]|0;HEAP8[$50+6>>0]=HEAP8[$55+6>>0]|0;HEAP8[$50+7>>0]=HEAP8[$55+7>>0]|0;
 ;HEAP8[$51>>0]=HEAP8[$54>>0]|0;HEAP8[$51+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$51+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$51+3>>0]=HEAP8[$54+3>>0]|0;HEAP8[$51+4>>0]=HEAP8[$54+4>>0]|0;HEAP8[$51+5>>0]=HEAP8[$54+5>>0]|0;HEAP8[$51+6>>0]=HEAP8[$54+6>>0]|0;HEAP8[$51+7>>0]=HEAP8[$54+7>>0]|0;
 ;HEAP32[$47>>2]=HEAP32[$51>>2]|0;HEAP32[$47+4>>2]=HEAP32[$51+4>>2]|0;
 ;HEAP32[$48>>2]=HEAP32[$50>>2]|0;HEAP32[$48+4>>2]=HEAP32[$50+4>>2]|0;
 ;HEAP8[$44>>0]=HEAP8[$49>>0]|0;
 ;HEAP8[$45>>0]=HEAP8[$48>>0]|0;HEAP8[$45+1>>0]=HEAP8[$48+1>>0]|0;HEAP8[$45+2>>0]=HEAP8[$48+2>>0]|0;HEAP8[$45+3>>0]=HEAP8[$48+3>>0]|0;HEAP8[$45+4>>0]=HEAP8[$48+4>>0]|0;HEAP8[$45+5>>0]=HEAP8[$48+5>>0]|0;HEAP8[$45+6>>0]=HEAP8[$48+6>>0]|0;HEAP8[$45+7>>0]=HEAP8[$48+7>>0]|0;
 ;HEAP8[$46>>0]=HEAP8[$47>>0]|0;HEAP8[$46+1>>0]=HEAP8[$47+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$47+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$47+3>>0]|0;HEAP8[$46+4>>0]=HEAP8[$47+4>>0]|0;HEAP8[$46+5>>0]=HEAP8[$47+5>>0]|0;HEAP8[$46+6>>0]=HEAP8[$47+6>>0]|0;HEAP8[$46+7>>0]=HEAP8[$47+7>>0]|0;
 $42 = $45;
 $43 = $46;
 $57 = $42;
 $58 = $43;
 $39 = $57;
 $40 = $58;
 $59 = $39;
 $60 = $40;
 $37 = $59;
 $38 = $60;
 $61 = $37;
 $62 = ((($61)) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $38;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($63|0)==($66|0);
 $68 = $67 ^ 1;
 if ($68) {
  $69 = $42;
  $70 = HEAP32[$69>>2]|0;
  $71 = $43;
  $72 = HEAP32[$71>>2]|0;
  $73 = $70;
  $74 = $72;
  $75 = (($73) - ($74))|0;
  $76 = (($75|0) / 4)&-1;
  $77 = $76<<10;
  $78 = $42;
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $42;
  $82 = HEAP32[$81>>2]|0;
  $83 = HEAP32[$82>>2]|0;
  $84 = $80;
  $85 = $83;
  $86 = (($84) - ($85))|0;
  $87 = (($86|0) / 4)&-1;
  $88 = (($77) + ($87))|0;
  $89 = $43;
  $90 = ((($89)) + 4|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $43;
  $93 = HEAP32[$92>>2]|0;
  $94 = HEAP32[$93>>2]|0;
  $95 = $91;
  $96 = $94;
  $97 = (($95) - ($96))|0;
  $98 = (($97|0) / 4)&-1;
  $99 = (($88) - ($98))|0;
  $41 = $99;
 } else {
  $41 = 0;
 }
 $100 = $41;
 $__n = $100;
 $10 = $56;
 $101 = $10;
 $102 = ((($101)) + 20|0);
 $9 = $102;
 $103 = $9;
 $8 = $103;
 $104 = $8;
 $__a = $104;
 $7 = $56;
 $105 = $7;
 $6 = $105;
 $106 = $6;
 $5 = $106;
 $107 = $5;
 $108 = ((($107)) + 8|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ((($107)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $109;
 $113 = $111;
 $114 = (($112) - ($113))|0;
 $115 = (($114|0) / 4)&-1;
 $116 = ($115|0)==(0);
 if ($116) {
  $137 = 0;
 } else {
  $4 = $106;
  $117 = $4;
  $118 = ((($117)) + 8|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ((($117)) + 4|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $119;
  $123 = $121;
  $124 = (($122) - ($123))|0;
  $125 = (($124|0) / 4)&-1;
  $126 = $125<<10;
  $127 = (($126) - 1)|0;
  $137 = $127;
 }
 $128 = ((($105)) + 16|0);
 $129 = HEAP32[$128>>2]|0;
 $3 = $105;
 $130 = $3;
 $131 = ((($130)) + 20|0);
 $2 = $131;
 $132 = $2;
 $1 = $132;
 $133 = $1;
 $134 = HEAP32[$133>>2]|0;
 $135 = (($129) + ($134))|0;
 $136 = (($137) - ($135))|0;
 $__back_capacity = $136;
 $138 = $__n;
 $139 = $__back_capacity;
 $140 = ($138>>>0)>($139>>>0);
 if ($140) {
  $141 = $__n;
  $142 = $__back_capacity;
  $143 = (($141) - ($142))|0;
  __ZNSt3__15dequeIjNS_9allocatorIjEEE19__add_back_capacityEj($56,$143);
 }
 __ZNSt3__112__deque_baseIjNS_9allocatorIjEEE3endEv($__i,$56);
 while(1) {
  $13 = $__f;
  $14 = $__l;
  $144 = $13;
  $145 = $14;
  $11 = $144;
  $12 = $145;
  $146 = $11;
  $147 = ((($146)) + 4|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = $12;
  $150 = ((($149)) + 4|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ($148|0)==($151|0);
  $153 = $152 ^ 1;
  if (!($153)) {
   break;
  }
  $154 = $__a;
  $15 = $__i;
  $155 = $15;
  $156 = ((($155)) + 4|0);
  $157 = HEAP32[$156>>2]|0;
  $16 = $157;
  $158 = $16;
  $17 = $__f;
  $159 = $17;
  $160 = ((($159)) + 4|0);
  $161 = HEAP32[$160>>2]|0;
  $28 = $154;
  $29 = $158;
  $30 = $161;
  $162 = $28;
  $163 = $29;
  $164 = $30;
  $27 = $164;
  $165 = $27;
  ;HEAP8[$26>>0]=HEAP8[$31>>0]|0;
  $23 = $162;
  $24 = $163;
  $25 = $165;
  $166 = $23;
  $167 = $24;
  $168 = $25;
  $22 = $168;
  $169 = $22;
  $19 = $166;
  $20 = $167;
  $21 = $169;
  $170 = $20;
  $171 = $21;
  $18 = $171;
  $172 = $18;
  $173 = HEAP32[$172>>2]|0;
  HEAP32[$170>>2] = $173;
  $32 = $__i;
  $174 = $32;
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = ((($176)) + 4|0);
  HEAP32[$175>>2] = $177;
  $178 = HEAP32[$174>>2]|0;
  $179 = HEAP32[$178>>2]|0;
  $180 = $177;
  $181 = $179;
  $182 = (($180) - ($181))|0;
  $183 = (($182|0) / 4)&-1;
  $184 = ($183|0)==(1024);
  if ($184) {
   $185 = HEAP32[$174>>2]|0;
   $186 = ((($185)) + 4|0);
   HEAP32[$174>>2] = $186;
   $187 = HEAP32[$174>>2]|0;
   $188 = HEAP32[$187>>2]|0;
   $189 = ((($174)) + 4|0);
   HEAP32[$189>>2] = $188;
  }
  $33 = $__f;
  $190 = $33;
  $191 = ((($190)) + 4|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = ((($192)) + 4|0);
  HEAP32[$191>>2] = $193;
  $194 = HEAP32[$190>>2]|0;
  $195 = HEAP32[$194>>2]|0;
  $196 = $193;
  $197 = $195;
  $198 = (($196) - ($197))|0;
  $199 = (($198|0) / 4)&-1;
  $200 = ($199|0)==(1024);
  if ($200) {
   $201 = HEAP32[$190>>2]|0;
   $202 = ((($201)) + 4|0);
   HEAP32[$190>>2] = $202;
   $203 = HEAP32[$190>>2]|0;
   $204 = HEAP32[$203>>2]|0;
   $205 = ((($190)) + 4|0);
   HEAP32[$205>>2] = $204;
  }
  $36 = $56;
  $206 = $36;
  $207 = ((($206)) + 20|0);
  $35 = $207;
  $208 = $35;
  $34 = $208;
  $209 = $34;
  $210 = HEAP32[$209>>2]|0;
  $211 = (($210) + 1)|0;
  HEAP32[$209>>2] = $211;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__15dequeIjNS_9allocatorIjEEE19__add_back_capacityEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0;
 var $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0;
 var $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0;
 var $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0;
 var $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0;
 var $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0;
 var $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0;
 var $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0;
 var $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0;
 var $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0;
 var $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0;
 var $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0;
 var $1262 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
 var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
 var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
 var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
 var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__a = 0, $__buf = 0, $__c$i = 0, $__c$i13 = 0, $__c$i22 = 0, $__d$i = 0, $__d$i12 = 0, $__d$i21 = 0, $__ds = 0, $__front_capacity = 0, $__i = 0;
 var $__i2 = 0, $__n$i$i$i = 0, $__n$i$i$i11 = 0, $__n$i$i$i20 = 0, $__nb = 0, $__pt = 0, $__pt1 = 0, $__t$i = 0, $__t$i$i = 0, $__t$i$i10 = 0, $__t$i$i19 = 0, $__t$i1$i = 0, $__t$i1$i18 = 0, $__t$i1$i9 = 0, $__t$i14 = 0, $__t$i2$i = 0, $__t$i2$i17 = 0, $__t$i2$i8 = 0, $__t$i23 = 0, $__t$i3 = 0;
 var $__t$i3$i = 0, $__t$i3$i16 = 0, $__t$i3$i7 = 0, $__t$i4 = 0, $__t$i5 = 0, $__t$i6 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1776|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy10 = sp + 896|0;
 $$byval_copy9 = sp + 1732|0;
 $$byval_copy8 = sp + 1708|0;
 $$byval_copy7 = sp + 844|0;
 $$byval_copy6 = sp + 100|0;
 $$byval_copy = sp + 164|0;
 $15 = sp;
 $18 = sp + 1753|0;
 $36 = sp + 32|0;
 $39 = sp + 1754|0;
 $__t$i3$i16 = sp + 240|0;
 $__t$i2$i17 = sp + 264|0;
 $__t$i1$i18 = sp + 1408|0;
 $__t$i$i19 = sp + 336|0;
 $90 = sp + 16|0;
 $95 = sp + 1757|0;
 $101 = sp + 492|0;
 $102 = sp + 496|0;
 $__t$i23 = sp + 500|0;
 $103 = sp + 520|0;
 $106 = sp + 532|0;
 $111 = sp + 64|0;
 $114 = sp + 1758|0;
 $159 = sp + 48|0;
 $162 = sp + 1755|0;
 $__t$i3$i7 = sp + 780|0;
 $__t$i2$i8 = sp + 804|0;
 $__t$i1$i9 = sp + 828|0;
 $__t$i$i10 = sp + 876|0;
 $213 = sp + 56|0;
 $218 = sp + 1762|0;
 $224 = sp + 1032|0;
 $225 = sp + 1036|0;
 $__t$i14 = sp + 1040|0;
 $226 = sp + 1060|0;
 $229 = sp + 552|0;
 $232 = sp + 40|0;
 $235 = sp + 1760|0;
 $250 = sp + 80|0;
 $253 = sp + 1759|0;
 $__t$i3$i = sp + 1208|0;
 $__t$i2$i = sp + 1232|0;
 $__t$i1$i = sp + 1256|0;
 $__t$i$i = sp + 1304|0;
 $304 = sp + 24|0;
 $309 = sp + 1752|0;
 $315 = sp + 1460|0;
 $316 = sp + 1464|0;
 $__t$i6 = sp + 1468|0;
 $317 = sp + 744|0;
 $320 = sp + 1500|0;
 $323 = sp + 8|0;
 $326 = sp + 1756|0;
 $335 = sp + 72|0;
 $338 = sp + 1761|0;
 $__t$i5 = sp + 1596|0;
 $__t$i4 = sp + 1620|0;
 $__t$i3 = sp + 1644|0;
 $__t$i = sp + 116|0;
 $__nb = sp + 1716|0;
 $__front_capacity = sp + 440|0;
 $__pt = sp + 1724|0;
 $373 = sp + 1740|0;
 $374 = sp + 1572|0;
 $__pt1 = sp + 1524|0;
 $__buf = sp + 1168|0;
 $375 = sp + 1088|0;
 $376 = sp + 1000|0;
 $377 = sp + 756|0;
 $371 = $this;
 $372 = $__n;
 $380 = $371;
 $370 = $380;
 $381 = $370;
 $382 = ((($381)) + 20|0);
 $369 = $382;
 $383 = $369;
 $368 = $383;
 $384 = $368;
 $__a = $384;
 $385 = $372;
 $367 = $380;
 $386 = $367;
 $387 = ((($386)) + 8|0);
 $388 = HEAP32[$387>>2]|0;
 $389 = ((($386)) + 4|0);
 $390 = HEAP32[$389>>2]|0;
 $391 = ($388|0)==($390|0);
 $392 = $391&1;
 $393 = (($385) + ($392))|0;
 $366 = $393;
 $394 = $366;
 $395 = (($394>>>0) / 1024)&-1;
 $396 = $366;
 $397 = (($396>>>0) % 1024)&-1;
 $398 = ($397|0)!=(0);
 $399 = $398&1;
 $400 = (($395) + ($399))|0;
 HEAP32[$__nb>>2] = $400;
 $365 = $380;
 $401 = $365;
 $402 = ((($401)) + 16|0);
 $403 = HEAP32[$402>>2]|0;
 $404 = (($403>>>0) / 1024)&-1;
 HEAP32[$__front_capacity>>2] = $404;
 $336 = $__front_capacity;
 $337 = $__nb;
 $405 = $336;
 $406 = $337;
 ;HEAP8[$335>>0]=HEAP8[$338>>0]|0;
 $333 = $405;
 $334 = $406;
 $407 = $334;
 $408 = $333;
 $330 = $335;
 $331 = $407;
 $332 = $408;
 $409 = $331;
 $410 = HEAP32[$409>>2]|0;
 $411 = $332;
 $412 = HEAP32[$411>>2]|0;
 $413 = ($410>>>0)<($412>>>0);
 $414 = $334;
 $415 = $333;
 $416 = $413 ? $414 : $415;
 $417 = HEAP32[$416>>2]|0;
 HEAP32[$__front_capacity>>2] = $417;
 $418 = HEAP32[$__front_capacity>>2]|0;
 $419 = HEAP32[$__nb>>2]|0;
 $420 = (($419) - ($418))|0;
 HEAP32[$__nb>>2] = $420;
 $421 = HEAP32[$__nb>>2]|0;
 $422 = ($421|0)==(0);
 if ($422) {
  $423 = HEAP32[$__front_capacity>>2]|0;
  $424 = $423<<10;
  $425 = ((($380)) + 16|0);
  $426 = HEAP32[$425>>2]|0;
  $427 = (($426) - ($424))|0;
  HEAP32[$425>>2] = $427;
  L3: while(1) {
   $428 = HEAP32[$__front_capacity>>2]|0;
   $429 = ($428>>>0)>(0);
   if (!($429)) {
    label = 51;
    break;
   }
   $237 = $380;
   $430 = $237;
   $431 = ((($430)) + 4|0);
   $432 = HEAP32[$431>>2]|0;
   $433 = HEAP32[$432>>2]|0;
   HEAP32[$__pt>>2] = $433;
   $236 = $380;
   $434 = $236;
   $435 = ((($434)) + 4|0);
   $436 = HEAP32[$435>>2]|0;
   $437 = ((($436)) + 4|0);
   $233 = $434;
   $234 = $437;
   $438 = $233;
   $439 = $234;
   ;HEAP8[$232>>0]=HEAP8[$235>>0]|0;
   $230 = $438;
   $231 = $439;
   $440 = $230;
   $441 = $231;
   $442 = ((($440)) + 4|0);
   HEAP32[$442>>2] = $441;
   $222 = $380;
   $223 = $__pt;
   $443 = $222;
   $444 = ((($443)) + 8|0);
   $445 = HEAP32[$444>>2]|0;
   $221 = $443;
   $446 = $221;
   $447 = ((($446)) + 12|0);
   $220 = $447;
   $448 = $220;
   $219 = $448;
   $449 = $219;
   $450 = HEAP32[$449>>2]|0;
   $451 = ($445|0)==($450|0);
   do {
    if ($451) {
     $452 = ((($443)) + 4|0);
     $453 = HEAP32[$452>>2]|0;
     $454 = HEAP32[$443>>2]|0;
     $455 = ($453>>>0)>($454>>>0);
     if ($455) {
      $456 = ((($443)) + 4|0);
      $457 = HEAP32[$456>>2]|0;
      $458 = HEAP32[$443>>2]|0;
      $459 = $457;
      $460 = $458;
      $461 = (($459) - ($460))|0;
      $462 = (($461|0) / 4)&-1;
      $__d$i12 = $462;
      $463 = $__d$i12;
      $464 = (($463) + 1)|0;
      $465 = (($464|0) / 2)&-1;
      $__d$i12 = $465;
      $466 = ((($443)) + 4|0);
      $467 = HEAP32[$466>>2]|0;
      $468 = ((($443)) + 8|0);
      $469 = HEAP32[$468>>2]|0;
      $470 = ((($443)) + 4|0);
      $471 = HEAP32[$470>>2]|0;
      $472 = $__d$i12;
      $473 = (0 - ($472))|0;
      $474 = (($471) + ($473<<2)|0);
      $198 = $467;
      $199 = $469;
      $200 = $474;
      $475 = $198;
      $197 = $475;
      $476 = $197;
      $477 = $199;
      $192 = $477;
      $478 = $192;
      $479 = $200;
      $193 = $479;
      $480 = $193;
      $194 = $476;
      $195 = $478;
      $196 = $480;
      $481 = $195;
      $482 = $194;
      $483 = $481;
      $484 = $482;
      $485 = (($483) - ($484))|0;
      $486 = (($485|0) / 4)&-1;
      $__n$i$i$i11 = $486;
      $487 = $196;
      $488 = $194;
      $489 = $__n$i$i$i11;
      $490 = $489<<2;
      _memmove(($487|0),($488|0),($490|0))|0;
      $491 = $196;
      $492 = $__n$i$i$i11;
      $493 = (($491) + ($492<<2)|0);
      $494 = ((($443)) + 8|0);
      HEAP32[$494>>2] = $493;
      $495 = $__d$i12;
      $496 = ((($443)) + 4|0);
      $497 = HEAP32[$496>>2]|0;
      $498 = (0 - ($495))|0;
      $499 = (($497) + ($498<<2)|0);
      HEAP32[$496>>2] = $499;
      break;
     }
     $191 = $443;
     $500 = $191;
     $501 = ((($500)) + 12|0);
     $190 = $501;
     $502 = $190;
     $189 = $502;
     $503 = $189;
     $504 = HEAP32[$503>>2]|0;
     $505 = HEAP32[$443>>2]|0;
     $506 = $504;
     $507 = $505;
     $508 = (($506) - ($507))|0;
     $509 = (($508|0) / 4)&-1;
     $510 = $509<<1;
     HEAP32[$224>>2] = $510;
     HEAP32[$225>>2] = 1;
     $160 = $224;
     $161 = $225;
     $511 = $160;
     $512 = $161;
     ;HEAP8[$159>>0]=HEAP8[$162>>0]|0;
     $157 = $511;
     $158 = $512;
     $513 = $157;
     $514 = $158;
     $154 = $159;
     $155 = $513;
     $156 = $514;
     $515 = $155;
     $516 = HEAP32[$515>>2]|0;
     $517 = $156;
     $518 = HEAP32[$517>>2]|0;
     $519 = ($516>>>0)<($518>>>0);
     $520 = $158;
     $521 = $157;
     $522 = $519 ? $520 : $521;
     $523 = HEAP32[$522>>2]|0;
     $__c$i13 = $523;
     $524 = $__c$i13;
     $525 = $__c$i13;
     $526 = (($525>>>0) / 4)&-1;
     $149 = $443;
     $527 = $149;
     $528 = ((($527)) + 12|0);
     $148 = $528;
     $529 = $148;
     $147 = $529;
     $530 = $147;
     __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEEC2EjjS4_($__t$i14,$524,$526,$530);
     $531 = ((($443)) + 4|0);
     $532 = HEAP32[$531>>2]|0;
     $150 = $226;
     $151 = $532;
     $533 = $150;
     $534 = $151;
     HEAP32[$533>>2] = $534;
     $535 = ((($443)) + 8|0);
     $536 = HEAP32[$535>>2]|0;
     $152 = $229;
     $153 = $536;
     $537 = $152;
     $538 = $153;
     HEAP32[$537>>2] = $538;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$226>>2]|0;
     ;HEAP32[$$byval_copy6>>2]=HEAP32[$229>>2]|0;
     invoke_viii(294,($__t$i14|0),($$byval_copy|0),($$byval_copy6|0));
     $539 = __THREW__; __THREW__ = 0;
     $540 = $539&1;
     if ($540) {
      label = 9;
      break L3;
     }
     $166 = $443;
     $167 = $__t$i14;
     $541 = $166;
     $165 = $541;
     $542 = $165;
     $543 = HEAP32[$542>>2]|0;
     HEAP32[$__t$i3$i7>>2] = $543;
     $544 = $167;
     $163 = $544;
     $545 = $163;
     $546 = HEAP32[$545>>2]|0;
     $547 = $166;
     HEAP32[$547>>2] = $546;
     $164 = $__t$i3$i7;
     $548 = $164;
     $549 = HEAP32[$548>>2]|0;
     $550 = $167;
     HEAP32[$550>>2] = $549;
     $551 = ((($443)) + 4|0);
     $552 = ((($__t$i14)) + 4|0);
     $171 = $551;
     $172 = $552;
     $553 = $171;
     $170 = $553;
     $554 = $170;
     $555 = HEAP32[$554>>2]|0;
     HEAP32[$__t$i2$i8>>2] = $555;
     $556 = $172;
     $168 = $556;
     $557 = $168;
     $558 = HEAP32[$557>>2]|0;
     $559 = $171;
     HEAP32[$559>>2] = $558;
     $169 = $__t$i2$i8;
     $560 = $169;
     $561 = HEAP32[$560>>2]|0;
     $562 = $172;
     HEAP32[$562>>2] = $561;
     $563 = ((($443)) + 8|0);
     $564 = ((($__t$i14)) + 8|0);
     $176 = $563;
     $177 = $564;
     $565 = $176;
     $175 = $565;
     $566 = $175;
     $567 = HEAP32[$566>>2]|0;
     HEAP32[$__t$i1$i9>>2] = $567;
     $568 = $177;
     $173 = $568;
     $569 = $173;
     $570 = HEAP32[$569>>2]|0;
     $571 = $176;
     HEAP32[$571>>2] = $570;
     $174 = $__t$i1$i9;
     $572 = $174;
     $573 = HEAP32[$572>>2]|0;
     $574 = $177;
     HEAP32[$574>>2] = $573;
     $180 = $443;
     $575 = $180;
     $576 = ((($575)) + 12|0);
     $179 = $576;
     $577 = $179;
     $178 = $577;
     $578 = $178;
     $183 = $__t$i14;
     $579 = $183;
     $580 = ((($579)) + 12|0);
     $182 = $580;
     $581 = $182;
     $181 = $581;
     $582 = $181;
     $187 = $578;
     $188 = $582;
     $583 = $187;
     $186 = $583;
     $584 = $186;
     $585 = HEAP32[$584>>2]|0;
     HEAP32[$__t$i$i10>>2] = $585;
     $586 = $188;
     $184 = $586;
     $587 = $184;
     $588 = HEAP32[$587>>2]|0;
     $589 = $187;
     HEAP32[$589>>2] = $588;
     $185 = $__t$i$i10;
     $590 = $185;
     $591 = HEAP32[$590>>2]|0;
     $592 = $188;
     HEAP32[$592>>2] = $591;
     __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEED2Ev($__t$i14);
    }
   } while(0);
   $203 = $443;
   $597 = $203;
   $598 = ((($597)) + 12|0);
   $202 = $598;
   $599 = $202;
   $201 = $599;
   $600 = $201;
   $601 = ((($443)) + 8|0);
   $602 = HEAP32[$601>>2]|0;
   $204 = $602;
   $603 = $204;
   $604 = $223;
   $215 = $600;
   $216 = $603;
   $217 = $604;
   $605 = $215;
   $606 = $216;
   $607 = $217;
   $214 = $607;
   $608 = $214;
   ;HEAP8[$213>>0]=HEAP8[$218>>0]|0;
   $210 = $605;
   $211 = $606;
   $212 = $608;
   $609 = $210;
   $610 = $211;
   $611 = $212;
   $209 = $611;
   $612 = $209;
   $206 = $609;
   $207 = $610;
   $208 = $612;
   $613 = $207;
   $614 = $208;
   $205 = $614;
   $615 = $205;
   $616 = HEAP32[$615>>2]|0;
   HEAP32[$613>>2] = $616;
   $617 = ((($443)) + 8|0);
   $618 = HEAP32[$617>>2]|0;
   $619 = ((($618)) + 4|0);
   HEAP32[$617>>2] = $619;
   $620 = HEAP32[$__front_capacity>>2]|0;
   $621 = (($620) + -1)|0;
   HEAP32[$__front_capacity>>2] = $621;
  }
  if ((label|0) == 9) {
   $593 = ___cxa_find_matching_catch()|0;
   $594 = tempRet0;
   $227 = $593;
   $228 = $594;
   __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEED2Ev($__t$i14);
   $595 = $227;
   $596 = $228;
   ___resumeException($595|0);
   // unreachable;
  }
  else if ((label|0) == 51) {
   STACKTOP = sp;return;
  }
 }
 $622 = HEAP32[$__nb>>2]|0;
 $146 = $380;
 $623 = $146;
 $145 = $623;
 $624 = $145;
 $625 = ((($624)) + 12|0);
 $144 = $625;
 $626 = $144;
 $143 = $626;
 $627 = $143;
 $628 = HEAP32[$627>>2]|0;
 $629 = HEAP32[$623>>2]|0;
 $630 = $628;
 $631 = $629;
 $632 = (($630) - ($631))|0;
 $633 = (($632|0) / 4)&-1;
 $142 = $380;
 $634 = $142;
 $635 = ((($634)) + 8|0);
 $636 = HEAP32[$635>>2]|0;
 $637 = ((($634)) + 4|0);
 $638 = HEAP32[$637>>2]|0;
 $639 = $636;
 $640 = $638;
 $641 = (($639) - ($640))|0;
 $642 = (($641|0) / 4)&-1;
 $643 = (($633) - ($642))|0;
 $644 = ($622>>>0)<=($643>>>0);
 if ($644) {
  while(1) {
   $645 = HEAP32[$__nb>>2]|0;
   $646 = ($645>>>0)>(0);
   if (!($646)) {
    break;
   }
   $141 = $380;
   $647 = $141;
   $140 = $647;
   $648 = $140;
   $649 = ((($648)) + 12|0);
   $139 = $649;
   $650 = $139;
   $138 = $650;
   $651 = $138;
   $652 = HEAP32[$651>>2]|0;
   $653 = ((($647)) + 8|0);
   $654 = HEAP32[$653>>2]|0;
   $655 = $652;
   $656 = $654;
   $657 = (($655) - ($656))|0;
   $658 = (($657|0) / 4)&-1;
   $659 = ($658|0)==(0);
   if ($659) {
    break;
   }
   $660 = $__a;
   $136 = $660;
   $137 = 1024;
   $661 = $136;
   $662 = $137;
   $133 = $661;
   $134 = $662;
   $135 = 0;
   $663 = $134;
   $664 = $663<<2;
   $132 = $664;
   $665 = $132;
   $666 = (__Znwj($665)|0);
   HEAP32[$373>>2] = $666;
   __ZNSt3__114__split_bufferIPjNS_9allocatorIS1_EEE9push_backEOS1_($380,$373);
   $667 = HEAP32[$__nb>>2]|0;
   $668 = (($667) + -1)|0;
   HEAP32[$__nb>>2] = $668;
  }
  while(1) {
   $669 = HEAP32[$__nb>>2]|0;
   $670 = ($669>>>0)>(0);
   if (!($670)) {
    break;
   }
   $671 = $__a;
   $130 = $671;
   $131 = 1024;
   $672 = $130;
   $673 = $131;
   $127 = $672;
   $128 = $673;
   $129 = 0;
   $674 = $128;
   $675 = $674<<2;
   $126 = $675;
   $676 = $126;
   $677 = (__Znwj($676)|0);
   HEAP32[$374>>2] = $677;
   __ZNSt3__114__split_bufferIPjNS_9allocatorIS1_EEE10push_frontEOS1_($380,$374);
   $678 = HEAP32[$__nb>>2]|0;
   $679 = (($678) + -1)|0;
   HEAP32[$__nb>>2] = $679;
   $680 = HEAP32[$__front_capacity>>2]|0;
   $681 = (($680) + 1)|0;
   HEAP32[$__front_capacity>>2] = $681;
   $125 = $380;
   $682 = $125;
   $683 = ((($682)) + 8|0);
   $684 = HEAP32[$683>>2]|0;
   $685 = ((($682)) + 4|0);
   $686 = HEAP32[$685>>2]|0;
   $687 = $684;
   $688 = $686;
   $689 = (($687) - ($688))|0;
   $690 = (($689|0) / 4)&-1;
   $691 = ($690|0)==(1);
   $692 = $691&1;
   $693 = (1024 - ($692))|0;
   $694 = ((($380)) + 16|0);
   $695 = HEAP32[$694>>2]|0;
   $696 = (($695) + ($693))|0;
   HEAP32[$694>>2] = $696;
  }
  $697 = HEAP32[$__front_capacity>>2]|0;
  $698 = $697<<10;
  $699 = ((($380)) + 16|0);
  $700 = HEAP32[$699>>2]|0;
  $701 = (($700) - ($698))|0;
  HEAP32[$699>>2] = $701;
  L26: while(1) {
   $702 = HEAP32[$__front_capacity>>2]|0;
   $703 = ($702>>>0)>(0);
   if (!($703)) {
    label = 51;
    break;
   }
   $124 = $380;
   $704 = $124;
   $705 = ((($704)) + 4|0);
   $706 = HEAP32[$705>>2]|0;
   $707 = HEAP32[$706>>2]|0;
   HEAP32[$__pt1>>2] = $707;
   $115 = $380;
   $708 = $115;
   $709 = ((($708)) + 4|0);
   $710 = HEAP32[$709>>2]|0;
   $711 = ((($710)) + 4|0);
   $112 = $708;
   $113 = $711;
   $712 = $112;
   $713 = $113;
   ;HEAP8[$111>>0]=HEAP8[$114>>0]|0;
   $109 = $712;
   $110 = $713;
   $714 = $109;
   $715 = $110;
   $716 = ((($714)) + 4|0);
   HEAP32[$716>>2] = $715;
   $99 = $380;
   $100 = $__pt1;
   $717 = $99;
   $718 = ((($717)) + 8|0);
   $719 = HEAP32[$718>>2]|0;
   $98 = $717;
   $720 = $98;
   $721 = ((($720)) + 12|0);
   $97 = $721;
   $722 = $97;
   $96 = $722;
   $723 = $96;
   $724 = HEAP32[$723>>2]|0;
   $725 = ($719|0)==($724|0);
   do {
    if ($725) {
     $726 = ((($717)) + 4|0);
     $727 = HEAP32[$726>>2]|0;
     $728 = HEAP32[$717>>2]|0;
     $729 = ($727>>>0)>($728>>>0);
     if ($729) {
      $730 = ((($717)) + 4|0);
      $731 = HEAP32[$730>>2]|0;
      $732 = HEAP32[$717>>2]|0;
      $733 = $731;
      $734 = $732;
      $735 = (($733) - ($734))|0;
      $736 = (($735|0) / 4)&-1;
      $__d$i21 = $736;
      $737 = $__d$i21;
      $738 = (($737) + 1)|0;
      $739 = (($738|0) / 2)&-1;
      $__d$i21 = $739;
      $740 = ((($717)) + 4|0);
      $741 = HEAP32[$740>>2]|0;
      $742 = ((($717)) + 8|0);
      $743 = HEAP32[$742>>2]|0;
      $744 = ((($717)) + 4|0);
      $745 = HEAP32[$744>>2]|0;
      $746 = $__d$i21;
      $747 = (0 - ($746))|0;
      $748 = (($745) + ($747<<2)|0);
      $75 = $741;
      $76 = $743;
      $77 = $748;
      $749 = $75;
      $74 = $749;
      $750 = $74;
      $751 = $76;
      $69 = $751;
      $752 = $69;
      $753 = $77;
      $70 = $753;
      $754 = $70;
      $71 = $750;
      $72 = $752;
      $73 = $754;
      $755 = $72;
      $756 = $71;
      $757 = $755;
      $758 = $756;
      $759 = (($757) - ($758))|0;
      $760 = (($759|0) / 4)&-1;
      $__n$i$i$i20 = $760;
      $761 = $73;
      $762 = $71;
      $763 = $__n$i$i$i20;
      $764 = $763<<2;
      _memmove(($761|0),($762|0),($764|0))|0;
      $765 = $73;
      $766 = $__n$i$i$i20;
      $767 = (($765) + ($766<<2)|0);
      $768 = ((($717)) + 8|0);
      HEAP32[$768>>2] = $767;
      $769 = $__d$i21;
      $770 = ((($717)) + 4|0);
      $771 = HEAP32[$770>>2]|0;
      $772 = (0 - ($769))|0;
      $773 = (($771) + ($772<<2)|0);
      HEAP32[$770>>2] = $773;
      break;
     }
     $68 = $717;
     $774 = $68;
     $775 = ((($774)) + 12|0);
     $67 = $775;
     $776 = $67;
     $66 = $776;
     $777 = $66;
     $778 = HEAP32[$777>>2]|0;
     $779 = HEAP32[$717>>2]|0;
     $780 = $778;
     $781 = $779;
     $782 = (($780) - ($781))|0;
     $783 = (($782|0) / 4)&-1;
     $784 = $783<<1;
     HEAP32[$101>>2] = $784;
     HEAP32[$102>>2] = 1;
     $37 = $101;
     $38 = $102;
     $785 = $37;
     $786 = $38;
     ;HEAP8[$36>>0]=HEAP8[$39>>0]|0;
     $34 = $785;
     $35 = $786;
     $787 = $34;
     $788 = $35;
     $31 = $36;
     $32 = $787;
     $33 = $788;
     $789 = $32;
     $790 = HEAP32[$789>>2]|0;
     $791 = $33;
     $792 = HEAP32[$791>>2]|0;
     $793 = ($790>>>0)<($792>>>0);
     $794 = $35;
     $795 = $34;
     $796 = $793 ? $794 : $795;
     $797 = HEAP32[$796>>2]|0;
     $__c$i22 = $797;
     $798 = $__c$i22;
     $799 = $__c$i22;
     $800 = (($799>>>0) / 4)&-1;
     $26 = $717;
     $801 = $26;
     $802 = ((($801)) + 12|0);
     $25 = $802;
     $803 = $25;
     $24 = $803;
     $804 = $24;
     __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEEC2EjjS4_($__t$i23,$798,$800,$804);
     $805 = ((($717)) + 4|0);
     $806 = HEAP32[$805>>2]|0;
     $27 = $103;
     $28 = $806;
     $807 = $27;
     $808 = $28;
     HEAP32[$807>>2] = $808;
     $809 = ((($717)) + 8|0);
     $810 = HEAP32[$809>>2]|0;
     $29 = $106;
     $30 = $810;
     $811 = $29;
     $812 = $30;
     HEAP32[$811>>2] = $812;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy7>>2]=HEAP32[$103>>2]|0;
     ;HEAP32[$$byval_copy8>>2]=HEAP32[$106>>2]|0;
     invoke_viii(294,($__t$i23|0),($$byval_copy7|0),($$byval_copy8|0));
     $813 = __THREW__; __THREW__ = 0;
     $814 = $813&1;
     if ($814) {
      label = 24;
      break L26;
     }
     $43 = $717;
     $44 = $__t$i23;
     $815 = $43;
     $42 = $815;
     $816 = $42;
     $817 = HEAP32[$816>>2]|0;
     HEAP32[$__t$i3$i16>>2] = $817;
     $818 = $44;
     $40 = $818;
     $819 = $40;
     $820 = HEAP32[$819>>2]|0;
     $821 = $43;
     HEAP32[$821>>2] = $820;
     $41 = $__t$i3$i16;
     $822 = $41;
     $823 = HEAP32[$822>>2]|0;
     $824 = $44;
     HEAP32[$824>>2] = $823;
     $825 = ((($717)) + 4|0);
     $826 = ((($__t$i23)) + 4|0);
     $48 = $825;
     $49 = $826;
     $827 = $48;
     $47 = $827;
     $828 = $47;
     $829 = HEAP32[$828>>2]|0;
     HEAP32[$__t$i2$i17>>2] = $829;
     $830 = $49;
     $45 = $830;
     $831 = $45;
     $832 = HEAP32[$831>>2]|0;
     $833 = $48;
     HEAP32[$833>>2] = $832;
     $46 = $__t$i2$i17;
     $834 = $46;
     $835 = HEAP32[$834>>2]|0;
     $836 = $49;
     HEAP32[$836>>2] = $835;
     $837 = ((($717)) + 8|0);
     $838 = ((($__t$i23)) + 8|0);
     $53 = $837;
     $54 = $838;
     $839 = $53;
     $52 = $839;
     $840 = $52;
     $841 = HEAP32[$840>>2]|0;
     HEAP32[$__t$i1$i18>>2] = $841;
     $842 = $54;
     $50 = $842;
     $843 = $50;
     $844 = HEAP32[$843>>2]|0;
     $845 = $53;
     HEAP32[$845>>2] = $844;
     $51 = $__t$i1$i18;
     $846 = $51;
     $847 = HEAP32[$846>>2]|0;
     $848 = $54;
     HEAP32[$848>>2] = $847;
     $57 = $717;
     $849 = $57;
     $850 = ((($849)) + 12|0);
     $56 = $850;
     $851 = $56;
     $55 = $851;
     $852 = $55;
     $60 = $__t$i23;
     $853 = $60;
     $854 = ((($853)) + 12|0);
     $59 = $854;
     $855 = $59;
     $58 = $855;
     $856 = $58;
     $64 = $852;
     $65 = $856;
     $857 = $64;
     $63 = $857;
     $858 = $63;
     $859 = HEAP32[$858>>2]|0;
     HEAP32[$__t$i$i19>>2] = $859;
     $860 = $65;
     $61 = $860;
     $861 = $61;
     $862 = HEAP32[$861>>2]|0;
     $863 = $64;
     HEAP32[$863>>2] = $862;
     $62 = $__t$i$i19;
     $864 = $62;
     $865 = HEAP32[$864>>2]|0;
     $866 = $65;
     HEAP32[$866>>2] = $865;
     __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEED2Ev($__t$i23);
    }
   } while(0);
   $80 = $717;
   $871 = $80;
   $872 = ((($871)) + 12|0);
   $79 = $872;
   $873 = $79;
   $78 = $873;
   $874 = $78;
   $875 = ((($717)) + 8|0);
   $876 = HEAP32[$875>>2]|0;
   $81 = $876;
   $877 = $81;
   $878 = $100;
   $92 = $874;
   $93 = $877;
   $94 = $878;
   $879 = $92;
   $880 = $93;
   $881 = $94;
   $91 = $881;
   $882 = $91;
   ;HEAP8[$90>>0]=HEAP8[$95>>0]|0;
   $87 = $879;
   $88 = $880;
   $89 = $882;
   $883 = $87;
   $884 = $88;
   $885 = $89;
   $86 = $885;
   $886 = $86;
   $83 = $883;
   $84 = $884;
   $85 = $886;
   $887 = $84;
   $888 = $85;
   $82 = $888;
   $889 = $82;
   $890 = HEAP32[$889>>2]|0;
   HEAP32[$887>>2] = $890;
   $891 = ((($717)) + 8|0);
   $892 = HEAP32[$891>>2]|0;
   $893 = ((($892)) + 4|0);
   HEAP32[$891>>2] = $893;
   $894 = HEAP32[$__front_capacity>>2]|0;
   $895 = (($894) + -1)|0;
   HEAP32[$__front_capacity>>2] = $895;
  }
  if ((label|0) == 24) {
   $867 = ___cxa_find_matching_catch()|0;
   $868 = tempRet0;
   $104 = $867;
   $105 = $868;
   __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEED2Ev($__t$i23);
   $869 = $104;
   $870 = $105;
   ___resumeException($869|0);
   // unreachable;
  }
  else if ((label|0) == 51) {
   STACKTOP = sp;return;
  }
 }
 $896 = HEAP32[$__front_capacity>>2]|0;
 $897 = $896<<10;
 $__ds = $897;
 $23 = $380;
 $898 = $23;
 $22 = $898;
 $899 = $22;
 $900 = ((($899)) + 12|0);
 $21 = $900;
 $901 = $21;
 $20 = $901;
 $902 = $20;
 $903 = HEAP32[$902>>2]|0;
 $904 = HEAP32[$898>>2]|0;
 $905 = $903;
 $906 = $904;
 $907 = (($905) - ($906))|0;
 $908 = (($907|0) / 4)&-1;
 $909 = $908<<1;
 HEAP32[$375>>2] = $909;
 $910 = HEAP32[$__nb>>2]|0;
 $19 = $380;
 $911 = $19;
 $912 = ((($911)) + 8|0);
 $913 = HEAP32[$912>>2]|0;
 $914 = ((($911)) + 4|0);
 $915 = HEAP32[$914>>2]|0;
 $916 = $913;
 $917 = $915;
 $918 = (($916) - ($917))|0;
 $919 = (($918|0) / 4)&-1;
 $920 = (($910) + ($919))|0;
 HEAP32[$376>>2] = $920;
 $16 = $375;
 $17 = $376;
 $921 = $16;
 $922 = $17;
 ;HEAP8[$15>>0]=HEAP8[$18>>0]|0;
 $13 = $921;
 $14 = $922;
 $923 = $13;
 $924 = $14;
 $10 = $15;
 $11 = $923;
 $12 = $924;
 $925 = $11;
 $926 = HEAP32[$925>>2]|0;
 $927 = $12;
 $928 = HEAP32[$927>>2]|0;
 $929 = ($926>>>0)<($928>>>0);
 $930 = $14;
 $931 = $13;
 $932 = $929 ? $930 : $931;
 $933 = HEAP32[$932>>2]|0;
 $9 = $380;
 $934 = $9;
 $935 = ((($934)) + 8|0);
 $936 = HEAP32[$935>>2]|0;
 $937 = ((($934)) + 4|0);
 $938 = HEAP32[$937>>2]|0;
 $939 = $936;
 $940 = $938;
 $941 = (($939) - ($940))|0;
 $942 = (($941|0) / 4)&-1;
 $943 = HEAP32[$__front_capacity>>2]|0;
 $944 = (($942) - ($943))|0;
 $2 = $380;
 $945 = $2;
 $946 = ((($945)) + 12|0);
 $1 = $946;
 $947 = $1;
 $0 = $947;
 $948 = $0;
 __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEEC2EjjS4_($__buf,$933,$944,$948);
 while(1) {
  $949 = HEAP32[$__nb>>2]|0;
  $950 = ($949>>>0)>(0);
  if (!($950)) {
   break;
  }
  $951 = $__a;
  $7 = $951;
  $8 = 1024;
  $952 = $7;
  $953 = $8;
  $4 = $952;
  $5 = $953;
  $6 = 0;
  $954 = $5;
  $955 = $954<<2;
  $3 = $955;
  $956 = $3;
  __THREW__ = 0;
  $957 = (invoke_ii(179,($956|0))|0);
  $958 = __THREW__; __THREW__ = 0;
  $959 = $958&1;
  if ($959) {
   label = 31;
   break;
  }
  HEAP32[$377>>2] = $957;
  __THREW__ = 0;
  invoke_vii(218,($__buf|0),($377|0));
  $960 = __THREW__; __THREW__ = 0;
  $961 = $960&1;
  if ($961) {
   label = 31;
   break;
  }
  $962 = HEAP32[$__nb>>2]|0;
  $963 = (($962) + -1)|0;
  HEAP32[$__nb>>2] = $963;
 }
 if ((label|0) == 31) {
  $964 = ___cxa_find_matching_catch(0|0)|0;
  $965 = tempRet0;
  $378 = $964;
  $379 = $965;
  $966 = $378;
  (___cxa_begin_catch(($966|0))|0);
  $107 = $__buf;
  $967 = $107;
  $968 = ((($967)) + 4|0);
  $969 = HEAP32[$968>>2]|0;
  $__i = $969;
  while(1) {
   $970 = $__i;
   $108 = $__buf;
   $971 = $108;
   $972 = ((($971)) + 8|0);
   $973 = HEAP32[$972>>2]|0;
   $974 = ($970|0)!=($973|0);
   if (!($974)) {
    break;
   }
   $975 = $__a;
   $976 = $__i;
   $977 = HEAP32[$976>>2]|0;
   $120 = $975;
   $121 = $977;
   $122 = 1024;
   $978 = $120;
   $979 = $121;
   $980 = $122;
   $117 = $978;
   $118 = $979;
   $119 = $980;
   $981 = $118;
   $116 = $981;
   $982 = $116;
   __ZdlPv($982);
   $983 = $__i;
   $984 = ((($983)) + 4|0);
   $__i = $984;
  }
  __THREW__ = 0;
  invoke_v(195);
  $985 = __THREW__; __THREW__ = 0;
  $986 = ___cxa_find_matching_catch()|0;
  $987 = tempRet0;
  $378 = $986;
  $379 = $987;
  __THREW__ = 0;
  invoke_v(196);
  $988 = __THREW__; __THREW__ = 0;
  $989 = $988&1;
  if ($989) {
   $1261 = ___cxa_find_matching_catch(0|0)|0;
   $1262 = tempRet0;
   ___clang_call_terminate($1261);
   // unreachable;
  } else {
   __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEED2Ev($__buf);
   $1259 = $378;
   $1260 = $379;
   ___resumeException($1259|0);
   // unreachable;
  }
 }
 L54: while(1) {
  $990 = HEAP32[$__front_capacity>>2]|0;
  $991 = ($990>>>0)>(0);
  if (!($991)) {
   label = 46;
   break;
  }
  $123 = $380;
  $992 = $123;
  $993 = ((($992)) + 4|0);
  $994 = HEAP32[$993>>2]|0;
  $313 = $__buf;
  $314 = $994;
  $995 = $313;
  $996 = ((($995)) + 8|0);
  $997 = HEAP32[$996>>2]|0;
  $312 = $995;
  $998 = $312;
  $999 = ((($998)) + 12|0);
  $311 = $999;
  $1000 = $311;
  $310 = $1000;
  $1001 = $310;
  $1002 = HEAP32[$1001>>2]|0;
  $1003 = ($997|0)==($1002|0);
  do {
   if ($1003) {
    $1004 = ((($995)) + 4|0);
    $1005 = HEAP32[$1004>>2]|0;
    $1006 = HEAP32[$995>>2]|0;
    $1007 = ($1005>>>0)>($1006>>>0);
    if ($1007) {
     $1008 = ((($995)) + 4|0);
     $1009 = HEAP32[$1008>>2]|0;
     $1010 = HEAP32[$995>>2]|0;
     $1011 = $1009;
     $1012 = $1010;
     $1013 = (($1011) - ($1012))|0;
     $1014 = (($1013|0) / 4)&-1;
     $__d$i = $1014;
     $1015 = $__d$i;
     $1016 = (($1015) + 1)|0;
     $1017 = (($1016|0) / 2)&-1;
     $__d$i = $1017;
     $1018 = ((($995)) + 4|0);
     $1019 = HEAP32[$1018>>2]|0;
     $1020 = ((($995)) + 8|0);
     $1021 = HEAP32[$1020>>2]|0;
     $1022 = ((($995)) + 4|0);
     $1023 = HEAP32[$1022>>2]|0;
     $1024 = $__d$i;
     $1025 = (0 - ($1024))|0;
     $1026 = (($1023) + ($1025<<2)|0);
     $289 = $1019;
     $290 = $1021;
     $291 = $1026;
     $1027 = $289;
     $288 = $1027;
     $1028 = $288;
     $1029 = $290;
     $283 = $1029;
     $1030 = $283;
     $1031 = $291;
     $284 = $1031;
     $1032 = $284;
     $285 = $1028;
     $286 = $1030;
     $287 = $1032;
     $1033 = $286;
     $1034 = $285;
     $1035 = $1033;
     $1036 = $1034;
     $1037 = (($1035) - ($1036))|0;
     $1038 = (($1037|0) / 4)&-1;
     $__n$i$i$i = $1038;
     $1039 = $287;
     $1040 = $285;
     $1041 = $__n$i$i$i;
     $1042 = $1041<<2;
     _memmove(($1039|0),($1040|0),($1042|0))|0;
     $1043 = $287;
     $1044 = $__n$i$i$i;
     $1045 = (($1043) + ($1044<<2)|0);
     $1046 = ((($995)) + 8|0);
     HEAP32[$1046>>2] = $1045;
     $1047 = $__d$i;
     $1048 = ((($995)) + 4|0);
     $1049 = HEAP32[$1048>>2]|0;
     $1050 = (0 - ($1047))|0;
     $1051 = (($1049) + ($1050<<2)|0);
     HEAP32[$1048>>2] = $1051;
     break;
    }
    $282 = $995;
    $1052 = $282;
    $1053 = ((($1052)) + 12|0);
    $281 = $1053;
    $1054 = $281;
    $280 = $1054;
    $1055 = $280;
    $1056 = HEAP32[$1055>>2]|0;
    $1057 = HEAP32[$995>>2]|0;
    $1058 = $1056;
    $1059 = $1057;
    $1060 = (($1058) - ($1059))|0;
    $1061 = (($1060|0) / 4)&-1;
    $1062 = $1061<<1;
    HEAP32[$315>>2] = $1062;
    HEAP32[$316>>2] = 1;
    $251 = $315;
    $252 = $316;
    $1063 = $251;
    $1064 = $252;
    ;HEAP8[$250>>0]=HEAP8[$253>>0]|0;
    $248 = $1063;
    $249 = $1064;
    $1065 = $248;
    $1066 = $249;
    $245 = $250;
    $246 = $1065;
    $247 = $1066;
    $1067 = $246;
    $1068 = HEAP32[$1067>>2]|0;
    $1069 = $247;
    $1070 = HEAP32[$1069>>2]|0;
    $1071 = ($1068>>>0)<($1070>>>0);
    $1072 = $249;
    $1073 = $248;
    $1074 = $1071 ? $1072 : $1073;
    $1075 = HEAP32[$1074>>2]|0;
    $__c$i = $1075;
    $1076 = $__c$i;
    $1077 = $__c$i;
    $1078 = (($1077>>>0) / 4)&-1;
    $240 = $995;
    $1079 = $240;
    $1080 = ((($1079)) + 12|0);
    $239 = $1080;
    $1081 = $239;
    $238 = $1081;
    $1082 = $238;
    $1083 = ((($1082)) + 4|0);
    $1084 = HEAP32[$1083>>2]|0;
    __THREW__ = 0;
    invoke_viiii(362,($__t$i6|0),($1076|0),($1078|0),($1084|0));
    $1085 = __THREW__; __THREW__ = 0;
    $1086 = $1085&1;
    if ($1086) {
     label = 44;
     break L54;
    }
    $1087 = ((($995)) + 4|0);
    $1088 = HEAP32[$1087>>2]|0;
    $241 = $317;
    $242 = $1088;
    $1089 = $241;
    $1090 = $242;
    HEAP32[$1089>>2] = $1090;
    $1091 = ((($995)) + 8|0);
    $1092 = HEAP32[$1091>>2]|0;
    $243 = $320;
    $244 = $1092;
    $1093 = $243;
    $1094 = $244;
    HEAP32[$1093>>2] = $1094;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy9>>2]=HEAP32[$317>>2]|0;
    ;HEAP32[$$byval_copy10>>2]=HEAP32[$320>>2]|0;
    invoke_viii(294,($__t$i6|0),($$byval_copy9|0),($$byval_copy10|0));
    $1095 = __THREW__; __THREW__ = 0;
    $1096 = $1095&1;
    if ($1096) {
     label = 42;
     break L54;
    }
    $257 = $995;
    $258 = $__t$i6;
    $1097 = $257;
    $256 = $1097;
    $1098 = $256;
    $1099 = HEAP32[$1098>>2]|0;
    HEAP32[$__t$i3$i>>2] = $1099;
    $1100 = $258;
    $254 = $1100;
    $1101 = $254;
    $1102 = HEAP32[$1101>>2]|0;
    $1103 = $257;
    HEAP32[$1103>>2] = $1102;
    $255 = $__t$i3$i;
    $1104 = $255;
    $1105 = HEAP32[$1104>>2]|0;
    $1106 = $258;
    HEAP32[$1106>>2] = $1105;
    $1107 = ((($995)) + 4|0);
    $1108 = ((($__t$i6)) + 4|0);
    $262 = $1107;
    $263 = $1108;
    $1109 = $262;
    $261 = $1109;
    $1110 = $261;
    $1111 = HEAP32[$1110>>2]|0;
    HEAP32[$__t$i2$i>>2] = $1111;
    $1112 = $263;
    $259 = $1112;
    $1113 = $259;
    $1114 = HEAP32[$1113>>2]|0;
    $1115 = $262;
    HEAP32[$1115>>2] = $1114;
    $260 = $__t$i2$i;
    $1116 = $260;
    $1117 = HEAP32[$1116>>2]|0;
    $1118 = $263;
    HEAP32[$1118>>2] = $1117;
    $1119 = ((($995)) + 8|0);
    $1120 = ((($__t$i6)) + 8|0);
    $267 = $1119;
    $268 = $1120;
    $1121 = $267;
    $266 = $1121;
    $1122 = $266;
    $1123 = HEAP32[$1122>>2]|0;
    HEAP32[$__t$i1$i>>2] = $1123;
    $1124 = $268;
    $264 = $1124;
    $1125 = $264;
    $1126 = HEAP32[$1125>>2]|0;
    $1127 = $267;
    HEAP32[$1127>>2] = $1126;
    $265 = $__t$i1$i;
    $1128 = $265;
    $1129 = HEAP32[$1128>>2]|0;
    $1130 = $268;
    HEAP32[$1130>>2] = $1129;
    $271 = $995;
    $1131 = $271;
    $1132 = ((($1131)) + 12|0);
    $270 = $1132;
    $1133 = $270;
    $269 = $1133;
    $1134 = $269;
    $274 = $__t$i6;
    $1135 = $274;
    $1136 = ((($1135)) + 12|0);
    $273 = $1136;
    $1137 = $273;
    $272 = $1137;
    $1138 = $272;
    $278 = $1134;
    $279 = $1138;
    $1139 = $278;
    $277 = $1139;
    $1140 = $277;
    $1141 = HEAP32[$1140>>2]|0;
    HEAP32[$__t$i$i>>2] = $1141;
    $1142 = $279;
    $275 = $1142;
    $1143 = $275;
    $1144 = HEAP32[$1143>>2]|0;
    $1145 = $278;
    HEAP32[$1145>>2] = $1144;
    $276 = $__t$i$i;
    $1146 = $276;
    $1147 = HEAP32[$1146>>2]|0;
    $1148 = $279;
    HEAP32[$1148>>2] = $1147;
    __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEED2Ev($__t$i6);
   }
  } while(0);
  $294 = $995;
  $1153 = $294;
  $1154 = ((($1153)) + 12|0);
  $293 = $1154;
  $1155 = $293;
  $292 = $1155;
  $1156 = $292;
  $1157 = ((($1156)) + 4|0);
  $1158 = HEAP32[$1157>>2]|0;
  $1159 = ((($995)) + 8|0);
  $1160 = HEAP32[$1159>>2]|0;
  $295 = $1160;
  $1161 = $295;
  $1162 = $314;
  $306 = $1158;
  $307 = $1161;
  $308 = $1162;
  $1163 = $306;
  $1164 = $307;
  $1165 = $308;
  $305 = $1165;
  $1166 = $305;
  ;HEAP8[$304>>0]=HEAP8[$309>>0]|0;
  $301 = $1163;
  $302 = $1164;
  $303 = $1166;
  $1167 = $301;
  $1168 = $302;
  $1169 = $303;
  $300 = $1169;
  $1170 = $300;
  $297 = $1167;
  $298 = $1168;
  $299 = $1170;
  $1171 = $298;
  $1172 = $299;
  $296 = $1172;
  $1173 = $296;
  $1174 = HEAP32[$1173>>2]|0;
  HEAP32[$1171>>2] = $1174;
  $1175 = ((($995)) + 8|0);
  $1176 = HEAP32[$1175>>2]|0;
  $1177 = ((($1176)) + 4|0);
  HEAP32[$1175>>2] = $1177;
  $327 = $380;
  $1178 = $327;
  $1179 = ((($1178)) + 4|0);
  $1180 = HEAP32[$1179>>2]|0;
  $1181 = ((($1180)) + 4|0);
  $324 = $1178;
  $325 = $1181;
  $1182 = $324;
  $1183 = $325;
  ;HEAP8[$323>>0]=HEAP8[$326>>0]|0;
  $321 = $1182;
  $322 = $1183;
  $1184 = $321;
  $1185 = $322;
  $1186 = ((($1184)) + 4|0);
  HEAP32[$1186>>2] = $1185;
  $1187 = HEAP32[$__front_capacity>>2]|0;
  $1188 = (($1187) + -1)|0;
  HEAP32[$__front_capacity>>2] = $1188;
 }
 L65: do {
  if ((label|0) == 42) {
   $1149 = ___cxa_find_matching_catch()|0;
   $1150 = tempRet0;
   $318 = $1149;
   $319 = $1150;
   __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEED2Ev($__t$i6);
   $1151 = $318;
   $1152 = $319;
   $eh$lpad$body$index2Z2D = $1152;$eh$lpad$body$indexZ2D = $1151;
  }
  else if ((label|0) == 46) {
   $328 = $380;
   $1191 = $328;
   $1192 = ((($1191)) + 8|0);
   $1193 = HEAP32[$1192>>2]|0;
   $__i2 = $1193;
   while(1) {
    $1194 = $__i2;
    $329 = $380;
    $1195 = $329;
    $1196 = ((($1195)) + 4|0);
    $1197 = HEAP32[$1196>>2]|0;
    $1198 = ($1194|0)!=($1197|0);
    if (!($1198)) {
     break;
    }
    $1199 = $__i2;
    $1200 = ((($1199)) + -4|0);
    $__i2 = $1200;
    __THREW__ = 0;
    invoke_vii(363,($__buf|0),($1200|0));
    $1201 = __THREW__; __THREW__ = 0;
    $1202 = $1201&1;
    if ($1202) {
     label = 44;
     break L65;
    }
   }
   $342 = $380;
   $343 = $__buf;
   $1203 = $342;
   $341 = $1203;
   $1204 = $341;
   $1205 = HEAP32[$1204>>2]|0;
   HEAP32[$__t$i5>>2] = $1205;
   $1206 = $343;
   $339 = $1206;
   $1207 = $339;
   $1208 = HEAP32[$1207>>2]|0;
   $1209 = $342;
   HEAP32[$1209>>2] = $1208;
   $340 = $__t$i5;
   $1210 = $340;
   $1211 = HEAP32[$1210>>2]|0;
   $1212 = $343;
   HEAP32[$1212>>2] = $1211;
   $1213 = ((($380)) + 4|0);
   $1214 = ((($__buf)) + 4|0);
   $347 = $1213;
   $348 = $1214;
   $1215 = $347;
   $346 = $1215;
   $1216 = $346;
   $1217 = HEAP32[$1216>>2]|0;
   HEAP32[$__t$i4>>2] = $1217;
   $1218 = $348;
   $344 = $1218;
   $1219 = $344;
   $1220 = HEAP32[$1219>>2]|0;
   $1221 = $347;
   HEAP32[$1221>>2] = $1220;
   $345 = $__t$i4;
   $1222 = $345;
   $1223 = HEAP32[$1222>>2]|0;
   $1224 = $348;
   HEAP32[$1224>>2] = $1223;
   $1225 = ((($380)) + 8|0);
   $1226 = ((($__buf)) + 8|0);
   $352 = $1225;
   $353 = $1226;
   $1227 = $352;
   $351 = $1227;
   $1228 = $351;
   $1229 = HEAP32[$1228>>2]|0;
   HEAP32[$__t$i3>>2] = $1229;
   $1230 = $353;
   $349 = $1230;
   $1231 = $349;
   $1232 = HEAP32[$1231>>2]|0;
   $1233 = $352;
   HEAP32[$1233>>2] = $1232;
   $350 = $__t$i3;
   $1234 = $350;
   $1235 = HEAP32[$1234>>2]|0;
   $1236 = $353;
   HEAP32[$1236>>2] = $1235;
   $356 = $380;
   $1237 = $356;
   $1238 = ((($1237)) + 12|0);
   $355 = $1238;
   $1239 = $355;
   $354 = $1239;
   $1240 = $354;
   $359 = $__buf;
   $1241 = $359;
   $1242 = ((($1241)) + 12|0);
   $358 = $1242;
   $1243 = $358;
   $357 = $1243;
   $1244 = $357;
   $363 = $1240;
   $364 = $1244;
   $1245 = $363;
   $362 = $1245;
   $1246 = $362;
   $1247 = HEAP32[$1246>>2]|0;
   HEAP32[$__t$i>>2] = $1247;
   $1248 = $364;
   $360 = $1248;
   $1249 = $360;
   $1250 = HEAP32[$1249>>2]|0;
   $1251 = $363;
   HEAP32[$1251>>2] = $1250;
   $361 = $__t$i;
   $1252 = $361;
   $1253 = HEAP32[$1252>>2]|0;
   $1254 = $364;
   HEAP32[$1254>>2] = $1253;
   $1255 = $__ds;
   $1256 = ((($380)) + 16|0);
   $1257 = HEAP32[$1256>>2]|0;
   $1258 = (($1257) - ($1255))|0;
   HEAP32[$1256>>2] = $1258;
   __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEED2Ev($__buf);
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 44) {
  $1189 = ___cxa_find_matching_catch()|0;
  $1190 = tempRet0;
  $eh$lpad$body$index2Z2D = $1190;$eh$lpad$body$indexZ2D = $1189;
 }
 $378 = $eh$lpad$body$indexZ2D;
 $379 = $eh$lpad$body$index2Z2D;
 __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEED2Ev($__buf);
 $1259 = $378;
 $1260 = $379;
 ___resumeException($1259|0);
 // unreachable;
}
function __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEE10push_frontERKS1_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0, $__t$i = 0;
 var $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 192|0;
 $$byval_copy = sp + 376|0;
 $8 = sp + 8|0;
 $11 = sp + 396|0;
 $__t$i3 = sp + 104|0;
 $__t$i2 = sp + 60|0;
 $__t$i1 = sp + 152|0;
 $__t$i = sp + 200|0;
 $69 = sp;
 $74 = sp + 397|0;
 $80 = sp + 16|0;
 $81 = sp + 168|0;
 $__t = sp + 336|0;
 $82 = sp + 252|0;
 $85 = sp + 52|0;
 $78 = $this;
 $79 = $__x;
 $86 = $78;
 $87 = ((($86)) + 4|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = HEAP32[$86>>2]|0;
 $90 = ($88|0)==($89|0);
 do {
  if ($90) {
   $91 = ((($86)) + 8|0);
   $92 = HEAP32[$91>>2]|0;
   $77 = $86;
   $93 = $77;
   $94 = ((($93)) + 12|0);
   $76 = $94;
   $95 = $76;
   $75 = $95;
   $96 = $75;
   $97 = HEAP32[$96>>2]|0;
   $98 = ($92>>>0)<($97>>>0);
   if ($98) {
    $56 = $86;
    $99 = $56;
    $100 = ((($99)) + 12|0);
    $55 = $100;
    $101 = $55;
    $54 = $101;
    $102 = $54;
    $103 = HEAP32[$102>>2]|0;
    $104 = ((($86)) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $103;
    $107 = $105;
    $108 = (($106) - ($107))|0;
    $109 = (($108|0) / 4)&-1;
    $__d = $109;
    $110 = $__d;
    $111 = (($110) + 1)|0;
    $112 = (($111|0) / 2)&-1;
    $__d = $112;
    $113 = ((($86)) + 4|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($86)) + 8|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ((($86)) + 8|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = $__d;
    $120 = (($118) + ($119<<2)|0);
    $51 = $114;
    $52 = $116;
    $53 = $120;
    $121 = $51;
    $50 = $121;
    $122 = $50;
    $123 = $52;
    $45 = $123;
    $124 = $45;
    $125 = $53;
    $46 = $125;
    $126 = $46;
    $47 = $122;
    $48 = $124;
    $49 = $126;
    $127 = $48;
    $128 = $47;
    $129 = $127;
    $130 = $128;
    $131 = (($129) - ($130))|0;
    $132 = (($131|0) / 4)&-1;
    $__n$i$i = $132;
    $133 = $__n$i$i;
    $134 = $49;
    $135 = (0 - ($133))|0;
    $136 = (($134) + ($135<<2)|0);
    $49 = $136;
    $137 = $49;
    $138 = $47;
    $139 = $__n$i$i;
    $140 = $139<<2;
    _memmove(($137|0),($138|0),($140|0))|0;
    $141 = $49;
    $142 = ((($86)) + 4|0);
    HEAP32[$142>>2] = $141;
    $143 = $__d;
    $144 = ((($86)) + 8|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (($145) + ($143<<2)|0);
    HEAP32[$144>>2] = $146;
    break;
   }
   $18 = $86;
   $147 = $18;
   $148 = ((($147)) + 12|0);
   $17 = $148;
   $149 = $17;
   $16 = $149;
   $150 = $16;
   $151 = HEAP32[$150>>2]|0;
   $152 = HEAP32[$86>>2]|0;
   $153 = $151;
   $154 = $152;
   $155 = (($153) - ($154))|0;
   $156 = (($155|0) / 4)&-1;
   $157 = $156<<1;
   HEAP32[$80>>2] = $157;
   HEAP32[$81>>2] = 1;
   $9 = $80;
   $10 = $81;
   $158 = $9;
   $159 = $10;
   ;HEAP8[$8>>0]=HEAP8[$11>>0]|0;
   $6 = $158;
   $7 = $159;
   $160 = $6;
   $161 = $7;
   $3 = $8;
   $4 = $160;
   $5 = $161;
   $162 = $4;
   $163 = HEAP32[$162>>2]|0;
   $164 = $5;
   $165 = HEAP32[$164>>2]|0;
   $166 = ($163>>>0)<($165>>>0);
   $167 = $7;
   $168 = $6;
   $169 = $166 ? $167 : $168;
   $170 = HEAP32[$169>>2]|0;
   $__c = $170;
   $171 = $__c;
   $172 = $__c;
   $173 = (($172) + 3)|0;
   $174 = (($173>>>0) / 4)&-1;
   $2 = $86;
   $175 = $2;
   $176 = ((($175)) + 12|0);
   $1 = $176;
   $177 = $1;
   $0 = $177;
   $178 = $0;
   $179 = ((($178)) + 4|0);
   $180 = HEAP32[$179>>2]|0;
   __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEEC2EjjS4_($__t,$171,$174,$180);
   $181 = ((($86)) + 4|0);
   $182 = HEAP32[$181>>2]|0;
   $12 = $82;
   $13 = $182;
   $183 = $12;
   $184 = $13;
   HEAP32[$183>>2] = $184;
   $185 = ((($86)) + 8|0);
   $186 = HEAP32[$185>>2]|0;
   $14 = $85;
   $15 = $186;
   $187 = $14;
   $188 = $15;
   HEAP32[$187>>2] = $188;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$82>>2]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$85>>2]|0;
   invoke_viii(294,($__t|0),($$byval_copy|0),($$byval_copy1|0));
   $189 = __THREW__; __THREW__ = 0;
   $190 = $189&1;
   if ($190) {
    $243 = ___cxa_find_matching_catch()|0;
    $244 = tempRet0;
    $83 = $243;
    $84 = $244;
    __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEED2Ev($__t);
    $245 = $83;
    $246 = $84;
    ___resumeException($245|0);
    // unreachable;
   } else {
    $22 = $86;
    $23 = $__t;
    $191 = $22;
    $21 = $191;
    $192 = $21;
    $193 = HEAP32[$192>>2]|0;
    HEAP32[$__t$i3>>2] = $193;
    $194 = $23;
    $19 = $194;
    $195 = $19;
    $196 = HEAP32[$195>>2]|0;
    $197 = $22;
    HEAP32[$197>>2] = $196;
    $20 = $__t$i3;
    $198 = $20;
    $199 = HEAP32[$198>>2]|0;
    $200 = $23;
    HEAP32[$200>>2] = $199;
    $201 = ((($86)) + 4|0);
    $202 = ((($__t)) + 4|0);
    $27 = $201;
    $28 = $202;
    $203 = $27;
    $26 = $203;
    $204 = $26;
    $205 = HEAP32[$204>>2]|0;
    HEAP32[$__t$i2>>2] = $205;
    $206 = $28;
    $24 = $206;
    $207 = $24;
    $208 = HEAP32[$207>>2]|0;
    $209 = $27;
    HEAP32[$209>>2] = $208;
    $25 = $__t$i2;
    $210 = $25;
    $211 = HEAP32[$210>>2]|0;
    $212 = $28;
    HEAP32[$212>>2] = $211;
    $213 = ((($86)) + 8|0);
    $214 = ((($__t)) + 8|0);
    $32 = $213;
    $33 = $214;
    $215 = $32;
    $31 = $215;
    $216 = $31;
    $217 = HEAP32[$216>>2]|0;
    HEAP32[$__t$i1>>2] = $217;
    $218 = $33;
    $29 = $218;
    $219 = $29;
    $220 = HEAP32[$219>>2]|0;
    $221 = $32;
    HEAP32[$221>>2] = $220;
    $30 = $__t$i1;
    $222 = $30;
    $223 = HEAP32[$222>>2]|0;
    $224 = $33;
    HEAP32[$224>>2] = $223;
    $36 = $86;
    $225 = $36;
    $226 = ((($225)) + 12|0);
    $35 = $226;
    $227 = $35;
    $34 = $227;
    $228 = $34;
    $39 = $__t;
    $229 = $39;
    $230 = ((($229)) + 12|0);
    $38 = $230;
    $231 = $38;
    $37 = $231;
    $232 = $37;
    $43 = $228;
    $44 = $232;
    $233 = $43;
    $42 = $233;
    $234 = $42;
    $235 = HEAP32[$234>>2]|0;
    HEAP32[$__t$i>>2] = $235;
    $236 = $44;
    $40 = $236;
    $237 = $40;
    $238 = HEAP32[$237>>2]|0;
    $239 = $43;
    HEAP32[$239>>2] = $238;
    $41 = $__t$i;
    $240 = $41;
    $241 = HEAP32[$240>>2]|0;
    $242 = $44;
    HEAP32[$242>>2] = $241;
    __ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEED2Ev($__t);
    break;
   }
  }
 } while(0);
 $59 = $86;
 $247 = $59;
 $248 = ((($247)) + 12|0);
 $58 = $248;
 $249 = $58;
 $57 = $249;
 $250 = $57;
 $251 = ((($250)) + 4|0);
 $252 = HEAP32[$251>>2]|0;
 $253 = ((($86)) + 4|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = ((($254)) + -4|0);
 $60 = $255;
 $256 = $60;
 $257 = $79;
 $71 = $252;
 $72 = $256;
 $73 = $257;
 $258 = $71;
 $259 = $72;
 $260 = $73;
 $70 = $260;
 $261 = $70;
 ;HEAP8[$69>>0]=HEAP8[$74>>0]|0;
 $66 = $258;
 $67 = $259;
 $68 = $261;
 $262 = $66;
 $263 = $67;
 $264 = $68;
 $65 = $264;
 $265 = $65;
 $62 = $262;
 $63 = $263;
 $64 = $265;
 $266 = $63;
 $267 = $64;
 $61 = $267;
 $268 = $61;
 $269 = HEAP32[$268>>2]|0;
 HEAP32[$266>>2] = $269;
 $270 = ((($86)) + 4|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = ((($271)) + -4|0);
 HEAP32[$270>>2] = $272;
 STACKTOP = sp;return;
}
function __ZNSt3__14listIN4rhea14simplex_solver9edit_infoENS_9allocatorIS3_EEE9push_backERKS3_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__hold = 0, $__na = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = sp + 8|0;
 $17 = sp + 480|0;
 $42 = sp + 180|0;
 $43 = sp;
 $46 = sp + 196|0;
 $47 = sp + 200|0;
 $48 = sp + 16|0;
 $53 = sp + 464|0;
 $__hold = sp + 224|0;
 $104 = sp + 448|0;
 $102 = $this;
 $103 = $__x;
 $107 = $102;
 $101 = $107;
 $108 = $101;
 $109 = ((($108)) + 8|0);
 $100 = $109;
 $110 = $100;
 $99 = $110;
 $111 = $99;
 $__na = $111;
 $112 = $__na;
 $79 = $112;
 $80 = 1;
 $113 = $79;
 $114 = $80;
 $76 = $113;
 $77 = $114;
 $78 = 0;
 $115 = $77;
 $116 = ($115*56)|0;
 $75 = $116;
 $117 = $75;
 $118 = (__Znwj($117)|0);
 $119 = $__na;
 $72 = $104;
 $73 = $119;
 $74 = 1;
 $120 = $72;
 $121 = $73;
 HEAP32[$120>>2] = $121;
 $122 = ((($120)) + 4|0);
 $123 = $74;
 HEAP32[$122>>2] = $123;
 $50 = $__hold;
 $51 = $118;
 $52 = $104;
 $124 = $50;
 $125 = $51;
 $126 = $52;
 $49 = $126;
 $127 = $49;
 ;HEAP32[$53>>2]=HEAP32[$127>>2]|0;HEAP32[$53+4>>2]=HEAP32[$127+4>>2]|0;
 ;HEAP8[$48>>0]=HEAP8[$53>>0]|0;HEAP8[$48+1>>0]=HEAP8[$53+1>>0]|0;HEAP8[$48+2>>0]=HEAP8[$53+2>>0]|0;HEAP8[$48+3>>0]=HEAP8[$53+3>>0]|0;HEAP8[$48+4>>0]=HEAP8[$53+4>>0]|0;HEAP8[$48+5>>0]=HEAP8[$53+5>>0]|0;HEAP8[$48+6>>0]=HEAP8[$53+6>>0]|0;HEAP8[$48+7>>0]=HEAP8[$53+7>>0]|0;
 $45 = $124;
 HEAP32[$46>>2] = $125;
 $128 = $45;
 $44 = $46;
 $129 = $44;
 $130 = HEAP32[$129>>2]|0;
 $38 = $48;
 $131 = $38;
 ;HEAP32[$47>>2]=HEAP32[$131>>2]|0;HEAP32[$47+4>>2]=HEAP32[$131+4>>2]|0;
 ;HEAP8[$43>>0]=HEAP8[$47>>0]|0;HEAP8[$43+1>>0]=HEAP8[$47+1>>0]|0;HEAP8[$43+2>>0]=HEAP8[$47+2>>0]|0;HEAP8[$43+3>>0]=HEAP8[$47+3>>0]|0;HEAP8[$43+4>>0]=HEAP8[$47+4>>0]|0;HEAP8[$43+5>>0]=HEAP8[$47+5>>0]|0;HEAP8[$43+6>>0]=HEAP8[$47+6>>0]|0;HEAP8[$43+7>>0]=HEAP8[$47+7>>0]|0;
 $41 = $128;
 HEAP32[$42>>2] = $130;
 $132 = $41;
 $40 = $42;
 $133 = $40;
 $134 = HEAP32[$133>>2]|0;
 HEAP32[$132>>2] = $134;
 $135 = ((($132)) + 4|0);
 $39 = $43;
 $136 = $39;
 ;HEAP32[$135>>2]=HEAP32[$136>>2]|0;HEAP32[$135+4>>2]=HEAP32[$136+4>>2]|0;
 $137 = $__na;
 $3 = $__hold;
 $138 = $3;
 $2 = $138;
 $139 = $2;
 $1 = $139;
 $140 = $1;
 $141 = HEAP32[$140>>2]|0;
 $142 = ((($141)) + 8|0);
 $0 = $142;
 $143 = $0;
 $144 = $103;
 $14 = $137;
 $15 = $143;
 $16 = $144;
 $145 = $14;
 $146 = $15;
 $147 = $16;
 $13 = $147;
 $148 = $13;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 $9 = $145;
 $10 = $146;
 $11 = $148;
 $149 = $9;
 $150 = $10;
 $151 = $11;
 $8 = $151;
 $152 = $8;
 $5 = $149;
 $6 = $150;
 $7 = $152;
 $153 = $6;
 $154 = $7;
 $4 = $154;
 $155 = $4;
 __THREW__ = 0;
 invoke_vii(364,($153|0),($155|0));
 $156 = __THREW__; __THREW__ = 0;
 $157 = $156&1;
 if ($157) {
  $215 = ___cxa_find_matching_catch()|0;
  $216 = tempRet0;
  $105 = $215;
  $106 = $216;
  $98 = $__hold;
  $217 = $98;
  $96 = $217;
  $97 = 0;
  $218 = $96;
  $95 = $218;
  $219 = $95;
  $94 = $219;
  $220 = $94;
  $221 = HEAP32[$220>>2]|0;
  $__tmp$i$i = $221;
  $222 = $97;
  $84 = $218;
  $223 = $84;
  $83 = $223;
  $224 = $83;
  HEAP32[$224>>2] = $222;
  $225 = $__tmp$i$i;
  $226 = ($225|0)!=(0|0);
  if (!($226)) {
   $241 = $105;
   $242 = $106;
   ___resumeException($241|0);
   // unreachable;
  }
  $82 = $218;
  $227 = $82;
  $81 = $227;
  $228 = $81;
  $229 = ((($228)) + 4|0);
  $230 = $__tmp$i$i;
  $92 = $229;
  $93 = $230;
  $231 = $92;
  $232 = HEAP32[$231>>2]|0;
  $233 = $93;
  $234 = ((($231)) + 4|0);
  $235 = HEAP32[$234>>2]|0;
  $89 = $232;
  $90 = $233;
  $91 = $235;
  $236 = $89;
  $237 = $90;
  $238 = $91;
  $86 = $236;
  $87 = $237;
  $88 = $238;
  $239 = $87;
  $85 = $239;
  $240 = $85;
  __ZdlPv($240);
  $241 = $105;
  $242 = $106;
  ___resumeException($241|0);
  // unreachable;
 } else {
  $20 = $__hold;
  $158 = $20;
  $19 = $158;
  $159 = $19;
  $18 = $159;
  $160 = $18;
  $161 = HEAP32[$160>>2]|0;
  $23 = $__hold;
  $162 = $23;
  $22 = $162;
  $163 = $22;
  $21 = $163;
  $164 = $21;
  $165 = HEAP32[$164>>2]|0;
  $27 = $107;
  $28 = $161;
  $29 = $165;
  $166 = $27;
  $26 = $166;
  $167 = $26;
  $25 = $167;
  $168 = $25;
  $24 = $168;
  $169 = $24;
  $170 = $29;
  $171 = ((($170)) + 4|0);
  HEAP32[$171>>2] = $169;
  $172 = HEAP32[$166>>2]|0;
  $173 = $28;
  HEAP32[$173>>2] = $172;
  $174 = $28;
  $175 = $28;
  $176 = HEAP32[$175>>2]|0;
  $177 = ((($176)) + 4|0);
  HEAP32[$177>>2] = $174;
  $178 = $29;
  HEAP32[$166>>2] = $178;
  $32 = $107;
  $179 = $32;
  $180 = ((($179)) + 8|0);
  $31 = $180;
  $181 = $31;
  $30 = $181;
  $182 = $30;
  $183 = HEAP32[$182>>2]|0;
  $184 = (($183) + 1)|0;
  HEAP32[$182>>2] = $184;
  $37 = $__hold;
  $185 = $37;
  $36 = $185;
  $186 = $36;
  $35 = $186;
  $187 = $35;
  $188 = HEAP32[$187>>2]|0;
  $__t$i = $188;
  $34 = $185;
  $189 = $34;
  $33 = $189;
  $190 = $33;
  HEAP32[$190>>2] = 0;
  $71 = $__hold;
  $191 = $71;
  $69 = $191;
  $70 = 0;
  $192 = $69;
  $68 = $192;
  $193 = $68;
  $67 = $193;
  $194 = $67;
  $195 = HEAP32[$194>>2]|0;
  $__tmp$i$i1 = $195;
  $196 = $70;
  $57 = $192;
  $197 = $57;
  $56 = $197;
  $198 = $56;
  HEAP32[$198>>2] = $196;
  $199 = $__tmp$i$i1;
  $200 = ($199|0)!=(0|0);
  if (!($200)) {
   STACKTOP = sp;return;
  }
  $55 = $192;
  $201 = $55;
  $54 = $201;
  $202 = $54;
  $203 = ((($202)) + 4|0);
  $204 = $__tmp$i$i1;
  $65 = $203;
  $66 = $204;
  $205 = $65;
  $206 = HEAP32[$205>>2]|0;
  $207 = $66;
  $208 = ((($205)) + 4|0);
  $209 = HEAP32[$208>>2]|0;
  $62 = $206;
  $63 = $207;
  $64 = $209;
  $210 = $62;
  $211 = $63;
  $212 = $64;
  $59 = $210;
  $60 = $211;
  $61 = $212;
  $213 = $60;
  $58 = $213;
  $214 = $58;
  __ZdlPv($214);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__list_impIN4rhea14simplex_solver9edit_infoENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__110__list_impIN4rhea14simplex_solver9edit_infoENS_9allocatorIS3_EEE5clearEv($1);
 STACKTOP = sp;return;
}
function __ZN4rhea14simplex_solver9edit_infoC2ERKS1_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $5 = $1;
 $6 = $2;
 __ZN4rhea8variableC2ERKS0_($5,$6);
 $7 = ((($5)) + 8|0);
 $8 = $2;
 $9 = ((($8)) + 8|0);
 __ZN4rhea10constraintC2ERKS0_($7,$9);
 $10 = ((($5)) + 20|0);
 $11 = $2;
 $12 = ((($11)) + 20|0);
 __THREW__ = 0;
 invoke_vii(339,($10|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $24 = ___cxa_find_matching_catch()|0;
  $25 = tempRet0;
  $3 = $24;
  $4 = $25;
  __ZN4rhea10constraintD2Ev($7);
  __ZN4rhea8variableD2Ev($5);
  $28 = $3;
  $29 = $4;
  ___resumeException($28|0);
  // unreachable;
 }
 $15 = ((($5)) + 28|0);
 $16 = $2;
 $17 = ((($16)) + 28|0);
 __THREW__ = 0;
 invoke_vii(339,($15|0),($17|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  $20 = ((($5)) + 40|0);
  $21 = $2;
  $22 = ((($21)) + 40|0);
  $23 = +HEAPF64[$22>>3];
  HEAPF64[$20>>3] = $23;
  STACKTOP = sp;return;
 }
 $26 = ___cxa_find_matching_catch()|0;
 $27 = tempRet0;
 $3 = $26;
 $4 = $27;
 __ZN4rhea8variableD2Ev($10);
 __ZN4rhea10constraintD2Ev($7);
 __ZN4rhea8variableD2Ev($5);
 $28 = $3;
 $29 = $4;
 ___resumeException($28|0);
 // unreachable;
}
function __ZN4rhea10constraintC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $0;
 $5 = $3;
 $6 = 2352;
 HEAP32[$5>>2] = $6;
 $7 = ((($5)) + 4|0);
 $8 = $4;
 $9 = ((($8)) + 4|0);
 $1 = $7;
 $2 = $9;
 $10 = $1;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($10)) + 4|0);
 $14 = $2;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$13>>2] = $16;
 $17 = ((($10)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = ((($10)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 __ZNSt3__119__shared_weak_count12__add_sharedEv($21);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEEC2ERKSG_($this,$__u) {
 $this = $this|0;
 $__u = $__u|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 40|0;
 $3 = sp + 376|0;
 $8 = sp + 100|0;
 $9 = sp + 8|0;
 $12 = sp + 80|0;
 $13 = sp + 384|0;
 $14 = sp + 24|0;
 $18 = sp + 378|0;
 $35 = sp + 168|0;
 $36 = sp;
 $39 = sp + 348|0;
 $40 = sp + 356|0;
 $41 = sp + 48|0;
 $52 = sp + 240|0;
 $57 = sp + 16|0;
 $59 = sp + 377|0;
 $63 = sp + 32|0;
 $66 = sp + 380|0;
 $67 = sp + 72|0;
 $75 = sp + 336|0;
 $76 = sp + 64|0;
 $79 = sp + 288|0;
 $80 = sp + 383|0;
 $81 = sp + 56|0;
 $90 = sp + 176|0;
 $91 = sp + 379|0;
 $92 = sp + 382|0;
 $93 = sp + 381|0;
 $88 = $this;
 $89 = $__u;
 $94 = $88;
 $95 = $89;
 $87 = $95;
 $96 = $87;
 $86 = $96;
 $97 = $86;
 $85 = $97;
 $98 = $85;
 $99 = ((($98)) + 4|0);
 $84 = $99;
 $100 = $84;
 $83 = $100;
 $101 = $83;
 $82 = $101;
 $102 = $82;
 $2 = $102;
 $103 = $2;
 ;HEAP8[$1>>0]=HEAP8[$3>>0]|0;
 $0 = $103;
 $15 = $90;
 $16 = $91;
 $17 = 0;
 $104 = $15;
 $105 = $17;
 ;HEAP8[$14>>0]=HEAP8[$18>>0]|0;
 $11 = $104;
 HEAP32[$12>>2] = $105;
 $106 = $11;
 $10 = $12;
 $107 = $10;
 $108 = HEAP32[$107>>2]|0;
 $4 = $14;
 ;HEAP8[$9>>0]=HEAP8[$13>>0]|0;
 $7 = $106;
 HEAP32[$8>>2] = $108;
 $109 = $7;
 $6 = $9;
 $5 = $8;
 $110 = $5;
 $111 = HEAP32[$110>>2]|0;
 HEAP32[$109>>2] = $111;
 $49 = $94;
 $50 = 0;
 $51 = $90;
 $112 = $49;
 $113 = $51;
 $48 = $113;
 $114 = $48;
 $46 = $52;
 $47 = $114;
 $115 = $46;
 $116 = $47;
 $45 = $116;
 $117 = $45;
 ;HEAP32[$115>>2]=HEAP32[$117>>2]|0;
 $118 = $47;
 $44 = $118;
 $119 = $44;
 $43 = $119;
 $120 = $43;
 $42 = $120;
 $121 = $42;
 HEAP32[$121>>2] = 0;
 ;HEAP8[$41>>0]=HEAP8[$52>>0]|0;HEAP8[$41+1>>0]=HEAP8[$52+1>>0]|0;HEAP8[$41+2>>0]=HEAP8[$52+2>>0]|0;HEAP8[$41+3>>0]=HEAP8[$52+3>>0]|0;
 $38 = $112;
 HEAP32[$39>>2] = 0;
 $122 = $38;
 $37 = $39;
 $123 = $37;
 $124 = HEAP32[$123>>2]|0;
 $19 = $41;
 $125 = $19;
 $24 = $40;
 $25 = $125;
 $126 = $24;
 $127 = $25;
 $23 = $127;
 $128 = $23;
 ;HEAP32[$126>>2]=HEAP32[$128>>2]|0;
 $129 = $25;
 $22 = $129;
 $130 = $22;
 $21 = $130;
 $131 = $21;
 $20 = $131;
 $132 = $20;
 HEAP32[$132>>2] = 0;
 ;HEAP8[$36>>0]=HEAP8[$40>>0]|0;HEAP8[$36+1>>0]=HEAP8[$40+1>>0]|0;HEAP8[$36+2>>0]=HEAP8[$40+2>>0]|0;HEAP8[$36+3>>0]=HEAP8[$40+3>>0]|0;
 $34 = $122;
 HEAP32[$35>>2] = $124;
 $133 = $34;
 $33 = $35;
 $134 = $33;
 $135 = HEAP32[$134>>2]|0;
 HEAP32[$133>>2] = $135;
 $136 = ((($133)) + 4|0);
 $26 = $36;
 $137 = $26;
 $31 = $136;
 $32 = $137;
 $138 = $31;
 $139 = $32;
 $30 = $139;
 $140 = $30;
 ;HEAP32[$138>>2]=HEAP32[$140>>2]|0;
 $141 = $32;
 $29 = $141;
 $142 = $29;
 $28 = $142;
 $143 = $28;
 $27 = $143;
 $144 = $27;
 HEAP32[$144>>2] = 0;
 $145 = ((($94)) + 8|0);
 $146 = $89;
 $55 = $146;
 $147 = $55;
 $148 = ((($147)) + 8|0);
 $54 = $148;
 $149 = $54;
 $53 = $149;
 $150 = $53;
 $58 = $150;
 $151 = $58;
 ;HEAP8[$57>>0]=HEAP8[$59>>0]|0;
 $56 = $151;
 ;HEAP8[$67>>0]=HEAP8[$92>>0]|0;
 $65 = $145;
 $152 = $65;
 $64 = $67;
 ;HEAP8[$63>>0]=HEAP8[$66>>0]|0;
 $62 = $152;
 $153 = $62;
 $61 = $63;
 $60 = $153;
 $154 = $60;
 HEAP32[$154>>2] = 0;
 $155 = ((($94)) + 12|0);
 $156 = $89;
 $70 = $156;
 $157 = $70;
 $158 = ((($157)) + 12|0);
 $69 = $158;
 $159 = $69;
 $68 = $159;
 ;HEAP8[$81>>0]=HEAP8[$93>>0]|0;
 $78 = $155;
 HEAP32[$79>>2] = 0;
 $160 = $78;
 $77 = $79;
 $161 = $77;
 $162 = HEAP32[$161>>2]|0;
 $71 = $81;
 ;HEAP8[$76>>0]=HEAP8[$80>>0]|0;
 $74 = $160;
 HEAP32[$75>>2] = $162;
 $163 = $74;
 $73 = $76;
 $72 = $75;
 $164 = $72;
 $165 = HEAP32[$164>>2]|0;
 HEAP32[$163>>2] = $165;
 $166 = ((($94)) + 16|0);
 $167 = $89;
 $168 = ((($167)) + 16|0);
 ;HEAP32[$166>>2]=HEAP32[$168>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE15__insert_uniqueIRKNS_4pairIKS3_S4_EEEENSI_INS_15__hash_iteratorIPNS_11__hash_nodeIS5_PvEEEEbEEOT_($agg$result,$this,$__x) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__t$i = 0;
 var $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp;
 $17 = sp + 284|0;
 $48 = sp + 8|0;
 $51 = sp + 285|0;
 $__h = sp + 120|0;
 $61 = $this;
 $62 = $__x;
 $66 = $61;
 $67 = $62;
 $60 = $67;
 $68 = $60;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE16__construct_nodeIJRKNS_4pairIKS3_S4_EEEEENS_10unique_ptrINS_11__hash_nodeIS5_PvEENS_22__hash_node_destructorINSE_ISQ_EEEEEEDpOT_($__h,$66,$68);
 $33 = $__h;
 $69 = $33;
 $32 = $69;
 $70 = $32;
 $31 = $70;
 $71 = $31;
 $72 = HEAP32[$71>>2]|0;
 __THREW__ = 0;
 invoke_viii(220,($agg$result|0),($66|0),($72|0));
 $73 = __THREW__; __THREW__ = 0;
 $74 = $73&1;
 if ($74) {
  $84 = ___cxa_find_matching_catch()|0;
  $85 = tempRet0;
  $63 = $84;
  $64 = $85;
  $25 = $__h;
  $86 = $25;
  $23 = $86;
  $24 = 0;
  $87 = $23;
  $22 = $87;
  $88 = $22;
  $21 = $88;
  $89 = $21;
  $90 = HEAP32[$89>>2]|0;
  $__tmp$i$i1 = $90;
  $91 = $24;
  $3 = $87;
  $92 = $3;
  $2 = $92;
  $93 = $2;
  HEAP32[$93>>2] = $91;
  $94 = $__tmp$i$i1;
  $95 = ($94|0)!=(0|0);
  if (!($95)) {
   $156 = $63;
   $157 = $64;
   ___resumeException($156|0);
   // unreachable;
  }
  $1 = $87;
  $96 = $1;
  $0 = $96;
  $97 = $0;
  $98 = ((($97)) + 4|0);
  $99 = $__tmp$i$i1;
  $19 = $98;
  $20 = $99;
  $100 = $19;
  $101 = ((($100)) + 4|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&1;
  if ($103) {
   $104 = HEAP32[$100>>2]|0;
   $105 = $20;
   $106 = ((($105)) + 8|0);
   $18 = $106;
   $107 = $18;
   $15 = $104;
   $16 = $107;
   $108 = $15;
   $109 = $16;
   ;HEAP8[$14>>0]=HEAP8[$17>>0]|0;
   $12 = $108;
   $13 = $109;
   $110 = $13;
   $11 = $110;
   $111 = $11;
   __ZNSt3__14pairIKN4rhea8variableENS1_10constraintEED2Ev($111);
  }
  $112 = $20;
  $113 = ($112|0)!=(0|0);
  if (!($113)) {
   $156 = $63;
   $157 = $64;
   ___resumeException($156|0);
   // unreachable;
  }
  $114 = HEAP32[$100>>2]|0;
  $115 = $20;
  $8 = $114;
  $9 = $115;
  $10 = 1;
  $116 = $8;
  $117 = $9;
  $118 = $10;
  $5 = $116;
  $6 = $117;
  $7 = $118;
  $119 = $6;
  $4 = $119;
  $120 = $4;
  __ZdlPv($120);
  $156 = $63;
  $157 = $64;
  ___resumeException($156|0);
  // unreachable;
 }
 $75 = ((($agg$result)) + 4|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&1;
 if ($77) {
  $30 = $__h;
  $78 = $30;
  $29 = $78;
  $79 = $29;
  $28 = $79;
  $80 = $28;
  $81 = HEAP32[$80>>2]|0;
  $__t$i = $81;
  $27 = $78;
  $82 = $27;
  $26 = $82;
  $83 = $26;
  HEAP32[$83>>2] = 0;
 }
 $65 = 1;
 $59 = $__h;
 $121 = $59;
 $57 = $121;
 $58 = 0;
 $122 = $57;
 $56 = $122;
 $123 = $56;
 $55 = $123;
 $124 = $55;
 $125 = HEAP32[$124>>2]|0;
 $__tmp$i$i = $125;
 $126 = $58;
 $37 = $122;
 $127 = $37;
 $36 = $127;
 $128 = $36;
 HEAP32[$128>>2] = $126;
 $129 = $__tmp$i$i;
 $130 = ($129|0)!=(0|0);
 if (!($130)) {
  STACKTOP = sp;return;
 }
 $35 = $122;
 $131 = $35;
 $34 = $131;
 $132 = $34;
 $133 = ((($132)) + 4|0);
 $134 = $__tmp$i$i;
 $53 = $133;
 $54 = $134;
 $135 = $53;
 $136 = ((($135)) + 4|0);
 $137 = HEAP8[$136>>0]|0;
 $138 = $137&1;
 if ($138) {
  $139 = HEAP32[$135>>2]|0;
  $140 = $54;
  $141 = ((($140)) + 8|0);
  $52 = $141;
  $142 = $52;
  $49 = $139;
  $50 = $142;
  $143 = $49;
  $144 = $50;
  ;HEAP8[$48>>0]=HEAP8[$51>>0]|0;
  $46 = $143;
  $47 = $144;
  $145 = $47;
  $45 = $145;
  $146 = $45;
  __ZNSt3__14pairIKN4rhea8variableENS1_10constraintEED2Ev($146);
 }
 $147 = $54;
 $148 = ($147|0)!=(0|0);
 if (!($148)) {
  STACKTOP = sp;return;
 }
 $149 = HEAP32[$135>>2]|0;
 $150 = $54;
 $42 = $149;
 $43 = $150;
 $44 = 1;
 $151 = $42;
 $152 = $43;
 $153 = $44;
 $39 = $151;
 $40 = $152;
 $41 = $153;
 $154 = $40;
 $38 = $154;
 $155 = $38;
 __ZdlPv($155);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__tmp$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $25 = $this;
 $26 = $25;
 $27 = ((($26)) + 8|0);
 $24 = $27;
 $28 = $24;
 $23 = $28;
 $29 = $23;
 $30 = HEAP32[$29>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE12__deallocateEPNS_11__hash_nodeIS5_PvEE($26,$30);
 $22 = $26;
 $31 = $22;
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $19 = $33;
 $34 = $19;
 $35 = HEAP32[$34>>2]|0;
 $__tmp$i$i = $35;
 $3 = $32;
 $36 = $3;
 $2 = $36;
 $37 = $2;
 HEAP32[$37>>2] = 0;
 $38 = $__tmp$i$i;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $1 = $32;
 $40 = $1;
 $0 = $40;
 $41 = $0;
 $42 = ((($41)) + 4|0);
 $43 = $__tmp$i$i;
 $17 = $42;
 $18 = $43;
 $44 = $17;
 $16 = $44;
 $45 = $16;
 $15 = $45;
 $46 = $15;
 $14 = $46;
 $47 = $14;
 $48 = $18;
 $6 = $44;
 $49 = $6;
 $5 = $49;
 $50 = $5;
 $4 = $50;
 $51 = $4;
 $52 = HEAP32[$51>>2]|0;
 $11 = $47;
 $12 = $48;
 $13 = $52;
 $53 = $11;
 $54 = $12;
 $55 = $13;
 $8 = $53;
 $9 = $54;
 $10 = $55;
 $56 = $9;
 $7 = $56;
 $57 = $7;
 __ZdlPv($57);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE12__deallocateEPNS_11__hash_nodeIS5_PvEE($this,$__np) {
 $this = $this|0;
 $__np = $__np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, $__next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $19 = $__np;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 8|0);
 $16 = $22;
 $23 = $16;
 $15 = $23;
 $24 = $15;
 $__na = $24;
 while(1) {
  $25 = $19;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   break;
  }
  $27 = $19;
  $28 = HEAP32[$27>>2]|0;
  $__next = $28;
  $29 = $__na;
  $30 = $19;
  $31 = ((($30)) + 8|0);
  $14 = $31;
  $32 = $14;
  $4 = $29;
  $5 = $32;
  $33 = $4;
  $34 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $33;
  $2 = $34;
  $35 = $2;
  $0 = $35;
  $36 = $0;
  __ZNSt3__14pairIKN4rhea8variableENS1_10constraintEED2Ev($36);
  $37 = $__na;
  $38 = $19;
  $11 = $37;
  $12 = $38;
  $13 = 1;
  $39 = $11;
  $40 = $12;
  $41 = $13;
  $8 = $39;
  $9 = $40;
  $10 = $41;
  $42 = $9;
  $7 = $42;
  $43 = $7;
  __ZdlPv($43);
  $44 = $__next;
  $19 = $44;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKN4rhea8variableENS1_10constraintEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 8|0);
 __ZN4rhea10constraintD2Ev($2);
 __ZN4rhea8variableD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE16__construct_nodeIJRKNS_4pairIKS3_S4_EEEEENS_10unique_ptrINS_11__hash_nodeIS5_PvEENS_22__hash_node_destructorINSE_ISQ_EEEEEEDpOT_($agg$result,$this,$__args) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__args = $__args|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__na = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = sp;
 $18 = sp + 544|0;
 $55 = sp + 8|0;
 $58 = sp + 545|0;
 $71 = sp + 304|0;
 $72 = sp + 16|0;
 $75 = sp + 320|0;
 $76 = sp + 328|0;
 $77 = sp + 32|0;
 $82 = sp + 360|0;
 $106 = sp + 24|0;
 $109 = sp + 547|0;
 $123 = sp + 548|0;
 $124 = sp + 472|0;
 $121 = $this;
 $122 = $__args;
 $128 = $121;
 $120 = $128;
 $129 = $120;
 $130 = ((($129)) + 8|0);
 $119 = $130;
 $131 = $119;
 $118 = $131;
 $132 = $118;
 $__na = $132;
 $$expand_i1_val = 0;
 HEAP8[$123>>0] = $$expand_i1_val;
 $133 = $__na;
 $90 = $133;
 $91 = 1;
 $134 = $90;
 $135 = $91;
 $87 = $134;
 $88 = $135;
 $89 = 0;
 $136 = $88;
 $137 = ($136*28)|0;
 $86 = $137;
 $138 = $86;
 $139 = (__Znwj($138)|0);
 $140 = $__na;
 $83 = $124;
 $84 = $140;
 $85 = 0;
 $141 = $83;
 $142 = $84;
 HEAP32[$141>>2] = $142;
 $143 = ((($141)) + 4|0);
 $144 = $85;
 $145 = $144&1;
 $146 = $145&1;
 HEAP8[$143>>0] = $146;
 $79 = $agg$result;
 $80 = $139;
 $81 = $124;
 $147 = $79;
 $148 = $80;
 $149 = $81;
 $78 = $149;
 $150 = $78;
 ;HEAP32[$82>>2]=HEAP32[$150>>2]|0;HEAP32[$82+4>>2]=HEAP32[$150+4>>2]|0;
 ;HEAP8[$77>>0]=HEAP8[$82>>0]|0;HEAP8[$77+1>>0]=HEAP8[$82+1>>0]|0;HEAP8[$77+2>>0]=HEAP8[$82+2>>0]|0;HEAP8[$77+3>>0]=HEAP8[$82+3>>0]|0;HEAP8[$77+4>>0]=HEAP8[$82+4>>0]|0;HEAP8[$77+5>>0]=HEAP8[$82+5>>0]|0;HEAP8[$77+6>>0]=HEAP8[$82+6>>0]|0;HEAP8[$77+7>>0]=HEAP8[$82+7>>0]|0;
 $74 = $147;
 HEAP32[$75>>2] = $148;
 $151 = $74;
 $73 = $75;
 $152 = $73;
 $153 = HEAP32[$152>>2]|0;
 $67 = $77;
 $154 = $67;
 ;HEAP32[$76>>2]=HEAP32[$154>>2]|0;HEAP32[$76+4>>2]=HEAP32[$154+4>>2]|0;
 ;HEAP8[$72>>0]=HEAP8[$76>>0]|0;HEAP8[$72+1>>0]=HEAP8[$76+1>>0]|0;HEAP8[$72+2>>0]=HEAP8[$76+2>>0]|0;HEAP8[$72+3>>0]=HEAP8[$76+3>>0]|0;HEAP8[$72+4>>0]=HEAP8[$76+4>>0]|0;HEAP8[$72+5>>0]=HEAP8[$76+5>>0]|0;HEAP8[$72+6>>0]=HEAP8[$76+6>>0]|0;HEAP8[$72+7>>0]=HEAP8[$76+7>>0]|0;
 $70 = $151;
 HEAP32[$71>>2] = $153;
 $155 = $70;
 $69 = $71;
 $156 = $69;
 $157 = HEAP32[$156>>2]|0;
 HEAP32[$155>>2] = $157;
 $158 = ((($155)) + 4|0);
 $68 = $72;
 $159 = $68;
 ;HEAP32[$158>>2]=HEAP32[$159>>2]|0;HEAP32[$158+4>>2]=HEAP32[$159+4>>2]|0;
 $160 = $__na;
 $40 = $agg$result;
 $161 = $40;
 $39 = $161;
 $162 = $39;
 $38 = $162;
 $163 = $38;
 $164 = HEAP32[$163>>2]|0;
 $165 = ((($164)) + 8|0);
 $37 = $165;
 $166 = $37;
 $167 = $122;
 $28 = $167;
 $168 = $28;
 $15 = $160;
 $16 = $166;
 $17 = $168;
 $169 = $15;
 $170 = $16;
 $171 = $17;
 $14 = $171;
 $172 = $14;
 ;HEAP8[$13>>0]=HEAP8[$18>>0]|0;
 $10 = $169;
 $11 = $170;
 $12 = $172;
 $173 = $10;
 $174 = $11;
 $175 = $12;
 $9 = $175;
 $176 = $9;
 $6 = $173;
 $7 = $174;
 $8 = $176;
 $177 = $7;
 $178 = $8;
 $5 = $178;
 $179 = $5;
 $3 = $177;
 $4 = $179;
 $180 = $3;
 $181 = $4;
 $2 = $181;
 $182 = $2;
 $0 = $180;
 $1 = $182;
 $183 = $0;
 $184 = $1;
 __ZN4rhea8variableC2ERKS0_($183,$184);
 $185 = ((($183)) + 8|0);
 $186 = $1;
 $187 = ((($186)) + 8|0);
 __ZN4rhea10constraintC2ERKS0_($185,$187);
 $21 = $agg$result;
 $188 = $21;
 $20 = $188;
 $189 = $20;
 $19 = $189;
 $190 = $19;
 $191 = ((($190)) + 4|0);
 $192 = ((($191)) + 4|0);
 HEAP8[$192>>0] = 1;
 $24 = $128;
 $193 = $24;
 $194 = ((($193)) + 12|0);
 $23 = $194;
 $195 = $23;
 $22 = $195;
 $196 = $22;
 $27 = $agg$result;
 $197 = $27;
 $26 = $197;
 $198 = $26;
 $25 = $198;
 $199 = $25;
 $200 = HEAP32[$199>>2]|0;
 $201 = ((($200)) + 8|0);
 $29 = $196;
 $30 = $201;
 $202 = $29;
 $203 = $30;
 __THREW__ = 0;
 $204 = (invoke_iii(365,($202|0),($203|0))|0);
 $205 = __THREW__; __THREW__ = 0;
 $206 = $205&1;
 if ($206) {
  $217 = ___cxa_find_matching_catch()|0;
  $218 = tempRet0;
  $125 = $217;
  $126 = $218;
  $66 = $agg$result;
  $219 = $66;
  $64 = $219;
  $65 = 0;
  $220 = $64;
  $63 = $220;
  $221 = $63;
  $62 = $221;
  $222 = $62;
  $223 = HEAP32[$222>>2]|0;
  $__tmp$i$i1 = $223;
  $224 = $65;
  $44 = $220;
  $225 = $44;
  $43 = $225;
  $226 = $43;
  HEAP32[$226>>2] = $224;
  $227 = $__tmp$i$i1;
  $228 = ($227|0)!=(0|0);
  if (!($228)) {
   $289 = $125;
   $290 = $126;
   ___resumeException($289|0);
   // unreachable;
  }
  $42 = $220;
  $229 = $42;
  $41 = $229;
  $230 = $41;
  $231 = ((($230)) + 4|0);
  $232 = $__tmp$i$i1;
  $60 = $231;
  $61 = $232;
  $233 = $60;
  $234 = ((($233)) + 4|0);
  $235 = HEAP8[$234>>0]|0;
  $236 = $235&1;
  if ($236) {
   $237 = HEAP32[$233>>2]|0;
   $238 = $61;
   $239 = ((($238)) + 8|0);
   $59 = $239;
   $240 = $59;
   $56 = $237;
   $57 = $240;
   $241 = $56;
   $242 = $57;
   ;HEAP8[$55>>0]=HEAP8[$58>>0]|0;
   $53 = $241;
   $54 = $242;
   $243 = $54;
   $52 = $243;
   $244 = $52;
   __ZNSt3__14pairIKN4rhea8variableENS1_10constraintEED2Ev($244);
  }
  $245 = $61;
  $246 = ($245|0)!=(0|0);
  if (!($246)) {
   $289 = $125;
   $290 = $126;
   ___resumeException($289|0);
   // unreachable;
  }
  $247 = HEAP32[$233>>2]|0;
  $248 = $61;
  $49 = $247;
  $50 = $248;
  $51 = 1;
  $249 = $49;
  $250 = $50;
  $251 = $51;
  $46 = $249;
  $47 = $250;
  $48 = $251;
  $252 = $47;
  $45 = $252;
  $253 = $45;
  __ZdlPv($253);
  $289 = $125;
  $290 = $126;
  ___resumeException($289|0);
  // unreachable;
 }
 $33 = $agg$result;
 $207 = $33;
 $32 = $207;
 $208 = $32;
 $31 = $208;
 $209 = $31;
 $210 = HEAP32[$209>>2]|0;
 $211 = ((($210)) + 4|0);
 HEAP32[$211>>2] = $204;
 $36 = $agg$result;
 $212 = $36;
 $35 = $212;
 $213 = $35;
 $34 = $213;
 $214 = $34;
 $215 = HEAP32[$214>>2]|0;
 HEAP32[$215>>2] = 0;
 $$expand_i1_val2 = 1;
 HEAP8[$123>>0] = $$expand_i1_val2;
 $127 = 1;
 $$pre_trunc = HEAP8[$123>>0]|0;
 $216 = $$pre_trunc&1;
 if ($216) {
  STACKTOP = sp;return;
 }
 $117 = $agg$result;
 $254 = $117;
 $115 = $254;
 $116 = 0;
 $255 = $115;
 $114 = $255;
 $256 = $114;
 $113 = $256;
 $257 = $113;
 $258 = HEAP32[$257>>2]|0;
 $__tmp$i$i = $258;
 $259 = $116;
 $95 = $255;
 $260 = $95;
 $94 = $260;
 $261 = $94;
 HEAP32[$261>>2] = $259;
 $262 = $__tmp$i$i;
 $263 = ($262|0)!=(0|0);
 if (!($263)) {
  STACKTOP = sp;return;
 }
 $93 = $255;
 $264 = $93;
 $92 = $264;
 $265 = $92;
 $266 = ((($265)) + 4|0);
 $267 = $__tmp$i$i;
 $111 = $266;
 $112 = $267;
 $268 = $111;
 $269 = ((($268)) + 4|0);
 $270 = HEAP8[$269>>0]|0;
 $271 = $270&1;
 if ($271) {
  $272 = HEAP32[$268>>2]|0;
  $273 = $112;
  $274 = ((($273)) + 8|0);
  $110 = $274;
  $275 = $110;
  $107 = $272;
  $108 = $275;
  $276 = $107;
  $277 = $108;
  ;HEAP8[$106>>0]=HEAP8[$109>>0]|0;
  $104 = $276;
  $105 = $277;
  $278 = $105;
  $103 = $278;
  $279 = $103;
  __ZNSt3__14pairIKN4rhea8variableENS1_10constraintEED2Ev($279);
 }
 $280 = $112;
 $281 = ($280|0)!=(0|0);
 if (!($281)) {
  STACKTOP = sp;return;
 }
 $282 = HEAP32[$268>>2]|0;
 $283 = $112;
 $100 = $282;
 $101 = $283;
 $102 = 1;
 $284 = $100;
 $285 = $101;
 $286 = $102;
 $97 = $284;
 $98 = $285;
 $99 = $286;
 $287 = $98;
 $96 = $287;
 $288 = $96;
 __ZdlPv($288);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS2_8variableEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEEC2ERKSG_($this,$__u) {
 $this = $this|0;
 $__u = $__u|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 40|0;
 $3 = sp + 376|0;
 $8 = sp + 100|0;
 $9 = sp + 8|0;
 $12 = sp + 80|0;
 $13 = sp + 384|0;
 $14 = sp + 24|0;
 $18 = sp + 378|0;
 $35 = sp + 168|0;
 $36 = sp;
 $39 = sp + 348|0;
 $40 = sp + 356|0;
 $41 = sp + 48|0;
 $52 = sp + 240|0;
 $57 = sp + 16|0;
 $59 = sp + 377|0;
 $63 = sp + 32|0;
 $66 = sp + 380|0;
 $67 = sp + 72|0;
 $75 = sp + 336|0;
 $76 = sp + 64|0;
 $79 = sp + 288|0;
 $80 = sp + 383|0;
 $81 = sp + 56|0;
 $90 = sp + 176|0;
 $91 = sp + 379|0;
 $92 = sp + 382|0;
 $93 = sp + 381|0;
 $88 = $this;
 $89 = $__u;
 $94 = $88;
 $95 = $89;
 $87 = $95;
 $96 = $87;
 $86 = $96;
 $97 = $86;
 $85 = $97;
 $98 = $85;
 $99 = ((($98)) + 4|0);
 $84 = $99;
 $100 = $84;
 $83 = $100;
 $101 = $83;
 $82 = $101;
 $102 = $82;
 $2 = $102;
 $103 = $2;
 ;HEAP8[$1>>0]=HEAP8[$3>>0]|0;
 $0 = $103;
 $15 = $90;
 $16 = $91;
 $17 = 0;
 $104 = $15;
 $105 = $17;
 ;HEAP8[$14>>0]=HEAP8[$18>>0]|0;
 $11 = $104;
 HEAP32[$12>>2] = $105;
 $106 = $11;
 $10 = $12;
 $107 = $10;
 $108 = HEAP32[$107>>2]|0;
 $4 = $14;
 ;HEAP8[$9>>0]=HEAP8[$13>>0]|0;
 $7 = $106;
 HEAP32[$8>>2] = $108;
 $109 = $7;
 $6 = $9;
 $5 = $8;
 $110 = $5;
 $111 = HEAP32[$110>>2]|0;
 HEAP32[$109>>2] = $111;
 $49 = $94;
 $50 = 0;
 $51 = $90;
 $112 = $49;
 $113 = $51;
 $48 = $113;
 $114 = $48;
 $46 = $52;
 $47 = $114;
 $115 = $46;
 $116 = $47;
 $45 = $116;
 $117 = $45;
 ;HEAP32[$115>>2]=HEAP32[$117>>2]|0;
 $118 = $47;
 $44 = $118;
 $119 = $44;
 $43 = $119;
 $120 = $43;
 $42 = $120;
 $121 = $42;
 HEAP32[$121>>2] = 0;
 ;HEAP8[$41>>0]=HEAP8[$52>>0]|0;HEAP8[$41+1>>0]=HEAP8[$52+1>>0]|0;HEAP8[$41+2>>0]=HEAP8[$52+2>>0]|0;HEAP8[$41+3>>0]=HEAP8[$52+3>>0]|0;
 $38 = $112;
 HEAP32[$39>>2] = 0;
 $122 = $38;
 $37 = $39;
 $123 = $37;
 $124 = HEAP32[$123>>2]|0;
 $19 = $41;
 $125 = $19;
 $24 = $40;
 $25 = $125;
 $126 = $24;
 $127 = $25;
 $23 = $127;
 $128 = $23;
 ;HEAP32[$126>>2]=HEAP32[$128>>2]|0;
 $129 = $25;
 $22 = $129;
 $130 = $22;
 $21 = $130;
 $131 = $21;
 $20 = $131;
 $132 = $20;
 HEAP32[$132>>2] = 0;
 ;HEAP8[$36>>0]=HEAP8[$40>>0]|0;HEAP8[$36+1>>0]=HEAP8[$40+1>>0]|0;HEAP8[$36+2>>0]=HEAP8[$40+2>>0]|0;HEAP8[$36+3>>0]=HEAP8[$40+3>>0]|0;
 $34 = $122;
 HEAP32[$35>>2] = $124;
 $133 = $34;
 $33 = $35;
 $134 = $33;
 $135 = HEAP32[$134>>2]|0;
 HEAP32[$133>>2] = $135;
 $136 = ((($133)) + 4|0);
 $26 = $36;
 $137 = $26;
 $31 = $136;
 $32 = $137;
 $138 = $31;
 $139 = $32;
 $30 = $139;
 $140 = $30;
 ;HEAP32[$138>>2]=HEAP32[$140>>2]|0;
 $141 = $32;
 $29 = $141;
 $142 = $29;
 $28 = $142;
 $143 = $28;
 $27 = $143;
 $144 = $27;
 HEAP32[$144>>2] = 0;
 $145 = ((($94)) + 8|0);
 $146 = $89;
 $55 = $146;
 $147 = $55;
 $148 = ((($147)) + 8|0);
 $54 = $148;
 $149 = $54;
 $53 = $149;
 $150 = $53;
 $58 = $150;
 $151 = $58;
 ;HEAP8[$57>>0]=HEAP8[$59>>0]|0;
 $56 = $151;
 ;HEAP8[$67>>0]=HEAP8[$92>>0]|0;
 $65 = $145;
 $152 = $65;
 $64 = $67;
 ;HEAP8[$63>>0]=HEAP8[$66>>0]|0;
 $62 = $152;
 $153 = $62;
 $61 = $63;
 $60 = $153;
 $154 = $60;
 HEAP32[$154>>2] = 0;
 $155 = ((($94)) + 12|0);
 $156 = $89;
 $70 = $156;
 $157 = $70;
 $158 = ((($157)) + 12|0);
 $69 = $158;
 $159 = $69;
 $68 = $159;
 ;HEAP8[$81>>0]=HEAP8[$93>>0]|0;
 $78 = $155;
 HEAP32[$79>>2] = 0;
 $160 = $78;
 $77 = $79;
 $161 = $77;
 $162 = HEAP32[$161>>2]|0;
 $71 = $81;
 ;HEAP8[$76>>0]=HEAP8[$80>>0]|0;
 $74 = $160;
 HEAP32[$75>>2] = $162;
 $163 = $74;
 $73 = $76;
 $72 = $75;
 $164 = $72;
 $165 = HEAP32[$164>>2]|0;
 HEAP32[$163>>2] = $165;
 $166 = ((($94)) + 16|0);
 $167 = $89;
 $168 = ((($167)) + 16|0);
 ;HEAP32[$166>>2]=HEAP32[$168>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS2_8variableEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE15__insert_uniqueIRKNS_4pairIKS3_S4_EEEENSI_INS_15__hash_iteratorIPNS_11__hash_nodeIS5_PvEEEEbEEOT_($agg$result,$this,$__x) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__t$i = 0;
 var $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp;
 $17 = sp + 284|0;
 $48 = sp + 8|0;
 $51 = sp + 285|0;
 $__h = sp + 120|0;
 $61 = $this;
 $62 = $__x;
 $66 = $61;
 $67 = $62;
 $60 = $67;
 $68 = $60;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS2_8variableEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE16__construct_nodeIJRKNS_4pairIKS3_S4_EEEEENS_10unique_ptrINS_11__hash_nodeIS5_PvEENS_22__hash_node_destructorINSE_ISQ_EEEEEEDpOT_($__h,$66,$68);
 $33 = $__h;
 $69 = $33;
 $32 = $69;
 $70 = $32;
 $31 = $70;
 $71 = $31;
 $72 = HEAP32[$71>>2]|0;
 __THREW__ = 0;
 invoke_viii(219,($agg$result|0),($66|0),($72|0));
 $73 = __THREW__; __THREW__ = 0;
 $74 = $73&1;
 if ($74) {
  $84 = ___cxa_find_matching_catch()|0;
  $85 = tempRet0;
  $63 = $84;
  $64 = $85;
  $25 = $__h;
  $86 = $25;
  $23 = $86;
  $24 = 0;
  $87 = $23;
  $22 = $87;
  $88 = $22;
  $21 = $88;
  $89 = $21;
  $90 = HEAP32[$89>>2]|0;
  $__tmp$i$i1 = $90;
  $91 = $24;
  $3 = $87;
  $92 = $3;
  $2 = $92;
  $93 = $2;
  HEAP32[$93>>2] = $91;
  $94 = $__tmp$i$i1;
  $95 = ($94|0)!=(0|0);
  if (!($95)) {
   $156 = $63;
   $157 = $64;
   ___resumeException($156|0);
   // unreachable;
  }
  $1 = $87;
  $96 = $1;
  $0 = $96;
  $97 = $0;
  $98 = ((($97)) + 4|0);
  $99 = $__tmp$i$i1;
  $19 = $98;
  $20 = $99;
  $100 = $19;
  $101 = ((($100)) + 4|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&1;
  if ($103) {
   $104 = HEAP32[$100>>2]|0;
   $105 = $20;
   $106 = ((($105)) + 8|0);
   $18 = $106;
   $107 = $18;
   $15 = $104;
   $16 = $107;
   $108 = $15;
   $109 = $16;
   ;HEAP8[$14>>0]=HEAP8[$17>>0]|0;
   $12 = $108;
   $13 = $109;
   $110 = $13;
   $11 = $110;
   $111 = $11;
   __ZNSt3__14pairIKN4rhea10constraintENS1_8variableEED2Ev($111);
  }
  $112 = $20;
  $113 = ($112|0)!=(0|0);
  if (!($113)) {
   $156 = $63;
   $157 = $64;
   ___resumeException($156|0);
   // unreachable;
  }
  $114 = HEAP32[$100>>2]|0;
  $115 = $20;
  $8 = $114;
  $9 = $115;
  $10 = 1;
  $116 = $8;
  $117 = $9;
  $118 = $10;
  $5 = $116;
  $6 = $117;
  $7 = $118;
  $119 = $6;
  $4 = $119;
  $120 = $4;
  __ZdlPv($120);
  $156 = $63;
  $157 = $64;
  ___resumeException($156|0);
  // unreachable;
 }
 $75 = ((($agg$result)) + 4|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&1;
 if ($77) {
  $30 = $__h;
  $78 = $30;
  $29 = $78;
  $79 = $29;
  $28 = $79;
  $80 = $28;
  $81 = HEAP32[$80>>2]|0;
  $__t$i = $81;
  $27 = $78;
  $82 = $27;
  $26 = $82;
  $83 = $26;
  HEAP32[$83>>2] = 0;
 }
 $65 = 1;
 $59 = $__h;
 $121 = $59;
 $57 = $121;
 $58 = 0;
 $122 = $57;
 $56 = $122;
 $123 = $56;
 $55 = $123;
 $124 = $55;
 $125 = HEAP32[$124>>2]|0;
 $__tmp$i$i = $125;
 $126 = $58;
 $37 = $122;
 $127 = $37;
 $36 = $127;
 $128 = $36;
 HEAP32[$128>>2] = $126;
 $129 = $__tmp$i$i;
 $130 = ($129|0)!=(0|0);
 if (!($130)) {
  STACKTOP = sp;return;
 }
 $35 = $122;
 $131 = $35;
 $34 = $131;
 $132 = $34;
 $133 = ((($132)) + 4|0);
 $134 = $__tmp$i$i;
 $53 = $133;
 $54 = $134;
 $135 = $53;
 $136 = ((($135)) + 4|0);
 $137 = HEAP8[$136>>0]|0;
 $138 = $137&1;
 if ($138) {
  $139 = HEAP32[$135>>2]|0;
  $140 = $54;
  $141 = ((($140)) + 8|0);
  $52 = $141;
  $142 = $52;
  $49 = $139;
  $50 = $142;
  $143 = $49;
  $144 = $50;
  ;HEAP8[$48>>0]=HEAP8[$51>>0]|0;
  $46 = $143;
  $47 = $144;
  $145 = $47;
  $45 = $145;
  $146 = $45;
  __ZNSt3__14pairIKN4rhea10constraintENS1_8variableEED2Ev($146);
 }
 $147 = $54;
 $148 = ($147|0)!=(0|0);
 if (!($148)) {
  STACKTOP = sp;return;
 }
 $149 = HEAP32[$135>>2]|0;
 $150 = $54;
 $42 = $149;
 $43 = $150;
 $44 = 1;
 $151 = $42;
 $152 = $43;
 $153 = $44;
 $39 = $151;
 $40 = $152;
 $41 = $153;
 $154 = $40;
 $38 = $154;
 $155 = $38;
 __ZdlPv($155);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS2_8variableEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__tmp$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $25 = $this;
 $26 = $25;
 $27 = ((($26)) + 8|0);
 $24 = $27;
 $28 = $24;
 $23 = $28;
 $29 = $23;
 $30 = HEAP32[$29>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS2_8variableEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE12__deallocateEPNS_11__hash_nodeIS5_PvEE($26,$30);
 $22 = $26;
 $31 = $22;
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $19 = $33;
 $34 = $19;
 $35 = HEAP32[$34>>2]|0;
 $__tmp$i$i = $35;
 $3 = $32;
 $36 = $3;
 $2 = $36;
 $37 = $2;
 HEAP32[$37>>2] = 0;
 $38 = $__tmp$i$i;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $1 = $32;
 $40 = $1;
 $0 = $40;
 $41 = $0;
 $42 = ((($41)) + 4|0);
 $43 = $__tmp$i$i;
 $17 = $42;
 $18 = $43;
 $44 = $17;
 $16 = $44;
 $45 = $16;
 $15 = $45;
 $46 = $15;
 $14 = $46;
 $47 = $14;
 $48 = $18;
 $6 = $44;
 $49 = $6;
 $5 = $49;
 $50 = $5;
 $4 = $50;
 $51 = $4;
 $52 = HEAP32[$51>>2]|0;
 $11 = $47;
 $12 = $48;
 $13 = $52;
 $53 = $11;
 $54 = $12;
 $55 = $13;
 $8 = $53;
 $9 = $54;
 $10 = $55;
 $56 = $9;
 $7 = $56;
 $57 = $7;
 __ZdlPv($57);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS2_8variableEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE12__deallocateEPNS_11__hash_nodeIS5_PvEE($this,$__np) {
 $this = $this|0;
 $__np = $__np|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, $__next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $19 = $__np;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = ((($21)) + 8|0);
 $16 = $22;
 $23 = $16;
 $15 = $23;
 $24 = $15;
 $__na = $24;
 while(1) {
  $25 = $19;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   break;
  }
  $27 = $19;
  $28 = HEAP32[$27>>2]|0;
  $__next = $28;
  $29 = $__na;
  $30 = $19;
  $31 = ((($30)) + 8|0);
  $14 = $31;
  $32 = $14;
  $4 = $29;
  $5 = $32;
  $33 = $4;
  $34 = $5;
  ;HEAP8[$3>>0]=HEAP8[$6>>0]|0;
  $1 = $33;
  $2 = $34;
  $35 = $2;
  $0 = $35;
  $36 = $0;
  __ZNSt3__14pairIKN4rhea10constraintENS1_8variableEED2Ev($36);
  $37 = $__na;
  $38 = $19;
  $11 = $37;
  $12 = $38;
  $13 = 1;
  $39 = $11;
  $40 = $12;
  $41 = $13;
  $8 = $39;
  $9 = $40;
  $10 = $41;
  $42 = $9;
  $7 = $42;
  $43 = $7;
  __ZdlPv($43);
  $44 = $__next;
  $19 = $44;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKN4rhea10constraintENS1_8variableEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 __ZN4rhea8variableD2Ev($2);
 __ZN4rhea10constraintD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS2_8variableEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE16__construct_nodeIJRKNS_4pairIKS3_S4_EEEEENS_10unique_ptrINS_11__hash_nodeIS5_PvEENS_22__hash_node_destructorINSE_ISQ_EEEEEEDpOT_($agg$result,$this,$__args) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__args = $__args|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__na = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 8|0;
 $20 = sp + 552|0;
 $57 = sp;
 $60 = sp + 553|0;
 $73 = sp + 312|0;
 $74 = sp + 16|0;
 $77 = sp + 328|0;
 $78 = sp + 336|0;
 $79 = sp + 32|0;
 $84 = sp + 368|0;
 $108 = sp + 24|0;
 $111 = sp + 555|0;
 $125 = sp + 556|0;
 $126 = sp + 480|0;
 $123 = $this;
 $124 = $__args;
 $130 = $123;
 $122 = $130;
 $131 = $122;
 $132 = ((($131)) + 8|0);
 $121 = $132;
 $133 = $121;
 $120 = $133;
 $134 = $120;
 $__na = $134;
 $$expand_i1_val = 0;
 HEAP8[$125>>0] = $$expand_i1_val;
 $135 = $__na;
 $92 = $135;
 $93 = 1;
 $136 = $92;
 $137 = $93;
 $89 = $136;
 $90 = $137;
 $91 = 0;
 $138 = $90;
 $139 = ($138*28)|0;
 $88 = $139;
 $140 = $88;
 $141 = (__Znwj($140)|0);
 $142 = $__na;
 $85 = $126;
 $86 = $142;
 $87 = 0;
 $143 = $85;
 $144 = $86;
 HEAP32[$143>>2] = $144;
 $145 = ((($143)) + 4|0);
 $146 = $87;
 $147 = $146&1;
 $148 = $147&1;
 HEAP8[$145>>0] = $148;
 $81 = $agg$result;
 $82 = $141;
 $83 = $126;
 $149 = $81;
 $150 = $82;
 $151 = $83;
 $80 = $151;
 $152 = $80;
 ;HEAP32[$84>>2]=HEAP32[$152>>2]|0;HEAP32[$84+4>>2]=HEAP32[$152+4>>2]|0;
 ;HEAP8[$79>>0]=HEAP8[$84>>0]|0;HEAP8[$79+1>>0]=HEAP8[$84+1>>0]|0;HEAP8[$79+2>>0]=HEAP8[$84+2>>0]|0;HEAP8[$79+3>>0]=HEAP8[$84+3>>0]|0;HEAP8[$79+4>>0]=HEAP8[$84+4>>0]|0;HEAP8[$79+5>>0]=HEAP8[$84+5>>0]|0;HEAP8[$79+6>>0]=HEAP8[$84+6>>0]|0;HEAP8[$79+7>>0]=HEAP8[$84+7>>0]|0;
 $76 = $149;
 HEAP32[$77>>2] = $150;
 $153 = $76;
 $75 = $77;
 $154 = $75;
 $155 = HEAP32[$154>>2]|0;
 $69 = $79;
 $156 = $69;
 ;HEAP32[$78>>2]=HEAP32[$156>>2]|0;HEAP32[$78+4>>2]=HEAP32[$156+4>>2]|0;
 ;HEAP8[$74>>0]=HEAP8[$78>>0]|0;HEAP8[$74+1>>0]=HEAP8[$78+1>>0]|0;HEAP8[$74+2>>0]=HEAP8[$78+2>>0]|0;HEAP8[$74+3>>0]=HEAP8[$78+3>>0]|0;HEAP8[$74+4>>0]=HEAP8[$78+4>>0]|0;HEAP8[$74+5>>0]=HEAP8[$78+5>>0]|0;HEAP8[$74+6>>0]=HEAP8[$78+6>>0]|0;HEAP8[$74+7>>0]=HEAP8[$78+7>>0]|0;
 $72 = $153;
 HEAP32[$73>>2] = $155;
 $157 = $72;
 $71 = $73;
 $158 = $71;
 $159 = HEAP32[$158>>2]|0;
 HEAP32[$157>>2] = $159;
 $160 = ((($157)) + 4|0);
 $70 = $74;
 $161 = $70;
 ;HEAP32[$160>>2]=HEAP32[$161>>2]|0;HEAP32[$160+4>>2]=HEAP32[$161+4>>2]|0;
 $162 = $__na;
 $42 = $agg$result;
 $163 = $42;
 $41 = $163;
 $164 = $41;
 $40 = $164;
 $165 = $40;
 $166 = HEAP32[$165>>2]|0;
 $167 = ((($166)) + 8|0);
 $39 = $167;
 $168 = $39;
 $169 = $124;
 $30 = $169;
 $170 = $30;
 $17 = $162;
 $18 = $168;
 $19 = $170;
 $171 = $17;
 $172 = $18;
 $173 = $19;
 $16 = $173;
 $174 = $16;
 ;HEAP8[$15>>0]=HEAP8[$20>>0]|0;
 $12 = $171;
 $13 = $172;
 $14 = $174;
 $175 = $12;
 $176 = $13;
 $177 = $14;
 $11 = $177;
 $178 = $11;
 $8 = $175;
 $9 = $176;
 $10 = $178;
 $179 = $9;
 $180 = $10;
 $7 = $180;
 $181 = $7;
 $5 = $179;
 $6 = $181;
 $182 = $5;
 $183 = $6;
 $4 = $183;
 $184 = $4;
 $0 = $182;
 $1 = $184;
 $185 = $0;
 $186 = $1;
 __ZN4rhea10constraintC2ERKS0_($185,$186);
 $187 = ((($185)) + 12|0);
 $188 = $1;
 $189 = ((($188)) + 12|0);
 __THREW__ = 0;
 invoke_vii(339,($187|0),($189|0));
 $190 = __THREW__; __THREW__ = 0;
 $191 = $190&1;
 do {
  if ($191) {
   $192 = ___cxa_find_matching_catch()|0;
   $193 = tempRet0;
   $2 = $192;
   $3 = $193;
   __ZN4rhea10constraintD2Ev($185);
   $194 = $2;
   $195 = $3;
   $eh$lpad$body$index2Z2D = $195;$eh$lpad$body$indexZ2D = $194;
  } else {
   $23 = $agg$result;
   $196 = $23;
   $22 = $196;
   $197 = $22;
   $21 = $197;
   $198 = $21;
   $199 = ((($198)) + 4|0);
   $200 = ((($199)) + 4|0);
   HEAP8[$200>>0] = 1;
   $26 = $130;
   $201 = $26;
   $202 = ((($201)) + 12|0);
   $25 = $202;
   $203 = $25;
   $24 = $203;
   $204 = $24;
   $29 = $agg$result;
   $205 = $29;
   $28 = $205;
   $206 = $28;
   $27 = $206;
   $207 = $27;
   $208 = HEAP32[$207>>2]|0;
   $209 = ((($208)) + 8|0);
   $31 = $204;
   $32 = $209;
   $210 = $31;
   $211 = $32;
   __THREW__ = 0;
   $212 = (invoke_iii(366,($210|0),($211|0))|0);
   $213 = __THREW__; __THREW__ = 0;
   $214 = $213&1;
   if ($214) {
    $225 = ___cxa_find_matching_catch()|0;
    $226 = tempRet0;
    $eh$lpad$body$index2Z2D = $226;$eh$lpad$body$indexZ2D = $225;
    break;
   }
   $35 = $agg$result;
   $215 = $35;
   $34 = $215;
   $216 = $34;
   $33 = $216;
   $217 = $33;
   $218 = HEAP32[$217>>2]|0;
   $219 = ((($218)) + 4|0);
   HEAP32[$219>>2] = $212;
   $38 = $agg$result;
   $220 = $38;
   $37 = $220;
   $221 = $37;
   $36 = $221;
   $222 = $36;
   $223 = HEAP32[$222>>2]|0;
   HEAP32[$223>>2] = 0;
   $$expand_i1_val7 = 1;
   HEAP8[$125>>0] = $$expand_i1_val7;
   $129 = 1;
   $$pre_trunc = HEAP8[$125>>0]|0;
   $224 = $$pre_trunc&1;
   if ($224) {
    STACKTOP = sp;return;
   }
   $119 = $agg$result;
   $262 = $119;
   $117 = $262;
   $118 = 0;
   $263 = $117;
   $116 = $263;
   $264 = $116;
   $115 = $264;
   $265 = $115;
   $266 = HEAP32[$265>>2]|0;
   $__tmp$i$i = $266;
   $267 = $118;
   $97 = $263;
   $268 = $97;
   $96 = $268;
   $269 = $96;
   HEAP32[$269>>2] = $267;
   $270 = $__tmp$i$i;
   $271 = ($270|0)!=(0|0);
   if (!($271)) {
    STACKTOP = sp;return;
   }
   $95 = $263;
   $272 = $95;
   $94 = $272;
   $273 = $94;
   $274 = ((($273)) + 4|0);
   $275 = $__tmp$i$i;
   $113 = $274;
   $114 = $275;
   $276 = $113;
   $277 = ((($276)) + 4|0);
   $278 = HEAP8[$277>>0]|0;
   $279 = $278&1;
   if ($279) {
    $280 = HEAP32[$276>>2]|0;
    $281 = $114;
    $282 = ((($281)) + 8|0);
    $112 = $282;
    $283 = $112;
    $109 = $280;
    $110 = $283;
    $284 = $109;
    $285 = $110;
    ;HEAP8[$108>>0]=HEAP8[$111>>0]|0;
    $106 = $284;
    $107 = $285;
    $286 = $107;
    $105 = $286;
    $287 = $105;
    __ZNSt3__14pairIKN4rhea10constraintENS1_8variableEED2Ev($287);
   }
   $288 = $114;
   $289 = ($288|0)!=(0|0);
   if (!($289)) {
    STACKTOP = sp;return;
   }
   $290 = HEAP32[$276>>2]|0;
   $291 = $114;
   $102 = $290;
   $103 = $291;
   $104 = 1;
   $292 = $102;
   $293 = $103;
   $294 = $104;
   $99 = $292;
   $100 = $293;
   $101 = $294;
   $295 = $100;
   $98 = $295;
   $296 = $98;
   __ZdlPv($296);
   STACKTOP = sp;return;
  }
 } while(0);
 $127 = $eh$lpad$body$indexZ2D;
 $128 = $eh$lpad$body$index2Z2D;
 $68 = $agg$result;
 $227 = $68;
 $66 = $227;
 $67 = 0;
 $228 = $66;
 $65 = $228;
 $229 = $65;
 $64 = $229;
 $230 = $64;
 $231 = HEAP32[$230>>2]|0;
 $__tmp$i$i1 = $231;
 $232 = $67;
 $46 = $228;
 $233 = $46;
 $45 = $233;
 $234 = $45;
 HEAP32[$234>>2] = $232;
 $235 = $__tmp$i$i1;
 $236 = ($235|0)!=(0|0);
 if (!($236)) {
  $297 = $127;
  $298 = $128;
  ___resumeException($297|0);
  // unreachable;
 }
 $44 = $228;
 $237 = $44;
 $43 = $237;
 $238 = $43;
 $239 = ((($238)) + 4|0);
 $240 = $__tmp$i$i1;
 $62 = $239;
 $63 = $240;
 $241 = $62;
 $242 = ((($241)) + 4|0);
 $243 = HEAP8[$242>>0]|0;
 $244 = $243&1;
 if ($244) {
  $245 = HEAP32[$241>>2]|0;
  $246 = $63;
  $247 = ((($246)) + 8|0);
  $61 = $247;
  $248 = $61;
  $58 = $245;
  $59 = $248;
  $249 = $58;
  $250 = $59;
  ;HEAP8[$57>>0]=HEAP8[$60>>0]|0;
  $55 = $249;
  $56 = $250;
  $251 = $56;
  $54 = $251;
  $252 = $54;
  __ZNSt3__14pairIKN4rhea10constraintENS1_8variableEED2Ev($252);
 }
 $253 = $63;
 $254 = ($253|0)!=(0|0);
 if (!($254)) {
  $297 = $127;
  $298 = $128;
  ___resumeException($297|0);
  // unreachable;
 }
 $255 = HEAP32[$241>>2]|0;
 $256 = $63;
 $51 = $255;
 $52 = $256;
 $53 = 1;
 $257 = $51;
 $258 = $52;
 $259 = $53;
 $48 = $257;
 $49 = $258;
 $50 = $259;
 $260 = $49;
 $47 = $260;
 $261 = $47;
 __ZdlPv($261);
 $297 = $127;
 $298 = $128;
 ___resumeException($297|0);
 // unreachable;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEEC2ERKSL_($this,$__u) {
 $this = $this|0;
 $__u = $__u|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 40|0;
 $3 = sp + 376|0;
 $8 = sp + 100|0;
 $9 = sp + 8|0;
 $12 = sp + 80|0;
 $13 = sp + 384|0;
 $14 = sp + 24|0;
 $18 = sp + 378|0;
 $35 = sp + 168|0;
 $36 = sp;
 $39 = sp + 348|0;
 $40 = sp + 356|0;
 $41 = sp + 48|0;
 $52 = sp + 240|0;
 $57 = sp + 16|0;
 $59 = sp + 377|0;
 $63 = sp + 32|0;
 $66 = sp + 380|0;
 $67 = sp + 72|0;
 $75 = sp + 336|0;
 $76 = sp + 64|0;
 $79 = sp + 288|0;
 $80 = sp + 383|0;
 $81 = sp + 56|0;
 $90 = sp + 176|0;
 $91 = sp + 379|0;
 $92 = sp + 382|0;
 $93 = sp + 381|0;
 $88 = $this;
 $89 = $__u;
 $94 = $88;
 $95 = $89;
 $87 = $95;
 $96 = $87;
 $86 = $96;
 $97 = $86;
 $85 = $97;
 $98 = $85;
 $99 = ((($98)) + 4|0);
 $84 = $99;
 $100 = $84;
 $83 = $100;
 $101 = $83;
 $82 = $101;
 $102 = $82;
 $2 = $102;
 $103 = $2;
 ;HEAP8[$1>>0]=HEAP8[$3>>0]|0;
 $0 = $103;
 $15 = $90;
 $16 = $91;
 $17 = 0;
 $104 = $15;
 $105 = $17;
 ;HEAP8[$14>>0]=HEAP8[$18>>0]|0;
 $11 = $104;
 HEAP32[$12>>2] = $105;
 $106 = $11;
 $10 = $12;
 $107 = $10;
 $108 = HEAP32[$107>>2]|0;
 $4 = $14;
 ;HEAP8[$9>>0]=HEAP8[$13>>0]|0;
 $7 = $106;
 HEAP32[$8>>2] = $108;
 $109 = $7;
 $6 = $9;
 $5 = $8;
 $110 = $5;
 $111 = HEAP32[$110>>2]|0;
 HEAP32[$109>>2] = $111;
 $49 = $94;
 $50 = 0;
 $51 = $90;
 $112 = $49;
 $113 = $51;
 $48 = $113;
 $114 = $48;
 $46 = $52;
 $47 = $114;
 $115 = $46;
 $116 = $47;
 $45 = $116;
 $117 = $45;
 ;HEAP32[$115>>2]=HEAP32[$117>>2]|0;
 $118 = $47;
 $44 = $118;
 $119 = $44;
 $43 = $119;
 $120 = $43;
 $42 = $120;
 $121 = $42;
 HEAP32[$121>>2] = 0;
 ;HEAP8[$41>>0]=HEAP8[$52>>0]|0;HEAP8[$41+1>>0]=HEAP8[$52+1>>0]|0;HEAP8[$41+2>>0]=HEAP8[$52+2>>0]|0;HEAP8[$41+3>>0]=HEAP8[$52+3>>0]|0;
 $38 = $112;
 HEAP32[$39>>2] = 0;
 $122 = $38;
 $37 = $39;
 $123 = $37;
 $124 = HEAP32[$123>>2]|0;
 $19 = $41;
 $125 = $19;
 $24 = $40;
 $25 = $125;
 $126 = $24;
 $127 = $25;
 $23 = $127;
 $128 = $23;
 ;HEAP32[$126>>2]=HEAP32[$128>>2]|0;
 $129 = $25;
 $22 = $129;
 $130 = $22;
 $21 = $130;
 $131 = $21;
 $20 = $131;
 $132 = $20;
 HEAP32[$132>>2] = 0;
 ;HEAP8[$36>>0]=HEAP8[$40>>0]|0;HEAP8[$36+1>>0]=HEAP8[$40+1>>0]|0;HEAP8[$36+2>>0]=HEAP8[$40+2>>0]|0;HEAP8[$36+3>>0]=HEAP8[$40+3>>0]|0;
 $34 = $122;
 HEAP32[$35>>2] = $124;
 $133 = $34;
 $33 = $35;
 $134 = $33;
 $135 = HEAP32[$134>>2]|0;
 HEAP32[$133>>2] = $135;
 $136 = ((($133)) + 4|0);
 $26 = $36;
 $137 = $26;
 $31 = $136;
 $32 = $137;
 $138 = $31;
 $139 = $32;
 $30 = $139;
 $140 = $30;
 ;HEAP32[$138>>2]=HEAP32[$140>>2]|0;
 $141 = $32;
 $29 = $141;
 $142 = $29;
 $28 = $142;
 $143 = $28;
 $27 = $143;
 $144 = $27;
 HEAP32[$144>>2] = 0;
 $145 = ((($94)) + 8|0);
 $146 = $89;
 $55 = $146;
 $147 = $55;
 $148 = ((($147)) + 8|0);
 $54 = $148;
 $149 = $54;
 $53 = $149;
 $150 = $53;
 $58 = $150;
 $151 = $58;
 ;HEAP8[$57>>0]=HEAP8[$59>>0]|0;
 $56 = $151;
 ;HEAP8[$67>>0]=HEAP8[$92>>0]|0;
 $65 = $145;
 $152 = $65;
 $64 = $67;
 ;HEAP8[$63>>0]=HEAP8[$66>>0]|0;
 $62 = $152;
 $153 = $62;
 $61 = $63;
 $60 = $153;
 $154 = $60;
 HEAP32[$154>>2] = 0;
 $155 = ((($94)) + 12|0);
 $156 = $89;
 $70 = $156;
 $157 = $70;
 $158 = ((($157)) + 12|0);
 $69 = $158;
 $159 = $69;
 $68 = $159;
 ;HEAP8[$81>>0]=HEAP8[$93>>0]|0;
 $78 = $155;
 HEAP32[$79>>2] = 0;
 $160 = $78;
 $77 = $79;
 $161 = $77;
 $162 = HEAP32[$161>>2]|0;
 $71 = $81;
 ;HEAP8[$76>>0]=HEAP8[$80>>0]|0;
 $74 = $160;
 HEAP32[$75>>2] = $162;
 $163 = $74;
 $73 = $76;
 $72 = $75;
 $164 = $72;
 $165 = HEAP32[$164>>2]|0;
 HEAP32[$163>>2] = $165;
 $166 = ((($94)) + 16|0);
 $167 = $89;
 $168 = ((($167)) + 16|0);
 ;HEAP32[$166>>2]=HEAP32[$168>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEE15__insert_uniqueIRKNS_4pairIKS3_SC_EEEENSN_INS_15__hash_iteratorIPNS_11__hash_nodeISD_PvEEEEbEEOT_($agg$result,$this,$__x) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__t$i = 0;
 var $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp;
 $17 = sp + 284|0;
 $48 = sp + 8|0;
 $51 = sp + 285|0;
 $__h = sp + 120|0;
 $61 = $this;
 $62 = $__x;
 $66 = $61;
 $67 = $62;
 $60 = $67;
 $68 = $60;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEE16__construct_nodeIJRKNS_4pairIKS3_SC_EEEEENS_10unique_ptrINS_11__hash_nodeISD_PvEENS_22__hash_node_destructorINSA_ISV_EEEEEEDpOT_($__h,$66,$68);
 $33 = $__h;
 $69 = $33;
 $32 = $69;
 $70 = $32;
 $31 = $70;
 $71 = $31;
 $72 = HEAP32[$71>>2]|0;
 __THREW__ = 0;
 invoke_viii(221,($agg$result|0),($66|0),($72|0));
 $73 = __THREW__; __THREW__ = 0;
 $74 = $73&1;
 if ($74) {
  $84 = ___cxa_find_matching_catch()|0;
  $85 = tempRet0;
  $63 = $84;
  $64 = $85;
  $25 = $__h;
  $86 = $25;
  $23 = $86;
  $24 = 0;
  $87 = $23;
  $22 = $87;
  $88 = $22;
  $21 = $88;
  $89 = $21;
  $90 = HEAP32[$89>>2]|0;
  $__tmp$i$i1 = $90;
  $91 = $24;
  $3 = $87;
  $92 = $3;
  $2 = $92;
  $93 = $2;
  HEAP32[$93>>2] = $91;
  $94 = $__tmp$i$i1;
  $95 = ($94|0)!=(0|0);
  if (!($95)) {
   $156 = $63;
   $157 = $64;
   ___resumeException($156|0);
   // unreachable;
  }
  $1 = $87;
  $96 = $1;
  $0 = $96;
  $97 = $0;
  $98 = ((($97)) + 4|0);
  $99 = $__tmp$i$i1;
  $19 = $98;
  $20 = $99;
  $100 = $19;
  $101 = ((($100)) + 4|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&1;
  if ($103) {
   $104 = HEAP32[$100>>2]|0;
   $105 = $20;
   $106 = ((($105)) + 8|0);
   $18 = $106;
   $107 = $18;
   $15 = $104;
   $16 = $107;
   $108 = $15;
   $109 = $16;
   ;HEAP8[$14>>0]=HEAP8[$17>>0]|0;
   $12 = $108;
   $13 = $109;
   $110 = $13;
   $11 = $110;
   $111 = $11;
   __ZNSt3__14pairIKN4rhea10constraintENS_13unordered_setINS1_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEED2Ev($111);
  }
  $112 = $20;
  $113 = ($112|0)!=(0|0);
  if (!($113)) {
   $156 = $63;
   $157 = $64;
   ___resumeException($156|0);
   // unreachable;
  }
  $114 = HEAP32[$100>>2]|0;
  $115 = $20;
  $8 = $114;
  $9 = $115;
  $10 = 1;
  $116 = $8;
  $117 = $9;
  $118 = $10;
  $5 = $116;
  $6 = $117;
  $7 = $118;
  $119 = $6;
  $4 = $119;
  $120 = $4;
  __ZdlPv($120);
  $156 = $63;
  $157 = $64;
  ___resumeException($156|0);
  // unreachable;
 }
 $75 = ((($agg$result)) + 4|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&1;
 if ($77) {
  $30 = $__h;
  $78 = $30;
  $29 = $78;
  $79 = $29;
  $28 = $79;
  $80 = $28;
  $81 = HEAP32[$80>>2]|0;
  $__t$i = $81;
  $27 = $78;
  $82 = $27;
  $26 = $82;
  $83 = $26;
  HEAP32[$83>>2] = 0;
 }
 $65 = 1;
 $59 = $__h;
 $121 = $59;
 $57 = $121;
 $58 = 0;
 $122 = $57;
 $56 = $122;
 $123 = $56;
 $55 = $123;
 $124 = $55;
 $125 = HEAP32[$124>>2]|0;
 $__tmp$i$i = $125;
 $126 = $58;
 $37 = $122;
 $127 = $37;
 $36 = $127;
 $128 = $36;
 HEAP32[$128>>2] = $126;
 $129 = $__tmp$i$i;
 $130 = ($129|0)!=(0|0);
 if (!($130)) {
  STACKTOP = sp;return;
 }
 $35 = $122;
 $131 = $35;
 $34 = $131;
 $132 = $34;
 $133 = ((($132)) + 4|0);
 $134 = $__tmp$i$i;
 $53 = $133;
 $54 = $134;
 $135 = $53;
 $136 = ((($135)) + 4|0);
 $137 = HEAP8[$136>>0]|0;
 $138 = $137&1;
 if ($138) {
  $139 = HEAP32[$135>>2]|0;
  $140 = $54;
  $141 = ((($140)) + 8|0);
  $52 = $141;
  $142 = $52;
  $49 = $139;
  $50 = $142;
  $143 = $49;
  $144 = $50;
  ;HEAP8[$48>>0]=HEAP8[$51>>0]|0;
  $46 = $143;
  $47 = $144;
  $145 = $47;
  $45 = $145;
  $146 = $45;
  __ZNSt3__14pairIKN4rhea10constraintENS_13unordered_setINS1_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEED2Ev($146);
 }
 $147 = $54;
 $148 = ($147|0)!=(0|0);
 if (!($148)) {
  STACKTOP = sp;return;
 }
 $149 = HEAP32[$135>>2]|0;
 $150 = $54;
 $42 = $149;
 $43 = $150;
 $44 = 1;
 $151 = $42;
 $152 = $43;
 $153 = $44;
 $39 = $151;
 $40 = $152;
 $41 = $153;
 $154 = $40;
 $38 = $154;
 $155 = $38;
 __ZdlPv($155);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__tmp$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $25 = $this;
 $26 = $25;
 $27 = ((($26)) + 8|0);
 $24 = $27;
 $28 = $24;
 $23 = $28;
 $29 = $23;
 $30 = HEAP32[$29>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEE12__deallocateEPNS_11__hash_nodeISD_PvEE($26,$30);
 $22 = $26;
 $31 = $22;
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $19 = $33;
 $34 = $19;
 $35 = HEAP32[$34>>2]|0;
 $__tmp$i$i = $35;
 $3 = $32;
 $36 = $3;
 $2 = $36;
 $37 = $2;
 HEAP32[$37>>2] = 0;
 $38 = $__tmp$i$i;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $1 = $32;
 $40 = $1;
 $0 = $40;
 $41 = $0;
 $42 = ((($41)) + 4|0);
 $43 = $__tmp$i$i;
 $17 = $42;
 $18 = $43;
 $44 = $17;
 $16 = $44;
 $45 = $16;
 $15 = $45;
 $46 = $15;
 $14 = $46;
 $47 = $14;
 $48 = $18;
 $6 = $44;
 $49 = $6;
 $5 = $49;
 $50 = $5;
 $4 = $50;
 $51 = $4;
 $52 = HEAP32[$51>>2]|0;
 $11 = $47;
 $12 = $48;
 $13 = $52;
 $53 = $11;
 $54 = $12;
 $55 = $13;
 $8 = $53;
 $9 = $54;
 $10 = $55;
 $56 = $9;
 $7 = $56;
 $57 = $7;
 __ZdlPv($57);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEE16__construct_nodeIJRKNS_4pairIKS3_SC_EEEEENS_10unique_ptrINS_11__hash_nodeISD_PvEENS_22__hash_node_destructorINSA_ISV_EEEEEEDpOT_($agg$result,$this,$__args) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__args = $__args|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__na = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 8|0;
 $20 = sp + 552|0;
 $57 = sp;
 $60 = sp + 553|0;
 $73 = sp + 312|0;
 $74 = sp + 16|0;
 $77 = sp + 328|0;
 $78 = sp + 336|0;
 $79 = sp + 32|0;
 $84 = sp + 368|0;
 $108 = sp + 24|0;
 $111 = sp + 555|0;
 $125 = sp + 556|0;
 $126 = sp + 480|0;
 $123 = $this;
 $124 = $__args;
 $130 = $123;
 $122 = $130;
 $131 = $122;
 $132 = ((($131)) + 8|0);
 $121 = $132;
 $133 = $121;
 $120 = $133;
 $134 = $120;
 $__na = $134;
 $$expand_i1_val = 0;
 HEAP8[$125>>0] = $$expand_i1_val;
 $135 = $__na;
 $92 = $135;
 $93 = 1;
 $136 = $92;
 $137 = $93;
 $89 = $136;
 $90 = $137;
 $91 = 0;
 $138 = $90;
 $139 = ($138*40)|0;
 $88 = $139;
 $140 = $88;
 $141 = (__Znwj($140)|0);
 $142 = $__na;
 $85 = $126;
 $86 = $142;
 $87 = 0;
 $143 = $85;
 $144 = $86;
 HEAP32[$143>>2] = $144;
 $145 = ((($143)) + 4|0);
 $146 = $87;
 $147 = $146&1;
 $148 = $147&1;
 HEAP8[$145>>0] = $148;
 $81 = $agg$result;
 $82 = $141;
 $83 = $126;
 $149 = $81;
 $150 = $82;
 $151 = $83;
 $80 = $151;
 $152 = $80;
 ;HEAP32[$84>>2]=HEAP32[$152>>2]|0;HEAP32[$84+4>>2]=HEAP32[$152+4>>2]|0;
 ;HEAP8[$79>>0]=HEAP8[$84>>0]|0;HEAP8[$79+1>>0]=HEAP8[$84+1>>0]|0;HEAP8[$79+2>>0]=HEAP8[$84+2>>0]|0;HEAP8[$79+3>>0]=HEAP8[$84+3>>0]|0;HEAP8[$79+4>>0]=HEAP8[$84+4>>0]|0;HEAP8[$79+5>>0]=HEAP8[$84+5>>0]|0;HEAP8[$79+6>>0]=HEAP8[$84+6>>0]|0;HEAP8[$79+7>>0]=HEAP8[$84+7>>0]|0;
 $76 = $149;
 HEAP32[$77>>2] = $150;
 $153 = $76;
 $75 = $77;
 $154 = $75;
 $155 = HEAP32[$154>>2]|0;
 $69 = $79;
 $156 = $69;
 ;HEAP32[$78>>2]=HEAP32[$156>>2]|0;HEAP32[$78+4>>2]=HEAP32[$156+4>>2]|0;
 ;HEAP8[$74>>0]=HEAP8[$78>>0]|0;HEAP8[$74+1>>0]=HEAP8[$78+1>>0]|0;HEAP8[$74+2>>0]=HEAP8[$78+2>>0]|0;HEAP8[$74+3>>0]=HEAP8[$78+3>>0]|0;HEAP8[$74+4>>0]=HEAP8[$78+4>>0]|0;HEAP8[$74+5>>0]=HEAP8[$78+5>>0]|0;HEAP8[$74+6>>0]=HEAP8[$78+6>>0]|0;HEAP8[$74+7>>0]=HEAP8[$78+7>>0]|0;
 $72 = $153;
 HEAP32[$73>>2] = $155;
 $157 = $72;
 $71 = $73;
 $158 = $71;
 $159 = HEAP32[$158>>2]|0;
 HEAP32[$157>>2] = $159;
 $160 = ((($157)) + 4|0);
 $70 = $74;
 $161 = $70;
 ;HEAP32[$160>>2]=HEAP32[$161>>2]|0;HEAP32[$160+4>>2]=HEAP32[$161+4>>2]|0;
 $162 = $__na;
 $42 = $agg$result;
 $163 = $42;
 $41 = $163;
 $164 = $41;
 $40 = $164;
 $165 = $40;
 $166 = HEAP32[$165>>2]|0;
 $167 = ((($166)) + 8|0);
 $39 = $167;
 $168 = $39;
 $169 = $124;
 $30 = $169;
 $170 = $30;
 $17 = $162;
 $18 = $168;
 $19 = $170;
 $171 = $17;
 $172 = $18;
 $173 = $19;
 $16 = $173;
 $174 = $16;
 ;HEAP8[$15>>0]=HEAP8[$20>>0]|0;
 $12 = $171;
 $13 = $172;
 $14 = $174;
 $175 = $12;
 $176 = $13;
 $177 = $14;
 $11 = $177;
 $178 = $11;
 $8 = $175;
 $9 = $176;
 $10 = $178;
 $179 = $9;
 $180 = $10;
 $7 = $180;
 $181 = $7;
 $5 = $179;
 $6 = $181;
 $182 = $5;
 $183 = $6;
 $4 = $183;
 $184 = $4;
 $0 = $182;
 $1 = $184;
 $185 = $0;
 $186 = $1;
 __ZN4rhea10constraintC2ERKS0_($185,$186);
 $187 = ((($185)) + 12|0);
 $188 = $1;
 $189 = ((($188)) + 12|0);
 __THREW__ = 0;
 invoke_vii(351,($187|0),($189|0));
 $190 = __THREW__; __THREW__ = 0;
 $191 = $190&1;
 do {
  if ($191) {
   $192 = ___cxa_find_matching_catch()|0;
   $193 = tempRet0;
   $2 = $192;
   $3 = $193;
   __ZN4rhea10constraintD2Ev($185);
   $194 = $2;
   $195 = $3;
   $eh$lpad$body$index2Z2D = $195;$eh$lpad$body$indexZ2D = $194;
  } else {
   $23 = $agg$result;
   $196 = $23;
   $22 = $196;
   $197 = $22;
   $21 = $197;
   $198 = $21;
   $199 = ((($198)) + 4|0);
   $200 = ((($199)) + 4|0);
   HEAP8[$200>>0] = 1;
   $26 = $130;
   $201 = $26;
   $202 = ((($201)) + 12|0);
   $25 = $202;
   $203 = $25;
   $24 = $203;
   $204 = $24;
   $29 = $agg$result;
   $205 = $29;
   $28 = $205;
   $206 = $28;
   $27 = $206;
   $207 = $27;
   $208 = HEAP32[$207>>2]|0;
   $209 = ((($208)) + 8|0);
   $31 = $204;
   $32 = $209;
   $210 = $31;
   $211 = $32;
   __THREW__ = 0;
   $212 = (invoke_iii(366,($210|0),($211|0))|0);
   $213 = __THREW__; __THREW__ = 0;
   $214 = $213&1;
   if ($214) {
    $225 = ___cxa_find_matching_catch()|0;
    $226 = tempRet0;
    $eh$lpad$body$index2Z2D = $226;$eh$lpad$body$indexZ2D = $225;
    break;
   }
   $35 = $agg$result;
   $215 = $35;
   $34 = $215;
   $216 = $34;
   $33 = $216;
   $217 = $33;
   $218 = HEAP32[$217>>2]|0;
   $219 = ((($218)) + 4|0);
   HEAP32[$219>>2] = $212;
   $38 = $agg$result;
   $220 = $38;
   $37 = $220;
   $221 = $37;
   $36 = $221;
   $222 = $36;
   $223 = HEAP32[$222>>2]|0;
   HEAP32[$223>>2] = 0;
   $$expand_i1_val7 = 1;
   HEAP8[$125>>0] = $$expand_i1_val7;
   $129 = 1;
   $$pre_trunc = HEAP8[$125>>0]|0;
   $224 = $$pre_trunc&1;
   if ($224) {
    STACKTOP = sp;return;
   }
   $119 = $agg$result;
   $262 = $119;
   $117 = $262;
   $118 = 0;
   $263 = $117;
   $116 = $263;
   $264 = $116;
   $115 = $264;
   $265 = $115;
   $266 = HEAP32[$265>>2]|0;
   $__tmp$i$i = $266;
   $267 = $118;
   $97 = $263;
   $268 = $97;
   $96 = $268;
   $269 = $96;
   HEAP32[$269>>2] = $267;
   $270 = $__tmp$i$i;
   $271 = ($270|0)!=(0|0);
   if (!($271)) {
    STACKTOP = sp;return;
   }
   $95 = $263;
   $272 = $95;
   $94 = $272;
   $273 = $94;
   $274 = ((($273)) + 4|0);
   $275 = $__tmp$i$i;
   $113 = $274;
   $114 = $275;
   $276 = $113;
   $277 = ((($276)) + 4|0);
   $278 = HEAP8[$277>>0]|0;
   $279 = $278&1;
   if ($279) {
    $280 = HEAP32[$276>>2]|0;
    $281 = $114;
    $282 = ((($281)) + 8|0);
    $112 = $282;
    $283 = $112;
    $109 = $280;
    $110 = $283;
    $284 = $109;
    $285 = $110;
    ;HEAP8[$108>>0]=HEAP8[$111>>0]|0;
    $106 = $284;
    $107 = $285;
    $286 = $107;
    $105 = $286;
    $287 = $105;
    __ZNSt3__14pairIKN4rhea10constraintENS_13unordered_setINS1_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEED2Ev($287);
   }
   $288 = $114;
   $289 = ($288|0)!=(0|0);
   if (!($289)) {
    STACKTOP = sp;return;
   }
   $290 = HEAP32[$276>>2]|0;
   $291 = $114;
   $102 = $290;
   $103 = $291;
   $104 = 1;
   $292 = $102;
   $293 = $103;
   $294 = $104;
   $99 = $292;
   $100 = $293;
   $101 = $294;
   $295 = $100;
   $98 = $295;
   $296 = $98;
   __ZdlPv($296);
   STACKTOP = sp;return;
  }
 } while(0);
 $127 = $eh$lpad$body$indexZ2D;
 $128 = $eh$lpad$body$index2Z2D;
 $68 = $agg$result;
 $227 = $68;
 $66 = $227;
 $67 = 0;
 $228 = $66;
 $65 = $228;
 $229 = $65;
 $64 = $229;
 $230 = $64;
 $231 = HEAP32[$230>>2]|0;
 $__tmp$i$i1 = $231;
 $232 = $67;
 $46 = $228;
 $233 = $46;
 $45 = $233;
 $234 = $45;
 HEAP32[$234>>2] = $232;
 $235 = $__tmp$i$i1;
 $236 = ($235|0)!=(0|0);
 if (!($236)) {
  $297 = $127;
  $298 = $128;
  ___resumeException($297|0);
  // unreachable;
 }
 $44 = $228;
 $237 = $44;
 $43 = $237;
 $238 = $43;
 $239 = ((($238)) + 4|0);
 $240 = $__tmp$i$i1;
 $62 = $239;
 $63 = $240;
 $241 = $62;
 $242 = ((($241)) + 4|0);
 $243 = HEAP8[$242>>0]|0;
 $244 = $243&1;
 if ($244) {
  $245 = HEAP32[$241>>2]|0;
  $246 = $63;
  $247 = ((($246)) + 8|0);
  $61 = $247;
  $248 = $61;
  $58 = $245;
  $59 = $248;
  $249 = $58;
  $250 = $59;
  ;HEAP8[$57>>0]=HEAP8[$60>>0]|0;
  $55 = $249;
  $56 = $250;
  $251 = $56;
  $54 = $251;
  $252 = $54;
  __ZNSt3__14pairIKN4rhea10constraintENS_13unordered_setINS1_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEED2Ev($252);
 }
 $253 = $63;
 $254 = ($253|0)!=(0|0);
 if (!($254)) {
  $297 = $127;
  $298 = $128;
  ___resumeException($297|0);
  // unreachable;
 }
 $255 = HEAP32[$241>>2]|0;
 $256 = $63;
 $51 = $255;
 $52 = $256;
 $53 = 1;
 $257 = $51;
 $258 = $52;
 $259 = $53;
 $48 = $257;
 $49 = $258;
 $50 = $259;
 $260 = $49;
 $47 = $260;
 $261 = $47;
 __ZdlPv($261);
 $297 = $127;
 $298 = $128;
 ___resumeException($297|0);
 // unreachable;
}
function __ZNSt3__113unordered_setIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEC2ERKS9_($this,$__u) {
 $this = $this|0;
 $__u = $__u|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 12|0;
 $4 = sp + 152|0;
 $13 = sp + 56|0;
 $14 = sp + 8|0;
 $15 = sp;
 $20 = sp + 88|0;
 $22 = sp + 96|0;
 $36 = sp + 76|0;
 $37 = sp + 144|0;
 $32 = $this;
 $33 = $__u;
 $38 = $32;
 $39 = $33;
 __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEC2ERKS9_($38,$39);
 $40 = $33;
 $31 = $40;
 $41 = $31;
 $30 = $41;
 $42 = $30;
 $29 = $42;
 $43 = $29;
 $28 = $43;
 $44 = $28;
 $27 = $44;
 $45 = $27;
 $46 = ((($45)) + 4|0);
 $26 = $46;
 $47 = $26;
 $25 = $47;
 $48 = $25;
 $24 = $48;
 $49 = $24;
 $50 = HEAP32[$49>>2]|0;
 __THREW__ = 0;
 invoke_vii(293,($38|0),($50|0));
 $51 = __THREW__; __THREW__ = 0;
 $52 = $51&1;
 if ($52) {
  $87 = ___cxa_find_matching_catch()|0;
  $88 = tempRet0;
  $34 = $87;
  $35 = $88;
  __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEED2Ev($38);
  $89 = $34;
  $90 = $35;
  ___resumeException($89|0);
  // unreachable;
 }
 $53 = $33;
 $23 = $53;
 $54 = $23;
 $21 = $54;
 $55 = $21;
 $56 = ((($55)) + 8|0);
 $19 = $56;
 $57 = $19;
 $18 = $57;
 $58 = $18;
 $59 = HEAP32[$58>>2]|0;
 $16 = $20;
 $17 = $59;
 $60 = $16;
 $61 = $17;
 HEAP32[$60>>2] = $61;
 $62 = HEAP32[$20>>2]|0;
 HEAP32[$22>>2] = $62;
 $63 = HEAP32[$22>>2]|0;
 HEAP32[$36>>2] = $63;
 $64 = $33;
 $5 = $64;
 $65 = $5;
 $3 = $65;
 $0 = $2;
 $1 = 0;
 $66 = $0;
 $67 = $1;
 HEAP32[$66>>2] = $67;
 $68 = HEAP32[$2>>2]|0;
 HEAP32[$4>>2] = $68;
 $69 = HEAP32[$4>>2]|0;
 HEAP32[$37>>2] = $69;
 ;HEAP8[$14>>0]=HEAP8[$37>>0]|0;HEAP8[$14+1>>0]=HEAP8[$37+1>>0]|0;HEAP8[$14+2>>0]=HEAP8[$37+2>>0]|0;HEAP8[$14+3>>0]=HEAP8[$37+3>>0]|0;
 ;HEAP8[$15>>0]=HEAP8[$36>>0]|0;HEAP8[$15+1>>0]=HEAP8[$36+1>>0]|0;HEAP8[$15+2>>0]=HEAP8[$36+2>>0]|0;HEAP8[$15+3>>0]=HEAP8[$36+3>>0]|0;
 $12 = $38;
 $70 = $12;
 while(1) {
  $10 = $15;
  $11 = $14;
  $71 = $10;
  $72 = $11;
  $8 = $71;
  $9 = $72;
  $73 = $8;
  $74 = HEAP32[$73>>2]|0;
  $75 = $9;
  $76 = HEAP32[$75>>2]|0;
  $77 = ($74|0)==($76|0);
  $78 = $77 ^ 1;
  if (!($78)) {
   label = 6;
   break;
  }
  $6 = $15;
  $79 = $6;
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($80)) + 8|0);
  __THREW__ = 0;
  invoke_viii(190,($13|0),($70|0),($81|0));
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  if ($83) {
   label = 7;
   break;
  }
  $7 = $15;
  $84 = $7;
  $85 = HEAP32[$84>>2]|0;
  $86 = HEAP32[$85>>2]|0;
  HEAP32[$84>>2] = $86;
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  $87 = ___cxa_find_matching_catch()|0;
  $88 = tempRet0;
  $34 = $87;
  $35 = $88;
  __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEED2Ev($38);
  $89 = $34;
  $90 = $35;
  ___resumeException($89|0);
  // unreachable;
 }
}
function __ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEC2ERKS9_($this,$__u) {
 $this = $this|0;
 $__u = $__u|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 40|0;
 $3 = sp + 376|0;
 $8 = sp + 100|0;
 $9 = sp + 8|0;
 $12 = sp + 80|0;
 $13 = sp + 384|0;
 $14 = sp + 24|0;
 $18 = sp + 378|0;
 $35 = sp + 168|0;
 $36 = sp;
 $39 = sp + 348|0;
 $40 = sp + 356|0;
 $41 = sp + 48|0;
 $52 = sp + 240|0;
 $57 = sp + 16|0;
 $59 = sp + 377|0;
 $63 = sp + 32|0;
 $66 = sp + 380|0;
 $67 = sp + 72|0;
 $75 = sp + 336|0;
 $76 = sp + 64|0;
 $79 = sp + 288|0;
 $80 = sp + 383|0;
 $81 = sp + 56|0;
 $90 = sp + 176|0;
 $91 = sp + 379|0;
 $92 = sp + 382|0;
 $93 = sp + 381|0;
 $88 = $this;
 $89 = $__u;
 $94 = $88;
 $95 = $89;
 $87 = $95;
 $96 = $87;
 $86 = $96;
 $97 = $86;
 $85 = $97;
 $98 = $85;
 $99 = ((($98)) + 4|0);
 $84 = $99;
 $100 = $84;
 $83 = $100;
 $101 = $83;
 $82 = $101;
 $102 = $82;
 $2 = $102;
 $103 = $2;
 ;HEAP8[$1>>0]=HEAP8[$3>>0]|0;
 $0 = $103;
 $15 = $90;
 $16 = $91;
 $17 = 0;
 $104 = $15;
 $105 = $17;
 ;HEAP8[$14>>0]=HEAP8[$18>>0]|0;
 $11 = $104;
 HEAP32[$12>>2] = $105;
 $106 = $11;
 $10 = $12;
 $107 = $10;
 $108 = HEAP32[$107>>2]|0;
 $4 = $14;
 ;HEAP8[$9>>0]=HEAP8[$13>>0]|0;
 $7 = $106;
 HEAP32[$8>>2] = $108;
 $109 = $7;
 $6 = $9;
 $5 = $8;
 $110 = $5;
 $111 = HEAP32[$110>>2]|0;
 HEAP32[$109>>2] = $111;
 $49 = $94;
 $50 = 0;
 $51 = $90;
 $112 = $49;
 $113 = $51;
 $48 = $113;
 $114 = $48;
 $46 = $52;
 $47 = $114;
 $115 = $46;
 $116 = $47;
 $45 = $116;
 $117 = $45;
 ;HEAP32[$115>>2]=HEAP32[$117>>2]|0;
 $118 = $47;
 $44 = $118;
 $119 = $44;
 $43 = $119;
 $120 = $43;
 $42 = $120;
 $121 = $42;
 HEAP32[$121>>2] = 0;
 ;HEAP8[$41>>0]=HEAP8[$52>>0]|0;HEAP8[$41+1>>0]=HEAP8[$52+1>>0]|0;HEAP8[$41+2>>0]=HEAP8[$52+2>>0]|0;HEAP8[$41+3>>0]=HEAP8[$52+3>>0]|0;
 $38 = $112;
 HEAP32[$39>>2] = 0;
 $122 = $38;
 $37 = $39;
 $123 = $37;
 $124 = HEAP32[$123>>2]|0;
 $19 = $41;
 $125 = $19;
 $24 = $40;
 $25 = $125;
 $126 = $24;
 $127 = $25;
 $23 = $127;
 $128 = $23;
 ;HEAP32[$126>>2]=HEAP32[$128>>2]|0;
 $129 = $25;
 $22 = $129;
 $130 = $22;
 $21 = $130;
 $131 = $21;
 $20 = $131;
 $132 = $20;
 HEAP32[$132>>2] = 0;
 ;HEAP8[$36>>0]=HEAP8[$40>>0]|0;HEAP8[$36+1>>0]=HEAP8[$40+1>>0]|0;HEAP8[$36+2>>0]=HEAP8[$40+2>>0]|0;HEAP8[$36+3>>0]=HEAP8[$40+3>>0]|0;
 $34 = $122;
 HEAP32[$35>>2] = $124;
 $133 = $34;
 $33 = $35;
 $134 = $33;
 $135 = HEAP32[$134>>2]|0;
 HEAP32[$133>>2] = $135;
 $136 = ((($133)) + 4|0);
 $26 = $36;
 $137 = $26;
 $31 = $136;
 $32 = $137;
 $138 = $31;
 $139 = $32;
 $30 = $139;
 $140 = $30;
 ;HEAP32[$138>>2]=HEAP32[$140>>2]|0;
 $141 = $32;
 $29 = $141;
 $142 = $29;
 $28 = $142;
 $143 = $28;
 $27 = $143;
 $144 = $27;
 HEAP32[$144>>2] = 0;
 $145 = ((($94)) + 8|0);
 $146 = $89;
 $55 = $146;
 $147 = $55;
 $148 = ((($147)) + 8|0);
 $54 = $148;
 $149 = $54;
 $53 = $149;
 $150 = $53;
 $58 = $150;
 $151 = $58;
 ;HEAP8[$57>>0]=HEAP8[$59>>0]|0;
 $56 = $151;
 ;HEAP8[$67>>0]=HEAP8[$92>>0]|0;
 $65 = $145;
 $152 = $65;
 $64 = $67;
 ;HEAP8[$63>>0]=HEAP8[$66>>0]|0;
 $62 = $152;
 $153 = $62;
 $61 = $63;
 $60 = $153;
 $154 = $60;
 HEAP32[$154>>2] = 0;
 $155 = ((($94)) + 12|0);
 $156 = $89;
 $70 = $156;
 $157 = $70;
 $158 = ((($157)) + 12|0);
 $69 = $158;
 $159 = $69;
 $68 = $159;
 ;HEAP8[$81>>0]=HEAP8[$93>>0]|0;
 $78 = $155;
 HEAP32[$79>>2] = 0;
 $160 = $78;
 $77 = $79;
 $161 = $77;
 $162 = HEAP32[$161>>2]|0;
 $71 = $81;
 ;HEAP8[$76>>0]=HEAP8[$80>>0]|0;
 $74 = $160;
 HEAP32[$75>>2] = $162;
 $163 = $74;
 $73 = $76;
 $72 = $75;
 $164 = $72;
 $165 = HEAP32[$164>>2]|0;
 HEAP32[$163>>2] = $165;
 $166 = ((($94)) + 16|0);
 $167 = $89;
 $168 = ((($167)) + 16|0);
 ;HEAP32[$166>>2]=HEAP32[$168>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
  // unreachable;
 } else {
  $11 = $14;
  $18 = $11;
  $19 = ((($18)) + 8|0);
  $10 = $19;
  $20 = $10;
  $9 = $20;
  $21 = $9;
  $22 = $13;
  $7 = $21;
  $8 = $22;
  $23 = $7;
  $24 = $8;
  $4 = $23;
  $5 = $24;
  $6 = 0;
  $25 = $5;
  $26 = $25<<3;
  $3 = $26;
  $27 = $3;
  $28 = (__Znwj($27)|0);
  $29 = ((($14)) + 4|0);
  HEAP32[$29>>2] = $28;
  HEAP32[$14>>2] = $28;
  $30 = HEAP32[$14>>2]|0;
  $31 = $13;
  $32 = (($30) + ($31<<3)|0);
  $2 = $14;
  $33 = $2;
  $34 = ((($33)) + 8|0);
  $1 = $34;
  $35 = $1;
  $0 = $35;
  $36 = $0;
  HEAP32[$36>>2] = $32;
  __ZNKSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEE14__annotate_newEj($14,0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator,$21,1);
  $29 = $__a;
  $30 = ((($21)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = $3;
  $0 = $43;
  $44 = $0;
  __ZN4rhea8variableC2ERKS0_($42,$44);
  __ZNSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $45 = ((($21)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 8|0);
  HEAP32[$45>>2] = $47;
  $48 = $19;
  $49 = ((($48)) + 8|0);
  $19 = $49;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN4rhea8variableENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -8|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
  $52 = $15;
  __ZN4rhea8variableD2Ev($52);
 }
 $13 = $30;
 $53 = $13;
 $54 = ((($53)) + 8|0);
 $12 = $54;
 $55 = $12;
 $11 = $55;
 $56 = $11;
 $57 = HEAP32[$30>>2]|0;
 $3 = $30;
 $58 = $3;
 $2 = $58;
 $59 = $2;
 $60 = ((($59)) + 8|0);
 $1 = $60;
 $61 = $1;
 $0 = $61;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$58>>2]|0;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = (($67|0) / 8)&-1;
 $8 = $56;
 $9 = $57;
 $10 = $68;
 $69 = $8;
 $70 = $9;
 $71 = $10;
 $5 = $69;
 $6 = $70;
 $7 = $71;
 $72 = $6;
 $4 = $72;
 $73 = $4;
 __ZdlPv($73);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 76|0;
 $11 = sp + 8|0;
 $13 = sp + 77|0;
 $18 = sp + 16|0;
 $19 = sp + 68|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 536870911;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 8)&-1;
 $39 = (($26) + ($38<<3)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 8)&-1;
 $55 = (($42) + ($54<<3)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<3)|0);
 __ZNKSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapIN4rhea8variableENS_13unordered_setIS2_NS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEES5_S7_NS8_INS_4pairIKS2_SA_EEEEEC2ERKSF_($this,$__u) {
 $this = $this|0;
 $__u = $__u|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 24|0;
 $4 = sp + 176|0;
 $6 = sp + 96|0;
 $8 = sp + 72|0;
 $22 = sp + 192|0;
 $23 = sp;
 $24 = sp + 8|0;
 $26 = sp + 16|0;
 $31 = sp + 132|0;
 $33 = sp + 140|0;
 $35 = sp + 148|0;
 $48 = sp + 184|0;
 $49 = sp + 32|0;
 $44 = $this;
 $45 = $__u;
 $50 = $44;
 $51 = $45;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEEC2ERKSI_($50,$51);
 $52 = $45;
 $43 = $52;
 $53 = $43;
 $42 = $53;
 $54 = $42;
 $41 = $54;
 $55 = $41;
 $40 = $55;
 $56 = $40;
 $39 = $56;
 $57 = $39;
 $58 = ((($57)) + 4|0);
 $38 = $58;
 $59 = $38;
 $37 = $59;
 $60 = $37;
 $36 = $60;
 $61 = $36;
 $62 = HEAP32[$61>>2]|0;
 __THREW__ = 0;
 invoke_vii(367,($50|0),($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if ($64) {
  $107 = ___cxa_find_matching_catch()|0;
  $108 = tempRet0;
  $46 = $107;
  $47 = $108;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEED2Ev($50);
  $109 = $46;
  $110 = $47;
  ___resumeException($109|0);
  // unreachable;
 }
 $65 = $45;
 $34 = $65;
 $66 = $34;
 $32 = $66;
 $67 = $32;
 $68 = ((($67)) + 8|0);
 $30 = $68;
 $69 = $30;
 $29 = $69;
 $70 = $29;
 $71 = HEAP32[$70>>2]|0;
 $27 = $31;
 $28 = $71;
 $72 = $27;
 $73 = $28;
 HEAP32[$72>>2] = $73;
 $74 = HEAP32[$31>>2]|0;
 HEAP32[$35>>2] = $74;
 ;HEAP8[$26>>0]=HEAP8[$35>>0]|0;HEAP8[$26+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$26+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$26+3>>0]=HEAP8[$35+3>>0]|0;
 $25 = $33;
 $75 = $25;
 ;HEAP32[$75>>2]=HEAP32[$26>>2]|0;
 $76 = HEAP32[$33>>2]|0;
 HEAP32[$48>>2] = $76;
 $77 = $45;
 $7 = $77;
 $78 = $7;
 $5 = $78;
 $2 = $4;
 $3 = 0;
 $79 = $2;
 $80 = $3;
 HEAP32[$79>>2] = $80;
 $81 = HEAP32[$4>>2]|0;
 HEAP32[$8>>2] = $81;
 ;HEAP8[$1>>0]=HEAP8[$8>>0]|0;HEAP8[$1+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$1+3>>0]=HEAP8[$8+3>>0]|0;
 $0 = $6;
 $82 = $0;
 ;HEAP32[$82>>2]=HEAP32[$1>>2]|0;
 $83 = HEAP32[$6>>2]|0;
 HEAP32[$49>>2] = $83;
 ;HEAP8[$23>>0]=HEAP8[$49>>0]|0;HEAP8[$23+1>>0]=HEAP8[$49+1>>0]|0;HEAP8[$23+2>>0]=HEAP8[$49+2>>0]|0;HEAP8[$23+3>>0]=HEAP8[$49+3>>0]|0;
 ;HEAP8[$24>>0]=HEAP8[$48>>0]|0;HEAP8[$24+1>>0]=HEAP8[$48+1>>0]|0;HEAP8[$24+2>>0]=HEAP8[$48+2>>0]|0;HEAP8[$24+3>>0]=HEAP8[$48+3>>0]|0;
 $21 = $50;
 $84 = $21;
 while(1) {
  $19 = $24;
  $20 = $23;
  $85 = $19;
  $86 = $20;
  $17 = $85;
  $18 = $86;
  $87 = $17;
  $88 = $18;
  $15 = $87;
  $16 = $88;
  $89 = $15;
  $90 = HEAP32[$89>>2]|0;
  $91 = $16;
  $92 = HEAP32[$91>>2]|0;
  $93 = ($90|0)==($92|0);
  $94 = $93 ^ 1;
  if (!($94)) {
   label = 6;
   break;
  }
  $12 = $24;
  $95 = $12;
  $11 = $95;
  $96 = $11;
  $97 = HEAP32[$96>>2]|0;
  $98 = ((($97)) + 8|0);
  $10 = $98;
  $99 = $10;
  $9 = $99;
  $100 = $9;
  __THREW__ = 0;
  invoke_viii(368,($22|0),($84|0),($100|0));
  $101 = __THREW__; __THREW__ = 0;
  $102 = $101&1;
  if ($102) {
   label = 7;
   break;
  }
  $14 = $24;
  $103 = $14;
  $13 = $103;
  $104 = $13;
  $105 = HEAP32[$104>>2]|0;
  $106 = HEAP32[$105>>2]|0;
  HEAP32[$104>>2] = $106;
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  $107 = ___cxa_find_matching_catch()|0;
  $108 = tempRet0;
  $46 = $107;
  $47 = $108;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEED2Ev($50);
  $109 = $46;
  $110 = $47;
  ___resumeException($109|0);
  // unreachable;
 }
}
function __ZNSt3__113unordered_mapIN4rhea8variableENS1_17linear_expressionENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEC2ERKSD_($this,$__u) {
 $this = $this|0;
 $__u = $__u|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 24|0;
 $4 = sp + 176|0;
 $6 = sp + 96|0;
 $8 = sp + 72|0;
 $22 = sp + 192|0;
 $23 = sp;
 $24 = sp + 8|0;
 $26 = sp + 16|0;
 $31 = sp + 132|0;
 $33 = sp + 140|0;
 $35 = sp + 148|0;
 $48 = sp + 184|0;
 $49 = sp + 32|0;
 $44 = $this;
 $45 = $__u;
 $50 = $44;
 $51 = $45;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEEC2ERKSG_($50,$51);
 $52 = $45;
 $43 = $52;
 $53 = $43;
 $42 = $53;
 $54 = $42;
 $41 = $54;
 $55 = $41;
 $40 = $55;
 $56 = $40;
 $39 = $56;
 $57 = $39;
 $58 = ((($57)) + 4|0);
 $38 = $58;
 $59 = $38;
 $37 = $59;
 $60 = $37;
 $36 = $60;
 $61 = $36;
 $62 = HEAP32[$61>>2]|0;
 __THREW__ = 0;
 invoke_vii(369,($50|0),($62|0));
 $63 = __THREW__; __THREW__ = 0;
 $64 = $63&1;
 if ($64) {
  $107 = ___cxa_find_matching_catch()|0;
  $108 = tempRet0;
  $46 = $107;
  $47 = $108;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEED2Ev($50);
  $109 = $46;
  $110 = $47;
  ___resumeException($109|0);
  // unreachable;
 }
 $65 = $45;
 $34 = $65;
 $66 = $34;
 $32 = $66;
 $67 = $32;
 $68 = ((($67)) + 8|0);
 $30 = $68;
 $69 = $30;
 $29 = $69;
 $70 = $29;
 $71 = HEAP32[$70>>2]|0;
 $27 = $31;
 $28 = $71;
 $72 = $27;
 $73 = $28;
 HEAP32[$72>>2] = $73;
 $74 = HEAP32[$31>>2]|0;
 HEAP32[$35>>2] = $74;
 ;HEAP8[$26>>0]=HEAP8[$35>>0]|0;HEAP8[$26+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$26+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$26+3>>0]=HEAP8[$35+3>>0]|0;
 $25 = $33;
 $75 = $25;
 ;HEAP32[$75>>2]=HEAP32[$26>>2]|0;
 $76 = HEAP32[$33>>2]|0;
 HEAP32[$48>>2] = $76;
 $77 = $45;
 $7 = $77;
 $78 = $7;
 $5 = $78;
 $2 = $4;
 $3 = 0;
 $79 = $2;
 $80 = $3;
 HEAP32[$79>>2] = $80;
 $81 = HEAP32[$4>>2]|0;
 HEAP32[$8>>2] = $81;
 ;HEAP8[$1>>0]=HEAP8[$8>>0]|0;HEAP8[$1+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$1+3>>0]=HEAP8[$8+3>>0]|0;
 $0 = $6;
 $82 = $0;
 ;HEAP32[$82>>2]=HEAP32[$1>>2]|0;
 $83 = HEAP32[$6>>2]|0;
 HEAP32[$49>>2] = $83;
 ;HEAP8[$23>>0]=HEAP8[$49>>0]|0;HEAP8[$23+1>>0]=HEAP8[$49+1>>0]|0;HEAP8[$23+2>>0]=HEAP8[$49+2>>0]|0;HEAP8[$23+3>>0]=HEAP8[$49+3>>0]|0;
 ;HEAP8[$24>>0]=HEAP8[$48>>0]|0;HEAP8[$24+1>>0]=HEAP8[$48+1>>0]|0;HEAP8[$24+2>>0]=HEAP8[$48+2>>0]|0;HEAP8[$24+3>>0]=HEAP8[$48+3>>0]|0;
 $21 = $50;
 $84 = $21;
 while(1) {
  $19 = $24;
  $20 = $23;
  $85 = $19;
  $86 = $20;
  $17 = $85;
  $18 = $86;
  $87 = $17;
  $88 = $18;
  $15 = $87;
  $16 = $88;
  $89 = $15;
  $90 = HEAP32[$89>>2]|0;
  $91 = $16;
  $92 = HEAP32[$91>>2]|0;
  $93 = ($90|0)==($92|0);
  $94 = $93 ^ 1;
  if (!($94)) {
   label = 6;
   break;
  }
  $12 = $24;
  $95 = $12;
  $11 = $95;
  $96 = $11;
  $97 = HEAP32[$96>>2]|0;
  $98 = ((($97)) + 8|0);
  $10 = $98;
  $99 = $10;
  $9 = $99;
  $100 = $9;
  __THREW__ = 0;
  invoke_viii(370,($22|0),($84|0),($100|0));
  $101 = __THREW__; __THREW__ = 0;
  $102 = $101&1;
  if ($102) {
   label = 7;
   break;
  }
  $14 = $24;
  $103 = $14;
  $13 = $103;
  $104 = $13;
  $105 = HEAP32[$104>>2]|0;
  $106 = HEAP32[$105>>2]|0;
  HEAP32[$104>>2] = $106;
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  $107 = ___cxa_find_matching_catch()|0;
  $108 = tempRet0;
  $46 = $107;
  $47 = $108;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEED2Ev($50);
  $109 = $46;
  $110 = $47;
  ___resumeException($109|0);
  // unreachable;
 }
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEEC2ERKSG_($this,$__u) {
 $this = $this|0;
 $__u = $__u|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 40|0;
 $3 = sp + 376|0;
 $8 = sp + 100|0;
 $9 = sp + 8|0;
 $12 = sp + 80|0;
 $13 = sp + 384|0;
 $14 = sp + 24|0;
 $18 = sp + 378|0;
 $35 = sp + 168|0;
 $36 = sp;
 $39 = sp + 348|0;
 $40 = sp + 356|0;
 $41 = sp + 48|0;
 $52 = sp + 240|0;
 $57 = sp + 16|0;
 $59 = sp + 377|0;
 $63 = sp + 32|0;
 $66 = sp + 380|0;
 $67 = sp + 72|0;
 $75 = sp + 336|0;
 $76 = sp + 64|0;
 $79 = sp + 288|0;
 $80 = sp + 383|0;
 $81 = sp + 56|0;
 $90 = sp + 176|0;
 $91 = sp + 379|0;
 $92 = sp + 382|0;
 $93 = sp + 381|0;
 $88 = $this;
 $89 = $__u;
 $94 = $88;
 $95 = $89;
 $87 = $95;
 $96 = $87;
 $86 = $96;
 $97 = $86;
 $85 = $97;
 $98 = $85;
 $99 = ((($98)) + 4|0);
 $84 = $99;
 $100 = $84;
 $83 = $100;
 $101 = $83;
 $82 = $101;
 $102 = $82;
 $2 = $102;
 $103 = $2;
 ;HEAP8[$1>>0]=HEAP8[$3>>0]|0;
 $0 = $103;
 $15 = $90;
 $16 = $91;
 $17 = 0;
 $104 = $15;
 $105 = $17;
 ;HEAP8[$14>>0]=HEAP8[$18>>0]|0;
 $11 = $104;
 HEAP32[$12>>2] = $105;
 $106 = $11;
 $10 = $12;
 $107 = $10;
 $108 = HEAP32[$107>>2]|0;
 $4 = $14;
 ;HEAP8[$9>>0]=HEAP8[$13>>0]|0;
 $7 = $106;
 HEAP32[$8>>2] = $108;
 $109 = $7;
 $6 = $9;
 $5 = $8;
 $110 = $5;
 $111 = HEAP32[$110>>2]|0;
 HEAP32[$109>>2] = $111;
 $49 = $94;
 $50 = 0;
 $51 = $90;
 $112 = $49;
 $113 = $51;
 $48 = $113;
 $114 = $48;
 $46 = $52;
 $47 = $114;
 $115 = $46;
 $116 = $47;
 $45 = $116;
 $117 = $45;
 ;HEAP32[$115>>2]=HEAP32[$117>>2]|0;
 $118 = $47;
 $44 = $118;
 $119 = $44;
 $43 = $119;
 $120 = $43;
 $42 = $120;
 $121 = $42;
 HEAP32[$121>>2] = 0;
 ;HEAP8[$41>>0]=HEAP8[$52>>0]|0;HEAP8[$41+1>>0]=HEAP8[$52+1>>0]|0;HEAP8[$41+2>>0]=HEAP8[$52+2>>0]|0;HEAP8[$41+3>>0]=HEAP8[$52+3>>0]|0;
 $38 = $112;
 HEAP32[$39>>2] = 0;
 $122 = $38;
 $37 = $39;
 $123 = $37;
 $124 = HEAP32[$123>>2]|0;
 $19 = $41;
 $125 = $19;
 $24 = $40;
 $25 = $125;
 $126 = $24;
 $127 = $25;
 $23 = $127;
 $128 = $23;
 ;HEAP32[$126>>2]=HEAP32[$128>>2]|0;
 $129 = $25;
 $22 = $129;
 $130 = $22;
 $21 = $130;
 $131 = $21;
 $20 = $131;
 $132 = $20;
 HEAP32[$132>>2] = 0;
 ;HEAP8[$36>>0]=HEAP8[$40>>0]|0;HEAP8[$36+1>>0]=HEAP8[$40+1>>0]|0;HEAP8[$36+2>>0]=HEAP8[$40+2>>0]|0;HEAP8[$36+3>>0]=HEAP8[$40+3>>0]|0;
 $34 = $122;
 HEAP32[$35>>2] = $124;
 $133 = $34;
 $33 = $35;
 $134 = $33;
 $135 = HEAP32[$134>>2]|0;
 HEAP32[$133>>2] = $135;
 $136 = ((($133)) + 4|0);
 $26 = $36;
 $137 = $26;
 $31 = $136;
 $32 = $137;
 $138 = $31;
 $139 = $32;
 $30 = $139;
 $140 = $30;
 ;HEAP32[$138>>2]=HEAP32[$140>>2]|0;
 $141 = $32;
 $29 = $141;
 $142 = $29;
 $28 = $142;
 $143 = $28;
 $27 = $143;
 $144 = $27;
 HEAP32[$144>>2] = 0;
 $145 = ((($94)) + 8|0);
 $146 = $89;
 $55 = $146;
 $147 = $55;
 $148 = ((($147)) + 8|0);
 $54 = $148;
 $149 = $54;
 $53 = $149;
 $150 = $53;
 $58 = $150;
 $151 = $58;
 ;HEAP8[$57>>0]=HEAP8[$59>>0]|0;
 $56 = $151;
 ;HEAP8[$67>>0]=HEAP8[$92>>0]|0;
 $65 = $145;
 $152 = $65;
 $64 = $67;
 ;HEAP8[$63>>0]=HEAP8[$66>>0]|0;
 $62 = $152;
 $153 = $62;
 $61 = $63;
 $60 = $153;
 $154 = $60;
 HEAP32[$154>>2] = 0;
 $155 = ((($94)) + 12|0);
 $156 = $89;
 $70 = $156;
 $157 = $70;
 $158 = ((($157)) + 12|0);
 $69 = $158;
 $159 = $69;
 $68 = $159;
 ;HEAP8[$81>>0]=HEAP8[$93>>0]|0;
 $78 = $155;
 HEAP32[$79>>2] = 0;
 $160 = $78;
 $77 = $79;
 $161 = $77;
 $162 = HEAP32[$161>>2]|0;
 $71 = $81;
 ;HEAP8[$76>>0]=HEAP8[$80>>0]|0;
 $74 = $160;
 HEAP32[$75>>2] = $162;
 $163 = $74;
 $73 = $76;
 $72 = $75;
 $164 = $72;
 $165 = HEAP32[$164>>2]|0;
 HEAP32[$163>>2] = $165;
 $166 = ((($94)) + 16|0);
 $167 = $89;
 $168 = ((($167)) + 16|0);
 ;HEAP32[$166>>2]=HEAP32[$168>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE15__insert_uniqueIRKNS_4pairIKS3_S4_EEEENSI_INS_15__hash_iteratorIPNS_11__hash_nodeIS5_PvEEEEbEEOT_($agg$result,$this,$__x) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__t$i = 0;
 var $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp;
 $17 = sp + 284|0;
 $48 = sp + 8|0;
 $51 = sp + 285|0;
 $__h = sp + 120|0;
 $61 = $this;
 $62 = $__x;
 $66 = $61;
 $67 = $62;
 $60 = $67;
 $68 = $60;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE16__construct_nodeIJRKNS_4pairIKS3_S4_EEEEENS_10unique_ptrINS_11__hash_nodeIS5_PvEENS_22__hash_node_destructorINSE_ISQ_EEEEEEDpOT_($__h,$66,$68);
 $33 = $__h;
 $69 = $33;
 $32 = $69;
 $70 = $32;
 $31 = $70;
 $71 = $31;
 $72 = HEAP32[$71>>2]|0;
 __THREW__ = 0;
 invoke_viii(217,($agg$result|0),($66|0),($72|0));
 $73 = __THREW__; __THREW__ = 0;
 $74 = $73&1;
 if ($74) {
  $84 = ___cxa_find_matching_catch()|0;
  $85 = tempRet0;
  $63 = $84;
  $64 = $85;
  $25 = $__h;
  $86 = $25;
  $23 = $86;
  $24 = 0;
  $87 = $23;
  $22 = $87;
  $88 = $22;
  $21 = $88;
  $89 = $21;
  $90 = HEAP32[$89>>2]|0;
  $__tmp$i$i1 = $90;
  $91 = $24;
  $3 = $87;
  $92 = $3;
  $2 = $92;
  $93 = $2;
  HEAP32[$93>>2] = $91;
  $94 = $__tmp$i$i1;
  $95 = ($94|0)!=(0|0);
  if (!($95)) {
   $156 = $63;
   $157 = $64;
   ___resumeException($156|0);
   // unreachable;
  }
  $1 = $87;
  $96 = $1;
  $0 = $96;
  $97 = $0;
  $98 = ((($97)) + 4|0);
  $99 = $__tmp$i$i1;
  $19 = $98;
  $20 = $99;
  $100 = $19;
  $101 = ((($100)) + 4|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&1;
  if ($103) {
   $104 = HEAP32[$100>>2]|0;
   $105 = $20;
   $106 = ((($105)) + 8|0);
   $18 = $106;
   $107 = $18;
   $15 = $104;
   $16 = $107;
   $108 = $15;
   $109 = $16;
   ;HEAP8[$14>>0]=HEAP8[$17>>0]|0;
   $12 = $108;
   $13 = $109;
   $110 = $13;
   $11 = $110;
   $111 = $11;
   __ZNSt3__14pairIKN4rhea8variableENS1_17linear_expressionEED2Ev($111);
  }
  $112 = $20;
  $113 = ($112|0)!=(0|0);
  if (!($113)) {
   $156 = $63;
   $157 = $64;
   ___resumeException($156|0);
   // unreachable;
  }
  $114 = HEAP32[$100>>2]|0;
  $115 = $20;
  $8 = $114;
  $9 = $115;
  $10 = 1;
  $116 = $8;
  $117 = $9;
  $118 = $10;
  $5 = $116;
  $6 = $117;
  $7 = $118;
  $119 = $6;
  $4 = $119;
  $120 = $4;
  __ZdlPv($120);
  $156 = $63;
  $157 = $64;
  ___resumeException($156|0);
  // unreachable;
 }
 $75 = ((($agg$result)) + 4|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&1;
 if ($77) {
  $30 = $__h;
  $78 = $30;
  $29 = $78;
  $79 = $29;
  $28 = $79;
  $80 = $28;
  $81 = HEAP32[$80>>2]|0;
  $__t$i = $81;
  $27 = $78;
  $82 = $27;
  $26 = $82;
  $83 = $26;
  HEAP32[$83>>2] = 0;
 }
 $65 = 1;
 $59 = $__h;
 $121 = $59;
 $57 = $121;
 $58 = 0;
 $122 = $57;
 $56 = $122;
 $123 = $56;
 $55 = $123;
 $124 = $55;
 $125 = HEAP32[$124>>2]|0;
 $__tmp$i$i = $125;
 $126 = $58;
 $37 = $122;
 $127 = $37;
 $36 = $127;
 $128 = $36;
 HEAP32[$128>>2] = $126;
 $129 = $__tmp$i$i;
 $130 = ($129|0)!=(0|0);
 if (!($130)) {
  STACKTOP = sp;return;
 }
 $35 = $122;
 $131 = $35;
 $34 = $131;
 $132 = $34;
 $133 = ((($132)) + 4|0);
 $134 = $__tmp$i$i;
 $53 = $133;
 $54 = $134;
 $135 = $53;
 $136 = ((($135)) + 4|0);
 $137 = HEAP8[$136>>0]|0;
 $138 = $137&1;
 if ($138) {
  $139 = HEAP32[$135>>2]|0;
  $140 = $54;
  $141 = ((($140)) + 8|0);
  $52 = $141;
  $142 = $52;
  $49 = $139;
  $50 = $142;
  $143 = $49;
  $144 = $50;
  ;HEAP8[$48>>0]=HEAP8[$51>>0]|0;
  $46 = $143;
  $47 = $144;
  $145 = $47;
  $45 = $145;
  $146 = $45;
  __ZNSt3__14pairIKN4rhea8variableENS1_17linear_expressionEED2Ev($146);
 }
 $147 = $54;
 $148 = ($147|0)!=(0|0);
 if (!($148)) {
  STACKTOP = sp;return;
 }
 $149 = HEAP32[$135>>2]|0;
 $150 = $54;
 $42 = $149;
 $43 = $150;
 $44 = 1;
 $151 = $42;
 $152 = $43;
 $153 = $44;
 $39 = $151;
 $40 = $152;
 $41 = $153;
 $154 = $40;
 $38 = $154;
 $155 = $38;
 __ZdlPv($155);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE16__construct_nodeIJRKNS_4pairIKS3_S4_EEEEENS_10unique_ptrINS_11__hash_nodeIS5_PvEENS_22__hash_node_destructorINSE_ISQ_EEEEEEDpOT_($agg$result,$this,$__args) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__args = $__args|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__na = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 8|0;
 $20 = sp + 552|0;
 $57 = sp;
 $60 = sp + 553|0;
 $73 = sp + 312|0;
 $74 = sp + 16|0;
 $77 = sp + 328|0;
 $78 = sp + 336|0;
 $79 = sp + 32|0;
 $84 = sp + 368|0;
 $108 = sp + 24|0;
 $111 = sp + 555|0;
 $125 = sp + 556|0;
 $126 = sp + 480|0;
 $123 = $this;
 $124 = $__args;
 $130 = $123;
 $122 = $130;
 $131 = $122;
 $132 = ((($131)) + 8|0);
 $121 = $132;
 $133 = $121;
 $120 = $133;
 $134 = $120;
 $__na = $134;
 $$expand_i1_val = 0;
 HEAP8[$125>>0] = $$expand_i1_val;
 $135 = $__na;
 $92 = $135;
 $93 = 1;
 $136 = $92;
 $137 = $93;
 $89 = $136;
 $90 = $137;
 $91 = 0;
 $138 = $90;
 $139 = ($138*40)|0;
 $88 = $139;
 $140 = $88;
 $141 = (__Znwj($140)|0);
 $142 = $__na;
 $85 = $126;
 $86 = $142;
 $87 = 0;
 $143 = $85;
 $144 = $86;
 HEAP32[$143>>2] = $144;
 $145 = ((($143)) + 4|0);
 $146 = $87;
 $147 = $146&1;
 $148 = $147&1;
 HEAP8[$145>>0] = $148;
 $81 = $agg$result;
 $82 = $141;
 $83 = $126;
 $149 = $81;
 $150 = $82;
 $151 = $83;
 $80 = $151;
 $152 = $80;
 ;HEAP32[$84>>2]=HEAP32[$152>>2]|0;HEAP32[$84+4>>2]=HEAP32[$152+4>>2]|0;
 ;HEAP8[$79>>0]=HEAP8[$84>>0]|0;HEAP8[$79+1>>0]=HEAP8[$84+1>>0]|0;HEAP8[$79+2>>0]=HEAP8[$84+2>>0]|0;HEAP8[$79+3>>0]=HEAP8[$84+3>>0]|0;HEAP8[$79+4>>0]=HEAP8[$84+4>>0]|0;HEAP8[$79+5>>0]=HEAP8[$84+5>>0]|0;HEAP8[$79+6>>0]=HEAP8[$84+6>>0]|0;HEAP8[$79+7>>0]=HEAP8[$84+7>>0]|0;
 $76 = $149;
 HEAP32[$77>>2] = $150;
 $153 = $76;
 $75 = $77;
 $154 = $75;
 $155 = HEAP32[$154>>2]|0;
 $69 = $79;
 $156 = $69;
 ;HEAP32[$78>>2]=HEAP32[$156>>2]|0;HEAP32[$78+4>>2]=HEAP32[$156+4>>2]|0;
 ;HEAP8[$74>>0]=HEAP8[$78>>0]|0;HEAP8[$74+1>>0]=HEAP8[$78+1>>0]|0;HEAP8[$74+2>>0]=HEAP8[$78+2>>0]|0;HEAP8[$74+3>>0]=HEAP8[$78+3>>0]|0;HEAP8[$74+4>>0]=HEAP8[$78+4>>0]|0;HEAP8[$74+5>>0]=HEAP8[$78+5>>0]|0;HEAP8[$74+6>>0]=HEAP8[$78+6>>0]|0;HEAP8[$74+7>>0]=HEAP8[$78+7>>0]|0;
 $72 = $153;
 HEAP32[$73>>2] = $155;
 $157 = $72;
 $71 = $73;
 $158 = $71;
 $159 = HEAP32[$158>>2]|0;
 HEAP32[$157>>2] = $159;
 $160 = ((($157)) + 4|0);
 $70 = $74;
 $161 = $70;
 ;HEAP32[$160>>2]=HEAP32[$161>>2]|0;HEAP32[$160+4>>2]=HEAP32[$161+4>>2]|0;
 $162 = $__na;
 $42 = $agg$result;
 $163 = $42;
 $41 = $163;
 $164 = $41;
 $40 = $164;
 $165 = $40;
 $166 = HEAP32[$165>>2]|0;
 $167 = ((($166)) + 8|0);
 $39 = $167;
 $168 = $39;
 $169 = $124;
 $30 = $169;
 $170 = $30;
 $17 = $162;
 $18 = $168;
 $19 = $170;
 $171 = $17;
 $172 = $18;
 $173 = $19;
 $16 = $173;
 $174 = $16;
 ;HEAP8[$15>>0]=HEAP8[$20>>0]|0;
 $12 = $171;
 $13 = $172;
 $14 = $174;
 $175 = $12;
 $176 = $13;
 $177 = $14;
 $11 = $177;
 $178 = $11;
 $8 = $175;
 $9 = $176;
 $10 = $178;
 $179 = $9;
 $180 = $10;
 $7 = $180;
 $181 = $7;
 $5 = $179;
 $6 = $181;
 $182 = $5;
 $183 = $6;
 $4 = $183;
 $184 = $4;
 $0 = $182;
 $1 = $184;
 $185 = $0;
 $186 = $1;
 __ZN4rhea8variableC2ERKS0_($185,$186);
 $187 = ((($185)) + 8|0);
 $188 = $1;
 $189 = ((($188)) + 8|0);
 __THREW__ = 0;
 invoke_vii(296,($187|0),($189|0));
 $190 = __THREW__; __THREW__ = 0;
 $191 = $190&1;
 do {
  if ($191) {
   $192 = ___cxa_find_matching_catch()|0;
   $193 = tempRet0;
   $2 = $192;
   $3 = $193;
   __ZN4rhea8variableD2Ev($185);
   $194 = $2;
   $195 = $3;
   $eh$lpad$body$index2Z2D = $195;$eh$lpad$body$indexZ2D = $194;
  } else {
   $23 = $agg$result;
   $196 = $23;
   $22 = $196;
   $197 = $22;
   $21 = $197;
   $198 = $21;
   $199 = ((($198)) + 4|0);
   $200 = ((($199)) + 4|0);
   HEAP8[$200>>0] = 1;
   $26 = $130;
   $201 = $26;
   $202 = ((($201)) + 12|0);
   $25 = $202;
   $203 = $25;
   $24 = $203;
   $204 = $24;
   $29 = $agg$result;
   $205 = $29;
   $28 = $205;
   $206 = $28;
   $27 = $206;
   $207 = $27;
   $208 = HEAP32[$207>>2]|0;
   $209 = ((($208)) + 8|0);
   $31 = $204;
   $32 = $209;
   $210 = $31;
   $211 = $32;
   __THREW__ = 0;
   $212 = (invoke_iii(365,($210|0),($211|0))|0);
   $213 = __THREW__; __THREW__ = 0;
   $214 = $213&1;
   if ($214) {
    $225 = ___cxa_find_matching_catch()|0;
    $226 = tempRet0;
    $eh$lpad$body$index2Z2D = $226;$eh$lpad$body$indexZ2D = $225;
    break;
   }
   $35 = $agg$result;
   $215 = $35;
   $34 = $215;
   $216 = $34;
   $33 = $216;
   $217 = $33;
   $218 = HEAP32[$217>>2]|0;
   $219 = ((($218)) + 4|0);
   HEAP32[$219>>2] = $212;
   $38 = $agg$result;
   $220 = $38;
   $37 = $220;
   $221 = $37;
   $36 = $221;
   $222 = $36;
   $223 = HEAP32[$222>>2]|0;
   HEAP32[$223>>2] = 0;
   $$expand_i1_val7 = 1;
   HEAP8[$125>>0] = $$expand_i1_val7;
   $129 = 1;
   $$pre_trunc = HEAP8[$125>>0]|0;
   $224 = $$pre_trunc&1;
   if ($224) {
    STACKTOP = sp;return;
   }
   $119 = $agg$result;
   $262 = $119;
   $117 = $262;
   $118 = 0;
   $263 = $117;
   $116 = $263;
   $264 = $116;
   $115 = $264;
   $265 = $115;
   $266 = HEAP32[$265>>2]|0;
   $__tmp$i$i = $266;
   $267 = $118;
   $97 = $263;
   $268 = $97;
   $96 = $268;
   $269 = $96;
   HEAP32[$269>>2] = $267;
   $270 = $__tmp$i$i;
   $271 = ($270|0)!=(0|0);
   if (!($271)) {
    STACKTOP = sp;return;
   }
   $95 = $263;
   $272 = $95;
   $94 = $272;
   $273 = $94;
   $274 = ((($273)) + 4|0);
   $275 = $__tmp$i$i;
   $113 = $274;
   $114 = $275;
   $276 = $113;
   $277 = ((($276)) + 4|0);
   $278 = HEAP8[$277>>0]|0;
   $279 = $278&1;
   if ($279) {
    $280 = HEAP32[$276>>2]|0;
    $281 = $114;
    $282 = ((($281)) + 8|0);
    $112 = $282;
    $283 = $112;
    $109 = $280;
    $110 = $283;
    $284 = $109;
    $285 = $110;
    ;HEAP8[$108>>0]=HEAP8[$111>>0]|0;
    $106 = $284;
    $107 = $285;
    $286 = $107;
    $105 = $286;
    $287 = $105;
    __ZNSt3__14pairIKN4rhea8variableENS1_17linear_expressionEED2Ev($287);
   }
   $288 = $114;
   $289 = ($288|0)!=(0|0);
   if (!($289)) {
    STACKTOP = sp;return;
   }
   $290 = HEAP32[$276>>2]|0;
   $291 = $114;
   $102 = $290;
   $103 = $291;
   $104 = 1;
   $292 = $102;
   $293 = $103;
   $294 = $104;
   $99 = $292;
   $100 = $293;
   $101 = $294;
   $295 = $100;
   $98 = $295;
   $296 = $98;
   __ZdlPv($296);
   STACKTOP = sp;return;
  }
 } while(0);
 $127 = $eh$lpad$body$indexZ2D;
 $128 = $eh$lpad$body$index2Z2D;
 $68 = $agg$result;
 $227 = $68;
 $66 = $227;
 $67 = 0;
 $228 = $66;
 $65 = $228;
 $229 = $65;
 $64 = $229;
 $230 = $64;
 $231 = HEAP32[$230>>2]|0;
 $__tmp$i$i1 = $231;
 $232 = $67;
 $46 = $228;
 $233 = $46;
 $45 = $233;
 $234 = $45;
 HEAP32[$234>>2] = $232;
 $235 = $__tmp$i$i1;
 $236 = ($235|0)!=(0|0);
 if (!($236)) {
  $297 = $127;
  $298 = $128;
  ___resumeException($297|0);
  // unreachable;
 }
 $44 = $228;
 $237 = $44;
 $43 = $237;
 $238 = $43;
 $239 = ((($238)) + 4|0);
 $240 = $__tmp$i$i1;
 $62 = $239;
 $63 = $240;
 $241 = $62;
 $242 = ((($241)) + 4|0);
 $243 = HEAP8[$242>>0]|0;
 $244 = $243&1;
 if ($244) {
  $245 = HEAP32[$241>>2]|0;
  $246 = $63;
  $247 = ((($246)) + 8|0);
  $61 = $247;
  $248 = $61;
  $58 = $245;
  $59 = $248;
  $249 = $58;
  $250 = $59;
  ;HEAP8[$57>>0]=HEAP8[$60>>0]|0;
  $55 = $249;
  $56 = $250;
  $251 = $56;
  $54 = $251;
  $252 = $54;
  __ZNSt3__14pairIKN4rhea8variableENS1_17linear_expressionEED2Ev($252);
 }
 $253 = $63;
 $254 = ($253|0)!=(0|0);
 if (!($254)) {
  $297 = $127;
  $298 = $128;
  ___resumeException($297|0);
  // unreachable;
 }
 $255 = HEAP32[$241>>2]|0;
 $256 = $63;
 $51 = $255;
 $52 = $256;
 $53 = 1;
 $257 = $51;
 $258 = $52;
 $259 = $53;
 $48 = $257;
 $49 = $258;
 $50 = $259;
 $260 = $49;
 $47 = $260;
 $261 = $47;
 __ZdlPv($261);
 $297 = $127;
 $298 = $128;
 ___resumeException($297|0);
 // unreachable;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEEC2ERKSI_($this,$__u) {
 $this = $this|0;
 $__u = $__u|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 40|0;
 $3 = sp + 376|0;
 $8 = sp + 100|0;
 $9 = sp + 8|0;
 $12 = sp + 80|0;
 $13 = sp + 384|0;
 $14 = sp + 24|0;
 $18 = sp + 378|0;
 $35 = sp + 168|0;
 $36 = sp;
 $39 = sp + 348|0;
 $40 = sp + 356|0;
 $41 = sp + 48|0;
 $52 = sp + 240|0;
 $57 = sp + 16|0;
 $59 = sp + 377|0;
 $63 = sp + 32|0;
 $66 = sp + 380|0;
 $67 = sp + 72|0;
 $75 = sp + 336|0;
 $76 = sp + 64|0;
 $79 = sp + 288|0;
 $80 = sp + 383|0;
 $81 = sp + 56|0;
 $90 = sp + 176|0;
 $91 = sp + 379|0;
 $92 = sp + 382|0;
 $93 = sp + 381|0;
 $88 = $this;
 $89 = $__u;
 $94 = $88;
 $95 = $89;
 $87 = $95;
 $96 = $87;
 $86 = $96;
 $97 = $86;
 $85 = $97;
 $98 = $85;
 $99 = ((($98)) + 4|0);
 $84 = $99;
 $100 = $84;
 $83 = $100;
 $101 = $83;
 $82 = $101;
 $102 = $82;
 $2 = $102;
 $103 = $2;
 ;HEAP8[$1>>0]=HEAP8[$3>>0]|0;
 $0 = $103;
 $15 = $90;
 $16 = $91;
 $17 = 0;
 $104 = $15;
 $105 = $17;
 ;HEAP8[$14>>0]=HEAP8[$18>>0]|0;
 $11 = $104;
 HEAP32[$12>>2] = $105;
 $106 = $11;
 $10 = $12;
 $107 = $10;
 $108 = HEAP32[$107>>2]|0;
 $4 = $14;
 ;HEAP8[$9>>0]=HEAP8[$13>>0]|0;
 $7 = $106;
 HEAP32[$8>>2] = $108;
 $109 = $7;
 $6 = $9;
 $5 = $8;
 $110 = $5;
 $111 = HEAP32[$110>>2]|0;
 HEAP32[$109>>2] = $111;
 $49 = $94;
 $50 = 0;
 $51 = $90;
 $112 = $49;
 $113 = $51;
 $48 = $113;
 $114 = $48;
 $46 = $52;
 $47 = $114;
 $115 = $46;
 $116 = $47;
 $45 = $116;
 $117 = $45;
 ;HEAP32[$115>>2]=HEAP32[$117>>2]|0;
 $118 = $47;
 $44 = $118;
 $119 = $44;
 $43 = $119;
 $120 = $43;
 $42 = $120;
 $121 = $42;
 HEAP32[$121>>2] = 0;
 ;HEAP8[$41>>0]=HEAP8[$52>>0]|0;HEAP8[$41+1>>0]=HEAP8[$52+1>>0]|0;HEAP8[$41+2>>0]=HEAP8[$52+2>>0]|0;HEAP8[$41+3>>0]=HEAP8[$52+3>>0]|0;
 $38 = $112;
 HEAP32[$39>>2] = 0;
 $122 = $38;
 $37 = $39;
 $123 = $37;
 $124 = HEAP32[$123>>2]|0;
 $19 = $41;
 $125 = $19;
 $24 = $40;
 $25 = $125;
 $126 = $24;
 $127 = $25;
 $23 = $127;
 $128 = $23;
 ;HEAP32[$126>>2]=HEAP32[$128>>2]|0;
 $129 = $25;
 $22 = $129;
 $130 = $22;
 $21 = $130;
 $131 = $21;
 $20 = $131;
 $132 = $20;
 HEAP32[$132>>2] = 0;
 ;HEAP8[$36>>0]=HEAP8[$40>>0]|0;HEAP8[$36+1>>0]=HEAP8[$40+1>>0]|0;HEAP8[$36+2>>0]=HEAP8[$40+2>>0]|0;HEAP8[$36+3>>0]=HEAP8[$40+3>>0]|0;
 $34 = $122;
 HEAP32[$35>>2] = $124;
 $133 = $34;
 $33 = $35;
 $134 = $33;
 $135 = HEAP32[$134>>2]|0;
 HEAP32[$133>>2] = $135;
 $136 = ((($133)) + 4|0);
 $26 = $36;
 $137 = $26;
 $31 = $136;
 $32 = $137;
 $138 = $31;
 $139 = $32;
 $30 = $139;
 $140 = $30;
 ;HEAP32[$138>>2]=HEAP32[$140>>2]|0;
 $141 = $32;
 $29 = $141;
 $142 = $29;
 $28 = $142;
 $143 = $28;
 $27 = $143;
 $144 = $27;
 HEAP32[$144>>2] = 0;
 $145 = ((($94)) + 8|0);
 $146 = $89;
 $55 = $146;
 $147 = $55;
 $148 = ((($147)) + 8|0);
 $54 = $148;
 $149 = $54;
 $53 = $149;
 $150 = $53;
 $58 = $150;
 $151 = $58;
 ;HEAP8[$57>>0]=HEAP8[$59>>0]|0;
 $56 = $151;
 ;HEAP8[$67>>0]=HEAP8[$92>>0]|0;
 $65 = $145;
 $152 = $65;
 $64 = $67;
 ;HEAP8[$63>>0]=HEAP8[$66>>0]|0;
 $62 = $152;
 $153 = $62;
 $61 = $63;
 $60 = $153;
 $154 = $60;
 HEAP32[$154>>2] = 0;
 $155 = ((($94)) + 12|0);
 $156 = $89;
 $70 = $156;
 $157 = $70;
 $158 = ((($157)) + 12|0);
 $69 = $158;
 $159 = $69;
 $68 = $159;
 ;HEAP8[$81>>0]=HEAP8[$93>>0]|0;
 $78 = $155;
 HEAP32[$79>>2] = 0;
 $160 = $78;
 $77 = $79;
 $161 = $77;
 $162 = HEAP32[$161>>2]|0;
 $71 = $81;
 ;HEAP8[$76>>0]=HEAP8[$80>>0]|0;
 $74 = $160;
 HEAP32[$75>>2] = $162;
 $163 = $74;
 $73 = $76;
 $72 = $75;
 $164 = $72;
 $165 = HEAP32[$164>>2]|0;
 HEAP32[$163>>2] = $165;
 $166 = ((($94)) + 16|0);
 $167 = $89;
 $168 = ((($167)) + 16|0);
 ;HEAP32[$166>>2]=HEAP32[$168>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEE15__insert_uniqueIRKNS_4pairIKS3_SB_EEEENSK_INS_15__hash_iteratorIPNS_11__hash_nodeISC_PvEEEEbEEOT_($agg$result,$this,$__x) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__t$i = 0;
 var $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp;
 $17 = sp + 284|0;
 $48 = sp + 8|0;
 $51 = sp + 285|0;
 $__h = sp + 120|0;
 $61 = $this;
 $62 = $__x;
 $66 = $61;
 $67 = $62;
 $60 = $67;
 $68 = $60;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEE16__construct_nodeIJRKNS_4pairIKS3_SB_EEEEENS_10unique_ptrINS_11__hash_nodeISC_PvEENS_22__hash_node_destructorINS9_ISS_EEEEEEDpOT_($__h,$66,$68);
 $33 = $__h;
 $69 = $33;
 $32 = $69;
 $70 = $32;
 $31 = $70;
 $71 = $31;
 $72 = HEAP32[$71>>2]|0;
 __THREW__ = 0;
 invoke_viii(222,($agg$result|0),($66|0),($72|0));
 $73 = __THREW__; __THREW__ = 0;
 $74 = $73&1;
 if ($74) {
  $84 = ___cxa_find_matching_catch()|0;
  $85 = tempRet0;
  $63 = $84;
  $64 = $85;
  $25 = $__h;
  $86 = $25;
  $23 = $86;
  $24 = 0;
  $87 = $23;
  $22 = $87;
  $88 = $22;
  $21 = $88;
  $89 = $21;
  $90 = HEAP32[$89>>2]|0;
  $__tmp$i$i1 = $90;
  $91 = $24;
  $3 = $87;
  $92 = $3;
  $2 = $92;
  $93 = $2;
  HEAP32[$93>>2] = $91;
  $94 = $__tmp$i$i1;
  $95 = ($94|0)!=(0|0);
  if (!($95)) {
   $156 = $63;
   $157 = $64;
   ___resumeException($156|0);
   // unreachable;
  }
  $1 = $87;
  $96 = $1;
  $0 = $96;
  $97 = $0;
  $98 = ((($97)) + 4|0);
  $99 = $__tmp$i$i1;
  $19 = $98;
  $20 = $99;
  $100 = $19;
  $101 = ((($100)) + 4|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&1;
  if ($103) {
   $104 = HEAP32[$100>>2]|0;
   $105 = $20;
   $106 = ((($105)) + 8|0);
   $18 = $106;
   $107 = $18;
   $15 = $104;
   $16 = $107;
   $108 = $15;
   $109 = $16;
   ;HEAP8[$14>>0]=HEAP8[$17>>0]|0;
   $12 = $108;
   $13 = $109;
   $110 = $13;
   $11 = $110;
   $111 = $11;
   __ZNSt3__14pairIKN4rhea8variableENS_13unordered_setIS2_NS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEEED2Ev($111);
  }
  $112 = $20;
  $113 = ($112|0)!=(0|0);
  if (!($113)) {
   $156 = $63;
   $157 = $64;
   ___resumeException($156|0);
   // unreachable;
  }
  $114 = HEAP32[$100>>2]|0;
  $115 = $20;
  $8 = $114;
  $9 = $115;
  $10 = 1;
  $116 = $8;
  $117 = $9;
  $118 = $10;
  $5 = $116;
  $6 = $117;
  $7 = $118;
  $119 = $6;
  $4 = $119;
  $120 = $4;
  __ZdlPv($120);
  $156 = $63;
  $157 = $64;
  ___resumeException($156|0);
  // unreachable;
 }
 $75 = ((($agg$result)) + 4|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&1;
 if ($77) {
  $30 = $__h;
  $78 = $30;
  $29 = $78;
  $79 = $29;
  $28 = $79;
  $80 = $28;
  $81 = HEAP32[$80>>2]|0;
  $__t$i = $81;
  $27 = $78;
  $82 = $27;
  $26 = $82;
  $83 = $26;
  HEAP32[$83>>2] = 0;
 }
 $65 = 1;
 $59 = $__h;
 $121 = $59;
 $57 = $121;
 $58 = 0;
 $122 = $57;
 $56 = $122;
 $123 = $56;
 $55 = $123;
 $124 = $55;
 $125 = HEAP32[$124>>2]|0;
 $__tmp$i$i = $125;
 $126 = $58;
 $37 = $122;
 $127 = $37;
 $36 = $127;
 $128 = $36;
 HEAP32[$128>>2] = $126;
 $129 = $__tmp$i$i;
 $130 = ($129|0)!=(0|0);
 if (!($130)) {
  STACKTOP = sp;return;
 }
 $35 = $122;
 $131 = $35;
 $34 = $131;
 $132 = $34;
 $133 = ((($132)) + 4|0);
 $134 = $__tmp$i$i;
 $53 = $133;
 $54 = $134;
 $135 = $53;
 $136 = ((($135)) + 4|0);
 $137 = HEAP8[$136>>0]|0;
 $138 = $137&1;
 if ($138) {
  $139 = HEAP32[$135>>2]|0;
  $140 = $54;
  $141 = ((($140)) + 8|0);
  $52 = $141;
  $142 = $52;
  $49 = $139;
  $50 = $142;
  $143 = $49;
  $144 = $50;
  ;HEAP8[$48>>0]=HEAP8[$51>>0]|0;
  $46 = $143;
  $47 = $144;
  $145 = $47;
  $45 = $145;
  $146 = $45;
  __ZNSt3__14pairIKN4rhea8variableENS_13unordered_setIS2_NS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEEED2Ev($146);
 }
 $147 = $54;
 $148 = ($147|0)!=(0|0);
 if (!($148)) {
  STACKTOP = sp;return;
 }
 $149 = HEAP32[$135>>2]|0;
 $150 = $54;
 $42 = $149;
 $43 = $150;
 $44 = 1;
 $151 = $42;
 $152 = $43;
 $153 = $44;
 $39 = $151;
 $40 = $152;
 $41 = $153;
 $154 = $40;
 $38 = $154;
 $155 = $38;
 __ZdlPv($155);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEE16__construct_nodeIJRKNS_4pairIKS3_SB_EEEEENS_10unique_ptrINS_11__hash_nodeISC_PvEENS_22__hash_node_destructorINS9_ISS_EEEEEEDpOT_($agg$result,$this,$__args) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__args = $__args|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__na = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 8|0;
 $20 = sp + 552|0;
 $57 = sp;
 $60 = sp + 553|0;
 $73 = sp + 312|0;
 $74 = sp + 16|0;
 $77 = sp + 328|0;
 $78 = sp + 336|0;
 $79 = sp + 32|0;
 $84 = sp + 368|0;
 $108 = sp + 24|0;
 $111 = sp + 555|0;
 $125 = sp + 556|0;
 $126 = sp + 480|0;
 $123 = $this;
 $124 = $__args;
 $130 = $123;
 $122 = $130;
 $131 = $122;
 $132 = ((($131)) + 8|0);
 $121 = $132;
 $133 = $121;
 $120 = $133;
 $134 = $120;
 $__na = $134;
 $$expand_i1_val = 0;
 HEAP8[$125>>0] = $$expand_i1_val;
 $135 = $__na;
 $92 = $135;
 $93 = 1;
 $136 = $92;
 $137 = $93;
 $89 = $136;
 $90 = $137;
 $91 = 0;
 $138 = $90;
 $139 = ($138*36)|0;
 $88 = $139;
 $140 = $88;
 $141 = (__Znwj($140)|0);
 $142 = $__na;
 $85 = $126;
 $86 = $142;
 $87 = 0;
 $143 = $85;
 $144 = $86;
 HEAP32[$143>>2] = $144;
 $145 = ((($143)) + 4|0);
 $146 = $87;
 $147 = $146&1;
 $148 = $147&1;
 HEAP8[$145>>0] = $148;
 $81 = $agg$result;
 $82 = $141;
 $83 = $126;
 $149 = $81;
 $150 = $82;
 $151 = $83;
 $80 = $151;
 $152 = $80;
 ;HEAP32[$84>>2]=HEAP32[$152>>2]|0;HEAP32[$84+4>>2]=HEAP32[$152+4>>2]|0;
 ;HEAP8[$79>>0]=HEAP8[$84>>0]|0;HEAP8[$79+1>>0]=HEAP8[$84+1>>0]|0;HEAP8[$79+2>>0]=HEAP8[$84+2>>0]|0;HEAP8[$79+3>>0]=HEAP8[$84+3>>0]|0;HEAP8[$79+4>>0]=HEAP8[$84+4>>0]|0;HEAP8[$79+5>>0]=HEAP8[$84+5>>0]|0;HEAP8[$79+6>>0]=HEAP8[$84+6>>0]|0;HEAP8[$79+7>>0]=HEAP8[$84+7>>0]|0;
 $76 = $149;
 HEAP32[$77>>2] = $150;
 $153 = $76;
 $75 = $77;
 $154 = $75;
 $155 = HEAP32[$154>>2]|0;
 $69 = $79;
 $156 = $69;
 ;HEAP32[$78>>2]=HEAP32[$156>>2]|0;HEAP32[$78+4>>2]=HEAP32[$156+4>>2]|0;
 ;HEAP8[$74>>0]=HEAP8[$78>>0]|0;HEAP8[$74+1>>0]=HEAP8[$78+1>>0]|0;HEAP8[$74+2>>0]=HEAP8[$78+2>>0]|0;HEAP8[$74+3>>0]=HEAP8[$78+3>>0]|0;HEAP8[$74+4>>0]=HEAP8[$78+4>>0]|0;HEAP8[$74+5>>0]=HEAP8[$78+5>>0]|0;HEAP8[$74+6>>0]=HEAP8[$78+6>>0]|0;HEAP8[$74+7>>0]=HEAP8[$78+7>>0]|0;
 $72 = $153;
 HEAP32[$73>>2] = $155;
 $157 = $72;
 $71 = $73;
 $158 = $71;
 $159 = HEAP32[$158>>2]|0;
 HEAP32[$157>>2] = $159;
 $160 = ((($157)) + 4|0);
 $70 = $74;
 $161 = $70;
 ;HEAP32[$160>>2]=HEAP32[$161>>2]|0;HEAP32[$160+4>>2]=HEAP32[$161+4>>2]|0;
 $162 = $__na;
 $42 = $agg$result;
 $163 = $42;
 $41 = $163;
 $164 = $41;
 $40 = $164;
 $165 = $40;
 $166 = HEAP32[$165>>2]|0;
 $167 = ((($166)) + 8|0);
 $39 = $167;
 $168 = $39;
 $169 = $124;
 $30 = $169;
 $170 = $30;
 $17 = $162;
 $18 = $168;
 $19 = $170;
 $171 = $17;
 $172 = $18;
 $173 = $19;
 $16 = $173;
 $174 = $16;
 ;HEAP8[$15>>0]=HEAP8[$20>>0]|0;
 $12 = $171;
 $13 = $172;
 $14 = $174;
 $175 = $12;
 $176 = $13;
 $177 = $14;
 $11 = $177;
 $178 = $11;
 $8 = $175;
 $9 = $176;
 $10 = $178;
 $179 = $9;
 $180 = $10;
 $7 = $180;
 $181 = $7;
 $5 = $179;
 $6 = $181;
 $182 = $5;
 $183 = $6;
 $4 = $183;
 $184 = $4;
 $0 = $182;
 $1 = $184;
 $185 = $0;
 $186 = $1;
 __ZN4rhea8variableC2ERKS0_($185,$186);
 $187 = ((($185)) + 8|0);
 $188 = $1;
 $189 = ((($188)) + 8|0);
 __THREW__ = 0;
 invoke_vii(351,($187|0),($189|0));
 $190 = __THREW__; __THREW__ = 0;
 $191 = $190&1;
 do {
  if ($191) {
   $192 = ___cxa_find_matching_catch()|0;
   $193 = tempRet0;
   $2 = $192;
   $3 = $193;
   __ZN4rhea8variableD2Ev($185);
   $194 = $2;
   $195 = $3;
   $eh$lpad$body$index2Z2D = $195;$eh$lpad$body$indexZ2D = $194;
  } else {
   $23 = $agg$result;
   $196 = $23;
   $22 = $196;
   $197 = $22;
   $21 = $197;
   $198 = $21;
   $199 = ((($198)) + 4|0);
   $200 = ((($199)) + 4|0);
   HEAP8[$200>>0] = 1;
   $26 = $130;
   $201 = $26;
   $202 = ((($201)) + 12|0);
   $25 = $202;
   $203 = $25;
   $24 = $203;
   $204 = $24;
   $29 = $agg$result;
   $205 = $29;
   $28 = $205;
   $206 = $28;
   $27 = $206;
   $207 = $27;
   $208 = HEAP32[$207>>2]|0;
   $209 = ((($208)) + 8|0);
   $31 = $204;
   $32 = $209;
   $210 = $31;
   $211 = $32;
   __THREW__ = 0;
   $212 = (invoke_iii(365,($210|0),($211|0))|0);
   $213 = __THREW__; __THREW__ = 0;
   $214 = $213&1;
   if ($214) {
    $225 = ___cxa_find_matching_catch()|0;
    $226 = tempRet0;
    $eh$lpad$body$index2Z2D = $226;$eh$lpad$body$indexZ2D = $225;
    break;
   }
   $35 = $agg$result;
   $215 = $35;
   $34 = $215;
   $216 = $34;
   $33 = $216;
   $217 = $33;
   $218 = HEAP32[$217>>2]|0;
   $219 = ((($218)) + 4|0);
   HEAP32[$219>>2] = $212;
   $38 = $agg$result;
   $220 = $38;
   $37 = $220;
   $221 = $37;
   $36 = $221;
   $222 = $36;
   $223 = HEAP32[$222>>2]|0;
   HEAP32[$223>>2] = 0;
   $$expand_i1_val7 = 1;
   HEAP8[$125>>0] = $$expand_i1_val7;
   $129 = 1;
   $$pre_trunc = HEAP8[$125>>0]|0;
   $224 = $$pre_trunc&1;
   if ($224) {
    STACKTOP = sp;return;
   }
   $119 = $agg$result;
   $262 = $119;
   $117 = $262;
   $118 = 0;
   $263 = $117;
   $116 = $263;
   $264 = $116;
   $115 = $264;
   $265 = $115;
   $266 = HEAP32[$265>>2]|0;
   $__tmp$i$i = $266;
   $267 = $118;
   $97 = $263;
   $268 = $97;
   $96 = $268;
   $269 = $96;
   HEAP32[$269>>2] = $267;
   $270 = $__tmp$i$i;
   $271 = ($270|0)!=(0|0);
   if (!($271)) {
    STACKTOP = sp;return;
   }
   $95 = $263;
   $272 = $95;
   $94 = $272;
   $273 = $94;
   $274 = ((($273)) + 4|0);
   $275 = $__tmp$i$i;
   $113 = $274;
   $114 = $275;
   $276 = $113;
   $277 = ((($276)) + 4|0);
   $278 = HEAP8[$277>>0]|0;
   $279 = $278&1;
   if ($279) {
    $280 = HEAP32[$276>>2]|0;
    $281 = $114;
    $282 = ((($281)) + 8|0);
    $112 = $282;
    $283 = $112;
    $109 = $280;
    $110 = $283;
    $284 = $109;
    $285 = $110;
    ;HEAP8[$108>>0]=HEAP8[$111>>0]|0;
    $106 = $284;
    $107 = $285;
    $286 = $107;
    $105 = $286;
    $287 = $105;
    __ZNSt3__14pairIKN4rhea8variableENS_13unordered_setIS2_NS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEEED2Ev($287);
   }
   $288 = $114;
   $289 = ($288|0)!=(0|0);
   if (!($289)) {
    STACKTOP = sp;return;
   }
   $290 = HEAP32[$276>>2]|0;
   $291 = $114;
   $102 = $290;
   $103 = $291;
   $104 = 1;
   $292 = $102;
   $293 = $103;
   $294 = $104;
   $99 = $292;
   $100 = $293;
   $101 = $294;
   $295 = $100;
   $98 = $295;
   $296 = $98;
   __ZdlPv($296);
   STACKTOP = sp;return;
  }
 } while(0);
 $127 = $eh$lpad$body$indexZ2D;
 $128 = $eh$lpad$body$index2Z2D;
 $68 = $agg$result;
 $227 = $68;
 $66 = $227;
 $67 = 0;
 $228 = $66;
 $65 = $228;
 $229 = $65;
 $64 = $229;
 $230 = $64;
 $231 = HEAP32[$230>>2]|0;
 $__tmp$i$i1 = $231;
 $232 = $67;
 $46 = $228;
 $233 = $46;
 $45 = $233;
 $234 = $45;
 HEAP32[$234>>2] = $232;
 $235 = $__tmp$i$i1;
 $236 = ($235|0)!=(0|0);
 if (!($236)) {
  $297 = $127;
  $298 = $128;
  ___resumeException($297|0);
  // unreachable;
 }
 $44 = $228;
 $237 = $44;
 $43 = $237;
 $238 = $43;
 $239 = ((($238)) + 4|0);
 $240 = $__tmp$i$i1;
 $62 = $239;
 $63 = $240;
 $241 = $62;
 $242 = ((($241)) + 4|0);
 $243 = HEAP8[$242>>0]|0;
 $244 = $243&1;
 if ($244) {
  $245 = HEAP32[$241>>2]|0;
  $246 = $63;
  $247 = ((($246)) + 8|0);
  $61 = $247;
  $248 = $61;
  $58 = $245;
  $59 = $248;
  $249 = $58;
  $250 = $59;
  ;HEAP8[$57>>0]=HEAP8[$60>>0]|0;
  $55 = $249;
  $56 = $250;
  $251 = $56;
  $54 = $251;
  $252 = $54;
  __ZNSt3__14pairIKN4rhea8variableENS_13unordered_setIS2_NS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEEED2Ev($252);
 }
 $253 = $63;
 $254 = ($253|0)!=(0|0);
 if (!($254)) {
  $297 = $127;
  $298 = $128;
  ___resumeException($297|0);
  // unreachable;
 }
 $255 = HEAP32[$241>>2]|0;
 $256 = $63;
 $51 = $255;
 $52 = $256;
 $53 = 1;
 $257 = $51;
 $258 = $52;
 $259 = $53;
 $48 = $257;
 $49 = $258;
 $50 = $259;
 $260 = $49;
 $47 = $260;
 $261 = $47;
 __ZdlPv($261);
 $297 = $127;
 $298 = $128;
 ___resumeException($297|0);
 // unreachable;
}
function __ZN4rhea6solverD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea6solverD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRN4rhea14simplex_solverEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3456|0);
}
function __ZN10emscripten8internal18GenericBindingTypeIN4rhea14simplex_solverEE12fromWireTypeEPS3_($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRN4rhea14simplex_solverERNS3_8variableEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3472|0);
}
function __ZN10emscripten8internal18GenericBindingTypeIN4rhea8variableEE12fromWireTypeEPS3_($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($v) {
 $v = +$v;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 STACKTOP = sp;return (+$1);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRN4rhea14simplex_solverERNS3_8variableEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3528|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRN4rhea14simplex_solverERNS3_10constraintEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3552|0);
}
function __ZN10emscripten8internal18GenericBindingTypeIN4rhea10constraintEE12fromWireTypeEPS3_($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerIN4rhea14simplex_solverEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3576|0);
}
function __ZN10emscripten8internal11BindingTypeIPN4rhea14simplex_solverEE10toWireTypeES4_($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKN4rhea14simplex_solverEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3600|0);
}
function __ZN10emscripten8internal11LightTypeIDIPN4rhea14simplex_solverEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3368|0);
}
function __ZN10emscripten8internal11LightTypeIDIN4rhea14simplex_solverEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (88|0);
}
function __ZN10emscripten8internal14getLightTypeIDIN4rhea14simplex_solverEEEPKvRKT_($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $value;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -4|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRN4rhea17linear_inequalityEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3656|0);
}
function __ZN10emscripten8internal18GenericBindingTypeIN4rhea17linear_inequalityEE12fromWireTypeEPS3_($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($b) {
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $b&1;
 $0 = $1;
 $2 = $0;
 $3 = $2&1;
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKN4rhea17linear_inequalityEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3776|0);
}
function __ZN10emscripten8internal11LightTypeIDIPN4rhea17linear_inequalityEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3824|0);
}
function __ZN10emscripten8internal11LightTypeIDIN4rhea17linear_inequalityEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3664|0);
}
function __ZN10emscripten8internal14getLightTypeIDIN4rhea17linear_inequalityEEEPKvRKT_($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $value;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -4|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRN4rhea15linear_equationEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3880|0);
}
function __ZN10emscripten8internal18GenericBindingTypeIN4rhea15linear_equationEE12fromWireTypeEPS3_($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKN4rhea15linear_equationEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3952|0);
}
function __ZN10emscripten8internal11LightTypeIDIPN4rhea15linear_equationEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4000|0);
}
function __ZN10emscripten8internal11LightTypeIDIN4rhea15linear_equationEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3888|0);
}
function __ZN10emscripten8internal14getLightTypeIDIN4rhea15linear_equationEEEPKvRKT_($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $value;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -4|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerIKN4rhea17linear_expressionEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4056|0);
}
function __ZN10emscripten8internal11BindingTypeIPKN4rhea17linear_expressionEE12fromWireTypeES5_($wt) {
 $wt = $wt|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $wt;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = +HEAPF64[$1>>3];
 STACKTOP = sp;return (+$2);
}
function __ZN10emscripten8internal11LightTypeIDIPKN4rhea17linear_expressionEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4064|0);
}
function __ZN10emscripten8internal11LightTypeIDIPN4rhea17linear_expressionEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4168|0);
}
function __ZN10emscripten8internal11LightTypeIDIN4rhea17linear_expressionEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4112|0);
}
function __ZN10emscripten8internal14getLightTypeIDIN4rhea17linear_expressionEEEPKvRKT_($value) {
 $value = $value|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $value;
 STACKTOP = sp;return (4112|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRN4rhea10constraintEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4224|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKN4rhea10constraintEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4248|0);
}
function __ZN10emscripten8internal11LightTypeIDIPN4rhea10constraintEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4288|0);
}
function __ZN10emscripten8internal11LightTypeIDIN4rhea10constraintEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1968|0);
}
function __ZN10emscripten8internal14getLightTypeIDIN4rhea10constraintEEEPKvRKT_($value) {
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $value;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + -4|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerIN4rhea8variableEEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4336|0);
}
function __ZN10emscripten8internal11BindingTypeIPN4rhea8variableEE12fromWireTypeES4_($wt) {
 $wt = $wt|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $wt;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerIKN4rhea8variableEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4400|0);
}
function __ZN10emscripten8internal11BindingTypeIPKN4rhea8variableEE12fromWireTypeES5_($wt) {
 $wt = $wt|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $wt;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerIN4rhea8variableEEEOdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4456|0);
}
function __ZN10emscripten8internal11BindingTypeIOdE12fromWireTypeEd($wt) {
 $wt = +$wt;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $wt;
 $1 = $0;
 $2 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($1));
 STACKTOP = sp;return (+$2);
}
function __ZN10emscripten8internal11BindingTypeIPN4rhea8variableEE10toWireTypeES4_($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerIN4rhea8variableEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4472|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKN4rhea8variableEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4408|0);
}
function __ZN10emscripten8internal11LightTypeIDIPN4rhea8variableEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4352|0);
}
function __ZN10emscripten8internal11LightTypeIDIN4rhea8variableEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3488|0);
}
function __ZN10emscripten8internal14getLightTypeIDIN4rhea8variableEEEPKvRKT_($value) {
 $value = $value|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $value;
 STACKTOP = sp;return (3488|0);
}
function __ZN10emscripten8internal7InvokerIN4rhea10constraintEJRNS2_17linear_inequalityEEE6invokeEPFS3_S5_EPS4_($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $5 = $0;
 $6 = $1;
 $7 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea17linear_inequalityEE12fromWireTypeEPS3_($6)|0);
 FUNCTION_TABLE_vii[$5 & 511]($2,$7);
 __THREW__ = 0;
 $8 = (invoke_ii(371,($2|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $3 = $11;
  $4 = $12;
  __ZN4rhea10constraintD2Ev($2);
  $13 = $3;
  $14 = $4;
  ___resumeException($13|0);
  // unreachable;
 } else {
  __ZN4rhea10constraintD2Ev($2);
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea10constraintERNS4_17linear_inequalityEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea10constraintERNS4_17linear_inequalityEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea10constraintERNS3_17linear_inequalityEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPN4rhea10constraintEJPFS3_RNS2_17linear_inequalityEEPS5_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4504|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea10constraintERNS3_17linear_inequalityEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4512|0);
}
function __ZN10emscripten8internal18GenericBindingTypeIN4rhea10constraintEE10toWireTypeEOS3_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $v;
 $2 = (__Znwj(12)|0);
 $3 = $1;
 $0 = $3;
 $4 = $0;
 __ZN4rhea10constraintC2ERKS0_($2,$4);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal7InvokerIN4rhea10constraintEJRNS2_15linear_equationEEE6invokeEPFS3_S5_EPS4_($fn,$args) {
 $fn = $fn|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $0 = $fn;
 $1 = $args;
 $5 = $0;
 $6 = $1;
 $7 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea15linear_equationEE12fromWireTypeEPS3_($6)|0);
 FUNCTION_TABLE_vii[$5 & 511]($2,$7);
 __THREW__ = 0;
 $8 = (invoke_ii(371,($2|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $3 = $11;
  $4 = $12;
  __ZN4rhea10constraintD2Ev($2);
  $13 = $3;
  $14 = $4;
  ___resumeException($13|0);
  // unreachable;
 } else {
  __ZN4rhea10constraintD2Ev($2);
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea10constraintERNS4_15linear_equationEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea10constraintERNS4_15linear_equationEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea10constraintERNS3_15linear_equationEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPN4rhea10constraintEJPFS3_RNS2_15linear_equationEEPS5_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4520|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea10constraintERNS3_15linear_equationEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4528|0);
}
function __ZN10emscripten8internal7InvokerIN4rhea17linear_inequalityEJRNS2_8variableENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEdEE6invokeEPFS3_S5_SC_dEPS4_PNS0_11BindingTypeISC_EUt_Ed($fn,$args,$args1,$args2) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = +$args2;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $5 = sp + 80|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $8 = $0;
 $9 = $1;
 $10 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea8variableEE12fromWireTypeEPS3_($9)|0);
 $11 = $2;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($5,$11);
 $12 = $3;
 __THREW__ = 0;
 $13 = (+invoke_dd(372,(+$12)));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  __THREW__ = 0;
  invoke_viiid($8|0,($4|0),($10|0),($5|0),(+$13));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   __THREW__ = 0;
   $18 = (invoke_ii(373,($4|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    __ZN4rhea17linear_inequalityD2Ev($4);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
    STACKTOP = sp;return ($18|0);
   }
   $23 = ___cxa_find_matching_catch()|0;
   $24 = tempRet0;
   $6 = $23;
   $7 = $24;
   __ZN4rhea17linear_inequalityD2Ev($4);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
   $25 = $6;
   $26 = $7;
   ___resumeException($25|0);
   // unreachable;
  }
 }
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 $6 = $21;
 $7 = $22;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
 $25 = $6;
 $26 = $7;
 ___resumeException($25|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_inequalityERNS4_8variableENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEdEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_inequalityERNS4_8variableENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEdEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea17linear_inequalityERNS3_8variableENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEdEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPN4rhea17linear_inequalityEJPFS3_RNS2_8variableENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEdEPS5_PNS0_11BindingTypeISD_EUt_EdEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4536|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea17linear_inequalityERNS3_8variableENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4544|0);
}
function __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($agg$result,$v) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $v;
 $7 = $6;
 $8 = ((($7)) + 4|0);
 $9 = $6;
 $10 = HEAP32[$9>>2]|0;
 $3 = $agg$result;
 $4 = $8;
 $5 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $4;
 $15 = $5;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($11,$14,$15);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal18GenericBindingTypeIN4rhea17linear_inequalityEE10toWireTypeEOS3_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $v;
 $4 = (__Znwj(72)|0);
 $5 = $1;
 $0 = $5;
 $6 = $0;
 __THREW__ = 0;
 invoke_vii(374,($4|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $2 = $9;
  $3 = $10;
  __ZdlPv($4);
  $11 = $2;
  $12 = $3;
  ___resumeException($11|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN4rhea17linear_inequalityC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN4rhea17linear_constraintC2ERKS0_($3,$4);
 $5 = 4704;
 HEAP32[$3>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN4rhea17linear_constraintC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $5 = $1;
 $6 = $2;
 __ZN4rhea19abstract_constraintC2ERKS0_($5,$6);
 $7 = 4752;
 HEAP32[$5>>2] = $7;
 $8 = ((($5)) + 48|0);
 $9 = $2;
 $10 = ((($9)) + 48|0);
 __THREW__ = 0;
 invoke_vii(296,($8|0),($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $3 = $13;
  $4 = $14;
  __ZN4rhea19abstract_constraintD2Ev($5);
  $15 = $3;
  $16 = $4;
  ___resumeException($15|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN4rhea17linear_inequalityD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea17linear_inequalityD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK4rhea17linear_constraint10expressionEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 __ZN4rhea17linear_expressionC2ERKS0_($agg$result,$2);
 STACKTOP = sp;return;
}
function __ZNK4rhea17linear_inequality13is_inequalityEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK4rhea17linear_inequality12is_satisfiedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = (+__ZNK4rhea17linear_expression8evaluateEv($2));
 $4 = $3 >= 0.0;
 STACKTOP = sp;return ($4|0);
}
function __ZN4rhea19abstract_constraintC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = 2280;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 8|0);
 $6 = $2;
 $7 = ((($6)) + 8|0);
 __ZN4rhea8strengthC2ERKS0_($5,$7);
 $8 = ((($3)) + 40|0);
 $9 = $2;
 $10 = ((($9)) + 40|0);
 $11 = +HEAPF64[$10>>3];
 HEAPF64[$8>>3] = $11;
 STACKTOP = sp;return;
}
function __ZN4rhea17linear_constraintD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 4752;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 48|0);
 __ZN4rhea17linear_expressionD2Ev($3);
 __ZN4rhea19abstract_constraintD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4rhea17linear_constraintD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea17linear_constraintD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal7InvokerIN4rhea17linear_inequalityEJRNS2_8variableENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEES5_EE6invokeEPFS3_S5_SC_S5_EPS4_PNS0_11BindingTypeISC_EUt_ESG_($fn,$args,$args1,$args2) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $5 = sp + 72|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $8 = $0;
 $9 = $1;
 $10 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea8variableEE12fromWireTypeEPS3_($9)|0);
 $11 = $2;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($5,$11);
 $12 = $3;
 __THREW__ = 0;
 $13 = (invoke_ii(375,($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  __THREW__ = 0;
  invoke_viiii($8|0,($4|0),($10|0),($5|0),($13|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   __THREW__ = 0;
   $18 = (invoke_ii(373,($4|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    __ZN4rhea17linear_inequalityD2Ev($4);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
    STACKTOP = sp;return ($18|0);
   }
   $23 = ___cxa_find_matching_catch()|0;
   $24 = tempRet0;
   $6 = $23;
   $7 = $24;
   __ZN4rhea17linear_inequalityD2Ev($4);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
   $25 = $6;
   $26 = $7;
   ___resumeException($25|0);
   // unreachable;
  }
 }
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 $6 = $21;
 $7 = $22;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
 $25 = $6;
 $26 = $7;
 ___resumeException($25|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_inequalityERNS4_8variableENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEES7_EE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_inequalityERNS4_8variableENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEES7_EE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea17linear_inequalityERNS3_8variableENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEES6_EEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPN4rhea17linear_inequalityEJPFS3_RNS2_8variableENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEES6_EPS5_PNS0_11BindingTypeISD_EUt_ESG_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4792|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea17linear_inequalityERNS3_8variableENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEES6_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4800|0);
}
function __ZN10emscripten8internal7InvokerIN4rhea17linear_inequalityEJRNS2_8variableENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERNS2_17linear_expressionEEE6invokeEPFS3_S5_SC_SE_EPS4_PNS0_11BindingTypeISC_EUt_EPSD_($fn,$args,$args1,$args2) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $5 = sp + 72|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $8 = $0;
 $9 = $1;
 $10 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea8variableEE12fromWireTypeEPS3_($9)|0);
 $11 = $2;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($5,$11);
 $12 = $3;
 __THREW__ = 0;
 $13 = (invoke_ii(376,($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  __THREW__ = 0;
  invoke_viiii($8|0,($4|0),($10|0),($5|0),($13|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   __THREW__ = 0;
   $18 = (invoke_ii(373,($4|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    __ZN4rhea17linear_inequalityD2Ev($4);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
    STACKTOP = sp;return ($18|0);
   }
   $23 = ___cxa_find_matching_catch()|0;
   $24 = tempRet0;
   $6 = $23;
   $7 = $24;
   __ZN4rhea17linear_inequalityD2Ev($4);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
   $25 = $6;
   $26 = $7;
   ___resumeException($25|0);
   // unreachable;
  }
 }
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 $6 = $21;
 $7 = $22;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
 $25 = $6;
 $26 = $7;
 ___resumeException($25|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_inequalityERNS4_8variableENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEERNS4_17linear_expressionEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_inequalityERNS4_8variableENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEERNS4_17linear_expressionEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea17linear_inequalityERNS3_8variableENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEERNS3_17linear_expressionEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPN4rhea17linear_inequalityEJPFS3_RNS2_8variableENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEERNS2_17linear_expressionEEPS5_PNS0_11BindingTypeISD_EUt_EPSE_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4816|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea17linear_inequalityERNS3_8variableENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEERNS3_17linear_expressionEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4824|0);
}
function __ZN10emscripten8internal18GenericBindingTypeIN4rhea17linear_expressionEE12fromWireTypeEPS3_($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal7InvokerIN4rhea17linear_inequalityEJRNS2_17linear_expressionENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEES5_EE6invokeEPFS3_S5_SC_S5_EPS4_PNS0_11BindingTypeISC_EUt_ESG_($fn,$args,$args1,$args2) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $5 = sp + 72|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $8 = $0;
 $9 = $1;
 $10 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea17linear_expressionEE12fromWireTypeEPS3_($9)|0);
 $11 = $2;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($5,$11);
 $12 = $3;
 __THREW__ = 0;
 $13 = (invoke_ii(376,($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  __THREW__ = 0;
  invoke_viiii($8|0,($4|0),($10|0),($5|0),($13|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   __THREW__ = 0;
   $18 = (invoke_ii(373,($4|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    __ZN4rhea17linear_inequalityD2Ev($4);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
    STACKTOP = sp;return ($18|0);
   }
   $23 = ___cxa_find_matching_catch()|0;
   $24 = tempRet0;
   $6 = $23;
   $7 = $24;
   __ZN4rhea17linear_inequalityD2Ev($4);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
   $25 = $6;
   $26 = $7;
   ___resumeException($25|0);
   // unreachable;
  }
 }
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 $6 = $21;
 $7 = $22;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
 $25 = $6;
 $26 = $7;
 ___resumeException($25|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_inequalityERNS4_17linear_expressionENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEES7_EE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_inequalityERNS4_17linear_expressionENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEES7_EE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea17linear_inequalityERNS3_17linear_expressionENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEES6_EEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPN4rhea17linear_inequalityEJPFS3_RNS2_17linear_expressionENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEES6_EPS5_PNS0_11BindingTypeISD_EUt_ESG_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4840|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea17linear_inequalityERNS3_17linear_expressionENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEES6_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4848|0);
}
function __ZN10emscripten8internal7InvokerIN4rhea15linear_equationEJRNS2_8variableEdEE6invokeEPFS3_S5_dEPS4_d($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = +$args1;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $6 = $0;
 $7 = $1;
 $8 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea8variableEE12fromWireTypeEPS3_($7)|0);
 $9 = $2;
 $10 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($9));
 FUNCTION_TABLE_viid[$6 & 511]($3,$8,$10);
 __THREW__ = 0;
 $11 = (invoke_ii(377,($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $4 = $14;
  $5 = $15;
  __ZN4rhea15linear_equationD2Ev($3);
  $16 = $4;
  $17 = $5;
  ___resumeException($16|0);
  // unreachable;
 } else {
  __ZN4rhea15linear_equationD2Ev($3);
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea15linear_equationERNS4_8variableEdEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea15linear_equationERNS4_8variableEdEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea15linear_equationERNS3_8variableEdEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPN4rhea15linear_equationEJPFS3_RNS2_8variableEdEPS5_dEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4864|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea15linear_equationERNS3_8variableEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4872|0);
}
function __ZN10emscripten8internal18GenericBindingTypeIN4rhea15linear_equationEE10toWireTypeEOS3_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $v;
 $4 = (__Znwj(72)|0);
 $5 = $1;
 $0 = $5;
 $6 = $0;
 __THREW__ = 0;
 invoke_vii(378,($4|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $2 = $9;
  $3 = $10;
  __ZdlPv($4);
  $11 = $2;
  $12 = $3;
  ___resumeException($11|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN4rhea15linear_equationC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN4rhea17linear_constraintC2ERKS0_($3,$4);
 $5 = 4896;
 HEAP32[$3>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN4rhea15linear_equationD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea15linear_equationD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK4rhea15linear_equation12is_satisfiedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 48|0);
 $3 = (+__ZNK4rhea17linear_expression8evaluateEv($2));
 $4 = $3 == 0.0;
 STACKTOP = sp;return ($4|0);
}
function __ZN10emscripten8internal7InvokerIN4rhea15linear_equationEJRNS2_8variableES5_EE6invokeEPFS3_S5_S5_EPS4_S9_($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $6 = $0;
 $7 = $1;
 $8 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea8variableEE12fromWireTypeEPS3_($7)|0);
 $9 = $2;
 $10 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea8variableEE12fromWireTypeEPS3_($9)|0);
 FUNCTION_TABLE_viii[$6 & 511]($3,$8,$10);
 __THREW__ = 0;
 $11 = (invoke_ii(377,($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $4 = $14;
  $5 = $15;
  __ZN4rhea15linear_equationD2Ev($3);
  $16 = $4;
  $17 = $5;
  ___resumeException($16|0);
  // unreachable;
 } else {
  __ZN4rhea15linear_equationD2Ev($3);
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea15linear_equationERNS4_8variableES7_EE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea15linear_equationERNS4_8variableES7_EE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea15linear_equationERNS3_8variableES6_EEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPN4rhea15linear_equationEJPFS3_RNS2_8variableES6_EPS5_S9_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4936|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea15linear_equationERNS3_8variableES6_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4944|0);
}
function __ZN10emscripten8internal7InvokerIN4rhea15linear_equationEJRNS2_8variableERNS2_17linear_expressionEEE6invokeEPFS3_S5_S7_EPS4_PS6_($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $6 = $0;
 $7 = $1;
 $8 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea8variableEE12fromWireTypeEPS3_($7)|0);
 $9 = $2;
 $10 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea17linear_expressionEE12fromWireTypeEPS3_($9)|0);
 FUNCTION_TABLE_viii[$6 & 511]($3,$8,$10);
 __THREW__ = 0;
 $11 = (invoke_ii(377,($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $4 = $14;
  $5 = $15;
  __ZN4rhea15linear_equationD2Ev($3);
  $16 = $4;
  $17 = $5;
  ___resumeException($16|0);
  // unreachable;
 } else {
  __ZN4rhea15linear_equationD2Ev($3);
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea15linear_equationERNS4_8variableERNS4_17linear_expressionEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea15linear_equationERNS4_8variableERNS4_17linear_expressionEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea15linear_equationERNS3_8variableERNS3_17linear_expressionEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPN4rhea15linear_equationEJPFS3_RNS2_8variableERNS2_17linear_expressionEEPS5_PS7_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4960|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea15linear_equationERNS3_8variableERNS3_17linear_expressionEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4968|0);
}
function __ZN10emscripten8internal7InvokerIN4rhea15linear_equationEJRNS2_17linear_expressionES5_EE6invokeEPFS3_S5_S5_EPS4_S9_($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $6 = $0;
 $7 = $1;
 $8 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea17linear_expressionEE12fromWireTypeEPS3_($7)|0);
 $9 = $2;
 $10 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea17linear_expressionEE12fromWireTypeEPS3_($9)|0);
 FUNCTION_TABLE_viii[$6 & 511]($3,$8,$10);
 __THREW__ = 0;
 $11 = (invoke_ii(377,($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $4 = $14;
  $5 = $15;
  __ZN4rhea15linear_equationD2Ev($3);
  $16 = $4;
  $17 = $5;
  ___resumeException($16|0);
  // unreachable;
 } else {
  __ZN4rhea15linear_equationD2Ev($3);
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea15linear_equationERNS4_17linear_expressionES7_EE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea15linear_equationERNS4_17linear_expressionES7_EE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea15linear_equationERNS3_17linear_expressionES6_EEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPN4rhea15linear_equationEJPFS3_RNS2_17linear_expressionES6_EPS5_S9_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (4984|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea15linear_equationERNS3_17linear_expressionES6_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4992|0);
}
function __ZN10emscripten8internal7InvokerIN4rhea15linear_equationEJRNS2_17linear_expressionERNS2_8variableEEE6invokeEPFS3_S5_S7_EPS4_PS6_($fn,$args,$args1) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $6 = $0;
 $7 = $1;
 $8 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea17linear_expressionEE12fromWireTypeEPS3_($7)|0);
 $9 = $2;
 $10 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea8variableEE12fromWireTypeEPS3_($9)|0);
 FUNCTION_TABLE_viii[$6 & 511]($3,$8,$10);
 __THREW__ = 0;
 $11 = (invoke_ii(377,($3|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  $4 = $14;
  $5 = $15;
  __ZN4rhea15linear_equationD2Ev($3);
  $16 = $4;
  $17 = $5;
  ___resumeException($16|0);
  // unreachable;
 } else {
  __ZN4rhea15linear_equationD2Ev($3);
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea15linear_equationERNS4_17linear_expressionERNS4_8variableEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea15linear_equationERNS4_17linear_expressionERNS4_8variableEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea15linear_equationERNS3_17linear_expressionERNS3_8variableEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPN4rhea15linear_equationEJPFS3_RNS2_17linear_expressionERNS2_8variableEEPS5_PS7_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (5008|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea15linear_equationERNS3_17linear_expressionERNS3_8variableEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5016|0);
}
function __ZN10emscripten8internal7InvokerIN4rhea17linear_expressionEJdNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEERNS2_8variableEEE6invokeEPFS3_dSA_SC_EdPNS0_11BindingTypeISA_EUt_EPSB_($fn,$args,$args1,$args2) {
 $fn = $fn|0;
 $args = +$args;
 $args1 = $args1|0;
 $args2 = $args2|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $5 = sp + 32|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $8 = $0;
 $9 = $1;
 $10 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($9));
 $11 = $2;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($5,$11);
 $12 = $3;
 __THREW__ = 0;
 $13 = (invoke_ii(375,($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  __THREW__ = 0;
  invoke_vidii($8|0,($4|0),(+$10),($5|0),($13|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   __THREW__ = 0;
   $18 = (invoke_ii(379,($4|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    __ZN4rhea17linear_expressionD2Ev($4);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
    STACKTOP = sp;return ($18|0);
   }
   $23 = ___cxa_find_matching_catch()|0;
   $24 = tempRet0;
   $6 = $23;
   $7 = $24;
   __ZN4rhea17linear_expressionD2Ev($4);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
   $25 = $6;
   $26 = $7;
   ___resumeException($25|0);
   // unreachable;
  }
 }
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 $6 = $21;
 $7 = $22;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
 $25 = $6;
 $26 = $7;
 ___resumeException($25|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_expressionEdNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERNS4_8variableEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_expressionEdNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERNS4_8variableEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea17linear_expressionEdNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERNS3_8variableEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPN4rhea17linear_expressionEJPFS3_dNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERNS2_8variableEEdPNS0_11BindingTypeISB_EUt_EPSC_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (5032|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea17linear_expressionEdNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERNS3_8variableEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5040|0);
}
function __ZN10emscripten8internal18GenericBindingTypeIN4rhea17linear_expressionEE10toWireTypeEOS3_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $v;
 $4 = (__Znwj(24)|0);
 $5 = $1;
 $0 = $5;
 $6 = $0;
 __THREW__ = 0;
 invoke_vii(380,($4|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $2 = $9;
  $3 = $10;
  __ZdlPv($4);
  $11 = $2;
  $12 = $3;
  ___resumeException($11|0);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZN4rhea17linear_expressionC2EOS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = +HEAPF64[$4>>3];
 HEAPF64[$3>>3] = $5;
 $6 = ((($3)) + 8|0);
 $7 = $2;
 $8 = ((($7)) + 8|0);
 __ZN4rhea8flat_mapINS_8variableEdNSt3__14lessIS1_EENS2_9allocatorINS2_4pairIS1_dEEEEEC2EOS9_($6,$8);
 $9 = $2;
 $10 = +HEAPF64[$9>>3];
 HEAPF64[$3>>3] = $10;
 STACKTOP = sp;return;
}
function __ZN4rhea8flat_mapINS_8variableEdNSt3__14lessIS1_EENS2_9allocatorINS2_4pairIS1_dEEEEEC2EOS9_($this,$m) {
 $this = $this|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 120|0;
 $5 = sp + 8|0;
 $8 = sp + 28|0;
 $9 = sp + 136|0;
 $10 = sp;
 $14 = sp + 137|0;
 $31 = $this;
 $32 = $m;
 $35 = $31;
 $36 = $32;
 $30 = $36;
 $37 = $30;
 $28 = $35;
 $29 = $37;
 $38 = $28;
 $39 = $29;
 $27 = $39;
 $40 = $27;
 $41 = ((($40)) + 8|0);
 $26 = $41;
 $42 = $26;
 $25 = $42;
 $43 = $25;
 $24 = $43;
 $44 = $24;
 $12 = $38;
 $13 = $44;
 $45 = $12;
 $11 = $45;
 HEAP32[$45>>2] = 0;
 $46 = ((($45)) + 4|0);
 HEAP32[$46>>2] = 0;
 $47 = ((($45)) + 8|0);
 ;HEAP8[$10>>0]=HEAP8[$14>>0]|0;
 $7 = $47;
 HEAP32[$8>>2] = 0;
 $48 = $7;
 $6 = $8;
 $49 = $6;
 $50 = HEAP32[$49>>2]|0;
 $0 = $10;
 ;HEAP8[$5>>0]=HEAP8[$9>>0]|0;
 $3 = $48;
 HEAP32[$4>>2] = $50;
 $51 = $3;
 $2 = $5;
 $1 = $4;
 $52 = $1;
 $53 = HEAP32[$52>>2]|0;
 HEAP32[$51>>2] = $53;
 $54 = $29;
 $55 = HEAP32[$54>>2]|0;
 HEAP32[$38>>2] = $55;
 $56 = $29;
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($38)) + 4|0);
 HEAP32[$59>>2] = $58;
 $60 = $29;
 $17 = $60;
 $61 = $17;
 $62 = ((($61)) + 8|0);
 $16 = $62;
 $63 = $16;
 $15 = $63;
 $64 = $15;
 $65 = HEAP32[$64>>2]|0;
 $20 = $38;
 $66 = $20;
 $67 = ((($66)) + 8|0);
 $19 = $67;
 $68 = $19;
 $18 = $68;
 $69 = $18;
 HEAP32[$69>>2] = $65;
 $70 = $29;
 $23 = $70;
 $71 = $23;
 $72 = ((($71)) + 8|0);
 $22 = $72;
 $73 = $22;
 $21 = $73;
 $74 = $21;
 HEAP32[$74>>2] = 0;
 $75 = $29;
 $76 = ((($75)) + 4|0);
 HEAP32[$76>>2] = 0;
 $77 = $29;
 HEAP32[$77>>2] = 0;
 __THREW__ = 0;
 invoke_vi(381,($35|0));
 $78 = __THREW__; __THREW__ = 0;
 $79 = $78&1;
 if ($79) {
  $80 = ___cxa_find_matching_catch()|0;
  $81 = tempRet0;
  $33 = $80;
  $34 = $81;
  __ZNSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEED2Ev($35);
  $82 = $33;
  $83 = $34;
  ___resumeException($82|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN4rhea6detail16flat_map_compareIdNSt3__14lessINS_8variableEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal7InvokerIN4rhea17linear_expressionEJRNS2_8variableENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEdEE6invokeEPFS3_S5_SC_dEPS4_PNS0_11BindingTypeISC_EUt_Ed($fn,$args,$args1,$args2) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = +$args2;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $5 = sp + 32|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $8 = $0;
 $9 = $1;
 $10 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea8variableEE12fromWireTypeEPS3_($9)|0);
 $11 = $2;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($5,$11);
 $12 = $3;
 __THREW__ = 0;
 $13 = (+invoke_dd(372,(+$12)));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  __THREW__ = 0;
  invoke_viiid($8|0,($4|0),($10|0),($5|0),(+$13));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   __THREW__ = 0;
   $18 = (invoke_ii(379,($4|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    __ZN4rhea17linear_expressionD2Ev($4);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
    STACKTOP = sp;return ($18|0);
   }
   $23 = ___cxa_find_matching_catch()|0;
   $24 = tempRet0;
   $6 = $23;
   $7 = $24;
   __ZN4rhea17linear_expressionD2Ev($4);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
   $25 = $6;
   $26 = $7;
   ___resumeException($25|0);
   // unreachable;
  }
 }
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 $6 = $21;
 $7 = $22;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
 $25 = $6;
 $26 = $7;
 ___resumeException($25|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_expressionERNS4_8variableENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEdEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_expressionERNS4_8variableENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEdEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea17linear_expressionERNS3_8variableENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEdEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPN4rhea17linear_expressionEJPFS3_RNS2_8variableENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEdEPS5_PNS0_11BindingTypeISD_EUt_EdEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (5056|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea17linear_expressionERNS3_8variableENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5064|0);
}
function __ZN10emscripten8internal7InvokerIN4rhea17linear_expressionEJRNS2_8variableENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEES5_EE6invokeEPFS3_S5_SC_S5_EPS4_PNS0_11BindingTypeISC_EUt_ESG_($fn,$args,$args1,$args2) {
 $fn = $fn|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args2 = $args2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $5 = sp + 24|0;
 $0 = $fn;
 $1 = $args;
 $2 = $args1;
 $3 = $args2;
 $8 = $0;
 $9 = $1;
 $10 = (__ZN10emscripten8internal18GenericBindingTypeIN4rhea8variableEE12fromWireTypeEPS3_($9)|0);
 $11 = $2;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($5,$11);
 $12 = $3;
 __THREW__ = 0;
 $13 = (invoke_ii(375,($12|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  __THREW__ = 0;
  invoke_viiii($8|0,($4|0),($10|0),($5|0),($13|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if (!($17)) {
   __THREW__ = 0;
   $18 = (invoke_ii(379,($4|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    __ZN4rhea17linear_expressionD2Ev($4);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
    STACKTOP = sp;return ($18|0);
   }
   $23 = ___cxa_find_matching_catch()|0;
   $24 = tempRet0;
   $6 = $23;
   $7 = $24;
   __ZN4rhea17linear_expressionD2Ev($4);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
   $25 = $6;
   $26 = $7;
   ___resumeException($25|0);
   // unreachable;
  }
 }
 $21 = ___cxa_find_matching_catch()|0;
 $22 = tempRet0;
 $6 = $21;
 $7 = $22;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
 $25 = $6;
 $26 = $7;
 ___resumeException($25|0);
 // unreachable;
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_expressionERNS4_8variableENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEES7_EE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4rhea17linear_expressionERNS4_8variableENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEES7_EE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea17linear_expressionERNS3_8variableENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEES6_EEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPN4rhea17linear_expressionEJPFS3_RNS2_8variableENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEES6_EPS5_PNS0_11BindingTypeISD_EUt_ESG_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (5080|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4rhea17linear_expressionERNS3_8variableENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEES6_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5088|0);
}
function __ZN10emscripten8internal7InvokerINSt3__16vectorIdNS2_9allocatorIdEEEEJEE6invokeEPFS6_vE($fn) {
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 8|0;
 $0 = $fn;
 $4 = $0;
 FUNCTION_TABLE_vi[$4 & 511]($1);
 __THREW__ = 0;
 $5 = (invoke_ii(382,($1|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $2 = $8;
  $3 = $9;
  __ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev($1);
  $10 = $2;
  $11 = $3;
  ___resumeException($10|0);
  // unreachable;
 } else {
  __ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev($1);
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__16vectorIdNS4_9allocatorIdEEEEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__16vectorIdNS4_9allocatorIdEEEEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__16vectorIdNS3_9allocatorIdEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPNSt3__16vectorIdNS2_9allocatorIdEEEEJPFS6_vEEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (5104|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__16vectorIdNS3_9allocatorIdEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5112|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__16vectorIdNS2_9allocatorIdEEEEE10toWireTypeEOS6_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 52|0;
 $5 = sp;
 $8 = sp + 28|0;
 $9 = sp + 124|0;
 $10 = sp + 8|0;
 $14 = sp + 125|0;
 $31 = $v;
 $32 = (__Znwj(12)|0);
 $33 = $31;
 $30 = $33;
 $34 = $30;
 $28 = $32;
 $29 = $34;
 $35 = $28;
 $36 = $29;
 $27 = $36;
 $37 = $27;
 $38 = ((($37)) + 8|0);
 $26 = $38;
 $39 = $26;
 $25 = $39;
 $40 = $25;
 $24 = $40;
 $41 = $24;
 $12 = $35;
 $13 = $41;
 $42 = $12;
 $11 = $42;
 HEAP32[$42>>2] = 0;
 $43 = ((($42)) + 4|0);
 HEAP32[$43>>2] = 0;
 $44 = ((($42)) + 8|0);
 ;HEAP8[$10>>0]=HEAP8[$14>>0]|0;
 $7 = $44;
 HEAP32[$8>>2] = 0;
 $45 = $7;
 $6 = $8;
 $46 = $6;
 $47 = HEAP32[$46>>2]|0;
 $0 = $10;
 ;HEAP8[$5>>0]=HEAP8[$9>>0]|0;
 $3 = $45;
 HEAP32[$4>>2] = $47;
 $48 = $3;
 $2 = $5;
 $1 = $4;
 $49 = $1;
 $50 = HEAP32[$49>>2]|0;
 HEAP32[$48>>2] = $50;
 $51 = $29;
 $52 = HEAP32[$51>>2]|0;
 HEAP32[$35>>2] = $52;
 $53 = $29;
 $54 = ((($53)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($35)) + 4|0);
 HEAP32[$56>>2] = $55;
 $57 = $29;
 $17 = $57;
 $58 = $17;
 $59 = ((($58)) + 8|0);
 $16 = $59;
 $60 = $16;
 $15 = $60;
 $61 = $15;
 $62 = HEAP32[$61>>2]|0;
 $20 = $35;
 $63 = $20;
 $64 = ((($63)) + 8|0);
 $19 = $64;
 $65 = $19;
 $18 = $65;
 $66 = $18;
 HEAP32[$66>>2] = $62;
 $67 = $29;
 $23 = $67;
 $68 = $23;
 $69 = ((($68)) + 8|0);
 $22 = $69;
 $70 = $22;
 $21 = $70;
 $71 = $21;
 HEAP32[$71>>2] = 0;
 $72 = $29;
 $73 = ((($72)) + 4|0);
 HEAP32[$73>>2] = 0;
 $74 = $29;
 HEAP32[$74>>2] = 0;
 STACKTOP = sp;return ($32|0);
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE9push_backERKd($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 89|0;
 $__annotator = sp + 88|0;
 $21 = $this;
 $22 = $__x;
 $23 = $21;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $20 = $23;
 $26 = $20;
 $27 = ((($26)) + 8|0);
 $19 = $27;
 $28 = $19;
 $18 = $28;
 $29 = $18;
 $30 = HEAP32[$29>>2]|0;
 $31 = ($25|0)!=($30|0);
 if ($31) {
  __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator,$23,1);
  $17 = $23;
  $32 = $17;
  $33 = ((($32)) + 8|0);
  $16 = $33;
  $34 = $16;
  $15 = $34;
  $35 = $15;
  $36 = ((($23)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $14 = $37;
  $38 = $14;
  $39 = $22;
  $10 = $35;
  $11 = $38;
  $12 = $39;
  $40 = $10;
  $41 = $11;
  $42 = $12;
  $9 = $42;
  $43 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $40;
  $6 = $41;
  $7 = $43;
  $44 = $5;
  $45 = $6;
  $46 = $7;
  $4 = $46;
  $47 = $4;
  $1 = $44;
  $2 = $45;
  $3 = $47;
  $48 = $2;
  $49 = $3;
  $0 = $49;
  $50 = $0;
  $51 = +HEAPF64[$50>>3];
  HEAPF64[$48>>3] = $51;
  __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $52 = ((($23)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + 8|0);
  HEAP32[$52>>2] = $54;
  STACKTOP = sp;return;
 } else {
  $55 = $22;
  __ZNSt3__16vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($23,$55);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEjRKd($this,$__sz,$__x) {
 $this = $this|0;
 $__sz = $__sz|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 88|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $__x;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$22>>2]|0;
 $26 = $24;
 $27 = $25;
 $28 = (($26) - ($27))|0;
 $29 = (($28|0) / 8)&-1;
 $__cs = $29;
 $30 = $__cs;
 $31 = $19;
 $32 = ($30>>>0)<($31>>>0);
 if ($32) {
  $33 = $19;
  $34 = $__cs;
  $35 = (($33) - ($34))|0;
  $36 = $20;
  __ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEjRKd($21,$35,$36);
  STACKTOP = sp;return;
 }
 $37 = $__cs;
 $38 = $19;
 $39 = ($37>>>0)>($38>>>0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $40 = HEAP32[$21>>2]|0;
 $41 = $19;
 $42 = (($40) + ($41<<3)|0);
 $15 = $21;
 $16 = $42;
 $43 = $15;
 $14 = $43;
 $44 = $14;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 8)&-1;
 $__old_size$i = $51;
 $52 = $16;
 $12 = $43;
 $13 = $52;
 $53 = $12;
 while(1) {
  $54 = $13;
  $55 = ((($53)) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($54|0)!=($56|0);
  if (!($57)) {
   break;
  }
  $11 = $53;
  $58 = $11;
  $59 = ((($58)) + 8|0);
  $10 = $59;
  $60 = $10;
  $9 = $60;
  $61 = $9;
  $62 = ((($53)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($63)) + -8|0);
  HEAP32[$62>>2] = $64;
  $8 = $64;
  $65 = $8;
  $5 = $61;
  $6 = $65;
  $66 = $5;
  $67 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $66;
  $3 = $67;
  $68 = $2;
  $69 = $3;
  $0 = $68;
  $1 = $69;
 }
 $70 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(383,($43|0),($70|0));
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if ($72) {
  $73 = ___cxa_find_matching_catch(0|0)|0;
  $74 = tempRet0;
  ___clang_call_terminate($73);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal11NoBaseClass6verifyINSt3__16vectorIdNS3_9allocatorIdEEEEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeINSt3__16vectorIdNS2_9allocatorIdEEEEEEPKvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = (__ZN10emscripten8internal14getLightTypeIDINSt3__16vectorIdNS2_9allocatorIdEEEEEEPKvRKT_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__16vectorIdNS3_9allocatorIdEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__16vectorIdNS3_9allocatorIdEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__16vectorIdNS2_9allocatorIdEEEEEEvPT_($ptr) {
 $ptr = $ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $ptr;
 $1 = $0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 __ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINSt3__16vectorIdNS2_9allocatorIdEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__16vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__16vectorIdNS3_9allocatorIdEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPNSt3__16vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__16vectorIdNS3_9allocatorIdEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKNSt3__16vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal12getSignatureIPKvJPNSt3__16vectorIdNS4_9allocatorIdEEEEEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (5632|0);
}
function __ZN10emscripten8internal12getSignatureIvJPNSt3__16vectorIdNS2_9allocatorIdEEEEEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (5624|0);
}
function __ZN10emscripten8internal12operator_newINSt3__16vectorIdNS2_9allocatorIdEEEEJEEEPT_DpOT0_() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 4|0;
 $6 = sp + 12|0;
 $10 = (__Znwj(12)|0);
 $9 = $10;
 $11 = $9;
 $8 = $11;
 $12 = $8;
 $7 = $12;
 HEAP32[$12>>2] = 0;
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($12)) + 8|0);
 $5 = $14;
 HEAP32[$6>>2] = 0;
 $15 = $5;
 $4 = $6;
 $16 = $4;
 $17 = HEAP32[$16>>2]|0;
 $2 = $15;
 HEAP32[$3>>2] = $17;
 $18 = $2;
 $1 = $18;
 $0 = $3;
 $19 = $0;
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $20;
 STACKTOP = sp;return ($10|0);
}
function __ZN10emscripten8internal7InvokerIPNSt3__16vectorIdNS2_9allocatorIdEEEEJEE6invokeEPFS7_vE($fn) {
 $fn = $fn|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fn;
 $1 = $0;
 $2 = (FUNCTION_TABLE_i[$1 & 511]()|0);
 $3 = (__ZN10emscripten8internal11BindingTypeIPNSt3__16vectorIdNS2_9allocatorIdEEEEE10toWireTypeES7_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__16vectorIdNS5_9allocatorIdEEEEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__16vectorIdNS5_9allocatorIdEEEEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__16vectorIdNS4_9allocatorIdEEEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPNSt3__16vectorIdNS2_9allocatorIdEEEEJPFS7_vEEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (5608|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIdNS2_9allocatorIdEEEEFvRKdEvPS6_JS8_EE6invokeERKSA_SB_d($method,$wireThis,$args) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 $args = +$args;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $method;
 $1 = $wireThis;
 $2 = $args;
 $4 = $0;
 $$field = HEAP32[$4>>2]|0;
 $$index1 = ((($4)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $5 = $1;
 $6 = (__ZN10emscripten8internal11BindingTypeIPNSt3__16vectorIdNS2_9allocatorIdEEEEE12fromWireTypeES7_($5)|0);
 $7 = $$field2 >> 1;
 $8 = (($6) + ($7)|0);
 $9 = $$field2 & 1;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$field)|0);
  $13 = HEAP32[$12>>2]|0;
  $17 = $13;
 } else {
  $14 = $$field;
  $17 = $14;
 }
 $15 = $2;
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($15));
 HEAPF64[$3>>3] = $16;
 FUNCTION_TABLE_vii[$17 & 511]($8,$3);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__16vectorIdNS5_9allocatorIdEEEEEERKdEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__16vectorIdNS5_9allocatorIdEEEEEERKdEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__16vectorIdNS4_9allocatorIdEEEEEERKdEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIvJRKMNSt3__16vectorIdNS2_9allocatorIdEEEEFvRKdEPS6_dEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (5584|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__16vectorIdNS2_9allocatorIdEEEEFvRKdEEEPT_RKSB_($t) {
 $t = $t|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(8)|0);
 $2 = $0;
 $$field = HEAP32[$2>>2]|0;
 $$index1 = ((($2)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIdNS2_9allocatorIdEEEEFvjRKdEvPS6_JjS8_EE6invokeERKSA_SB_jd($method,$wireThis,$args,$args1) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 $args1 = +$args1;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $3 = 0.0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $0 = $method;
 $1 = $wireThis;
 $2 = $args;
 $3 = $args1;
 $5 = $0;
 $$field = HEAP32[$5>>2]|0;
 $$index1 = ((($5)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $6 = $1;
 $7 = (__ZN10emscripten8internal11BindingTypeIPNSt3__16vectorIdNS2_9allocatorIdEEEEE12fromWireTypeES7_($6)|0);
 $8 = $$field2 >> 1;
 $9 = (($7) + ($8)|0);
 $10 = $$field2 & 1;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = HEAP32[$9>>2]|0;
  $13 = (($12) + ($$field)|0);
  $14 = HEAP32[$13>>2]|0;
  $20 = $14;
 } else {
  $15 = $$field;
  $20 = $15;
 }
 $16 = $2;
 $17 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($16)|0);
 $18 = $3;
 $19 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($18));
 HEAPF64[$4>>3] = $19;
 FUNCTION_TABLE_viii[$20 & 511]($9,$17,$4);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__16vectorIdNS5_9allocatorIdEEEEEEjRKdEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__16vectorIdNS5_9allocatorIdEEEEEEjRKdEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__16vectorIdNS4_9allocatorIdEEEEEEjRKdEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIvJRKMNSt3__16vectorIdNS2_9allocatorIdEEEEFvjRKdEPS6_jdEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (5504|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__16vectorIdNS2_9allocatorIdEEEEFvjRKdEEEPT_RKSB_($t) {
 $t = $t|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(8)|0);
 $2 = $0;
 $$field = HEAP32[$2>>2]|0;
 $$index1 = ((($2)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($7|0) / 8)&-1;
 STACKTOP = sp;return ($8|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIdNS2_9allocatorIdEEEEKFjvEjPKS6_JEE6invokeERKS8_SA_($method,$wireThis) {
 $method = $method|0;
 $wireThis = $wireThis|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $method;
 $1 = $wireThis;
 $3 = $0;
 $$field = HEAP32[$3>>2]|0;
 $$index1 = ((($3)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $4 = $1;
 $5 = (__ZN10emscripten8internal11BindingTypeIPKNSt3__16vectorIdNS2_9allocatorIdEEEEE12fromWireTypeES8_($4)|0);
 $6 = $$field2 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$field2 & 1;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$field)|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 } else {
  $13 = $$field;
  $14 = $13;
 }
 $15 = (FUNCTION_TABLE_ii[$14 & 511]($7)|0);
 HEAP32[$2>>2] = $15;
 $16 = (__ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($2)|0);
 STACKTOP = sp;return ($16|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__16vectorIdNS5_9allocatorIdEEEEEEEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__16vectorIdNS5_9allocatorIdEEEEEEEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJjNS0_17AllowedRawPointerIKNSt3__16vectorIdNS4_9allocatorIdEEEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIjJRKMNSt3__16vectorIdNS2_9allocatorIdEEEEKFjvEPKS6_EEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (5432|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__16vectorIdNS2_9allocatorIdEEEEKFjvEEEPT_RKS9_($t) {
 $t = $t|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(8)|0);
 $2 = $0;
 $$field = HEAP32[$2>>2]|0;
 $$index1 = ((($2)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$1>>2] = $$field;
 $$index5 = ((($1)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12VectorAccessINSt3__16vectorIdNS2_9allocatorIdEEEEE3getERKS6_j($v,$index) {
 $v = $v|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $4 = $v;
 $5 = $index;
 $6 = $5;
 $7 = $4;
 $2 = $7;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$8>>2]|0;
 $12 = $10;
 $13 = $11;
 $14 = (($12) - ($13))|0;
 $15 = (($14|0) / 8)&-1;
 $16 = ($6>>>0)<($15>>>0);
 if ($16) {
  $17 = $4;
  $18 = $5;
  $0 = $17;
  $1 = $18;
  $19 = $0;
  $20 = $1;
  $21 = HEAP32[$19>>2]|0;
  $22 = (($21) + ($20<<3)|0);
  __ZN10emscripten3valC2IRKdEEOT_($3,$22);
  $24 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($24|0);
 } else {
  $23 = (__ZN10emscripten3val9undefinedEv()|0);
  HEAP32[$3>>2] = $23;
  $24 = HEAP32[$3>>2]|0;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__16vectorIdNS3_9allocatorIdEEEEjES2_S9_JjEE6invokeEPSB_PS7_j($function,$wireThis,$args) {
 $function = $function|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $0 = $function;
 $1 = $wireThis;
 $2 = $args;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__16vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($8)|0);
 $10 = $2;
 $11 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($10)|0);
 $12 = (FUNCTION_TABLE_iii[$7 & 511]($9,$11)|0);
 HEAP32[$3>>2] = $12;
 __THREW__ = 0;
 $13 = (invoke_ii(384,($3|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $4 = $16;
  $5 = $17;
  __ZN10emscripten3valD2Ev($3);
  $18 = $4;
  $19 = $5;
  ___resumeException($18|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__16vectorIdNS5_9allocatorIdEEEEjEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__16vectorIdNS5_9allocatorIdEEEEjEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__16vectorIdNS4_9allocatorIdEEEEjEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIPNS0_7_EM_VALEJPPFNS_3valERKNSt3__16vectorIdNS5_9allocatorIdEEEEjEPS9_jEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (5376|0);
}
function __ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__16vectorIdNS3_9allocatorIdEEEEjEEEPT_RKSC_($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(4)|0);
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12VectorAccessINSt3__16vectorIdNS2_9allocatorIdEEEEE3setERS6_jRKd($v,$index,$value) {
 $v = $v|0;
 $index = $index|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $v;
 $3 = $index;
 $4 = $value;
 $5 = $4;
 $6 = +HEAPF64[$5>>3];
 $7 = $2;
 $8 = $3;
 $0 = $7;
 $1 = $8;
 $9 = $0;
 $10 = $1;
 $11 = HEAP32[$9>>2]|0;
 $12 = (($11) + ($10<<3)|0);
 HEAPF64[$12>>3] = $6;
 STACKTOP = sp;return 1;
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__16vectorIdNS2_9allocatorIdEEEEjRKdEbS7_JjS9_EE6invokeEPSB_PS6_jd($function,$wireThis,$args,$args1) {
 $function = $function|0;
 $wireThis = $wireThis|0;
 $args = $args|0;
 $args1 = +$args1;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $0 = $function;
 $1 = $wireThis;
 $2 = $args;
 $3 = $args1;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__16vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($7)|0);
 $9 = $2;
 $10 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($9)|0);
 $11 = $3;
 $12 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($11));
 HEAPF64[$4>>3] = $12;
 $13 = (FUNCTION_TABLE_iiii[$6 & 511]($8,$10,$4)|0);
 $14 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($13)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__16vectorIdNS4_9allocatorIdEEEEjRKdEE8getCountEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__16vectorIdNS4_9allocatorIdEEEEjRKdEE8getTypesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__16vectorIdNS3_9allocatorIdEEEEjRKdEEEE3getEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal12getSignatureIbJPPFbRNSt3__16vectorIdNS2_9allocatorIdEEEEjRKdEPS6_jdEEEPKcPFT_DpT0_E($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return (5352|0);
}
function __ZN10emscripten8internal10getContextIPFbRNSt3__16vectorIdNS2_9allocatorIdEEEEjRKdEEEPT_RKSC_($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $t;
 $1 = (__Znwj(4)|0);
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__16vectorIdNS3_9allocatorIdEEEEjRKdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5360|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__16vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__16vectorIdNS4_9allocatorIdEEEEjEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5384|0);
}
function __ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 __emval_incref(($2|0));
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN10emscripten3valD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi(385,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten3valC2IRKdEEOT_($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $argv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $argv = sp;
 $1 = $this;
 $2 = $value;
 $3 = $1;
 $4 = $2;
 $0 = $4;
 $5 = $0;
 __ZN10emscripten8internal12WireTypePackIJRKdEEC2ES3_($argv,$5);
 $6 = (__ZN10emscripten8internal6TypeIDIRKdE3getEv()|0);
 $7 = (__ZNK10emscripten8internal12WireTypePackIJRKdEEcvPKvEv($argv)|0);
 $8 = (__emval_take_value(($6|0),($7|0))|0);
 HEAP32[$3>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN10emscripten3val9undefinedEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,(1));
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($this,$handle) {
 $this = $this|0;
 $handle = $handle|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $handle;
 $2 = $0;
 $3 = $1;
 HEAP32[$2>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12WireTypePackIJRKdEEC2ES3_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cursor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cursor = sp + 24|0;
 $5 = $this;
 $6 = $args;
 $7 = $5;
 $4 = $7;
 $8 = $4;
 HEAP32[$cursor>>2] = $8;
 $9 = $6;
 $0 = $9;
 $10 = $0;
 $2 = $cursor;
 $3 = $10;
 $11 = $2;
 $12 = $3;
 $1 = $12;
 $13 = $1;
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($13));
 __ZN10emscripten8internal20writeGenericWireTypeERPNS0_15GenericWireTypeEd($11,$14);
 $15 = $2;
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($15);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIRKdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRKdE3getEv()|0);
 return ($0|0);
}
function __ZNK10emscripten8internal12WireTypePackIJRKdEEcvPKvEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal11LightTypeIDIRKdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8928|0);
}
function __ZN10emscripten8internal20writeGenericWireTypeERPNS0_15GenericWireTypeEd($cursor,$wt) {
 $cursor = $cursor|0;
 $wt = +$wt;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cursor;
 $1 = $wt;
 $2 = $1;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 HEAPF64[$4>>3] = $2;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJjNS0_17AllowedRawPointerIKNSt3__16vectorIdNS4_9allocatorIdEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5440|0);
}
function __ZN10emscripten8internal11BindingTypeIPKNSt3__16vectorIdNS2_9allocatorIdEEEEE12fromWireTypeES8_($wt) {
 $wt = $wt|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $wt;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($v) {
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__16vectorIdNS4_9allocatorIdEEEEEEjRKdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5512|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__16vectorIdNS2_9allocatorIdEEEEE12fromWireTypeES7_($wt) {
 $wt = $wt|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $wt;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__16vectorIdNS4_9allocatorIdEEEEEERKdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5592|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__16vectorIdNS4_9allocatorIdEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5616|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__16vectorIdNS2_9allocatorIdEEEEE10toWireTypeES7_($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $p;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKNSt3__16vectorIdNS2_9allocatorIdEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5448|0);
}
function __ZN10emscripten8internal11LightTypeIDIPNSt3__16vectorIdNS2_9allocatorIdEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5528|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__16vectorIdNS2_9allocatorIdEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5120|0);
}
function __ZN10emscripten8internal14getLightTypeIDINSt3__16vectorIdNS2_9allocatorIdEEEEEEPKvRKT_($value) {
 $value = $value|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $value;
 STACKTOP = sp;return (5120|0);
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEjRKd($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__a$i = 0, $__annotator$i = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 240|0;
 $17 = sp + 68|0;
 $18 = sp + 80|0;
 $31 = sp + 8|0;
 $36 = sp + 241|0;
 $__annotator$i = sp + 242|0;
 $__v = sp + 124|0;
 $47 = $this;
 $48 = $__n;
 $49 = $__x;
 $52 = $47;
 $46 = $52;
 $53 = $46;
 $54 = ((($53)) + 8|0);
 $45 = $54;
 $55 = $45;
 $44 = $55;
 $56 = $44;
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($52)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $57;
 $61 = $59;
 $62 = (($60) - ($61))|0;
 $63 = (($62|0) / 8)&-1;
 $64 = $48;
 $65 = ($63>>>0)>=($64>>>0);
 if ($65) {
  $66 = $48;
  $67 = $49;
  $41 = $52;
  $42 = $66;
  $43 = $67;
  $68 = $41;
  $40 = $68;
  $69 = $40;
  $70 = ((($69)) + 8|0);
  $39 = $70;
  $71 = $39;
  $38 = $71;
  $72 = $38;
  $__a$i = $72;
  while(1) {
   __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i,$68,1);
   $73 = $__a$i;
   $74 = ((($68)) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $37 = $75;
   $76 = $37;
   $77 = $43;
   $33 = $73;
   $34 = $76;
   $35 = $77;
   $78 = $33;
   $79 = $34;
   $80 = $35;
   $32 = $80;
   $81 = $32;
   ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
   $28 = $78;
   $29 = $79;
   $30 = $81;
   $82 = $28;
   $83 = $29;
   $84 = $30;
   $27 = $84;
   $85 = $27;
   $24 = $82;
   $25 = $83;
   $26 = $85;
   $86 = $25;
   $87 = $26;
   $23 = $87;
   $88 = $23;
   $89 = +HEAPF64[$88>>3];
   HEAPF64[$86>>3] = $89;
   $90 = ((($68)) + 4|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ((($91)) + 8|0);
   HEAP32[$90>>2] = $92;
   $93 = $42;
   $94 = (($93) + -1)|0;
   $42 = $94;
   __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
   $95 = $42;
   $96 = ($95>>>0)>(0);
   if (!($96)) {
    break;
   }
  }
  STACKTOP = sp;return;
 }
 $22 = $52;
 $97 = $22;
 $98 = ((($97)) + 8|0);
 $21 = $98;
 $99 = $21;
 $20 = $99;
 $100 = $20;
 $__a = $100;
 $19 = $52;
 $101 = $19;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = HEAP32[$101>>2]|0;
 $105 = $103;
 $106 = $104;
 $107 = (($105) - ($106))|0;
 $108 = (($107|0) / 8)&-1;
 $109 = $48;
 $110 = (($108) + ($109))|0;
 $16 = $52;
 HEAP32[$17>>2] = $110;
 $111 = $16;
 $112 = (__ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv($111)|0);
 $__ms$i = $112;
 $113 = HEAP32[$17>>2]|0;
 $114 = $__ms$i;
 $115 = ($113>>>0)>($114>>>0);
 if ($115) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($111);
  // unreachable;
 }
 $14 = $111;
 $116 = $14;
 $13 = $116;
 $117 = $13;
 $12 = $117;
 $118 = $12;
 $119 = ((($118)) + 8|0);
 $11 = $119;
 $120 = $11;
 $10 = $120;
 $121 = $10;
 $122 = HEAP32[$121>>2]|0;
 $123 = HEAP32[$117>>2]|0;
 $124 = $122;
 $125 = $123;
 $126 = (($124) - ($125))|0;
 $127 = (($126|0) / 8)&-1;
 $__cap$i = $127;
 $128 = $__cap$i;
 $129 = $__ms$i;
 $130 = (($129>>>0) / 2)&-1;
 $131 = ($128>>>0)>=($130>>>0);
 if ($131) {
  $132 = $__ms$i;
  $15 = $132;
 } else {
  $133 = $__cap$i;
  $134 = $133<<1;
  HEAP32[$18>>2] = $134;
  $7 = $18;
  $8 = $17;
  $135 = $7;
  $136 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $135;
  $5 = $136;
  $137 = $4;
  $138 = $5;
  $1 = $6;
  $2 = $137;
  $3 = $138;
  $139 = $2;
  $140 = HEAP32[$139>>2]|0;
  $141 = $3;
  $142 = HEAP32[$141>>2]|0;
  $143 = ($140>>>0)<($142>>>0);
  $144 = $5;
  $145 = $4;
  $146 = $143 ? $144 : $145;
  $147 = HEAP32[$146>>2]|0;
  $15 = $147;
 }
 $148 = $15;
 $0 = $52;
 $149 = $0;
 $150 = ((($149)) + 4|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = HEAP32[$149>>2]|0;
 $153 = $151;
 $154 = $152;
 $155 = (($153) - ($154))|0;
 $156 = (($155|0) / 8)&-1;
 $157 = $__a;
 __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC2EjjS3_($__v,$148,$156,$157);
 $158 = $48;
 $159 = $49;
 __THREW__ = 0;
 invoke_viii(386,($__v|0),($158|0),($159|0));
 $160 = __THREW__; __THREW__ = 0;
 $161 = $160&1;
 if ($161) {
  $164 = ___cxa_find_matching_catch()|0;
  $165 = tempRet0;
  $50 = $164;
  $51 = $165;
  __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($__v);
  $166 = $50;
  $167 = $51;
  ___resumeException($166|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(387,($52|0),($__v|0));
 $162 = __THREW__; __THREW__ = 0;
 $163 = $162&1;
 if ($163) {
  $164 = ___cxa_find_matching_catch()|0;
  $165 = tempRet0;
  $50 = $164;
  $51 = $165;
  __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($__v);
  $166 = $50;
  $167 = $51;
  ___resumeException($166|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 8)&-1;
 $35 = (($22) + ($34<<3)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<3)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 8)&-1;
 $52 = (($43) + ($51<<3)|0);
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 76|0;
 $11 = sp + 8|0;
 $13 = sp + 77|0;
 $18 = sp + 16|0;
 $19 = sp + 68|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 536870911;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 60|0;
 $20 = sp + 68|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<3;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<3)|0);
 $59 = ((($26)) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = ((($26)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<3)|0);
 $11 = $26;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEjRKd($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp;
 $14 = sp + 84|0;
 $18 = $this;
 $19 = $__n;
 $20 = $__x;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 12|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $__a = $27;
 while(1) {
  $28 = $__a;
  $29 = ((($21)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $0 = $30;
  $31 = $0;
  $32 = $20;
  $11 = $28;
  $12 = $31;
  $13 = $32;
  $33 = $11;
  $34 = $12;
  $35 = $13;
  $10 = $35;
  $36 = $10;
  ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
  $6 = $33;
  $7 = $34;
  $8 = $36;
  $37 = $6;
  $38 = $7;
  $39 = $8;
  $5 = $39;
  $40 = $5;
  $2 = $37;
  $3 = $38;
  $4 = $40;
  $41 = $3;
  $42 = $4;
  $1 = $42;
  $43 = $1;
  $44 = +HEAPF64[$43>>3];
  HEAPF64[$41>>3] = $44;
  $45 = ((($21)) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 8|0);
  HEAP32[$45>>2] = $47;
  $48 = $19;
  $49 = (($48) + -1)|0;
  $19 = $49;
  $50 = $19;
  $51 = ($50>>>0)>(0);
  if (!($51)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 64|0;
 $__t$i1 = sp + 40|0;
 $__t$i = sp + 88|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 8)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<3)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<3;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = ((($58)) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = ((($32)) + 4|0);
 $71 = $31;
 $72 = ((($71)) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = ((($83)) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = ((($88)) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = ((($102)) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = ((($106)) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 8)&-1;
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 132|0;
 $28 = sp + 8|0;
 $31 = sp + 133|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -8|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 8)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 8)&-1;
 $39 = (($26) + ($38<<3)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 8)&-1;
 $51 = (($42) + ($50<<3)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = ((($57)) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 8)&-1;
 $67 = (($54) + ($66<<3)|0);
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 8)&-1;
 $39 = (($26) + ($38<<3)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = ((($45)) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 8)&-1;
 $55 = (($42) + ($54<<3)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<3)|0);
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 200|0;
 $22 = sp + 8|0;
 $25 = sp + 201|0;
 $33 = sp + 148|0;
 $34 = sp + 16|0;
 $__v = sp + 108|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = ((($44)) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 8)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = ((($64)) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 8)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22>>0]=HEAP8[$25>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  $90 = $21;
  $91 = $20;
  $92 = $89 ? $90 : $91;
  $93 = HEAP32[$92>>2]|0;
  $31 = $93;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = ((($95)) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 8)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC2EjjS3_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = ((($__v)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = $3;
 $0 = $119;
 $120 = $0;
 $121 = +HEAPF64[$120>>3];
 HEAPF64[$118>>3] = $121;
 $122 = ((($__v)) + 8|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ((($123)) + 8|0);
 HEAP32[$122>>2] = $124;
 __THREW__ = 0;
 invoke_vii(387,($43|0),($__v|0));
 $125 = __THREW__; __THREW__ = 0;
 $126 = $125&1;
 if ($126) {
  $127 = ___cxa_find_matching_catch()|0;
  $128 = tempRet0;
  $41 = $127;
  $42 = $128;
  __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($__v);
  $129 = $41;
  $130 = $42;
  ___resumeException($129|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110shared_ptrIN4rhea19abstract_constraintEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 __ZNSt3__119__shared_weak_count16__release_sharedEv($6);
 STACKTOP = sp;return;
}
function __ZNK4rhea8variable6is_nilEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $this;
 $5 = $4;
 $2 = $5;
 $3 = 0;
 $6 = $2;
 $1 = $6;
 $7 = $1;
 $0 = $7;
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 $11 = $10 ^ 1;
 STACKTOP = sp;return ($11|0);
}
function __ZNSt3__110shared_ptrIN4rhea14float_variableEE11make_sharedIJdEEES3_DpOT_($agg$result,$__args) {
 $agg$result = $agg$result|0;
 $__args = $__args|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a2 = 0, $__hold2 = 0, $__t$i = 0;
 var $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp;
 $11 = sp + 128|0;
 $12 = sp + 48|0;
 $13 = sp + 32|0;
 $17 = sp + 709|0;
 $18 = sp + 704|0;
 $19 = sp + 707|0;
 $20 = sp + 702|0;
 $22 = sp + 208|0;
 $30 = sp + 16|0;
 $31 = sp + 40|0;
 $32 = sp + 88|0;
 $33 = sp + 8|0;
 $36 = sp + 705|0;
 $37 = sp + 712|0;
 $38 = sp + 710|0;
 $39 = sp + 708|0;
 $41 = sp + 220|0;
 $51 = sp + 72|0;
 $52 = sp + 120|0;
 $53 = sp + 96|0;
 $54 = sp + 104|0;
 $55 = sp + 136|0;
 $58 = sp + 703|0;
 $59 = sp + 308|0;
 $60 = sp + 312|0;
 $61 = sp + 706|0;
 $62 = sp + 711|0;
 $63 = sp + 80|0;
 $64 = sp + 64|0;
 $65 = sp + 144|0;
 $72 = sp + 713|0;
 $73 = sp + 348|0;
 $74 = sp + 684|0;
 $77 = sp + 24|0;
 $117 = sp + 556|0;
 $118 = sp + 56|0;
 $121 = sp + 316|0;
 $122 = sp + 576|0;
 $123 = sp + 112|0;
 $128 = sp + 584|0;
 $__a2 = sp + 714|0;
 $__hold2 = sp + 352|0;
 $156 = sp + 224|0;
 $157 = sp + 701|0;
 $160 = sp + 700|0;
 $155 = $__args;
 $154 = $__a2;
 $133 = $__a2;
 $134 = 1;
 $135 = 0;
 $162 = $134;
 $163 = $162<<5;
 $132 = $163;
 $164 = $132;
 $165 = (__Znwj($164)|0);
 $129 = $156;
 $130 = $__a2;
 $131 = 1;
 $166 = $129;
 $167 = $130;
 HEAP32[$166>>2] = $167;
 $168 = ((($166)) + 4|0);
 $169 = $131;
 HEAP32[$168>>2] = $169;
 $125 = $__hold2;
 $126 = $165;
 $127 = $156;
 $170 = $125;
 $171 = $126;
 $172 = $127;
 $124 = $172;
 $173 = $124;
 ;HEAP32[$128>>2]=HEAP32[$173>>2]|0;HEAP32[$128+4>>2]=HEAP32[$173+4>>2]|0;
 ;HEAP8[$123>>0]=HEAP8[$128>>0]|0;HEAP8[$123+1>>0]=HEAP8[$128+1>>0]|0;HEAP8[$123+2>>0]=HEAP8[$128+2>>0]|0;HEAP8[$123+3>>0]=HEAP8[$128+3>>0]|0;HEAP8[$123+4>>0]=HEAP8[$128+4>>0]|0;HEAP8[$123+5>>0]=HEAP8[$128+5>>0]|0;HEAP8[$123+6>>0]=HEAP8[$128+6>>0]|0;HEAP8[$123+7>>0]=HEAP8[$128+7>>0]|0;
 $120 = $170;
 HEAP32[$121>>2] = $171;
 $174 = $120;
 $119 = $121;
 $175 = $119;
 $176 = HEAP32[$175>>2]|0;
 $113 = $123;
 $177 = $113;
 ;HEAP32[$122>>2]=HEAP32[$177>>2]|0;HEAP32[$122+4>>2]=HEAP32[$177+4>>2]|0;
 ;HEAP8[$118>>0]=HEAP8[$122>>0]|0;HEAP8[$118+1>>0]=HEAP8[$122+1>>0]|0;HEAP8[$118+2>>0]=HEAP8[$122+2>>0]|0;HEAP8[$118+3>>0]=HEAP8[$122+3>>0]|0;HEAP8[$118+4>>0]=HEAP8[$122+4>>0]|0;HEAP8[$118+5>>0]=HEAP8[$122+5>>0]|0;HEAP8[$118+6>>0]=HEAP8[$122+6>>0]|0;HEAP8[$118+7>>0]=HEAP8[$122+7>>0]|0;
 $116 = $174;
 HEAP32[$117>>2] = $176;
 $178 = $116;
 $115 = $117;
 $179 = $115;
 $180 = HEAP32[$179>>2]|0;
 HEAP32[$178>>2] = $180;
 $181 = ((($178)) + 4|0);
 $114 = $118;
 $182 = $114;
 ;HEAP32[$181>>2]=HEAP32[$182>>2]|0;HEAP32[$181+4>>2]=HEAP32[$182+4>>2]|0;
 $94 = $__hold2;
 $183 = $94;
 $93 = $183;
 $184 = $93;
 $92 = $184;
 $185 = $92;
 $186 = HEAP32[$185>>2]|0;
 $1 = $157;
 $2 = $__a2;
 $187 = $155;
 $0 = $187;
 $188 = $0;
 ;HEAP8[$77>>0]=HEAP8[$157>>0]|0;
 $70 = $186;
 $71 = $188;
 $189 = $70;
 $68 = $189;
 $69 = 0;
 $190 = $68;
 $191 = $69;
 $66 = $190;
 $67 = $191;
 $192 = $66;
 $193 = 10504;
 HEAP32[$192>>2] = $193;
 $194 = ((($192)) + 4|0);
 $195 = $67;
 HEAP32[$194>>2] = $195;
 $196 = 10568;
 HEAP32[$190>>2] = $196;
 $197 = ((($190)) + 8|0);
 $198 = $69;
 HEAP32[$197>>2] = $198;
 $199 = 2168;
 HEAP32[$189>>2] = $199;
 $200 = ((($189)) + 16|0);
 $42 = $77;
 $201 = $42;
 $40 = $201;
 $202 = $40;
 $34 = $41;
 $35 = $202;
 $203 = $34;
 $204 = $35;
 ;HEAP8[$30>>0]=HEAP8[$39>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$33>>0]=HEAP8[$36>>0]|0;
 $28 = $203;
 $29 = $204;
 $205 = $28;
 $206 = $29;
 $27 = $206;
 $207 = $27;
 $25 = $205;
 $26 = $207;
 $208 = $25;
 $209 = $26;
 $24 = $209;
 $210 = $24;
 HEAP32[$208>>2] = $210;
 $211 = HEAP32[$41>>2]|0;
 HEAP32[$73>>2] = $211;
 $212 = $71;
 $3 = $212;
 $213 = $3;
 $23 = $213;
 $214 = $23;
 $21 = $214;
 $215 = $21;
 $15 = $22;
 $16 = $215;
 $216 = $15;
 $217 = $16;
 $14 = $217;
 $218 = $14;
 ;HEAP8[$10>>0]=HEAP8[$20>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$17>>0]|0;
 $8 = $216;
 $9 = $218;
 $219 = $8;
 $220 = $9;
 $7 = $220;
 $221 = $7;
 $5 = $219;
 $6 = $221;
 $222 = $5;
 $223 = $6;
 $4 = $223;
 $224 = $4;
 HEAP32[$222>>2] = $224;
 $225 = HEAP32[$22>>2]|0;
 HEAP32[$74>>2] = $225;
 ;HEAP8[$63>>0]=HEAP8[$74>>0]|0;HEAP8[$63+1>>0]=HEAP8[$74+1>>0]|0;HEAP8[$63+2>>0]=HEAP8[$74+2>>0]|0;HEAP8[$63+3>>0]=HEAP8[$74+3>>0]|0;
 ;HEAP8[$64>>0]=HEAP8[$73>>0]|0;HEAP8[$64+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$65>>0]=HEAP8[$72>>0]|0;
 $57 = $200;
 $226 = $57;
 $56 = $64;
 $227 = $56;
 ;HEAP32[$59>>2]=HEAP32[$227>>2]|0;
 $43 = $63;
 $228 = $43;
 ;HEAP32[$60>>2]=HEAP32[$228>>2]|0;
 ;HEAP8[$51>>0]=HEAP8[$62>>0]|0;
 ;HEAP8[$52>>0]=HEAP8[$61>>0]|0;
 ;HEAP8[$53>>0]=HEAP8[$60>>0]|0;HEAP8[$53+1>>0]=HEAP8[$60+1>>0]|0;HEAP8[$53+2>>0]=HEAP8[$60+2>>0]|0;HEAP8[$53+3>>0]=HEAP8[$60+3>>0]|0;
 ;HEAP8[$54>>0]=HEAP8[$59>>0]|0;HEAP8[$54+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[$59+3>>0]|0;
 ;HEAP8[$55>>0]=HEAP8[$58>>0]|0;
 $50 = $226;
 $229 = $50;
 $49 = $54;
 $230 = $49;
 $48 = $230;
 $231 = $48;
 $232 = HEAP32[$231>>2]|0;
 $47 = $232;
 $45 = $53;
 $233 = $45;
 $44 = $233;
 $234 = $44;
 $235 = HEAP32[$234>>2]|0;
 $46 = $235;
 $236 = $46;
 $237 = +HEAPF64[$236>>3];
 __THREW__ = 0;
 invoke_vid(388,($229|0),(+$237));
 $238 = __THREW__; __THREW__ = 0;
 $239 = $238&1;
 if ($239) {
  $240 = ___cxa_find_matching_catch()|0;
  $241 = tempRet0;
  $75 = $240;
  $76 = $241;
  __ZNSt3__114__shared_countD2Ev($189);
  $242 = $75;
  $243 = $76;
  $158 = $242;
  $159 = $243;
  $112 = $__hold2;
  $244 = $112;
  $110 = $244;
  $111 = 0;
  $245 = $110;
  $109 = $245;
  $246 = $109;
  $108 = $246;
  $247 = $108;
  $248 = HEAP32[$247>>2]|0;
  $__tmp$i$i1 = $248;
  $249 = $111;
  $98 = $245;
  $250 = $98;
  $97 = $250;
  $251 = $97;
  HEAP32[$251>>2] = $249;
  $252 = $__tmp$i$i1;
  $253 = ($252|0)!=(0|0);
  if (!($253)) {
   $312 = $158;
   $313 = $159;
   ___resumeException($312|0);
   // unreachable;
  }
  $96 = $245;
  $274 = $96;
  $95 = $274;
  $275 = $95;
  $276 = ((($275)) + 4|0);
  $277 = $__tmp$i$i1;
  $106 = $276;
  $107 = $277;
  $278 = $106;
  $279 = HEAP32[$278>>2]|0;
  $280 = $107;
  $281 = ((($278)) + 4|0);
  $282 = HEAP32[$281>>2]|0;
  $103 = $279;
  $104 = $280;
  $105 = $282;
  $283 = $103;
  $284 = $104;
  $285 = $105;
  $100 = $283;
  $101 = $284;
  $102 = $285;
  $286 = $101;
  $99 = $286;
  $287 = $99;
  __ZdlPv($287);
  $312 = $158;
  $313 = $159;
  ___resumeException($312|0);
  // unreachable;
 }
 $$expand_i1_val = 0;
 HEAP8[$160>>0] = $$expand_i1_val;
 $78 = $agg$result;
 $254 = $78;
 HEAP32[$254>>2] = 0;
 $255 = ((($254)) + 4|0);
 HEAP32[$255>>2] = 0;
 $81 = $__hold2;
 $256 = $81;
 $80 = $256;
 $257 = $80;
 $79 = $257;
 $258 = $79;
 $259 = HEAP32[$258>>2]|0;
 $84 = $259;
 $260 = $84;
 $261 = ((($260)) + 16|0);
 $83 = $261;
 $262 = $83;
 $82 = $262;
 $263 = $82;
 HEAP32[$agg$result>>2] = $263;
 $89 = $__hold2;
 $264 = $89;
 $88 = $264;
 $265 = $88;
 $87 = $265;
 $266 = $87;
 $267 = HEAP32[$266>>2]|0;
 $__t$i = $267;
 $86 = $264;
 $268 = $86;
 $85 = $268;
 $269 = $85;
 HEAP32[$269>>2] = 0;
 $270 = $__t$i;
 $271 = ((($agg$result)) + 4|0);
 HEAP32[$271>>2] = $270;
 $272 = HEAP32[$agg$result>>2]|0;
 $90 = $agg$result;
 $91 = $272;
 $$expand_i1_val2 = 1;
 HEAP8[$160>>0] = $$expand_i1_val2;
 $161 = 1;
 $$pre_trunc = HEAP8[$160>>0]|0;
 $273 = $$pre_trunc&1;
 if (!($273)) {
  __ZNSt3__110shared_ptrIN4rhea14float_variableEED2Ev($agg$result);
 }
 $153 = $__hold2;
 $288 = $153;
 $151 = $288;
 $152 = 0;
 $289 = $151;
 $150 = $289;
 $290 = $150;
 $149 = $290;
 $291 = $149;
 $292 = HEAP32[$291>>2]|0;
 $__tmp$i$i = $292;
 $293 = $152;
 $139 = $289;
 $294 = $139;
 $138 = $294;
 $295 = $138;
 HEAP32[$295>>2] = $293;
 $296 = $__tmp$i$i;
 $297 = ($296|0)!=(0|0);
 if (!($297)) {
  STACKTOP = sp;return;
 }
 $137 = $289;
 $298 = $137;
 $136 = $298;
 $299 = $136;
 $300 = ((($299)) + 4|0);
 $301 = $__tmp$i$i;
 $147 = $300;
 $148 = $301;
 $302 = $147;
 $303 = HEAP32[$302>>2]|0;
 $304 = $148;
 $305 = ((($302)) + 4|0);
 $306 = HEAP32[$305>>2]|0;
 $144 = $303;
 $145 = $304;
 $146 = $306;
 $307 = $144;
 $308 = $145;
 $309 = $146;
 $141 = $307;
 $142 = $308;
 $143 = $309;
 $310 = $142;
 $140 = $310;
 $311 = $140;
 __ZdlPv($311);
 STACKTOP = sp;return;
}
function __ZNSt3__110shared_ptrIN4rhea14float_variableEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 __ZNSt3__119__shared_weak_count16__release_sharedEv($6);
 STACKTOP = sp;return;
}
function __ZN4rhea14float_variableC2Ed($this,$value) {
 $this = $this|0;
 $value = +$value;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $value;
 $2 = $0;
 $3 = $1;
 __ZN4rhea12pod_variableIdEC2Ed($2,$3);
 $4 = 2200;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN4rhea12pod_variableIdEC2Ed($this,$value) {
 $this = $this|0;
 $value = +$value;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $value;
 $2 = $0;
 __ZN4rhea17abstract_variableC2Ev($2);
 $3 = 5688;
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 8|0);
 $5 = $1;
 HEAPF64[$4>>3] = $5;
 STACKTOP = sp;return;
}
function __ZN4rhea17abstract_variableC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5752;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[8>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[8>>2] = $5;
 HEAP32[$3>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN4rhea12pod_variableIdED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea12pod_variableIdED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN4rhea17abstract_variableD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea17abstract_variableD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK4rhea17abstract_variable12is_pivotableEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 12|0;
 $9 = sp + 44|0;
 $5 = $this;
 $10 = (___cxa_allocate_exception(16)|0);
 $$expand_i1_val = 1;
 HEAP8[$9>>0] = $$expand_i1_val;
 $3 = $6;
 $4 = 5824;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $4;
 $15 = $4;
 __THREW__ = 0;
 $16 = (invoke_ii(229,($15|0))|0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  label = 5;
 } else {
  __THREW__ = 0;
  invoke_viii(213,($11|0),($14|0),($16|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   label = 5;
  } else {
   __THREW__ = 0;
   invoke_vii(389,($10|0),($6|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if (!($22)) {
    $$expand_i1_val2 = 0;
    HEAP8[$9>>0] = $$expand_i1_val2;
    __THREW__ = 0;
    invoke_viii(182,($10|0),(5872|0),(119|0));
    $23 = __THREW__; __THREW__ = 0;
   }
   $26 = ___cxa_find_matching_catch()|0;
   $27 = tempRet0;
   $7 = $26;
   $8 = $27;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
  }
 }
 if ((label|0) == 5) {
  $24 = ___cxa_find_matching_catch()|0;
  $25 = tempRet0;
  $7 = $24;
  $8 = $25;
 }
 $$pre_trunc = HEAP8[$9>>0]|0;
 $28 = $$pre_trunc&1;
 if (!($28)) {
  $29 = $7;
  $30 = $8;
  ___resumeException($29|0);
  // unreachable;
 }
 ___cxa_free_exception(($10|0));
 $29 = $7;
 $30 = $8;
 ___resumeException($29|0);
 // unreachable;
 return (0)|0;
}
function __ZNK4rhea17abstract_variable13is_restrictedEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 12|0;
 $9 = sp + 44|0;
 $5 = $this;
 $10 = (___cxa_allocate_exception(16)|0);
 $$expand_i1_val = 1;
 HEAP8[$9>>0] = $$expand_i1_val;
 $3 = $6;
 $4 = 5824;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $4;
 $15 = $4;
 __THREW__ = 0;
 $16 = (invoke_ii(229,($15|0))|0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  label = 5;
 } else {
  __THREW__ = 0;
  invoke_viii(213,($11|0),($14|0),($16|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   label = 5;
  } else {
   __THREW__ = 0;
   invoke_vii(389,($10|0),($6|0));
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if (!($22)) {
    $$expand_i1_val2 = 0;
    HEAP8[$9>>0] = $$expand_i1_val2;
    __THREW__ = 0;
    invoke_viii(182,($10|0),(5872|0),(119|0));
    $23 = __THREW__; __THREW__ = 0;
   }
   $26 = ___cxa_find_matching_catch()|0;
   $27 = tempRet0;
   $7 = $26;
   $8 = $27;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
  }
 }
 if ((label|0) == 5) {
  $24 = ___cxa_find_matching_catch()|0;
  $25 = tempRet0;
  $7 = $24;
  $8 = $25;
 }
 $$pre_trunc = HEAP8[$9>>0]|0;
 $28 = $$pre_trunc&1;
 if (!($28)) {
  $29 = $7;
  $30 = $8;
  ___resumeException($29|0);
  // unreachable;
 }
 ___cxa_free_exception(($10|0));
 $29 = $7;
 $30 = $8;
 ___resumeException($29|0);
 // unreachable;
 return (0)|0;
}
function __ZNK4rhea17abstract_variable9to_stringEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = $this;
 $3 = $agg$result;
 $4 = 5808;
 $6 = $3;
 $2 = $6;
 $7 = $2;
 $1 = $7;
 $8 = $1;
 $0 = $8;
 $9 = $4;
 $10 = $4;
 $11 = (__ZNSt3__111char_traitsIcE6lengthEPKc($10)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($6,$9,$11);
 STACKTOP = sp;return;
}
function __ZN4rhea13too_difficultC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this,$m) {
 $this = $this|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN4rhea5errorC2Ev($3);
 $4 = 5896;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 __THREW__ = 0;
 invoke_vii(214,($5|0),($m|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $1 = $8;
  $2 = $9;
  __ZN4rhea5errorD2Ev($3);
  $10 = $1;
  $11 = $2;
  ___resumeException($10|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZN4rhea13too_difficultD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 5896;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 __ZN4rhea5errorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4rhea13too_difficultD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea13too_difficultD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK4rhea13too_difficult4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $26 = $this;
 $27 = $26;
 $28 = ((($27)) + 4|0);
 $25 = $28;
 $29 = $25;
 $24 = $29;
 $30 = $24;
 $23 = $30;
 $31 = $23;
 $22 = $31;
 $32 = $22;
 $21 = $32;
 $33 = $21;
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = $35 & 1;
 $37 = ($36|0)!=(0);
 if ($37) {
  $17 = $30;
  $38 = $17;
  $16 = $38;
  $39 = $16;
  $15 = $39;
  $40 = $15;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $50 = $42;
 } else {
  $20 = $30;
  $43 = $20;
  $19 = $43;
  $44 = $19;
  $18 = $44;
  $45 = $18;
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = $47 >> 1;
  $50 = $48;
 }
 $49 = ($50|0)==(0);
 if ($49) {
  $75 = 5912;
  STACKTOP = sp;return ($75|0);
 }
 $51 = ((($27)) + 4|0);
 $14 = $51;
 $52 = $14;
 $13 = $52;
 $53 = $13;
 $12 = $53;
 $54 = $12;
 $11 = $54;
 $55 = $11;
 $10 = $55;
 $56 = $10;
 $9 = $56;
 $57 = $9;
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = $59 & 1;
 $61 = ($60|0)!=(0);
 if ($61) {
  $3 = $54;
  $62 = $3;
  $2 = $62;
  $63 = $2;
  $1 = $63;
  $64 = $1;
  $65 = ((($64)) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $73 = $66;
 } else {
  $8 = $54;
  $67 = $8;
  $7 = $67;
  $68 = $7;
  $6 = $68;
  $69 = $6;
  $70 = ((($69)) + 1|0);
  $5 = $70;
  $71 = $5;
  $4 = $71;
  $72 = $4;
  $73 = $72;
 }
 $0 = $73;
 $74 = $0;
 $75 = $74;
 STACKTOP = sp;return ($75|0);
}
function __ZN4rhea5errorC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 $4 = 8152;
 HEAP32[$3>>2] = $4;
 $5 = 5992;
 HEAP32[$2>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN4rhea5errorD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea5errorD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK4rhea5error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (6008|0);
}
function __ZN4rhea10constraintC2INS_15edit_constraintEEEONSt3__110shared_ptrIT_EE($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $6 = sp + 16|0;
 $4 = $this;
 $5 = $p;
 $7 = $4;
 $8 = 2352;
 HEAP32[$7>>2] = $8;
 $9 = ((($7)) + 4|0);
 $10 = $5;
 $3 = $10;
 $11 = $3;
 ;HEAP32[$6>>2]=0|0;
 ;HEAP8[$2>>0]=HEAP8[$6>>0]|0;HEAP8[$2+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[$6+3>>0]|0;
 $0 = $9;
 $1 = $11;
 $12 = $0;
 $13 = $1;
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$12>>2] = $14;
 $15 = ((($12)) + 4|0);
 $16 = $1;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$15>>2] = $18;
 $19 = $1;
 HEAP32[$19>>2] = 0;
 $20 = $1;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__110shared_ptrIN4rhea15stay_constraintEE11make_sharedIJRKNS1_8variableERKNS1_8strengthERdEEES3_DpOT_($agg$result,$__args,$__args1,$__args2) {
 $agg$result = $agg$result|0;
 $__args = $__args|0;
 $__args1 = $__args1|0;
 $__args2 = $__args2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a2 = 0, $__hold2 = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 896|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $25 = sp + 192|0;
 $26 = sp + 176|0;
 $27 = sp + 96|0;
 $28 = sp + 64|0;
 $33 = sp + 885|0;
 $34 = sp + 880|0;
 $35 = sp + 883|0;
 $36 = sp + 878|0;
 $48 = sp + 32|0;
 $49 = sp + 56|0;
 $50 = sp + 160|0;
 $51 = sp + 136|0;
 $54 = sp + 881|0;
 $55 = sp + 888|0;
 $56 = sp + 886|0;
 $57 = sp + 884|0;
 $59 = sp + 364|0;
 $75 = sp + 104|0;
 $76 = sp + 48|0;
 $77 = sp + 40|0;
 $78 = sp + 72|0;
 $79 = sp + 152|0;
 $80 = sp + 24|0;
 $83 = sp + 879|0;
 $84 = sp + 816|0;
 $85 = sp + 824|0;
 $86 = sp + 882|0;
 $87 = sp + 887|0;
 $88 = sp;
 $89 = sp + 144|0;
 $90 = sp + 168|0;
 $99 = sp + 889|0;
 $100 = sp + 540|0;
 $101 = sp + 312|0;
 $104 = sp + 88|0;
 $144 = sp + 724|0;
 $145 = sp + 16|0;
 $148 = sp + 740|0;
 $149 = sp + 432|0;
 $150 = sp + 184|0;
 $155 = sp + 448|0;
 $__a2 = sp + 890|0;
 $__hold2 = sp + 336|0;
 $185 = sp + 408|0;
 $186 = sp + 877|0;
 $189 = sp + 876|0;
 $182 = $__args;
 $183 = $__args1;
 $184 = $__args2;
 $181 = $__a2;
 $160 = $__a2;
 $161 = 1;
 $162 = 0;
 $191 = $161;
 $192 = ($191*72)|0;
 $159 = $192;
 $193 = $159;
 $194 = (__Znwj($193)|0);
 $156 = $185;
 $157 = $__a2;
 $158 = 1;
 $195 = $156;
 $196 = $157;
 HEAP32[$195>>2] = $196;
 $197 = ((($195)) + 4|0);
 $198 = $158;
 HEAP32[$197>>2] = $198;
 $152 = $__hold2;
 $153 = $194;
 $154 = $185;
 $199 = $152;
 $200 = $153;
 $201 = $154;
 $151 = $201;
 $202 = $151;
 ;HEAP32[$155>>2]=HEAP32[$202>>2]|0;HEAP32[$155+4>>2]=HEAP32[$202+4>>2]|0;
 ;HEAP8[$150>>0]=HEAP8[$155>>0]|0;HEAP8[$150+1>>0]=HEAP8[$155+1>>0]|0;HEAP8[$150+2>>0]=HEAP8[$155+2>>0]|0;HEAP8[$150+3>>0]=HEAP8[$155+3>>0]|0;HEAP8[$150+4>>0]=HEAP8[$155+4>>0]|0;HEAP8[$150+5>>0]=HEAP8[$155+5>>0]|0;HEAP8[$150+6>>0]=HEAP8[$155+6>>0]|0;HEAP8[$150+7>>0]=HEAP8[$155+7>>0]|0;
 $147 = $199;
 HEAP32[$148>>2] = $200;
 $203 = $147;
 $146 = $148;
 $204 = $146;
 $205 = HEAP32[$204>>2]|0;
 $140 = $150;
 $206 = $140;
 ;HEAP32[$149>>2]=HEAP32[$206>>2]|0;HEAP32[$149+4>>2]=HEAP32[$206+4>>2]|0;
 ;HEAP8[$145>>0]=HEAP8[$149>>0]|0;HEAP8[$145+1>>0]=HEAP8[$149+1>>0]|0;HEAP8[$145+2>>0]=HEAP8[$149+2>>0]|0;HEAP8[$145+3>>0]=HEAP8[$149+3>>0]|0;HEAP8[$145+4>>0]=HEAP8[$149+4>>0]|0;HEAP8[$145+5>>0]=HEAP8[$149+5>>0]|0;HEAP8[$145+6>>0]=HEAP8[$149+6>>0]|0;HEAP8[$145+7>>0]=HEAP8[$149+7>>0]|0;
 $143 = $203;
 HEAP32[$144>>2] = $205;
 $207 = $143;
 $142 = $144;
 $208 = $142;
 $209 = HEAP32[$208>>2]|0;
 HEAP32[$207>>2] = $209;
 $210 = ((($207)) + 4|0);
 $141 = $145;
 $211 = $141;
 ;HEAP32[$210>>2]=HEAP32[$211>>2]|0;HEAP32[$210+4>>2]=HEAP32[$211+4>>2]|0;
 $121 = $__hold2;
 $212 = $121;
 $120 = $212;
 $213 = $120;
 $119 = $213;
 $214 = $119;
 $215 = HEAP32[$214>>2]|0;
 $3 = $186;
 $4 = $__a2;
 $216 = $182;
 $2 = $216;
 $217 = $2;
 $218 = $183;
 $1 = $218;
 $219 = $1;
 $220 = $184;
 $0 = $220;
 $221 = $0;
 ;HEAP8[$104>>0]=HEAP8[$186>>0]|0;
 $95 = $215;
 $96 = $217;
 $97 = $219;
 $98 = $221;
 $222 = $95;
 $93 = $222;
 $94 = 0;
 $223 = $93;
 $224 = $94;
 $91 = $223;
 $92 = $224;
 $225 = $91;
 $226 = 10504;
 HEAP32[$225>>2] = $226;
 $227 = ((($225)) + 4|0);
 $228 = $92;
 HEAP32[$227>>2] = $228;
 $229 = 10568;
 HEAP32[$223>>2] = $229;
 $230 = ((($223)) + 8|0);
 $231 = $94;
 HEAP32[$230>>2] = $231;
 $232 = 6040;
 HEAP32[$222>>2] = $232;
 $233 = ((($222)) + 16|0);
 $60 = $104;
 $234 = $60;
 $58 = $234;
 $235 = $58;
 $52 = $59;
 $53 = $235;
 $236 = $52;
 $237 = $53;
 ;HEAP8[$48>>0]=HEAP8[$57>>0]|0;
 ;HEAP8[$49>>0]=HEAP8[$56>>0]|0;
 ;HEAP8[$50>>0]=HEAP8[$55>>0]|0;
 ;HEAP8[$51>>0]=HEAP8[$54>>0]|0;
 $46 = $236;
 $47 = $237;
 $238 = $46;
 $239 = $47;
 $45 = $239;
 $240 = $45;
 $43 = $238;
 $44 = $240;
 $241 = $43;
 $242 = $44;
 $42 = $242;
 $243 = $42;
 HEAP32[$241>>2] = $243;
 $244 = HEAP32[$59>>2]|0;
 HEAP32[$100>>2] = $244;
 $245 = $96;
 $41 = $245;
 $246 = $41;
 $247 = $97;
 $5 = $247;
 $248 = $5;
 $249 = $98;
 $6 = $249;
 $250 = $6;
 $38 = $246;
 $39 = $248;
 $40 = $250;
 $251 = $38;
 $37 = $251;
 $252 = $37;
 $253 = $39;
 $7 = $253;
 $254 = $7;
 $255 = $40;
 $8 = $255;
 $256 = $8;
 $29 = $101;
 $30 = $252;
 $31 = $254;
 $32 = $256;
 $257 = $29;
 $258 = $30;
 $259 = $31;
 $260 = $32;
 ;HEAP8[$25>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$26>>0]=HEAP8[$35>>0]|0;
 ;HEAP8[$27>>0]=HEAP8[$34>>0]|0;
 ;HEAP8[$28>>0]=HEAP8[$33>>0]|0;
 $21 = $257;
 $22 = $258;
 $23 = $259;
 $24 = $260;
 $261 = $21;
 $262 = $22;
 $20 = $262;
 $263 = $20;
 $10 = $261;
 $11 = $263;
 $264 = $10;
 $265 = $11;
 $9 = $265;
 $266 = $9;
 HEAP32[$264>>2] = $266;
 $267 = ((($261)) + 4|0);
 $268 = $23;
 $12 = $268;
 $269 = $12;
 $14 = $267;
 $15 = $269;
 $270 = $14;
 $271 = $15;
 $13 = $271;
 $272 = $13;
 HEAP32[$270>>2] = $272;
 $273 = ((($261)) + 8|0);
 $274 = $24;
 $16 = $274;
 $275 = $16;
 $18 = $273;
 $19 = $275;
 $276 = $18;
 $277 = $19;
 $17 = $277;
 $278 = $17;
 HEAP32[$276>>2] = $278;
 dest=$88; src=$101; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 ;HEAP8[$89>>0]=HEAP8[$100>>0]|0;HEAP8[$89+1>>0]=HEAP8[$100+1>>0]|0;HEAP8[$89+2>>0]=HEAP8[$100+2>>0]|0;HEAP8[$89+3>>0]=HEAP8[$100+3>>0]|0;
 ;HEAP8[$90>>0]=HEAP8[$99>>0]|0;
 $82 = $233;
 $279 = $82;
 $81 = $89;
 $280 = $81;
 ;HEAP32[$84>>2]=HEAP32[$280>>2]|0;
 $61 = $88;
 $281 = $61;
 ;HEAP32[$85>>2]=HEAP32[$281>>2]|0;HEAP32[$85+4>>2]=HEAP32[$281+4>>2]|0;HEAP32[$85+8>>2]=HEAP32[$281+8>>2]|0;
 ;HEAP8[$76>>0]=HEAP8[$87>>0]|0;
 ;HEAP8[$77>>0]=HEAP8[$86>>0]|0;
 dest=$78; src=$85; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 ;HEAP8[$79>>0]=HEAP8[$84>>0]|0;HEAP8[$79+1>>0]=HEAP8[$84+1>>0]|0;HEAP8[$79+2>>0]=HEAP8[$84+2>>0]|0;HEAP8[$79+3>>0]=HEAP8[$84+3>>0]|0;
 ;HEAP8[$80>>0]=HEAP8[$83>>0]|0;
 $74 = $279;
 $282 = $74;
 $73 = $79;
 $283 = $73;
 $72 = $283;
 $284 = $72;
 $285 = HEAP32[$284>>2]|0;
 $71 = $285;
 $67 = $78;
 $286 = $67;
 $66 = $286;
 $287 = $66;
 $288 = HEAP32[$287>>2]|0;
 $62 = $288;
 $289 = $62;
 $64 = $78;
 $290 = $64;
 $291 = ((($290)) + 4|0);
 $63 = $291;
 $292 = $63;
 $293 = HEAP32[$292>>2]|0;
 $65 = $293;
 $294 = $65;
 __ZN4rhea8strengthC2ERKS0_($75,$294);
 $69 = $78;
 $295 = $69;
 $296 = ((($295)) + 8|0);
 $68 = $296;
 $297 = $68;
 $298 = HEAP32[$297>>2]|0;
 $70 = $298;
 $299 = $70;
 $300 = +HEAPF64[$299>>3];
 __THREW__ = 0;
 invoke_viiid(390,($282|0),($289|0),($75|0),(+$300));
 $301 = __THREW__; __THREW__ = 0;
 $302 = $301&1;
 if ($302) {
  $303 = ___cxa_find_matching_catch()|0;
  $304 = tempRet0;
  $102 = $303;
  $103 = $304;
  __ZNSt3__114__shared_countD2Ev($222);
  $305 = $102;
  $306 = $103;
  $187 = $305;
  $188 = $306;
  $139 = $__hold2;
  $307 = $139;
  $137 = $307;
  $138 = 0;
  $308 = $137;
  $136 = $308;
  $309 = $136;
  $135 = $309;
  $310 = $135;
  $311 = HEAP32[$310>>2]|0;
  $__tmp$i$i3 = $311;
  $312 = $138;
  $125 = $308;
  $313 = $125;
  $124 = $313;
  $314 = $124;
  HEAP32[$314>>2] = $312;
  $315 = $__tmp$i$i3;
  $316 = ($315|0)!=(0|0);
  if (!($316)) {
   $375 = $187;
   $376 = $188;
   ___resumeException($375|0);
   // unreachable;
  }
  $123 = $308;
  $337 = $123;
  $122 = $337;
  $338 = $122;
  $339 = ((($338)) + 4|0);
  $340 = $__tmp$i$i3;
  $133 = $339;
  $134 = $340;
  $341 = $133;
  $342 = HEAP32[$341>>2]|0;
  $343 = $134;
  $344 = ((($341)) + 4|0);
  $345 = HEAP32[$344>>2]|0;
  $130 = $342;
  $131 = $343;
  $132 = $345;
  $346 = $130;
  $347 = $131;
  $348 = $132;
  $127 = $346;
  $128 = $347;
  $129 = $348;
  $349 = $128;
  $126 = $349;
  $350 = $126;
  __ZdlPv($350);
  $375 = $187;
  $376 = $188;
  ___resumeException($375|0);
  // unreachable;
 }
 $$expand_i1_val = 0;
 HEAP8[$189>>0] = $$expand_i1_val;
 $105 = $agg$result;
 $317 = $105;
 HEAP32[$317>>2] = 0;
 $318 = ((($317)) + 4|0);
 HEAP32[$318>>2] = 0;
 $108 = $__hold2;
 $319 = $108;
 $107 = $319;
 $320 = $107;
 $106 = $320;
 $321 = $106;
 $322 = HEAP32[$321>>2]|0;
 $111 = $322;
 $323 = $111;
 $324 = ((($323)) + 16|0);
 $110 = $324;
 $325 = $110;
 $109 = $325;
 $326 = $109;
 HEAP32[$agg$result>>2] = $326;
 $116 = $__hold2;
 $327 = $116;
 $115 = $327;
 $328 = $115;
 $114 = $328;
 $329 = $114;
 $330 = HEAP32[$329>>2]|0;
 $__t$i = $330;
 $113 = $327;
 $331 = $113;
 $112 = $331;
 $332 = $112;
 HEAP32[$332>>2] = 0;
 $333 = $__t$i;
 $334 = ((($agg$result)) + 4|0);
 HEAP32[$334>>2] = $333;
 $335 = HEAP32[$agg$result>>2]|0;
 $117 = $agg$result;
 $118 = $335;
 $$expand_i1_val2 = 1;
 HEAP8[$189>>0] = $$expand_i1_val2;
 $190 = 1;
 $$pre_trunc = HEAP8[$189>>0]|0;
 $336 = $$pre_trunc&1;
 if (!($336)) {
  __ZNSt3__110shared_ptrIN4rhea15stay_constraintEED2Ev($agg$result);
 }
 $180 = $__hold2;
 $351 = $180;
 $178 = $351;
 $179 = 0;
 $352 = $178;
 $177 = $352;
 $353 = $177;
 $176 = $353;
 $354 = $176;
 $355 = HEAP32[$354>>2]|0;
 $__tmp$i$i = $355;
 $356 = $179;
 $166 = $352;
 $357 = $166;
 $165 = $357;
 $358 = $165;
 HEAP32[$358>>2] = $356;
 $359 = $__tmp$i$i;
 $360 = ($359|0)!=(0|0);
 if (!($360)) {
  STACKTOP = sp;return;
 }
 $164 = $352;
 $361 = $164;
 $163 = $361;
 $362 = $163;
 $363 = ((($362)) + 4|0);
 $364 = $__tmp$i$i;
 $174 = $363;
 $175 = $364;
 $365 = $174;
 $366 = HEAP32[$365>>2]|0;
 $367 = $175;
 $368 = ((($365)) + 4|0);
 $369 = HEAP32[$368>>2]|0;
 $171 = $366;
 $172 = $367;
 $173 = $369;
 $370 = $171;
 $371 = $172;
 $372 = $173;
 $168 = $370;
 $169 = $371;
 $170 = $372;
 $373 = $169;
 $167 = $373;
 $374 = $167;
 __ZdlPv($374);
 STACKTOP = sp;return;
}
function __ZN4rhea10constraintC2INS_15stay_constraintEEEONSt3__110shared_ptrIT_EE($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $6 = sp + 16|0;
 $4 = $this;
 $5 = $p;
 $7 = $4;
 $8 = 2352;
 HEAP32[$7>>2] = $8;
 $9 = ((($7)) + 4|0);
 $10 = $5;
 $3 = $10;
 $11 = $3;
 ;HEAP32[$6>>2]=0|0;
 ;HEAP8[$2>>0]=HEAP8[$6>>0]|0;HEAP8[$2+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[$6+3>>0]|0;
 $0 = $9;
 $1 = $11;
 $12 = $0;
 $13 = $1;
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$12>>2] = $14;
 $15 = ((($12)) + 4|0);
 $16 = $1;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$15>>2] = $18;
 $19 = $1;
 HEAP32[$19>>2] = 0;
 $20 = $1;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__110shared_ptrIN4rhea15stay_constraintEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 __ZNSt3__119__shared_weak_count16__release_sharedEv($6);
 STACKTOP = sp;return;
}
function __ZN4rhea15stay_constraintC2ERKNS_8variableENS_8strengthEd($this,$v,$s,$weight) {
 $this = $this|0;
 $v = $v|0;
 $s = $s|0;
 $weight = +$weight;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $0 = $this;
 $1 = $v;
 $2 = $weight;
 $4 = $0;
 $5 = $1;
 __ZN4rhea8strengthC2ERKS0_($3,$s);
 $6 = $2;
 __ZN4rhea23edit_or_stay_constraintC2ERKNS_8variableENS_8strengthEd($4,$5,$3,$6);
 $7 = 6072;
 HEAP32[$4>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN4rhea15stay_constraintD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea23edit_or_stay_constraintD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4rhea15stay_constraintD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea15stay_constraintD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK4rhea15stay_constraint18is_stay_constraintEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 1;
}
function __ZNK4rhea15stay_constraint12is_satisfiedEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 0;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea15stay_constraintENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 6040;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 16|0);
 __ZNSt3__117__compressed_pairINS_9allocatorIN4rhea15stay_constraintEEES3_ED2Ev($3);
 __ZNSt3__114__shared_countD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea15stay_constraintENS_9allocatorIS2_EEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__120__shared_ptr_emplaceIN4rhea15stay_constraintENS_9allocatorIS2_EEED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea15stay_constraintENS_9allocatorIS2_EEE16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $2;
 $4 = ((($3)) + 16|0);
 $1 = $4;
 $5 = $1;
 $0 = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vi[$8 & 511]($6);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea15stay_constraintENS_9allocatorIS2_EEE21__on_zero_shared_weakEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__a = sp + 44|0;
 $10 = $this;
 $11 = $10;
 $12 = ((($11)) + 16|0);
 $9 = $12;
 $13 = $9;
 $8 = $13;
 $14 = $8;
 $2 = $__a;
 $3 = $14;
 $15 = ((($11)) + 16|0);
 $1 = $15;
 $16 = $1;
 $0 = $16;
 $5 = $__a;
 $6 = $11;
 $7 = 1;
 $17 = $6;
 $4 = $17;
 $18 = $4;
 __ZdlPv($18);
 STACKTOP = sp;return;
}
function __ZNSt3__117__compressed_pairINS_9allocatorIN4rhea15stay_constraintEEES3_ED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__128__libcpp_compressed_pair_impINS_9allocatorIN4rhea15stay_constraintEEES3_Lj1EED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__128__libcpp_compressed_pair_impINS_9allocatorIN4rhea15stay_constraintEEES3_Lj1EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea15stay_constraintD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__110shared_ptrIN4rhea17linear_inequalityEE11make_sharedIJRKS2_EEES3_DpOT_($agg$result,$__args) {
 $agg$result = $agg$result|0;
 $__args = $__args|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a2 = 0, $__hold2 = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp;
 $11 = sp + 128|0;
 $12 = sp + 120|0;
 $13 = sp + 32|0;
 $16 = sp + 713|0;
 $17 = sp + 708|0;
 $18 = sp + 711|0;
 $19 = sp + 706|0;
 $21 = sp + 216|0;
 $29 = sp + 16|0;
 $30 = sp + 112|0;
 $31 = sp + 88|0;
 $32 = sp + 8|0;
 $35 = sp + 709|0;
 $36 = sp + 716|0;
 $37 = sp + 714|0;
 $38 = sp + 712|0;
 $40 = sp + 228|0;
 $50 = sp + 72|0;
 $51 = sp + 48|0;
 $52 = sp + 96|0;
 $53 = sp + 104|0;
 $54 = sp + 136|0;
 $57 = sp + 707|0;
 $58 = sp + 300|0;
 $59 = sp + 184|0;
 $60 = sp + 710|0;
 $61 = sp + 715|0;
 $62 = sp + 40|0;
 $63 = sp + 64|0;
 $64 = sp + 144|0;
 $71 = sp + 717|0;
 $72 = sp + 364|0;
 $73 = sp + 684|0;
 $76 = sp + 24|0;
 $116 = sp + 560|0;
 $117 = sp + 56|0;
 $120 = sp + 576|0;
 $121 = sp + 312|0;
 $122 = sp + 80|0;
 $127 = sp + 584|0;
 $__a2 = sp + 718|0;
 $__hold2 = sp + 372|0;
 $155 = sp + 328|0;
 $156 = sp + 705|0;
 $159 = sp + 704|0;
 $154 = $__args;
 $153 = $__a2;
 $132 = $__a2;
 $133 = 1;
 $134 = 0;
 $161 = $133;
 $162 = ($161*88)|0;
 $131 = $162;
 $163 = $131;
 $164 = (__Znwj($163)|0);
 $128 = $155;
 $129 = $__a2;
 $130 = 1;
 $165 = $128;
 $166 = $129;
 HEAP32[$165>>2] = $166;
 $167 = ((($165)) + 4|0);
 $168 = $130;
 HEAP32[$167>>2] = $168;
 $124 = $__hold2;
 $125 = $164;
 $126 = $155;
 $169 = $124;
 $170 = $125;
 $171 = $126;
 $123 = $171;
 $172 = $123;
 ;HEAP32[$127>>2]=HEAP32[$172>>2]|0;HEAP32[$127+4>>2]=HEAP32[$172+4>>2]|0;
 ;HEAP8[$122>>0]=HEAP8[$127>>0]|0;HEAP8[$122+1>>0]=HEAP8[$127+1>>0]|0;HEAP8[$122+2>>0]=HEAP8[$127+2>>0]|0;HEAP8[$122+3>>0]=HEAP8[$127+3>>0]|0;HEAP8[$122+4>>0]=HEAP8[$127+4>>0]|0;HEAP8[$122+5>>0]=HEAP8[$127+5>>0]|0;HEAP8[$122+6>>0]=HEAP8[$127+6>>0]|0;HEAP8[$122+7>>0]=HEAP8[$127+7>>0]|0;
 $119 = $169;
 HEAP32[$120>>2] = $170;
 $173 = $119;
 $118 = $120;
 $174 = $118;
 $175 = HEAP32[$174>>2]|0;
 $112 = $122;
 $176 = $112;
 ;HEAP32[$121>>2]=HEAP32[$176>>2]|0;HEAP32[$121+4>>2]=HEAP32[$176+4>>2]|0;
 ;HEAP8[$117>>0]=HEAP8[$121>>0]|0;HEAP8[$117+1>>0]=HEAP8[$121+1>>0]|0;HEAP8[$117+2>>0]=HEAP8[$121+2>>0]|0;HEAP8[$117+3>>0]=HEAP8[$121+3>>0]|0;HEAP8[$117+4>>0]=HEAP8[$121+4>>0]|0;HEAP8[$117+5>>0]=HEAP8[$121+5>>0]|0;HEAP8[$117+6>>0]=HEAP8[$121+6>>0]|0;HEAP8[$117+7>>0]=HEAP8[$121+7>>0]|0;
 $115 = $173;
 HEAP32[$116>>2] = $175;
 $177 = $115;
 $114 = $116;
 $178 = $114;
 $179 = HEAP32[$178>>2]|0;
 HEAP32[$177>>2] = $179;
 $180 = ((($177)) + 4|0);
 $113 = $117;
 $181 = $113;
 ;HEAP32[$180>>2]=HEAP32[$181>>2]|0;HEAP32[$180+4>>2]=HEAP32[$181+4>>2]|0;
 $93 = $__hold2;
 $182 = $93;
 $92 = $182;
 $183 = $92;
 $91 = $183;
 $184 = $91;
 $185 = HEAP32[$184>>2]|0;
 $1 = $156;
 $2 = $__a2;
 $186 = $154;
 $0 = $186;
 $187 = $0;
 ;HEAP8[$76>>0]=HEAP8[$156>>0]|0;
 $69 = $185;
 $70 = $187;
 $188 = $69;
 $67 = $188;
 $68 = 0;
 $189 = $67;
 $190 = $68;
 $65 = $189;
 $66 = $190;
 $191 = $65;
 $192 = 10504;
 HEAP32[$191>>2] = $192;
 $193 = ((($191)) + 4|0);
 $194 = $66;
 HEAP32[$193>>2] = $194;
 $195 = 10568;
 HEAP32[$189>>2] = $195;
 $196 = ((($189)) + 8|0);
 $197 = $68;
 HEAP32[$196>>2] = $197;
 $198 = 6264;
 HEAP32[$188>>2] = $198;
 $199 = ((($188)) + 16|0);
 $41 = $76;
 $200 = $41;
 $39 = $200;
 $201 = $39;
 $33 = $40;
 $34 = $201;
 $202 = $33;
 $203 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $202;
 $28 = $203;
 $204 = $27;
 $205 = $28;
 $26 = $205;
 $206 = $26;
 $24 = $204;
 $25 = $206;
 $207 = $24;
 $208 = $25;
 $23 = $208;
 $209 = $23;
 HEAP32[$207>>2] = $209;
 $210 = HEAP32[$40>>2]|0;
 HEAP32[$72>>2] = $210;
 $211 = $70;
 $3 = $211;
 $212 = $3;
 $22 = $212;
 $213 = $22;
 $20 = $213;
 $214 = $20;
 $14 = $21;
 $15 = $214;
 $215 = $14;
 $216 = $15;
 ;HEAP8[$10>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
 $8 = $215;
 $9 = $216;
 $217 = $8;
 $218 = $9;
 $7 = $218;
 $219 = $7;
 $5 = $217;
 $6 = $219;
 $220 = $5;
 $221 = $6;
 $4 = $221;
 $222 = $4;
 HEAP32[$220>>2] = $222;
 $223 = HEAP32[$21>>2]|0;
 HEAP32[$73>>2] = $223;
 ;HEAP8[$62>>0]=HEAP8[$73>>0]|0;HEAP8[$62+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$62+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$62+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$63>>0]=HEAP8[$72>>0]|0;HEAP8[$63+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$63+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$63+3>>0]=HEAP8[$72+3>>0]|0;
 ;HEAP8[$64>>0]=HEAP8[$71>>0]|0;
 $56 = $199;
 $224 = $56;
 $55 = $63;
 $225 = $55;
 ;HEAP32[$58>>2]=HEAP32[$225>>2]|0;
 $42 = $62;
 $226 = $42;
 ;HEAP32[$59>>2]=HEAP32[$226>>2]|0;
 ;HEAP8[$50>>0]=HEAP8[$61>>0]|0;
 ;HEAP8[$51>>0]=HEAP8[$60>>0]|0;
 ;HEAP8[$52>>0]=HEAP8[$59>>0]|0;HEAP8[$52+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$52+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$52+3>>0]=HEAP8[$59+3>>0]|0;
 ;HEAP8[$53>>0]=HEAP8[$58>>0]|0;HEAP8[$53+1>>0]=HEAP8[$58+1>>0]|0;HEAP8[$53+2>>0]=HEAP8[$58+2>>0]|0;HEAP8[$53+3>>0]=HEAP8[$58+3>>0]|0;
 ;HEAP8[$54>>0]=HEAP8[$57>>0]|0;
 $49 = $224;
 $227 = $49;
 $48 = $53;
 $228 = $48;
 $47 = $228;
 $229 = $47;
 $230 = HEAP32[$229>>2]|0;
 $46 = $230;
 $44 = $52;
 $231 = $44;
 $43 = $231;
 $232 = $43;
 $233 = HEAP32[$232>>2]|0;
 $45 = $233;
 $234 = $45;
 __THREW__ = 0;
 invoke_vii(374,($227|0),($234|0));
 $235 = __THREW__; __THREW__ = 0;
 $236 = $235&1;
 if ($236) {
  $237 = ___cxa_find_matching_catch()|0;
  $238 = tempRet0;
  $74 = $237;
  $75 = $238;
  __ZNSt3__114__shared_countD2Ev($188);
  $239 = $74;
  $240 = $75;
  $157 = $239;
  $158 = $240;
  $111 = $__hold2;
  $241 = $111;
  $109 = $241;
  $110 = 0;
  $242 = $109;
  $108 = $242;
  $243 = $108;
  $107 = $243;
  $244 = $107;
  $245 = HEAP32[$244>>2]|0;
  $__tmp$i$i1 = $245;
  $246 = $110;
  $97 = $242;
  $247 = $97;
  $96 = $247;
  $248 = $96;
  HEAP32[$248>>2] = $246;
  $249 = $__tmp$i$i1;
  $250 = ($249|0)!=(0|0);
  if (!($250)) {
   $309 = $157;
   $310 = $158;
   ___resumeException($309|0);
   // unreachable;
  }
  $95 = $242;
  $271 = $95;
  $94 = $271;
  $272 = $94;
  $273 = ((($272)) + 4|0);
  $274 = $__tmp$i$i1;
  $105 = $273;
  $106 = $274;
  $275 = $105;
  $276 = HEAP32[$275>>2]|0;
  $277 = $106;
  $278 = ((($275)) + 4|0);
  $279 = HEAP32[$278>>2]|0;
  $102 = $276;
  $103 = $277;
  $104 = $279;
  $280 = $102;
  $281 = $103;
  $282 = $104;
  $99 = $280;
  $100 = $281;
  $101 = $282;
  $283 = $100;
  $98 = $283;
  $284 = $98;
  __ZdlPv($284);
  $309 = $157;
  $310 = $158;
  ___resumeException($309|0);
  // unreachable;
 }
 $$expand_i1_val = 0;
 HEAP8[$159>>0] = $$expand_i1_val;
 $77 = $agg$result;
 $251 = $77;
 HEAP32[$251>>2] = 0;
 $252 = ((($251)) + 4|0);
 HEAP32[$252>>2] = 0;
 $80 = $__hold2;
 $253 = $80;
 $79 = $253;
 $254 = $79;
 $78 = $254;
 $255 = $78;
 $256 = HEAP32[$255>>2]|0;
 $83 = $256;
 $257 = $83;
 $258 = ((($257)) + 16|0);
 $82 = $258;
 $259 = $82;
 $81 = $259;
 $260 = $81;
 HEAP32[$agg$result>>2] = $260;
 $88 = $__hold2;
 $261 = $88;
 $87 = $261;
 $262 = $87;
 $86 = $262;
 $263 = $86;
 $264 = HEAP32[$263>>2]|0;
 $__t$i = $264;
 $85 = $261;
 $265 = $85;
 $84 = $265;
 $266 = $84;
 HEAP32[$266>>2] = 0;
 $267 = $__t$i;
 $268 = ((($agg$result)) + 4|0);
 HEAP32[$268>>2] = $267;
 $269 = HEAP32[$agg$result>>2]|0;
 $89 = $agg$result;
 $90 = $269;
 $$expand_i1_val2 = 1;
 HEAP8[$159>>0] = $$expand_i1_val2;
 $160 = 1;
 $$pre_trunc = HEAP8[$159>>0]|0;
 $270 = $$pre_trunc&1;
 if (!($270)) {
  __ZNSt3__110shared_ptrIN4rhea17linear_inequalityEED2Ev($agg$result);
 }
 $152 = $__hold2;
 $285 = $152;
 $150 = $285;
 $151 = 0;
 $286 = $150;
 $149 = $286;
 $287 = $149;
 $148 = $287;
 $288 = $148;
 $289 = HEAP32[$288>>2]|0;
 $__tmp$i$i = $289;
 $290 = $151;
 $138 = $286;
 $291 = $138;
 $137 = $291;
 $292 = $137;
 HEAP32[$292>>2] = $290;
 $293 = $__tmp$i$i;
 $294 = ($293|0)!=(0|0);
 if (!($294)) {
  STACKTOP = sp;return;
 }
 $136 = $286;
 $295 = $136;
 $135 = $295;
 $296 = $135;
 $297 = ((($296)) + 4|0);
 $298 = $__tmp$i$i;
 $146 = $297;
 $147 = $298;
 $299 = $146;
 $300 = HEAP32[$299>>2]|0;
 $301 = $147;
 $302 = ((($299)) + 4|0);
 $303 = HEAP32[$302>>2]|0;
 $143 = $300;
 $144 = $301;
 $145 = $303;
 $304 = $143;
 $305 = $144;
 $306 = $145;
 $140 = $304;
 $141 = $305;
 $142 = $306;
 $307 = $141;
 $139 = $307;
 $308 = $139;
 __ZdlPv($308);
 STACKTOP = sp;return;
}
function __ZNSt3__110shared_ptrIN4rhea17linear_inequalityEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 __ZNSt3__119__shared_weak_count16__release_sharedEv($6);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea17linear_inequalityENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 6264;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 16|0);
 __ZNSt3__117__compressed_pairINS_9allocatorIN4rhea17linear_inequalityEEES3_ED2Ev($3);
 __ZNSt3__114__shared_countD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea17linear_inequalityENS_9allocatorIS2_EEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__120__shared_ptr_emplaceIN4rhea17linear_inequalityENS_9allocatorIS2_EEED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea17linear_inequalityENS_9allocatorIS2_EEE16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $2;
 $4 = ((($3)) + 16|0);
 $1 = $4;
 $5 = $1;
 $0 = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vi[$8 & 511]($6);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea17linear_inequalityENS_9allocatorIS2_EEE21__on_zero_shared_weakEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__a = sp + 44|0;
 $10 = $this;
 $11 = $10;
 $12 = ((($11)) + 16|0);
 $9 = $12;
 $13 = $9;
 $8 = $13;
 $14 = $8;
 $2 = $__a;
 $3 = $14;
 $15 = ((($11)) + 16|0);
 $1 = $15;
 $16 = $1;
 $0 = $16;
 $5 = $__a;
 $6 = $11;
 $7 = 1;
 $17 = $6;
 $4 = $17;
 $18 = $4;
 __ZdlPv($18);
 STACKTOP = sp;return;
}
function __ZNSt3__117__compressed_pairINS_9allocatorIN4rhea17linear_inequalityEEES3_ED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__128__libcpp_compressed_pair_impINS_9allocatorIN4rhea17linear_inequalityEEES3_Lj1EED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__128__libcpp_compressed_pair_impINS_9allocatorIN4rhea17linear_inequalityEEES3_Lj1EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea17linear_inequalityD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__110shared_ptrIN4rhea15linear_equationEE11make_sharedIJRKS2_EEES3_DpOT_($agg$result,$__args) {
 $agg$result = $agg$result|0;
 $__args = $__args|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a2 = 0, $__hold2 = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp;
 $11 = sp + 128|0;
 $12 = sp + 120|0;
 $13 = sp + 32|0;
 $16 = sp + 713|0;
 $17 = sp + 708|0;
 $18 = sp + 711|0;
 $19 = sp + 706|0;
 $21 = sp + 216|0;
 $29 = sp + 16|0;
 $30 = sp + 112|0;
 $31 = sp + 88|0;
 $32 = sp + 8|0;
 $35 = sp + 709|0;
 $36 = sp + 716|0;
 $37 = sp + 714|0;
 $38 = sp + 712|0;
 $40 = sp + 228|0;
 $50 = sp + 72|0;
 $51 = sp + 48|0;
 $52 = sp + 96|0;
 $53 = sp + 104|0;
 $54 = sp + 136|0;
 $57 = sp + 707|0;
 $58 = sp + 300|0;
 $59 = sp + 184|0;
 $60 = sp + 710|0;
 $61 = sp + 715|0;
 $62 = sp + 40|0;
 $63 = sp + 64|0;
 $64 = sp + 144|0;
 $71 = sp + 717|0;
 $72 = sp + 364|0;
 $73 = sp + 684|0;
 $76 = sp + 24|0;
 $116 = sp + 560|0;
 $117 = sp + 56|0;
 $120 = sp + 576|0;
 $121 = sp + 312|0;
 $122 = sp + 80|0;
 $127 = sp + 584|0;
 $__a2 = sp + 718|0;
 $__hold2 = sp + 372|0;
 $155 = sp + 328|0;
 $156 = sp + 705|0;
 $159 = sp + 704|0;
 $154 = $__args;
 $153 = $__a2;
 $132 = $__a2;
 $133 = 1;
 $134 = 0;
 $161 = $133;
 $162 = ($161*88)|0;
 $131 = $162;
 $163 = $131;
 $164 = (__Znwj($163)|0);
 $128 = $155;
 $129 = $__a2;
 $130 = 1;
 $165 = $128;
 $166 = $129;
 HEAP32[$165>>2] = $166;
 $167 = ((($165)) + 4|0);
 $168 = $130;
 HEAP32[$167>>2] = $168;
 $124 = $__hold2;
 $125 = $164;
 $126 = $155;
 $169 = $124;
 $170 = $125;
 $171 = $126;
 $123 = $171;
 $172 = $123;
 ;HEAP32[$127>>2]=HEAP32[$172>>2]|0;HEAP32[$127+4>>2]=HEAP32[$172+4>>2]|0;
 ;HEAP8[$122>>0]=HEAP8[$127>>0]|0;HEAP8[$122+1>>0]=HEAP8[$127+1>>0]|0;HEAP8[$122+2>>0]=HEAP8[$127+2>>0]|0;HEAP8[$122+3>>0]=HEAP8[$127+3>>0]|0;HEAP8[$122+4>>0]=HEAP8[$127+4>>0]|0;HEAP8[$122+5>>0]=HEAP8[$127+5>>0]|0;HEAP8[$122+6>>0]=HEAP8[$127+6>>0]|0;HEAP8[$122+7>>0]=HEAP8[$127+7>>0]|0;
 $119 = $169;
 HEAP32[$120>>2] = $170;
 $173 = $119;
 $118 = $120;
 $174 = $118;
 $175 = HEAP32[$174>>2]|0;
 $112 = $122;
 $176 = $112;
 ;HEAP32[$121>>2]=HEAP32[$176>>2]|0;HEAP32[$121+4>>2]=HEAP32[$176+4>>2]|0;
 ;HEAP8[$117>>0]=HEAP8[$121>>0]|0;HEAP8[$117+1>>0]=HEAP8[$121+1>>0]|0;HEAP8[$117+2>>0]=HEAP8[$121+2>>0]|0;HEAP8[$117+3>>0]=HEAP8[$121+3>>0]|0;HEAP8[$117+4>>0]=HEAP8[$121+4>>0]|0;HEAP8[$117+5>>0]=HEAP8[$121+5>>0]|0;HEAP8[$117+6>>0]=HEAP8[$121+6>>0]|0;HEAP8[$117+7>>0]=HEAP8[$121+7>>0]|0;
 $115 = $173;
 HEAP32[$116>>2] = $175;
 $177 = $115;
 $114 = $116;
 $178 = $114;
 $179 = HEAP32[$178>>2]|0;
 HEAP32[$177>>2] = $179;
 $180 = ((($177)) + 4|0);
 $113 = $117;
 $181 = $113;
 ;HEAP32[$180>>2]=HEAP32[$181>>2]|0;HEAP32[$180+4>>2]=HEAP32[$181+4>>2]|0;
 $93 = $__hold2;
 $182 = $93;
 $92 = $182;
 $183 = $92;
 $91 = $183;
 $184 = $91;
 $185 = HEAP32[$184>>2]|0;
 $1 = $156;
 $2 = $__a2;
 $186 = $154;
 $0 = $186;
 $187 = $0;
 ;HEAP8[$76>>0]=HEAP8[$156>>0]|0;
 $69 = $185;
 $70 = $187;
 $188 = $69;
 $67 = $188;
 $68 = 0;
 $189 = $67;
 $190 = $68;
 $65 = $189;
 $66 = $190;
 $191 = $65;
 $192 = 10504;
 HEAP32[$191>>2] = $192;
 $193 = ((($191)) + 4|0);
 $194 = $66;
 HEAP32[$193>>2] = $194;
 $195 = 10568;
 HEAP32[$189>>2] = $195;
 $196 = ((($189)) + 8|0);
 $197 = $68;
 HEAP32[$196>>2] = $197;
 $198 = 6392;
 HEAP32[$188>>2] = $198;
 $199 = ((($188)) + 16|0);
 $41 = $76;
 $200 = $41;
 $39 = $200;
 $201 = $39;
 $33 = $40;
 $34 = $201;
 $202 = $33;
 $203 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $202;
 $28 = $203;
 $204 = $27;
 $205 = $28;
 $26 = $205;
 $206 = $26;
 $24 = $204;
 $25 = $206;
 $207 = $24;
 $208 = $25;
 $23 = $208;
 $209 = $23;
 HEAP32[$207>>2] = $209;
 $210 = HEAP32[$40>>2]|0;
 HEAP32[$72>>2] = $210;
 $211 = $70;
 $3 = $211;
 $212 = $3;
 $22 = $212;
 $213 = $22;
 $20 = $213;
 $214 = $20;
 $14 = $21;
 $15 = $214;
 $215 = $14;
 $216 = $15;
 ;HEAP8[$10>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
 $8 = $215;
 $9 = $216;
 $217 = $8;
 $218 = $9;
 $7 = $218;
 $219 = $7;
 $5 = $217;
 $6 = $219;
 $220 = $5;
 $221 = $6;
 $4 = $221;
 $222 = $4;
 HEAP32[$220>>2] = $222;
 $223 = HEAP32[$21>>2]|0;
 HEAP32[$73>>2] = $223;
 ;HEAP8[$62>>0]=HEAP8[$73>>0]|0;HEAP8[$62+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$62+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$62+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$63>>0]=HEAP8[$72>>0]|0;HEAP8[$63+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$63+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$63+3>>0]=HEAP8[$72+3>>0]|0;
 ;HEAP8[$64>>0]=HEAP8[$71>>0]|0;
 $56 = $199;
 $224 = $56;
 $55 = $63;
 $225 = $55;
 ;HEAP32[$58>>2]=HEAP32[$225>>2]|0;
 $42 = $62;
 $226 = $42;
 ;HEAP32[$59>>2]=HEAP32[$226>>2]|0;
 ;HEAP8[$50>>0]=HEAP8[$61>>0]|0;
 ;HEAP8[$51>>0]=HEAP8[$60>>0]|0;
 ;HEAP8[$52>>0]=HEAP8[$59>>0]|0;HEAP8[$52+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$52+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$52+3>>0]=HEAP8[$59+3>>0]|0;
 ;HEAP8[$53>>0]=HEAP8[$58>>0]|0;HEAP8[$53+1>>0]=HEAP8[$58+1>>0]|0;HEAP8[$53+2>>0]=HEAP8[$58+2>>0]|0;HEAP8[$53+3>>0]=HEAP8[$58+3>>0]|0;
 ;HEAP8[$54>>0]=HEAP8[$57>>0]|0;
 $49 = $224;
 $227 = $49;
 $48 = $53;
 $228 = $48;
 $47 = $228;
 $229 = $47;
 $230 = HEAP32[$229>>2]|0;
 $46 = $230;
 $44 = $52;
 $231 = $44;
 $43 = $231;
 $232 = $43;
 $233 = HEAP32[$232>>2]|0;
 $45 = $233;
 $234 = $45;
 __THREW__ = 0;
 invoke_vii(378,($227|0),($234|0));
 $235 = __THREW__; __THREW__ = 0;
 $236 = $235&1;
 if ($236) {
  $237 = ___cxa_find_matching_catch()|0;
  $238 = tempRet0;
  $74 = $237;
  $75 = $238;
  __ZNSt3__114__shared_countD2Ev($188);
  $239 = $74;
  $240 = $75;
  $157 = $239;
  $158 = $240;
  $111 = $__hold2;
  $241 = $111;
  $109 = $241;
  $110 = 0;
  $242 = $109;
  $108 = $242;
  $243 = $108;
  $107 = $243;
  $244 = $107;
  $245 = HEAP32[$244>>2]|0;
  $__tmp$i$i1 = $245;
  $246 = $110;
  $97 = $242;
  $247 = $97;
  $96 = $247;
  $248 = $96;
  HEAP32[$248>>2] = $246;
  $249 = $__tmp$i$i1;
  $250 = ($249|0)!=(0|0);
  if (!($250)) {
   $309 = $157;
   $310 = $158;
   ___resumeException($309|0);
   // unreachable;
  }
  $95 = $242;
  $271 = $95;
  $94 = $271;
  $272 = $94;
  $273 = ((($272)) + 4|0);
  $274 = $__tmp$i$i1;
  $105 = $273;
  $106 = $274;
  $275 = $105;
  $276 = HEAP32[$275>>2]|0;
  $277 = $106;
  $278 = ((($275)) + 4|0);
  $279 = HEAP32[$278>>2]|0;
  $102 = $276;
  $103 = $277;
  $104 = $279;
  $280 = $102;
  $281 = $103;
  $282 = $104;
  $99 = $280;
  $100 = $281;
  $101 = $282;
  $283 = $100;
  $98 = $283;
  $284 = $98;
  __ZdlPv($284);
  $309 = $157;
  $310 = $158;
  ___resumeException($309|0);
  // unreachable;
 }
 $$expand_i1_val = 0;
 HEAP8[$159>>0] = $$expand_i1_val;
 $77 = $agg$result;
 $251 = $77;
 HEAP32[$251>>2] = 0;
 $252 = ((($251)) + 4|0);
 HEAP32[$252>>2] = 0;
 $80 = $__hold2;
 $253 = $80;
 $79 = $253;
 $254 = $79;
 $78 = $254;
 $255 = $78;
 $256 = HEAP32[$255>>2]|0;
 $83 = $256;
 $257 = $83;
 $258 = ((($257)) + 16|0);
 $82 = $258;
 $259 = $82;
 $81 = $259;
 $260 = $81;
 HEAP32[$agg$result>>2] = $260;
 $88 = $__hold2;
 $261 = $88;
 $87 = $261;
 $262 = $87;
 $86 = $262;
 $263 = $86;
 $264 = HEAP32[$263>>2]|0;
 $__t$i = $264;
 $85 = $261;
 $265 = $85;
 $84 = $265;
 $266 = $84;
 HEAP32[$266>>2] = 0;
 $267 = $__t$i;
 $268 = ((($agg$result)) + 4|0);
 HEAP32[$268>>2] = $267;
 $269 = HEAP32[$agg$result>>2]|0;
 $89 = $agg$result;
 $90 = $269;
 $$expand_i1_val2 = 1;
 HEAP8[$159>>0] = $$expand_i1_val2;
 $160 = 1;
 $$pre_trunc = HEAP8[$159>>0]|0;
 $270 = $$pre_trunc&1;
 if (!($270)) {
  __ZNSt3__110shared_ptrIN4rhea15linear_equationEED2Ev($agg$result);
 }
 $152 = $__hold2;
 $285 = $152;
 $150 = $285;
 $151 = 0;
 $286 = $150;
 $149 = $286;
 $287 = $149;
 $148 = $287;
 $288 = $148;
 $289 = HEAP32[$288>>2]|0;
 $__tmp$i$i = $289;
 $290 = $151;
 $138 = $286;
 $291 = $138;
 $137 = $291;
 $292 = $137;
 HEAP32[$292>>2] = $290;
 $293 = $__tmp$i$i;
 $294 = ($293|0)!=(0|0);
 if (!($294)) {
  STACKTOP = sp;return;
 }
 $136 = $286;
 $295 = $136;
 $135 = $295;
 $296 = $135;
 $297 = ((($296)) + 4|0);
 $298 = $__tmp$i$i;
 $146 = $297;
 $147 = $298;
 $299 = $146;
 $300 = HEAP32[$299>>2]|0;
 $301 = $147;
 $302 = ((($299)) + 4|0);
 $303 = HEAP32[$302>>2]|0;
 $143 = $300;
 $144 = $301;
 $145 = $303;
 $304 = $143;
 $305 = $144;
 $306 = $145;
 $140 = $304;
 $141 = $305;
 $142 = $306;
 $307 = $141;
 $139 = $307;
 $308 = $139;
 __ZdlPv($308);
 STACKTOP = sp;return;
}
function __ZNSt3__110shared_ptrIN4rhea15linear_equationEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 __ZNSt3__119__shared_weak_count16__release_sharedEv($6);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea15linear_equationENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = 6392;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 16|0);
 __ZNSt3__117__compressed_pairINS_9allocatorIN4rhea15linear_equationEEES3_ED2Ev($3);
 __ZNSt3__114__shared_countD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea15linear_equationENS_9allocatorIS2_EEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__120__shared_ptr_emplaceIN4rhea15linear_equationENS_9allocatorIS2_EEED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea15linear_equationENS_9allocatorIS2_EEE16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $2;
 $4 = ((($3)) + 16|0);
 $1 = $4;
 $5 = $1;
 $0 = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vi[$8 & 511]($6);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN4rhea15linear_equationENS_9allocatorIS2_EEE21__on_zero_shared_weakEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__a = sp + 44|0;
 $10 = $this;
 $11 = $10;
 $12 = ((($11)) + 16|0);
 $9 = $12;
 $13 = $9;
 $8 = $13;
 $14 = $8;
 $2 = $__a;
 $3 = $14;
 $15 = ((($11)) + 16|0);
 $1 = $15;
 $16 = $1;
 $0 = $16;
 $5 = $__a;
 $6 = $11;
 $7 = 1;
 $17 = $6;
 $4 = $17;
 $18 = $4;
 __ZdlPv($18);
 STACKTOP = sp;return;
}
function __ZNSt3__117__compressed_pairINS_9allocatorIN4rhea15linear_equationEEES3_ED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__128__libcpp_compressed_pair_impINS_9allocatorIN4rhea15linear_equationEEES3_Lj1EED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__128__libcpp_compressed_pair_impINS_9allocatorIN4rhea15linear_equationEEES3_Lj1EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea15linear_equationD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4rhea8relationC2ENS0_6comp_tE($this,$type) {
 $this = $this|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $type;
 $2 = $0;
 $3 = $1;
 HEAP32[$2>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN4rhea17linear_inequalityC2ERKNS_8variableENS_8relationENS_17linear_expressionENS_8strengthEd($this,$v,$op,$expr,$s,$weight) {
 $this = $this|0;
 $v = $v|0;
 $op = $op|0;
 $expr = $expr|0;
 $s = $s|0;
 $weight = +$weight;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $v;
 $3 = $weight;
 $6 = $1;
 $0 = $expr;
 $7 = $0;
 $8 = $3;
 __ZN4rhea17linear_constraintC2ERKNS_17linear_expressionERKNS_8strengthEd($6,$7,$s,$8);
 $9 = 4704;
 HEAP32[$6>>2] = $9;
 __THREW__ = 0;
 $10 = (invoke_ii(391,($op|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 do {
  if (!($12)) {
   if ((($10|0) == 1)) {
    $22 = ((($6)) + 48|0);
    $23 = $2;
    __THREW__ = 0;
    (invoke_iii(297,($22|0),($23|0))|0);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if ($25) {
     break;
    }
    STACKTOP = sp;return;
   } else if ((($10|0) == -1)) {
    $15 = ((($6)) + 48|0);
    __THREW__ = 0;
    (invoke_iid(184,($15|0),-1.0)|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if ($17) {
     break;
    }
    $18 = ((($6)) + 48|0);
    $19 = $2;
    __THREW__ = 0;
    (invoke_iii(295,($18|0),($19|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if ($21) {
     break;
    }
    STACKTOP = sp;return;
   } else {
    $26 = (___cxa_allocate_exception(8)|0);
    __THREW__ = 0;
    invoke_vi(392,($26|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     __THREW__ = 0;
     invoke_viii(182,($26|0),(528|0),(83|0));
     $29 = __THREW__; __THREW__ = 0;
     break;
    }
    $30 = ___cxa_find_matching_catch()|0;
    $31 = tempRet0;
    $4 = $30;
    $5 = $31;
    ___cxa_free_exception(($26|0));
    __ZN4rhea17linear_constraintD2Ev($6);
    $32 = $4;
    $33 = $5;
    ___resumeException($32|0);
    // unreachable;
   }
  }
 } while(0);
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $4 = $13;
 $5 = $14;
 __ZN4rhea17linear_constraintD2Ev($6);
 $32 = $4;
 $33 = $5;
 ___resumeException($32|0);
 // unreachable;
}
function __ZN4rhea17linear_constraintC2ERKNS_17linear_expressionERKNS_8strengthEd($this,$expr,$s,$weight) {
 $this = $this|0;
 $expr = $expr|0;
 $s = $s|0;
 $weight = +$weight;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $0 = $this;
 $1 = $expr;
 $2 = $s;
 $3 = $weight;
 $7 = $0;
 $8 = $2;
 __ZN4rhea8strengthC2ERKS0_($4,$8);
 $9 = $3;
 __ZN4rhea19abstract_constraintC2ENS_8strengthEd($7,$4,$9);
 $10 = 4752;
 HEAP32[$7>>2] = $10;
 $11 = ((($7)) + 48|0);
 $12 = $1;
 __THREW__ = 0;
 invoke_vii(296,($11|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $5 = $15;
  $6 = $16;
  __ZN4rhea19abstract_constraintD2Ev($7);
  $17 = $5;
  $18 = $6;
  ___resumeException($17|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNK4rhea8relation4typeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN4rhea17linear_expressionpLERKNS_8variableE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = sp;
 $8 = sp + 28|0;
 $5 = $this;
 $6 = $x;
 $11 = $5;
 $12 = $6;
 HEAP32[$8>>2] = 1;
 $2 = $7;
 $3 = $12;
 $4 = $8;
 $13 = $2;
 $14 = $3;
 $1 = $14;
 $15 = $1;
 __ZN4rhea8variableC2ERKS0_($13,$15);
 $16 = ((($13)) + 8|0);
 $17 = $4;
 $0 = $17;
 $18 = $0;
 $19 = HEAP32[$18>>2]|0;
 $20 = (+($19|0));
 HEAPF64[$16>>3] = $20;
 __THREW__ = 0;
 $21 = (invoke_iii(186,($11|0),($7|0))|0);
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $24 = ___cxa_find_matching_catch()|0;
  $25 = tempRet0;
  $9 = $24;
  $10 = $25;
  __ZNSt3__14pairIN4rhea8variableEdED2Ev($7);
  $26 = $9;
  $27 = $10;
  ___resumeException($26|0);
  // unreachable;
 } else {
  __ZNSt3__14pairIN4rhea8variableEdED2Ev($7);
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZN4rhea17linear_expressionmIERKNS_8variableE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = sp;
 $8 = sp + 28|0;
 $5 = $this;
 $6 = $x;
 $11 = $5;
 $12 = $6;
 HEAP32[$8>>2] = -1;
 $2 = $7;
 $3 = $12;
 $4 = $8;
 $13 = $2;
 $14 = $3;
 $1 = $14;
 $15 = $1;
 __ZN4rhea8variableC2ERKS0_($13,$15);
 $16 = ((($13)) + 8|0);
 $17 = $4;
 $0 = $17;
 $18 = $0;
 $19 = HEAP32[$18>>2]|0;
 $20 = (+($19|0));
 HEAPF64[$16>>3] = $20;
 __THREW__ = 0;
 $21 = (invoke_iii(186,($11|0),($7|0))|0);
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $24 = ___cxa_find_matching_catch()|0;
  $25 = tempRet0;
  $9 = $24;
  $10 = $25;
  __ZNSt3__14pairIN4rhea8variableEdED2Ev($7);
  $26 = $9;
  $27 = $10;
  ___resumeException($26|0);
  // unreachable;
 } else {
  __ZNSt3__14pairIN4rhea8variableEdED2Ev($7);
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZN4rhea11edit_misuseC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN4rhea5errorC2Ev($1);
 $2 = 2328;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN4rhea17linear_inequalityC2ENS_17linear_expressionENS_8relationES1_NS_8strengthEd($this,$lhs,$op,$rhs,$s,$weight) {
 $this = $this|0;
 $lhs = $lhs|0;
 $op = $op|0;
 $rhs = $rhs|0;
 $s = $s|0;
 $weight = +$weight;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $weight;
 $5 = $1;
 $0 = $rhs;
 $6 = $0;
 $7 = $2;
 __ZN4rhea17linear_constraintC2ERKNS_17linear_expressionERKNS_8strengthEd($5,$6,$s,$7);
 $8 = 4704;
 HEAP32[$5>>2] = $8;
 __THREW__ = 0;
 $9 = (invoke_ii(391,($op|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 do {
  if (!($11)) {
   if ((($9|0) == -1)) {
    $14 = ((($5)) + 48|0);
    __THREW__ = 0;
    (invoke_iid(184,($14|0),-1.0)|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if ($16) {
     break;
    }
    $17 = ((($5)) + 48|0);
    __THREW__ = 0;
    (invoke_iii(185,($17|0),($lhs|0))|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     break;
    }
    STACKTOP = sp;return;
   } else if ((($9|0) == 1)) {
    $20 = ((($5)) + 48|0);
    __THREW__ = 0;
    (invoke_iii(393,($20|0),($lhs|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     break;
    }
    STACKTOP = sp;return;
   } else {
    $23 = (___cxa_allocate_exception(8)|0);
    __THREW__ = 0;
    invoke_vi(392,($23|0));
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if (!($25)) {
     __THREW__ = 0;
     invoke_viii(182,($23|0),(528|0),(83|0));
     $26 = __THREW__; __THREW__ = 0;
     break;
    }
    $27 = ___cxa_find_matching_catch()|0;
    $28 = tempRet0;
    $3 = $27;
    $4 = $28;
    ___cxa_free_exception(($23|0));
    __ZN4rhea17linear_constraintD2Ev($5);
    $29 = $3;
    $30 = $4;
    ___resumeException($29|0);
    // unreachable;
   }
  }
 } while(0);
 $12 = ___cxa_find_matching_catch()|0;
 $13 = tempRet0;
 $3 = $12;
 $4 = $13;
 __ZN4rhea17linear_constraintD2Ev($5);
 $29 = $3;
 $30 = $4;
 ___resumeException($29|0);
 // unreachable;
}
function __ZN4rhea15linear_equationC2ENS_17linear_expressionERKNS_8strengthEd($this,$e,$s,$weight) {
 $this = $this|0;
 $e = $e|0;
 $s = $s|0;
 $weight = +$weight;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $s;
 $3 = $weight;
 $4 = $1;
 $0 = $e;
 $5 = $0;
 $6 = $2;
 $7 = $3;
 __ZN4rhea17linear_constraintC2ERKNS_17linear_expressionERKNS_8strengthEd($4,$5,$6,$7);
 $8 = 4896;
 HEAP32[$4>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN4rheamiENS_17linear_expressionERKS0_($agg$result,$e,$x) {
 $agg$result = $agg$result|0;
 $e = $e|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $x;
 $1 = $0;
 $2 = (__ZN4rhea17linear_expressionmIERKS0_($e,$1)|0);
 __ZN4rhea17linear_expressionC2ERKS0_($agg$result,$2);
 STACKTOP = sp;return;
}
function __ZN4rhea8flat_mapINS_8variableEdNSt3__14lessIS1_EENS2_9allocatorINS2_4pairIS1_dEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4rhea8flat_mapINS_8variableEdNSt3__14lessIS1_EENS2_9allocatorINS2_4pairIS1_dEEEEEC2ERKS9_($this,$m) {
 $this = $this|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $m;
 $4 = $0;
 $5 = $1;
 __ZNSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEEC2ERKS7_($4,$5);
 __THREW__ = 0;
 invoke_vi(381,($4|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  $2 = $8;
  $3 = $9;
  __ZNSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEED2Ev($4);
  $10 = $2;
  $11 = $3;
  ___resumeException($10|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110shared_ptrIN4rhea17abstract_variableEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 __ZNSt3__119__shared_weak_count16__release_sharedEv($6);
 STACKTOP = sp;return;
}
function __ZNSt3__110shared_ptrIN4rhea14float_variableEE11make_sharedIJRdEEES3_DpOT_($agg$result,$__args) {
 $agg$result = $agg$result|0;
 $__args = $__args|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a2 = 0, $__hold2 = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp;
 $11 = sp + 128|0;
 $12 = sp + 120|0;
 $13 = sp + 32|0;
 $16 = sp + 713|0;
 $17 = sp + 708|0;
 $18 = sp + 711|0;
 $19 = sp + 706|0;
 $21 = sp + 216|0;
 $29 = sp + 16|0;
 $30 = sp + 112|0;
 $31 = sp + 88|0;
 $32 = sp + 8|0;
 $35 = sp + 709|0;
 $36 = sp + 716|0;
 $37 = sp + 714|0;
 $38 = sp + 712|0;
 $40 = sp + 228|0;
 $50 = sp + 72|0;
 $51 = sp + 48|0;
 $52 = sp + 96|0;
 $53 = sp + 104|0;
 $54 = sp + 136|0;
 $57 = sp + 707|0;
 $58 = sp + 300|0;
 $59 = sp + 184|0;
 $60 = sp + 710|0;
 $61 = sp + 715|0;
 $62 = sp + 40|0;
 $63 = sp + 64|0;
 $64 = sp + 144|0;
 $71 = sp + 717|0;
 $72 = sp + 364|0;
 $73 = sp + 684|0;
 $76 = sp + 24|0;
 $116 = sp + 560|0;
 $117 = sp + 56|0;
 $120 = sp + 576|0;
 $121 = sp + 312|0;
 $122 = sp + 80|0;
 $127 = sp + 584|0;
 $__a2 = sp + 718|0;
 $__hold2 = sp + 372|0;
 $155 = sp + 328|0;
 $156 = sp + 705|0;
 $159 = sp + 704|0;
 $154 = $__args;
 $153 = $__a2;
 $132 = $__a2;
 $133 = 1;
 $134 = 0;
 $161 = $133;
 $162 = $161<<5;
 $131 = $162;
 $163 = $131;
 $164 = (__Znwj($163)|0);
 $128 = $155;
 $129 = $__a2;
 $130 = 1;
 $165 = $128;
 $166 = $129;
 HEAP32[$165>>2] = $166;
 $167 = ((($165)) + 4|0);
 $168 = $130;
 HEAP32[$167>>2] = $168;
 $124 = $__hold2;
 $125 = $164;
 $126 = $155;
 $169 = $124;
 $170 = $125;
 $171 = $126;
 $123 = $171;
 $172 = $123;
 ;HEAP32[$127>>2]=HEAP32[$172>>2]|0;HEAP32[$127+4>>2]=HEAP32[$172+4>>2]|0;
 ;HEAP8[$122>>0]=HEAP8[$127>>0]|0;HEAP8[$122+1>>0]=HEAP8[$127+1>>0]|0;HEAP8[$122+2>>0]=HEAP8[$127+2>>0]|0;HEAP8[$122+3>>0]=HEAP8[$127+3>>0]|0;HEAP8[$122+4>>0]=HEAP8[$127+4>>0]|0;HEAP8[$122+5>>0]=HEAP8[$127+5>>0]|0;HEAP8[$122+6>>0]=HEAP8[$127+6>>0]|0;HEAP8[$122+7>>0]=HEAP8[$127+7>>0]|0;
 $119 = $169;
 HEAP32[$120>>2] = $170;
 $173 = $119;
 $118 = $120;
 $174 = $118;
 $175 = HEAP32[$174>>2]|0;
 $112 = $122;
 $176 = $112;
 ;HEAP32[$121>>2]=HEAP32[$176>>2]|0;HEAP32[$121+4>>2]=HEAP32[$176+4>>2]|0;
 ;HEAP8[$117>>0]=HEAP8[$121>>0]|0;HEAP8[$117+1>>0]=HEAP8[$121+1>>0]|0;HEAP8[$117+2>>0]=HEAP8[$121+2>>0]|0;HEAP8[$117+3>>0]=HEAP8[$121+3>>0]|0;HEAP8[$117+4>>0]=HEAP8[$121+4>>0]|0;HEAP8[$117+5>>0]=HEAP8[$121+5>>0]|0;HEAP8[$117+6>>0]=HEAP8[$121+6>>0]|0;HEAP8[$117+7>>0]=HEAP8[$121+7>>0]|0;
 $115 = $173;
 HEAP32[$116>>2] = $175;
 $177 = $115;
 $114 = $116;
 $178 = $114;
 $179 = HEAP32[$178>>2]|0;
 HEAP32[$177>>2] = $179;
 $180 = ((($177)) + 4|0);
 $113 = $117;
 $181 = $113;
 ;HEAP32[$180>>2]=HEAP32[$181>>2]|0;HEAP32[$180+4>>2]=HEAP32[$181+4>>2]|0;
 $93 = $__hold2;
 $182 = $93;
 $92 = $182;
 $183 = $92;
 $91 = $183;
 $184 = $91;
 $185 = HEAP32[$184>>2]|0;
 $1 = $156;
 $2 = $__a2;
 $186 = $154;
 $0 = $186;
 $187 = $0;
 ;HEAP8[$76>>0]=HEAP8[$156>>0]|0;
 $69 = $185;
 $70 = $187;
 $188 = $69;
 $67 = $188;
 $68 = 0;
 $189 = $67;
 $190 = $68;
 $65 = $189;
 $66 = $190;
 $191 = $65;
 $192 = 10504;
 HEAP32[$191>>2] = $192;
 $193 = ((($191)) + 4|0);
 $194 = $66;
 HEAP32[$193>>2] = $194;
 $195 = 10568;
 HEAP32[$189>>2] = $195;
 $196 = ((($189)) + 8|0);
 $197 = $68;
 HEAP32[$196>>2] = $197;
 $198 = 2168;
 HEAP32[$188>>2] = $198;
 $199 = ((($188)) + 16|0);
 $41 = $76;
 $200 = $41;
 $39 = $200;
 $201 = $39;
 $33 = $40;
 $34 = $201;
 $202 = $33;
 $203 = $34;
 ;HEAP8[$29>>0]=HEAP8[$38>>0]|0;
 ;HEAP8[$30>>0]=HEAP8[$37>>0]|0;
 ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
 ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
 $27 = $202;
 $28 = $203;
 $204 = $27;
 $205 = $28;
 $26 = $205;
 $206 = $26;
 $24 = $204;
 $25 = $206;
 $207 = $24;
 $208 = $25;
 $23 = $208;
 $209 = $23;
 HEAP32[$207>>2] = $209;
 $210 = HEAP32[$40>>2]|0;
 HEAP32[$72>>2] = $210;
 $211 = $70;
 $3 = $211;
 $212 = $3;
 $22 = $212;
 $213 = $22;
 $20 = $213;
 $214 = $20;
 $14 = $21;
 $15 = $214;
 $215 = $14;
 $216 = $15;
 ;HEAP8[$10>>0]=HEAP8[$19>>0]|0;
 ;HEAP8[$11>>0]=HEAP8[$18>>0]|0;
 ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
 ;HEAP8[$13>>0]=HEAP8[$16>>0]|0;
 $8 = $215;
 $9 = $216;
 $217 = $8;
 $218 = $9;
 $7 = $218;
 $219 = $7;
 $5 = $217;
 $6 = $219;
 $220 = $5;
 $221 = $6;
 $4 = $221;
 $222 = $4;
 HEAP32[$220>>2] = $222;
 $223 = HEAP32[$21>>2]|0;
 HEAP32[$73>>2] = $223;
 ;HEAP8[$62>>0]=HEAP8[$73>>0]|0;HEAP8[$62+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$62+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$62+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$63>>0]=HEAP8[$72>>0]|0;HEAP8[$63+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$63+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$63+3>>0]=HEAP8[$72+3>>0]|0;
 ;HEAP8[$64>>0]=HEAP8[$71>>0]|0;
 $56 = $199;
 $224 = $56;
 $55 = $63;
 $225 = $55;
 ;HEAP32[$58>>2]=HEAP32[$225>>2]|0;
 $42 = $62;
 $226 = $42;
 ;HEAP32[$59>>2]=HEAP32[$226>>2]|0;
 ;HEAP8[$50>>0]=HEAP8[$61>>0]|0;
 ;HEAP8[$51>>0]=HEAP8[$60>>0]|0;
 ;HEAP8[$52>>0]=HEAP8[$59>>0]|0;HEAP8[$52+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$52+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$52+3>>0]=HEAP8[$59+3>>0]|0;
 ;HEAP8[$53>>0]=HEAP8[$58>>0]|0;HEAP8[$53+1>>0]=HEAP8[$58+1>>0]|0;HEAP8[$53+2>>0]=HEAP8[$58+2>>0]|0;HEAP8[$53+3>>0]=HEAP8[$58+3>>0]|0;
 ;HEAP8[$54>>0]=HEAP8[$57>>0]|0;
 $49 = $224;
 $227 = $49;
 $48 = $53;
 $228 = $48;
 $47 = $228;
 $229 = $47;
 $230 = HEAP32[$229>>2]|0;
 $46 = $230;
 $44 = $52;
 $231 = $44;
 $43 = $231;
 $232 = $43;
 $233 = HEAP32[$232>>2]|0;
 $45 = $233;
 $234 = $45;
 $235 = +HEAPF64[$234>>3];
 __THREW__ = 0;
 invoke_vid(388,($227|0),(+$235));
 $236 = __THREW__; __THREW__ = 0;
 $237 = $236&1;
 if ($237) {
  $238 = ___cxa_find_matching_catch()|0;
  $239 = tempRet0;
  $74 = $238;
  $75 = $239;
  __ZNSt3__114__shared_countD2Ev($188);
  $240 = $74;
  $241 = $75;
  $157 = $240;
  $158 = $241;
  $111 = $__hold2;
  $242 = $111;
  $109 = $242;
  $110 = 0;
  $243 = $109;
  $108 = $243;
  $244 = $108;
  $107 = $244;
  $245 = $107;
  $246 = HEAP32[$245>>2]|0;
  $__tmp$i$i1 = $246;
  $247 = $110;
  $97 = $243;
  $248 = $97;
  $96 = $248;
  $249 = $96;
  HEAP32[$249>>2] = $247;
  $250 = $__tmp$i$i1;
  $251 = ($250|0)!=(0|0);
  if (!($251)) {
   $310 = $157;
   $311 = $158;
   ___resumeException($310|0);
   // unreachable;
  }
  $95 = $243;
  $272 = $95;
  $94 = $272;
  $273 = $94;
  $274 = ((($273)) + 4|0);
  $275 = $__tmp$i$i1;
  $105 = $274;
  $106 = $275;
  $276 = $105;
  $277 = HEAP32[$276>>2]|0;
  $278 = $106;
  $279 = ((($276)) + 4|0);
  $280 = HEAP32[$279>>2]|0;
  $102 = $277;
  $103 = $278;
  $104 = $280;
  $281 = $102;
  $282 = $103;
  $283 = $104;
  $99 = $281;
  $100 = $282;
  $101 = $283;
  $284 = $100;
  $98 = $284;
  $285 = $98;
  __ZdlPv($285);
  $310 = $157;
  $311 = $158;
  ___resumeException($310|0);
  // unreachable;
 }
 $$expand_i1_val = 0;
 HEAP8[$159>>0] = $$expand_i1_val;
 $77 = $agg$result;
 $252 = $77;
 HEAP32[$252>>2] = 0;
 $253 = ((($252)) + 4|0);
 HEAP32[$253>>2] = 0;
 $80 = $__hold2;
 $254 = $80;
 $79 = $254;
 $255 = $79;
 $78 = $255;
 $256 = $78;
 $257 = HEAP32[$256>>2]|0;
 $83 = $257;
 $258 = $83;
 $259 = ((($258)) + 16|0);
 $82 = $259;
 $260 = $82;
 $81 = $260;
 $261 = $81;
 HEAP32[$agg$result>>2] = $261;
 $88 = $__hold2;
 $262 = $88;
 $87 = $262;
 $263 = $87;
 $86 = $263;
 $264 = $86;
 $265 = HEAP32[$264>>2]|0;
 $__t$i = $265;
 $85 = $262;
 $266 = $85;
 $84 = $266;
 $267 = $84;
 HEAP32[$267>>2] = 0;
 $268 = $__t$i;
 $269 = ((($agg$result)) + 4|0);
 HEAP32[$269>>2] = $268;
 $270 = HEAP32[$agg$result>>2]|0;
 $89 = $agg$result;
 $90 = $270;
 $$expand_i1_val2 = 1;
 HEAP8[$159>>0] = $$expand_i1_val2;
 $160 = 1;
 $$pre_trunc = HEAP8[$159>>0]|0;
 $271 = $$pre_trunc&1;
 if (!($271)) {
  __ZNSt3__110shared_ptrIN4rhea14float_variableEED2Ev($agg$result);
 }
 $152 = $__hold2;
 $286 = $152;
 $150 = $286;
 $151 = 0;
 $287 = $150;
 $149 = $287;
 $288 = $149;
 $148 = $288;
 $289 = $148;
 $290 = HEAP32[$289>>2]|0;
 $__tmp$i$i = $290;
 $291 = $151;
 $138 = $287;
 $292 = $138;
 $137 = $292;
 $293 = $137;
 HEAP32[$293>>2] = $291;
 $294 = $__tmp$i$i;
 $295 = ($294|0)!=(0|0);
 if (!($295)) {
  STACKTOP = sp;return;
 }
 $136 = $287;
 $296 = $136;
 $135 = $296;
 $297 = $135;
 $298 = ((($297)) + 4|0);
 $299 = $__tmp$i$i;
 $146 = $298;
 $147 = $299;
 $300 = $146;
 $301 = HEAP32[$300>>2]|0;
 $302 = $147;
 $303 = ((($300)) + 4|0);
 $304 = HEAP32[$303>>2]|0;
 $143 = $301;
 $144 = $302;
 $145 = $304;
 $305 = $143;
 $306 = $144;
 $307 = $145;
 $140 = $305;
 $141 = $306;
 $142 = $307;
 $308 = $141;
 $139 = $308;
 $309 = $139;
 __ZdlPv($309);
 STACKTOP = sp;return;
}
function ___getTypeName($ti) {
 $ti = $ti|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ti;
 $2 = $1;
 $0 = $2;
 $3 = $0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (___strdup($5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN10emscripten8internal6TypeIDIvE3getEv()|0);
 __embind_register_void(($1|0),(6512|0));
 $2 = (__ZN10emscripten8internal6TypeIDIbE3getEv()|0);
 __embind_register_bool(($2|0),(6520|0),1,1,0);
 __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc(6528);
 __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc(6536);
 __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc(6552);
 __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc(6568);
 __ZN12_GLOBAL__N_1L16register_integerItEEvPKc(6576);
 __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc(6592);
 __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc(6600);
 __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc(6616);
 __ZN12_GLOBAL__N_1L16register_integerImEEvPKc(6624);
 __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc(6640);
 __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc(6648);
 $3 = (__ZN10emscripten8internal6TypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 __embind_register_std_string(($3|0),(6656|0));
 $4 = (__ZN10emscripten8internal6TypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 __embind_register_std_string(($4|0),(6672|0));
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 __embind_register_std_wstring(($5|0),4,(6712|0));
 $6 = (__ZN10emscripten8internal6TypeIDINS_3valEE3getEv()|0);
 __embind_register_emval(($6|0),(6728|0));
 __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc(6744);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(6776);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(6816);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(6856);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(6888);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(6928);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(6960);
 __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc(7000);
 __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc(7032);
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(7072);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(7104);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(7144);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(7184);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(7224);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(7264);
 __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc(7304);
 __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc(7336);
 __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc(7368);
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init224();
 return;
}
function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIvE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIbE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIcE3getEv()|0);
 $2 = $0;
 $3 = -128 << 24 >> 24;
 $4 = 127 << 24 >> 24;
 __embind_register_integer(($1|0),($2|0),1,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIaE3getEv()|0);
 $2 = $0;
 $3 = -128 << 24 >> 24;
 $4 = 127 << 24 >> 24;
 __embind_register_integer(($1|0),($2|0),1,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIhE3getEv()|0);
 $2 = $0;
 $3 = 0;
 $4 = 255;
 __embind_register_integer(($1|0),($2|0),1,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIsE3getEv()|0);
 $2 = $0;
 $3 = -32768 << 16 >> 16;
 $4 = 32767 << 16 >> 16;
 __embind_register_integer(($1|0),($2|0),2,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerItEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0);
 $2 = $0;
 $3 = 0;
 $4 = 65535;
 __embind_register_integer(($1|0),($2|0),2,($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $2 = $0;
 __embind_register_integer(($1|0),($2|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0);
 $2 = $0;
 __embind_register_integer(($1|0),($2|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIlE3getEv()|0);
 $2 = $0;
 __embind_register_integer(($1|0),($2|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L16register_integerImEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0);
 $2 = $0;
 __embind_register_integer(($1|0),($2|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 $2 = $0;
 __embind_register_float(($1|0),($2|0),4);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $2 = $0;
 __embind_register_float(($1|0),($2|0),8);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $name;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv()|0);
 $2 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv()|0);
 $3 = $0;
 __embind_register_memory_view(($1|0),($2|0),($3|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7408|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7448|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7488|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7528|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7568|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7608|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7648|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7688|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7728|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7768|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7808|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7848|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (5400|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7888|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7976|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4560|0);
}
function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIdE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8928|0);
}
function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIfE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8912|0);
}
function __ZN10emscripten8internal6TypeIDImE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDImE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8896|0);
}
function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIlE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8880|0);
}
function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIjE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8864|0);
}
function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIiE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8848|0);
}
function __ZN10emscripten8internal6TypeIDItE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDItE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8832|0);
}
function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8816|0);
}
function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIhE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8784|0);
}
function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIaE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8800|0);
}
function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIcE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8768|0);
}
function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8752|0);
}
function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8720|0);
}
function ___cxx_global_var_init224() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(8064);
 return;
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 _memcpy(($2|0),($s|0),($1|0))|0;
 $$0 = $2;
 return ($$0|0);
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[_stderr>>2]|0;
 (_vfprintf(($0|0),($format|0),($list|0))|0);
 (_fputc(10,($0|0))|0);
 _abort();
 // unreachable;
}
function ___cxa_bad_cast() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 __ZNSt8bad_castC2Ev($0);
 ___cxa_throw(($0|0),(8384|0),(151|0));
 // unreachable;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((9200|0),(9224|0),303,(9304|0));
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((9336|0),(394|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[9328>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(9344,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   while(1) {
    $3 = (__ZSt15get_new_handlerv()|0);
    $4 = ($3|0)==(0|0);
    if ($4) {
     break;
    }
    FUNCTION_TABLE_v[$3 & 511]();
    $5 = (_malloc($$size)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa = $5;
     break L1;
    }
   }
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = (8088);
   ___cxa_throw(($7|0),(8120|0),(142|0));
   // unreachable;
  } else {
   $$lcssa = $1;
  }
 } while(0);
 return ($$lcssa|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9400|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(395,(9416|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
 }
 $3 = ___cxa_find_matching_catch(0|0)|0;
 $4 = tempRet0;
 (___cxa_begin_catch(($3|0))|0);
 __THREW__ = 0;
 invoke_vii(395,(9456|0),($vararg_buffer1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = ___cxa_find_matching_catch(0|0)|0;
 $7 = tempRet0;
 __THREW__ = 0;
 invoke_v(196);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(0|0)|0;
  $11 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  ___clang_call_terminate($6);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(396)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[2018]|0;HEAP32[2018] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8136>>2]|0;HEAP32[8136>>2] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9exceptionD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9exception4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9512|0);
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8200);
 $0 = ((($this)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt14overflow_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8328);
 return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9528|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv119__pointer_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this|0)==($thrown_type|0);
 return ($1|0);
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,8440,8496,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$1 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 511]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$1 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 511]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 511]($8,$info,$12,$15);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  } else {
   $3 = ((($this)) + 16|0);
   $4 = ((($this)) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (((($this)) + 16|0) + ($5<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
   $7 = ($5|0)>(1);
   if ($7) {
    $8 = ((($this)) + 24|0);
    $9 = ((($info)) + 54|0);
    $p$0 = $8;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if (!($11)) {
      break L1;
     }
     $12 = ((($p$0)) + 8|0);
     $13 = ($12>>>0)<($6>>>0);
     if ($13) {
      $p$0 = $12;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$$i = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $info = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$adjustedPtr>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$adjustedPtr>>2] = $1;
 $2 = ($this|0)==($thrown_type|0);
 $3 = ($thrown_type|0)==(8736|0);
 $$$i = $2 | $3;
 if ($$$i) {
  $$1 = 1;
 } else {
  $4 = ($thrown_type|0)==(0|0);
  if ($4) {
   $$1 = 0;
  } else {
   $5 = (___dynamic_cast($thrown_type,8440,8608,0)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    $$1 = 0;
   } else {
    $7 = ((($5)) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ((($this)) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = $10 ^ -1;
    $12 = $8 & $11;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = ((($this)) + 12|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ((($5)) + 12|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($15|0)==($17|0);
     $19 = ($15|0)==(8720|0);
     $or$cond = $19 | $18;
     if ($or$cond) {
      $$1 = 1;
     } else {
      $20 = ($15|0)==(0|0);
      if ($20) {
       $$1 = 0;
      } else {
       $21 = (___dynamic_cast($15,8440,8496,0)|0);
       $22 = ($21|0)==(0|0);
       if ($22) {
        $$1 = 0;
       } else {
        $23 = HEAP32[$16>>2]|0;
        $24 = ($23|0)==(0|0);
        if ($24) {
         $$1 = 0;
        } else {
         $25 = (___dynamic_cast($23,8440,8496,0)|0);
         $26 = ($25|0)==(0|0);
         if ($26) {
          $$1 = 0;
         } else {
          dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
          HEAP32[$info>>2] = $25;
          $27 = ((($info)) + 8|0);
          HEAP32[$27>>2] = $21;
          $28 = ((($info)) + 12|0);
          HEAP32[$28>>2] = -1;
          $29 = ((($info)) + 48|0);
          HEAP32[$29>>2] = 1;
          $30 = HEAP32[$25>>2]|0;
          $31 = ((($30)) + 28|0);
          $32 = HEAP32[$31>>2]|0;
          $33 = HEAP32[$adjustedPtr>>2]|0;
          FUNCTION_TABLE_viiii[$32 & 511]($25,$info,$33,1);
          $34 = ((($info)) + 24|0);
          $35 = HEAP32[$34>>2]|0;
          $36 = ($35|0)==(1);
          if ($36) {
           $37 = ((($info)) + 16|0);
           $38 = HEAP32[$37>>2]|0;
           HEAP32[$adjustedPtr>>2] = $38;
           $$0 = 1;
          } else {
           $$0 = 0;
          }
          $$1 = $$0;
         }
        }
       }
      }
     }
    } else {
     $$1 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = ((($info)) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = ((($info)) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = ((($info)) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = ((($info)) + 16|0);
 $11 = ((($info)) + 20|0);
 $12 = ((($info)) + 24|0);
 $13 = ((($info)) + 28|0);
 $14 = ((($info)) + 32|0);
 $15 = ((($info)) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 do {
  if ($16) {
   $17 = ((($info)) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$dst_type>>2]|0;
   $19 = ((($18)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 255]($dst_type,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = ((($info)) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 255]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   if ((($27|0) == 0)) {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    $or$cond = $29 & $31;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond3 = $or$cond & $33;
    $34 = HEAP32[$11>>2]|0;
    $$8 = $or$cond3 ? $34 : 0;
    $dst_ptr$0 = $$8;
    break;
   } else if (!((($27|0) == 1))) {
    $dst_ptr$0 = 0;
    break;
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond7 = $or$cond5 & $42;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $23 = $path_below;
   } else {
    $23 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $22 = ($23|0)==(1);
   $or$cond1 = $21 & $22;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off023 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off025 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0;
 var $p$024 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $57 = ((($this)) + 16|0);
    $58 = ((($this)) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (((($this)) + 16|0) + ($59<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($57,$info,$current_ptr,$path_below,$use_strcmp);
    $61 = ((($this)) + 24|0);
    $62 = ($59|0)>(1);
    if (!($62)) {
     break;
    }
    $63 = ((($this)) + 8|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $64 & 2;
    $66 = ($65|0)==(0);
    if ($66) {
     $67 = ((($info)) + 36|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)==(1);
     if (!($69)) {
      $75 = $64 & 1;
      $76 = ($75|0)==(0);
      if ($76) {
       $79 = ((($info)) + 54|0);
       $p2$2 = $61;
       while(1) {
        $88 = HEAP8[$79>>0]|0;
        $89 = ($88<<24>>24)==(0);
        if (!($89)) {
         break L1;
        }
        $90 = HEAP32[$67>>2]|0;
        $91 = ($90|0)==(1);
        if ($91) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
        $92 = ((($p2$2)) + 8|0);
        $93 = ($92>>>0)<($60>>>0);
        if ($93) {
         $p2$2 = $92;
        } else {
         break L1;
        }
       }
      }
      $77 = ((($info)) + 24|0);
      $78 = ((($info)) + 54|0);
      $p2$1 = $61;
      while(1) {
       $80 = HEAP8[$78>>0]|0;
       $81 = ($80<<24>>24)==(0);
       if (!($81)) {
        break L1;
       }
       $82 = HEAP32[$67>>2]|0;
       $83 = ($82|0)==(1);
       if ($83) {
        $84 = HEAP32[$77>>2]|0;
        $85 = ($84|0)==(1);
        if ($85) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
       $86 = ((($p2$1)) + 8|0);
       $87 = ($86>>>0)<($60>>>0);
       if ($87) {
        $p2$1 = $86;
       } else {
        break L1;
       }
      }
     }
    }
    $70 = ((($info)) + 54|0);
    $p2$0 = $61;
    while(1) {
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(0);
     if (!($72)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
     $73 = ((($p2$0)) + 8|0);
     $74 = ($73>>>0)<($60>>>0);
     if ($74) {
      $p2$0 = $73;
     } else {
      break L1;
     }
    }
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($this)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (((($this)) + 16|0) + ($24<<3)|0);
     $26 = ((($info)) + 52|0);
     $27 = ((($info)) + 53|0);
     $28 = ((($info)) + 54|0);
     $29 = ((($this)) + 8|0);
     $30 = ((($info)) + 24|0);
     $31 = ($24|0)>(0);
     L31: do {
      if ($31) {
       $32 = ((($this)) + 16|0);
       $does_dst_type_point_to_our_static_type$0$off023 = 0;$is_dst_type_derived_from_static_type$0$off025 = 0;$p$024 = $32;
       while(1) {
        HEAP8[$26>>0] = 0;
        HEAP8[$27>>0] = 0;
        __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$024,$info,$current_ptr,$current_ptr,1,$use_strcmp);
        $33 = HEAP8[$28>>0]|0;
        $34 = ($33<<24>>24)==(0);
        if (!($34)) {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off025;
         label = 20;
         break L31;
        }
        $35 = HEAP8[$27>>0]|0;
        $36 = ($35<<24>>24)==(0);
        do {
         if ($36) {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off025;
         } else {
          $37 = HEAP8[$26>>0]|0;
          $38 = ($37<<24>>24)==(0);
          if ($38) {
           $44 = HEAP32[$29>>2]|0;
           $45 = $44 & 1;
           $46 = ($45|0)==(0);
           if ($46) {
            $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$2$off0 = 1;
            label = 20;
            break L31;
           } else {
            $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off023;$is_dst_type_derived_from_static_type$1$off0 = 1;
            break;
           }
          }
          $39 = HEAP32[$30>>2]|0;
          $40 = ($39|0)==(1);
          if ($40) {
           break L31;
          }
          $41 = HEAP32[$29>>2]|0;
          $42 = $41 & 2;
          $43 = ($42|0)==(0);
          if ($43) {
           break L31;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
          }
         }
        } while(0);
        $47 = ((($p$024)) + 8|0);
        $48 = ($47>>>0)<($25>>>0);
        if ($48) {
         $does_dst_type_point_to_our_static_type$0$off023 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off025 = $is_dst_type_derived_from_static_type$1$off0;$p$024 = $47;
        } else {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
         label = 20;
         break;
        }
       }
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0;$is_dst_type_derived_from_static_type$2$off0 = 0;
       label = 20;
      }
     } while(0);
     do {
      if ((label|0) == 20) {
       if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
        label = 24;
       } else {
        HEAP32[$14>>2] = $current_ptr;
        $49 = ((($info)) + 40|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = (($50) + 1)|0;
        HEAP32[$49>>2] = $51;
        $52 = ((($info)) + 36|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = ($53|0)==(1);
        if ($54) {
         $55 = HEAP32[$30>>2]|0;
         $56 = ($55|0)==(2);
         if ($56) {
          HEAP8[$28>>0] = 1;
          if ($is_dst_type_derived_from_static_type$2$off0) {
           break;
          }
         } else {
          label = 24;
         }
        } else {
         label = 24;
        }
       }
       if ((label|0) == 24) {
        if ($is_dst_type_derived_from_static_type$2$off0) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 255]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 255]($8,$info,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = ((($this)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 255]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 255]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label|0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($info)) + 52|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ((($info)) + 53|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ((($this)) + 16|0);
  $8 = ((($this)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (((($this)) + 16|0) + ($9<<3)|0);
  HEAP8[$3>>0] = 0;
  HEAP8[$5>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $11 = ($9|0)>(1);
  L3: do {
   if ($11) {
    $12 = ((($this)) + 24|0);
    $13 = ((($info)) + 24|0);
    $14 = ((($this)) + 8|0);
    $15 = ((($info)) + 54|0);
    $p$0 = $12;
    while(1) {
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(0);
     if (!($17)) {
      break L3;
     }
     $18 = HEAP8[$3>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if ($19) {
      $25 = HEAP8[$5>>0]|0;
      $26 = ($25<<24>>24)==(0);
      if (!($26)) {
       $27 = HEAP32[$14>>2]|0;
       $28 = $27 & 1;
       $29 = ($28|0)==(0);
       if ($29) {
        break L3;
       }
      }
     } else {
      $20 = HEAP32[$13>>2]|0;
      $21 = ($20|0)==(1);
      if ($21) {
       break L3;
      }
      $22 = HEAP32[$14>>2]|0;
      $23 = $22 & 2;
      $24 = ($23|0)==(0);
      if ($24) {
       break L3;
      }
     }
     HEAP8[$3>>0] = 0;
     HEAP8[$5>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
     $30 = ((($p$0)) + 8|0);
     $31 = ($30>>>0)<($10>>>0);
     if ($31) {
      $p$0 = $30;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$3>>0] = $4;
  HEAP8[$5>>0] = $6;
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 255]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 511]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,8440,8608,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 80|0);
   $5 = ((($2)) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    $36 = HEAP32[9824>>2]|0;
    HEAP32[$vararg_buffer7>>2] = $36;
    _abort_message(9928,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = ((($2)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[8184>>2]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 511](8184,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[9824>>2]|0;
    $31 = HEAP32[$29>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 511]($29)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(9832,$vararg_buffer);
    // unreachable;
   } else {
    $35 = HEAP32[9824>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $35;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(9880,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(9968,$vararg_buffer10);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((9328|0),(397|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(9544,$vararg_buffer);
  // unreachable;
 }
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$this>>2]|0;
  $6 = ((($5)) + -12|0);
  __ZdlPv($6);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[9328>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(9600,$vararg_buffer);
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((9656|0),(9688|0),1164,(9304|0));
 // unreachable;
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((9768|0),(9688|0),1175,(9800|0));
 // unreachable;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[10000>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (10040 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (10040 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[10000>>2] = $22;
     } else {
      $23 = HEAP32[(10016)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(10008)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (10040 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (10040 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[10000>>2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[(10016)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(10008)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = ($89|0)==(0);
     if (!($88)) {
      $90 = HEAP32[(10020)>>2]|0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = (10040 + ($92<<2)|0);
      $94 = HEAP32[10000>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[10000>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (10040 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (10040 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(10016)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(10008)>>2] = $81;
     HEAP32[(10020)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(10004)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (10304 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(10016)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (10304 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(10004)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(10004)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(10016)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(10016)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(10016)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(10008)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(10020)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (10040 + ($229<<2)|0);
       $231 = HEAP32[10000>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[10000>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (10040 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (10040 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(10016)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(10008)>>2] = $rsize$0$i$lcssa;
      HEAP32[(10020)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(10004)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (10304 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (10304 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(10008)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(10016)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (10304 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(10004)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(10004)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(10016)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(10016)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(10016)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (10040 + ($424<<2)|0);
          $426 = HEAP32[10000>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[10000>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (10040 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (10040 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(10016)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (10304 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(10004)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(10004)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(10016)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(10016)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(10008)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(10020)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(10020)>>2] = $514;
   HEAP32[(10008)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(10008)>>2] = 0;
   HEAP32[(10020)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(10012)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(10012)>>2] = $528;
  $529 = HEAP32[(10024)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(10024)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[10472>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(10480)>>2] = $538;
    HEAP32[(10476)>>2] = $538;
    HEAP32[(10484)>>2] = -1;
    HEAP32[(10488)>>2] = -1;
    HEAP32[(10492)>>2] = 0;
    HEAP32[(10444)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[10472>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(10480)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(10440)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(10432)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(10444)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(10024)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (10448);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(10012)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(10476)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(10432)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(10440)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(10480)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(10444)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(10444)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(10432)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(10432)>>2] = $632;
  $633 = HEAP32[(10436)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(10436)>>2] = $632;
  }
  $635 = HEAP32[(10024)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(10016)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(10016)>>2] = $tbase$255$i;
    }
    HEAP32[(10448)>>2] = $tbase$255$i;
    HEAP32[(10452)>>2] = $tsize$254$i;
    HEAP32[(10460)>>2] = 0;
    $640 = HEAP32[10472>>2]|0;
    HEAP32[(10036)>>2] = $640;
    HEAP32[(10032)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (10040 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (10040 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (10040 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(10024)>>2] = $654;
    HEAP32[(10012)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(10488)>>2]|0;
    HEAP32[(10028)>>2] = $659;
   } else {
    $sp$084$i = (10448);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(10012)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(10024)>>2] = $684;
       HEAP32[(10012)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(10488)>>2]|0;
       HEAP32[(10028)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(10016)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(10016)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (10448);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (10448);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L317: do {
       if ($728) {
        $729 = HEAP32[(10012)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(10012)>>2] = $730;
        HEAP32[(10024)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(10020)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(10008)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(10008)>>2] = $736;
         HEAP32[(10020)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L325: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (10040 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[10000>>2]|0;
            $763 = $762 & $761;
            HEAP32[10000>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (10304 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(10004)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(10004)>>2] = $806;
             break L325;
            } else {
             $807 = HEAP32[(10016)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L325;
             }
            }
           } while(0);
           $814 = HEAP32[(10016)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(10016)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (10040 + ($840<<2)|0);
         $842 = HEAP32[10000>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[10000>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (10040 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (10040 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(10016)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (10304 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(10004)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(10004)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L411: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L411;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(10016)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L317;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(10016)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (10448);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(10024)>>2] = $953;
    HEAP32[(10012)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(10488)>>2]|0;
    HEAP32[(10028)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(10448)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(10448)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(10448)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(10448)+12>>2]|0;
    HEAP32[(10448)>>2] = $tbase$255$i;
    HEAP32[(10452)>>2] = $tsize$254$i;
    HEAP32[(10460)>>2] = 0;
    HEAP32[(10456)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (10040 + ($977<<2)|0);
      $979 = HEAP32[10000>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[10000>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (10040 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (10040 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(10016)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (10304 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(10004)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(10004)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L452: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L452;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(10016)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(10016)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(10012)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(10012)>>2] = $1062;
   $1063 = HEAP32[(10024)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(10024)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(10016)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(10020)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(10008)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (10040 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[10000>>2]|0;
     $36 = $35 & $34;
     HEAP32[10000>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (10304 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(10004)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(10004)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(10016)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(10016)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(10016)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(10024)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(10012)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(10012)>>2] = $120;
   HEAP32[(10024)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(10020)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(10020)>>2] = 0;
   HEAP32[(10008)>>2] = 0;
   return;
  }
  $125 = HEAP32[(10020)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(10008)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(10008)>>2] = $128;
   HEAP32[(10020)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (10040 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(10016)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[10000>>2]|0;
     $152 = $151 & $150;
     HEAP32[10000>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(10016)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(10016)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(10016)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (10304 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(10004)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(10004)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(10016)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(10016)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(10016)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(10020)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(10008)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (10040 + ($233<<2)|0);
  $235 = HEAP32[10000>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[10000>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (10040 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (10040 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(10016)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (10304 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(10004)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(10004)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(10016)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(10016)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(10032)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(10032)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (10456);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(10032)>>2] = -1;
 return;
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $11 = 0;
  return ($11|0);
 } else {
  $$03 = $n;$l$04 = $vl;$r$05 = $vr;
 }
 while(1) {
  $1 = HEAP8[$l$04>>0]|0;
  $2 = HEAP8[$r$05>>0]|0;
  $3 = ($1<<24>>24)==($2<<24>>24);
  if (!($3)) {
   $$lcssa = $1;$$lcssa19 = $2;
   break;
  }
  $4 = (($$03) + -1)|0;
  $5 = ((($l$04)) + 1|0);
  $6 = ((($r$05)) + 1|0);
  $7 = ($4|0)==(0);
  if ($7) {
   $11 = 0;
   label = 5;
   break;
  } else {
   $$03 = $4;$l$04 = $5;$r$05 = $6;
  }
 }
 if ((label|0) == 5) {
  return ($11|0);
 }
 $8 = $$lcssa&255;
 $9 = $$lcssa19&255;
 $10 = (($8) - ($9))|0;
 $11 = $10;
 return ($11|0);
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__114__shared_countD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[$this>>2]|0;
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 511]($this);
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __ZNSt3__119__shared_weak_countD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__119__shared_weak_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 return;
}
function __ZNSt3__119__shared_weak_count16__release_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__114__shared_count16__release_sharedEv($this)|0);
 if ($0) {
  __ZNSt3__119__shared_weak_count14__release_weakEv($this);
 }
 return;
}
function __ZNSt3__119__shared_weak_count14__release_weakEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 8|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[$this>>2]|0;
  $4 = ((($3)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 511]($this);
 }
 return;
}
function __ZNKSt3__119__shared_weak_count13__get_deleterERKSt9type_info($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (8200);
 $0 = ((($this)) + 4|0);
 __THREW__ = 0;
 invoke_vii(398,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__118__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($msg|0))|0);
 $1 = (($0) + 13)|0;
 $2 = (__Znwj($1)|0);
 HEAP32[$2>>2] = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 12|0);
 $6 = (($0) + 1)|0;
 _memcpy(($5|0),($msg|0),($6|0))|0;
 HEAP32[$this>>2] = $5;
 return;
}
function __ZNSt3__112__next_primeEj($n) {
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$k0$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $i$0 = 0, $in$0 = 0, $j$0 = 0, $k0$0 = 0, $storemerge = 0, $storemerge$lcssa = 0, $storemerge$lcssa15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 9|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = $n;
 $4 = ($n>>>0)<(212);
 do {
  if ($4) {
   $5 = (__ZNSt3__113__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_(10648,(10840),$2,$1)|0);
   $6 = HEAP32[$5>>2]|0;
   $$0 = $6;
  } else {
   $7 = ($n>>>0)>(4294967291);
   if ($7) {
    $8 = (___cxa_allocate_exception(8)|0);
    __THREW__ = 0;
    invoke_vii(178,($8|0),(10840|0));
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if ($10) {
     $11 = ___cxa_find_matching_catch()|0;
     $12 = tempRet0;
     ___cxa_free_exception(($8|0));
     ___resumeException($11|0);
     // unreachable;
    } else {
     HEAP32[$8>>2] = (8264);
     ___cxa_throw(($8|0),(8304|0),(147|0));
     // unreachable;
    }
   }
   $13 = (($n>>>0) / 210)&-1;
   $14 = ($13*210)|0;
   $15 = (($n) - ($14))|0;
   HEAP32[$3>>2] = $15;
   $16 = (__ZNSt3__113__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_(10864,(11056),$3,$0)|0);
   $17 = $16;
   $18 = (($17) - (10864))|0;
   $19 = $18 >> 2;
   $20 = (10864 + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($14))|0;
   $in$0 = $19;$k0$0 = $13;$storemerge = $22;
   L9: while(1) {
    $j$0 = 5;
    while(1) {
     $23 = ($j$0>>>0)<(47);
     if (!($23)) {
      $i$0 = 211;
      label = 12;
      break;
     }
     $24 = (10648 + ($j$0<<2)|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (($storemerge>>>0) / ($25>>>0))&-1;
     $27 = ($26>>>0)<($25>>>0);
     if ($27) {
      $storemerge$lcssa15 = $storemerge;
      label = 110;
      break L9;
     }
     $28 = Math_imul($26, $25)|0;
     $29 = ($storemerge|0)==($28|0);
     $30 = (($j$0) + 1)|0;
     if ($29) {
      break;
     } else {
      $j$0 = $30;
     }
    }
    L15: do {
     if ((label|0) == 12) {
      while(1) {
       label = 0;
       $31 = (($storemerge>>>0) / ($i$0>>>0))&-1;
       $32 = ($31>>>0)<($i$0>>>0);
       if ($32) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $33 = Math_imul($31, $i$0)|0;
       $34 = ($storemerge|0)==($33|0);
       if ($34) {
        break L15;
       }
       $35 = (($i$0) + 10)|0;
       $36 = (($storemerge>>>0) / ($35>>>0))&-1;
       $37 = ($36>>>0)<($35>>>0);
       if ($37) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $38 = Math_imul($36, $35)|0;
       $39 = ($storemerge|0)==($38|0);
       if ($39) {
        break L15;
       }
       $40 = (($i$0) + 12)|0;
       $41 = (($storemerge>>>0) / ($40>>>0))&-1;
       $42 = ($41>>>0)<($40>>>0);
       if ($42) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $43 = Math_imul($41, $40)|0;
       $44 = ($storemerge|0)==($43|0);
       if ($44) {
        break L15;
       }
       $45 = (($i$0) + 16)|0;
       $46 = (($storemerge>>>0) / ($45>>>0))&-1;
       $47 = ($46>>>0)<($45>>>0);
       if ($47) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $48 = Math_imul($46, $45)|0;
       $49 = ($storemerge|0)==($48|0);
       if ($49) {
        break L15;
       }
       $50 = (($i$0) + 18)|0;
       $51 = (($storemerge>>>0) / ($50>>>0))&-1;
       $52 = ($51>>>0)<($50>>>0);
       if ($52) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $53 = Math_imul($51, $50)|0;
       $54 = ($storemerge|0)==($53|0);
       if ($54) {
        break L15;
       }
       $55 = (($i$0) + 22)|0;
       $56 = (($storemerge>>>0) / ($55>>>0))&-1;
       $57 = ($56>>>0)<($55>>>0);
       if ($57) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $58 = Math_imul($56, $55)|0;
       $59 = ($storemerge|0)==($58|0);
       if ($59) {
        break L15;
       }
       $60 = (($i$0) + 28)|0;
       $61 = (($storemerge>>>0) / ($60>>>0))&-1;
       $62 = ($61>>>0)<($60>>>0);
       if ($62) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $63 = Math_imul($61, $60)|0;
       $64 = ($storemerge|0)==($63|0);
       if ($64) {
        break L15;
       }
       $65 = (($i$0) + 30)|0;
       $66 = (($storemerge>>>0) / ($65>>>0))&-1;
       $67 = ($66>>>0)<($65>>>0);
       if ($67) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $68 = Math_imul($66, $65)|0;
       $69 = ($storemerge|0)==($68|0);
       if ($69) {
        break L15;
       }
       $70 = (($i$0) + 36)|0;
       $71 = (($storemerge>>>0) / ($70>>>0))&-1;
       $72 = ($71>>>0)<($70>>>0);
       if ($72) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $73 = Math_imul($71, $70)|0;
       $74 = ($storemerge|0)==($73|0);
       if ($74) {
        break L15;
       }
       $75 = (($i$0) + 40)|0;
       $76 = (($storemerge>>>0) / ($75>>>0))&-1;
       $77 = ($76>>>0)<($75>>>0);
       if ($77) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $78 = Math_imul($76, $75)|0;
       $79 = ($storemerge|0)==($78|0);
       if ($79) {
        break L15;
       }
       $80 = (($i$0) + 42)|0;
       $81 = (($storemerge>>>0) / ($80>>>0))&-1;
       $82 = ($81>>>0)<($80>>>0);
       if ($82) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $83 = Math_imul($81, $80)|0;
       $84 = ($storemerge|0)==($83|0);
       if ($84) {
        break L15;
       }
       $85 = (($i$0) + 46)|0;
       $86 = (($storemerge>>>0) / ($85>>>0))&-1;
       $87 = ($86>>>0)<($85>>>0);
       if ($87) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $88 = Math_imul($86, $85)|0;
       $89 = ($storemerge|0)==($88|0);
       if ($89) {
        break L15;
       }
       $90 = (($i$0) + 52)|0;
       $91 = (($storemerge>>>0) / ($90>>>0))&-1;
       $92 = ($91>>>0)<($90>>>0);
       if ($92) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $93 = Math_imul($91, $90)|0;
       $94 = ($storemerge|0)==($93|0);
       if ($94) {
        break L15;
       }
       $95 = (($i$0) + 58)|0;
       $96 = (($storemerge>>>0) / ($95>>>0))&-1;
       $97 = ($96>>>0)<($95>>>0);
       if ($97) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $98 = Math_imul($96, $95)|0;
       $99 = ($storemerge|0)==($98|0);
       if ($99) {
        break L15;
       }
       $100 = (($i$0) + 60)|0;
       $101 = (($storemerge>>>0) / ($100>>>0))&-1;
       $102 = ($101>>>0)<($100>>>0);
       if ($102) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $103 = Math_imul($101, $100)|0;
       $104 = ($storemerge|0)==($103|0);
       if ($104) {
        break L15;
       }
       $105 = (($i$0) + 66)|0;
       $106 = (($storemerge>>>0) / ($105>>>0))&-1;
       $107 = ($106>>>0)<($105>>>0);
       if ($107) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $108 = Math_imul($106, $105)|0;
       $109 = ($storemerge|0)==($108|0);
       if ($109) {
        break L15;
       }
       $110 = (($i$0) + 70)|0;
       $111 = (($storemerge>>>0) / ($110>>>0))&-1;
       $112 = ($111>>>0)<($110>>>0);
       if ($112) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $113 = Math_imul($111, $110)|0;
       $114 = ($storemerge|0)==($113|0);
       if ($114) {
        break L15;
       }
       $115 = (($i$0) + 72)|0;
       $116 = (($storemerge>>>0) / ($115>>>0))&-1;
       $117 = ($116>>>0)<($115>>>0);
       if ($117) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $118 = Math_imul($116, $115)|0;
       $119 = ($storemerge|0)==($118|0);
       if ($119) {
        break L15;
       }
       $120 = (($i$0) + 78)|0;
       $121 = (($storemerge>>>0) / ($120>>>0))&-1;
       $122 = ($121>>>0)<($120>>>0);
       if ($122) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $123 = Math_imul($121, $120)|0;
       $124 = ($storemerge|0)==($123|0);
       if ($124) {
        break L15;
       }
       $125 = (($i$0) + 82)|0;
       $126 = (($storemerge>>>0) / ($125>>>0))&-1;
       $127 = ($126>>>0)<($125>>>0);
       if ($127) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $128 = Math_imul($126, $125)|0;
       $129 = ($storemerge|0)==($128|0);
       if ($129) {
        break L15;
       }
       $130 = (($i$0) + 88)|0;
       $131 = (($storemerge>>>0) / ($130>>>0))&-1;
       $132 = ($131>>>0)<($130>>>0);
       if ($132) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $133 = Math_imul($131, $130)|0;
       $134 = ($storemerge|0)==($133|0);
       if ($134) {
        break L15;
       }
       $135 = (($i$0) + 96)|0;
       $136 = (($storemerge>>>0) / ($135>>>0))&-1;
       $137 = ($136>>>0)<($135>>>0);
       if ($137) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $138 = Math_imul($136, $135)|0;
       $139 = ($storemerge|0)==($138|0);
       if ($139) {
        break L15;
       }
       $140 = (($i$0) + 100)|0;
       $141 = (($storemerge>>>0) / ($140>>>0))&-1;
       $142 = ($141>>>0)<($140>>>0);
       if ($142) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $143 = Math_imul($141, $140)|0;
       $144 = ($storemerge|0)==($143|0);
       if ($144) {
        break L15;
       }
       $145 = (($i$0) + 102)|0;
       $146 = (($storemerge>>>0) / ($145>>>0))&-1;
       $147 = ($146>>>0)<($145>>>0);
       if ($147) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $148 = Math_imul($146, $145)|0;
       $149 = ($storemerge|0)==($148|0);
       if ($149) {
        break L15;
       }
       $150 = (($i$0) + 106)|0;
       $151 = (($storemerge>>>0) / ($150>>>0))&-1;
       $152 = ($151>>>0)<($150>>>0);
       if ($152) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $153 = Math_imul($151, $150)|0;
       $154 = ($storemerge|0)==($153|0);
       if ($154) {
        break L15;
       }
       $155 = (($i$0) + 108)|0;
       $156 = (($storemerge>>>0) / ($155>>>0))&-1;
       $157 = ($156>>>0)<($155>>>0);
       if ($157) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $158 = Math_imul($156, $155)|0;
       $159 = ($storemerge|0)==($158|0);
       if ($159) {
        break L15;
       }
       $160 = (($i$0) + 112)|0;
       $161 = (($storemerge>>>0) / ($160>>>0))&-1;
       $162 = ($161>>>0)<($160>>>0);
       if ($162) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $163 = Math_imul($161, $160)|0;
       $164 = ($storemerge|0)==($163|0);
       if ($164) {
        break L15;
       }
       $165 = (($i$0) + 120)|0;
       $166 = (($storemerge>>>0) / ($165>>>0))&-1;
       $167 = ($166>>>0)<($165>>>0);
       if ($167) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $168 = Math_imul($166, $165)|0;
       $169 = ($storemerge|0)==($168|0);
       if ($169) {
        break L15;
       }
       $170 = (($i$0) + 126)|0;
       $171 = (($storemerge>>>0) / ($170>>>0))&-1;
       $172 = ($171>>>0)<($170>>>0);
       if ($172) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $173 = Math_imul($171, $170)|0;
       $174 = ($storemerge|0)==($173|0);
       if ($174) {
        break L15;
       }
       $175 = (($i$0) + 130)|0;
       $176 = (($storemerge>>>0) / ($175>>>0))&-1;
       $177 = ($176>>>0)<($175>>>0);
       if ($177) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $178 = Math_imul($176, $175)|0;
       $179 = ($storemerge|0)==($178|0);
       if ($179) {
        break L15;
       }
       $180 = (($i$0) + 136)|0;
       $181 = (($storemerge>>>0) / ($180>>>0))&-1;
       $182 = ($181>>>0)<($180>>>0);
       if ($182) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $183 = Math_imul($181, $180)|0;
       $184 = ($storemerge|0)==($183|0);
       if ($184) {
        break L15;
       }
       $185 = (($i$0) + 138)|0;
       $186 = (($storemerge>>>0) / ($185>>>0))&-1;
       $187 = ($186>>>0)<($185>>>0);
       if ($187) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $188 = Math_imul($186, $185)|0;
       $189 = ($storemerge|0)==($188|0);
       if ($189) {
        break L15;
       }
       $190 = (($i$0) + 142)|0;
       $191 = (($storemerge>>>0) / ($190>>>0))&-1;
       $192 = ($191>>>0)<($190>>>0);
       if ($192) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $193 = Math_imul($191, $190)|0;
       $194 = ($storemerge|0)==($193|0);
       if ($194) {
        break L15;
       }
       $195 = (($i$0) + 148)|0;
       $196 = (($storemerge>>>0) / ($195>>>0))&-1;
       $197 = ($196>>>0)<($195>>>0);
       if ($197) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $198 = Math_imul($196, $195)|0;
       $199 = ($storemerge|0)==($198|0);
       if ($199) {
        break L15;
       }
       $200 = (($i$0) + 150)|0;
       $201 = (($storemerge>>>0) / ($200>>>0))&-1;
       $202 = ($201>>>0)<($200>>>0);
       if ($202) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $203 = Math_imul($201, $200)|0;
       $204 = ($storemerge|0)==($203|0);
       if ($204) {
        break L15;
       }
       $205 = (($i$0) + 156)|0;
       $206 = (($storemerge>>>0) / ($205>>>0))&-1;
       $207 = ($206>>>0)<($205>>>0);
       if ($207) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $208 = Math_imul($206, $205)|0;
       $209 = ($storemerge|0)==($208|0);
       if ($209) {
        break L15;
       }
       $210 = (($i$0) + 162)|0;
       $211 = (($storemerge>>>0) / ($210>>>0))&-1;
       $212 = ($211>>>0)<($210>>>0);
       if ($212) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $213 = Math_imul($211, $210)|0;
       $214 = ($storemerge|0)==($213|0);
       if ($214) {
        break L15;
       }
       $215 = (($i$0) + 166)|0;
       $216 = (($storemerge>>>0) / ($215>>>0))&-1;
       $217 = ($216>>>0)<($215>>>0);
       if ($217) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $218 = Math_imul($216, $215)|0;
       $219 = ($storemerge|0)==($218|0);
       if ($219) {
        break L15;
       }
       $220 = (($i$0) + 168)|0;
       $221 = (($storemerge>>>0) / ($220>>>0))&-1;
       $222 = ($221>>>0)<($220>>>0);
       if ($222) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $223 = Math_imul($221, $220)|0;
       $224 = ($storemerge|0)==($223|0);
       if ($224) {
        break L15;
       }
       $225 = (($i$0) + 172)|0;
       $226 = (($storemerge>>>0) / ($225>>>0))&-1;
       $227 = ($226>>>0)<($225>>>0);
       if ($227) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $228 = Math_imul($226, $225)|0;
       $229 = ($storemerge|0)==($228|0);
       if ($229) {
        break L15;
       }
       $230 = (($i$0) + 178)|0;
       $231 = (($storemerge>>>0) / ($230>>>0))&-1;
       $232 = ($231>>>0)<($230>>>0);
       if ($232) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $233 = Math_imul($231, $230)|0;
       $234 = ($storemerge|0)==($233|0);
       if ($234) {
        break L15;
       }
       $235 = (($i$0) + 180)|0;
       $236 = (($storemerge>>>0) / ($235>>>0))&-1;
       $237 = ($236>>>0)<($235>>>0);
       if ($237) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $238 = Math_imul($236, $235)|0;
       $239 = ($storemerge|0)==($238|0);
       if ($239) {
        break L15;
       }
       $240 = (($i$0) + 186)|0;
       $241 = (($storemerge>>>0) / ($240>>>0))&-1;
       $242 = ($241>>>0)<($240>>>0);
       if ($242) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $243 = Math_imul($241, $240)|0;
       $244 = ($storemerge|0)==($243|0);
       if ($244) {
        break L15;
       }
       $245 = (($i$0) + 190)|0;
       $246 = (($storemerge>>>0) / ($245>>>0))&-1;
       $247 = ($246>>>0)<($245>>>0);
       if ($247) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $248 = Math_imul($246, $245)|0;
       $249 = ($storemerge|0)==($248|0);
       if ($249) {
        break L15;
       }
       $250 = (($i$0) + 192)|0;
       $251 = (($storemerge>>>0) / ($250>>>0))&-1;
       $252 = ($251>>>0)<($250>>>0);
       if ($252) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $253 = Math_imul($251, $250)|0;
       $254 = ($storemerge|0)==($253|0);
       if ($254) {
        break L15;
       }
       $255 = (($i$0) + 196)|0;
       $256 = (($storemerge>>>0) / ($255>>>0))&-1;
       $257 = ($256>>>0)<($255>>>0);
       if ($257) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $258 = Math_imul($256, $255)|0;
       $259 = ($storemerge|0)==($258|0);
       if ($259) {
        break L15;
       }
       $260 = (($i$0) + 198)|0;
       $261 = (($storemerge>>>0) / ($260>>>0))&-1;
       $262 = ($261>>>0)<($260>>>0);
       if ($262) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $263 = Math_imul($261, $260)|0;
       $264 = ($storemerge|0)==($263|0);
       if ($264) {
        break L15;
       }
       $265 = (($i$0) + 208)|0;
       $266 = (($storemerge>>>0) / ($265>>>0))&-1;
       $267 = ($266>>>0)<($265>>>0);
       if ($267) {
        $storemerge$lcssa = $storemerge;
        label = 109;
        break L9;
       }
       $268 = Math_imul($266, $265)|0;
       $269 = ($storemerge|0)==($268|0);
       $270 = (($i$0) + 210)|0;
       if ($269) {
        break;
       } else {
        $i$0 = $270;
        label = 12;
       }
      }
     }
    } while(0);
    $271 = (($in$0) + 1)|0;
    $272 = ($271|0)==(48);
    $$ = $272 ? 0 : $271;
    $273 = $272&1;
    $$k0$0 = (($273) + ($k0$0))|0;
    $274 = ($$k0$0*210)|0;
    $275 = (10864 + ($$<<2)|0);
    $276 = HEAP32[$275>>2]|0;
    $277 = (($276) + ($274))|0;
    $in$0 = $$;$k0$0 = $$k0$0;$storemerge = $277;
   }
   if ((label|0) == 109) {
    HEAP32[$2>>2] = $storemerge$lcssa;
    $$0 = $storemerge$lcssa;
    break;
   }
   else if ((label|0) == 110) {
    HEAP32[$2>>2] = $storemerge$lcssa15;
    $$0 = $storemerge$lcssa15;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__113__lower_boundIRNS_6__lessIjjEEPKjjEET0_S6_S6_RKT1_T_($__first,$__last,$__value_,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__value_ = $__value_|0;
 $__comp = $__comp|0;
 var $$0$ph = 0, $$0$ph$lcssa = 0, $$lcssa = 0, $$neg1 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__len$0 = 0, $__len$0$lcssa7 = 0, $__len$0$ph = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__last;
 $1 = $__first;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = HEAP32[$__value_>>2]|0;
 $$0$ph = $__first;$__len$0$ph = $3;
 L1: while(1) {
  $__len$0 = $__len$0$ph;
  while(1) {
   $5 = ($__len$0|0)==(0);
   if ($5) {
    $$0$ph$lcssa = $$0$ph;
    break L1;
   }
   $6 = (($__len$0|0) / 2)&-1;
   $7 = (($$0$ph) + ($6<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8>>>0)<($4>>>0);
   if ($9) {
    $$lcssa = $6;$__len$0$lcssa7 = $__len$0;
    break;
   } else {
    $__len$0 = $6;
   }
  }
  $$sum = (($$lcssa) + 1)|0;
  $10 = (($$0$ph) + ($$sum<<2)|0);
  $$neg1 = (($__len$0$lcssa7) + -1)|0;
  $11 = (($$neg1) - ($$lcssa))|0;
  $$0$ph = $10;$__len$0$ph = $11;
 }
 return ($$0$ph$lcssa|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this>>2]=HEAP32[$__str>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
 } else {
  $3 = ((($__str)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($__str)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$4,$6);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($this,$__pos1,$__n1,$__s,$__n2) {
 $this = $this|0;
 $__pos1 = $__pos1|0;
 $__n1 = $__n1|0;
 $__s = $__s|0;
 $__n2 = $__n2|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__r$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = ((($this)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__pos1>>>0);
 $9 = ($__n2|0)==(-1);
 $or$cond = $9 | $7;
 if ($or$cond) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 }
 $10 = (($8) - ($__pos1))|0;
 $11 = ($10>>>0)<($__n1>>>0);
 $12 = $11 ? $10 : $__n1;
 if ($2) {
  $15 = ((($this)) + 1|0);
  $17 = $15;
 } else {
  $13 = ((($this)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $17 = $14;
 }
 $16 = (($17) + ($__pos1)|0);
 $18 = ($12>>>0)>($__n2>>>0);
 $19 = $18 ? $__n2 : $12;
 $20 = (_memcmp($16,$__s,$19)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  $22 = ($12>>>0)<($__n2>>>0);
  if ($22) {
   $__r$0 = -1;
  } else {
   $$ = $18&1;
   return ($$|0);
  }
 } else {
  $__r$0 = $20;
 }
 return ($__r$0|0);
}
function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 __THREW__ = 0;
 $1 = (invoke_iiiiii(399,($this|0),0,-1,($__s|0),($0|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  return ($1|0);
 }
 return (0)|0;
}
function runPostSets() {

}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}

  
function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&511](a1|0,+a2);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&511](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&511](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&511](a1|0)|0;
}


function dynCall_viidd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4;
  FUNCTION_TABLE_viidd[index&511](a1|0,a2|0,+a3,+a4);
}


function dynCall_vidii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_vidii[index&255](a1|0,+a2,a3|0,a4|0);
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&511](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
  FUNCTION_TABLE_viiiiid[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iiid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  return FUNCTION_TABLE_iiid[index&511](a1|0,a2|0,+a3)|0;
}


function dynCall_di(index,a1) {
  index = index|0;
  a1=a1|0;
  return +FUNCTION_TABLE_di[index&511](a1|0);
}


function dynCall_dd(index,a1) {
  index = index|0;
  a1=+a1;
  return +FUNCTION_TABLE_dd[index&511](+a1);
}


function dynCall_iid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  return FUNCTION_TABLE_iid[index&255](a1|0,+a2)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
}


function dynCall_dii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return +FUNCTION_TABLE_dii[index&511](a1|0,a2|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&511]()|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&511](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iidii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iidii[index&511](a1|0,+a2,a3|0,a4|0)|0;
}


function dynCall_viiid(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
  FUNCTION_TABLE_viiid[index&511](a1|0,a2|0,a3|0,+a4);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&511](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&511]();
}


function dynCall_viid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  FUNCTION_TABLE_viid[index&511](a1|0,a2|0,+a3);
}


function dynCall_iiiid(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
  return FUNCTION_TABLE_iiiid[index&511](a1|0,a2|0,a3|0,+a4)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(0); }
function b1(p0,p1) { p0 = p0|0;p1 = +p1; nullFunc_vid(1); }
function b2(p0) { p0 = p0|0; nullFunc_vi(2); }
function __emval_decref__wrapper(p0) { p0 = p0|0; __emval_decref(p0|0); }
function b3(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(3); }
function b4(p0) { p0 = p0|0; nullFunc_ii(4);return 0; }
function b5(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3; nullFunc_viidd(5); }
function b6(p0,p1,p2,p3) { p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0; nullFunc_vidii(6); }
function b7(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(7);return 0; }
function b8(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(8);return 0; }
function b9(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_viiiiid(9); }
function b10(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10); }
function b11(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_iiid(11);return 0; }
function b12(p0) { p0 = p0|0; nullFunc_di(12);return +0; }
function b13(p0) { p0 = +p0; nullFunc_dd(13);return +0; }
function b14(p0,p1) { p0 = p0|0;p1 = +p1; nullFunc_iid(14);return 0; }
function b15(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(15);return 0; }
function b16(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_dii(16);return +0; }
function b17() { ; nullFunc_i(17);return 0; }
function b18(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(18);return 0; }
function b19(p0,p1,p2,p3) { p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0; nullFunc_iidii(19);return 0; }
function b20(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3; nullFunc_viiid(20); }
function b21(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(21); }
function ___cxa_throw__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0); }
function b22() { ; nullFunc_v(22); }
function ___cxa_pure_virtual__wrapper() { ; ___cxa_pure_virtual(); }
function ___cxa_rethrow__wrapper() { ; ___cxa_rethrow(); }
function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
function b23(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_viid(23); }
function b24(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3; nullFunc_iiiid(24);return 0; }
function b25(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(25); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_viiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b0,b0,b0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b0,b0,b0,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_vid = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN4rhea17abstract_variable9set_valueEd,__ZN4rhea17abstract_variable12change_valueEd,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN4rhea12pod_variableIdE9set_valueEd,__ZN4rhea12pod_variableIdE12change_valueEd,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,__ZN4rhea17linear_expressionC2Ed,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN4rhea8variable9set_valueEd,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,__ZN4rhea8variableC2Ed,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN4rhea14float_variableC2Ed
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,__ZN4rhea14simplex_solverD2Ev,__ZN4rhea14simplex_solverD0Ev,b2,__ZN4rhea14simplex_solver7resolveEv,b2,b2,__ZThn8_N4rhea14simplex_solverD1Ev,__ZThn8_N4rhea14simplex_solverD0Ev,__ZNSt3__120__shared_ptr_emplaceIN4rhea18objective_variableENS_9allocatorIS2_EEED2Ev,__ZNSt3__120__shared_ptr_emplaceIN4rhea18objective_variableENS_9allocatorIS2_EEED0Ev,__ZNSt3__120__shared_ptr_emplaceIN4rhea18objective_variableENS_9allocatorIS2_EEE16__on_zero_sharedEv,b2,__ZNSt3__120__shared_ptr_emplaceIN4rhea18objective_variableENS_9allocatorIS2_EEE21__on_zero_shared_weakEv,__ZN4rhea17abstract_variableD2Ev,__ZN4rhea18objective_variableD0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt9exceptionD2Ev,__ZN4rhea13row_not_foundD0Ev
,b2,__ZNSt3__120__shared_ptr_emplaceIN4rhea14slack_variableENS_9allocatorIS2_EEED2Ev,__ZNSt3__120__shared_ptr_emplaceIN4rhea14slack_variableENS_9allocatorIS2_EEED0Ev,__ZNSt3__120__shared_ptr_emplaceIN4rhea14slack_variableENS_9allocatorIS2_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_emplaceIN4rhea14slack_variableENS_9allocatorIS2_EEE21__on_zero_shared_weakEv,__ZN4rhea14slack_variableD0Ev,b2,b2,b2,b2,__ZNSt3__120__shared_ptr_emplaceIN4rhea14dummy_variableENS_9allocatorIS2_EEED2Ev,__ZNSt3__120__shared_ptr_emplaceIN4rhea14dummy_variableENS_9allocatorIS2_EEED0Ev,__ZNSt3__120__shared_ptr_emplaceIN4rhea14dummy_variableENS_9allocatorIS2_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_emplaceIN4rhea14dummy_variableENS_9allocatorIS2_EEE21__on_zero_shared_weakEv,__ZN4rhea14dummy_variableD0Ev,b2,b2,b2,b2,b2,__ZN4rhea33required_failure_with_explanationD2Ev,__ZN4rhea33required_failure_with_explanationD0Ev,b2,__ZN4rhea20constraint_not_foundD0Ev,b2,__ZN4rhea14internal_errorD2Ev,__ZN4rhea14internal_errorD0Ev,b2,__ZN4rhea16required_failureD0Ev,__ZNSt3__120__shared_ptr_emplaceIN4rhea14float_variableENS_9allocatorIS2_EEED2Ev
,__ZNSt3__120__shared_ptr_emplaceIN4rhea14float_variableENS_9allocatorIS2_EEED0Ev,__ZNSt3__120__shared_ptr_emplaceIN4rhea14float_variableENS_9allocatorIS2_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_emplaceIN4rhea14float_variableENS_9allocatorIS2_EEE21__on_zero_shared_weakEv,__ZN4rhea14float_variableD2Ev,__ZN4rhea14float_variableD0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN4rhea19abstract_constraintD2Ev,__ZN4rhea19abstract_constraintD0Ev,b2,b2,b2,b2,b2,b2,__ZN4rhea11edit_misuseD2Ev,__ZN4rhea11edit_misuseD0Ev,b2,b2,b2,__ZN4rhea23edit_or_stay_constraintD2Ev
,__ZN4rhea23edit_or_stay_constraintD0Ev,b2,__ZNSt3__120__shared_ptr_emplaceIN4rhea15edit_constraintENS_9allocatorIS2_EEED2Ev,__ZNSt3__120__shared_ptr_emplaceIN4rhea15edit_constraintENS_9allocatorIS2_EEED0Ev,__ZNSt3__120__shared_ptr_emplaceIN4rhea15edit_constraintENS_9allocatorIS2_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_emplaceIN4rhea15edit_constraintENS_9allocatorIS2_EEE21__on_zero_shared_weakEv,__ZN4rhea15edit_constraintD2Ev,__ZN4rhea15edit_constraintD0Ev,b2,b2,__ZN4rhea7tableauD2Ev,__ZN4rhea7tableauD0Ev,__ZN4rhea6solverD2Ev,__ZN4rhea6solverD0Ev,__ZN4rhea17linear_inequalityD2Ev,__ZN4rhea17linear_inequalityD0Ev,b2,b2,b2,__ZN4rhea17linear_constraintD2Ev,__ZN4rhea17linear_constraintD0Ev,__ZN4rhea15linear_equationD2Ev,__ZN4rhea15linear_equationD0Ev,b2,__ZN4rhea12pod_variableIdED2Ev,__ZN4rhea12pod_variableIdED0Ev,__ZN4rhea17abstract_variableD0Ev,b2,b2,b2
,__ZN4rhea13too_difficultD2Ev,__ZN4rhea13too_difficultD0Ev,b2,__ZN4rhea5errorD2Ev,__ZN4rhea5errorD0Ev,b2,__ZNSt3__120__shared_ptr_emplaceIN4rhea15stay_constraintENS_9allocatorIS2_EEED2Ev,__ZNSt3__120__shared_ptr_emplaceIN4rhea15stay_constraintENS_9allocatorIS2_EEED0Ev,__ZNSt3__120__shared_ptr_emplaceIN4rhea15stay_constraintENS_9allocatorIS2_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_emplaceIN4rhea15stay_constraintENS_9allocatorIS2_EEE21__on_zero_shared_weakEv,__ZN4rhea15stay_constraintD2Ev,__ZN4rhea15stay_constraintD0Ev,b2,b2,__ZNSt3__120__shared_ptr_emplaceIN4rhea17linear_inequalityENS_9allocatorIS2_EEED2Ev,__ZNSt3__120__shared_ptr_emplaceIN4rhea17linear_inequalityENS_9allocatorIS2_EEED0Ev,__ZNSt3__120__shared_ptr_emplaceIN4rhea17linear_inequalityENS_9allocatorIS2_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_emplaceIN4rhea17linear_inequalityENS_9allocatorIS2_EEE21__on_zero_shared_weakEv,__ZNSt3__120__shared_ptr_emplaceIN4rhea15linear_equationENS_9allocatorIS2_EEED2Ev,__ZNSt3__120__shared_ptr_emplaceIN4rhea15linear_equationENS_9allocatorIS2_EEED0Ev,__ZNSt3__120__shared_ptr_emplaceIN4rhea15linear_equationENS_9allocatorIS2_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_emplaceIN4rhea15linear_equationENS_9allocatorIS2_EEE21__on_zero_shared_weakEv,b2,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b2,__ZNSt9exceptionD0Ev,b2,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev
,b2,__ZNSt14overflow_errorD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,b2,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b2,__ZN10__cxxabiv117__class_type_infoD0Ev,b2,b2,b2,b2,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b2,b2,b2,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b2,b2,b2,__ZN10__cxxabiv119__pointer_type_infoD0Ev,b2,__ZNSt3__114__shared_countD2Ev,__ZNSt3__114__shared_countD0Ev,__ZNSt3__119__shared_weak_countD0Ev,b2,b2
,b2,b2,__ZNSt3__15dequeIjNS_9allocatorIjEEE19__add_back_capacityEv,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN4rhea14simplex_solver22set_external_variablesEv,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN4rhea8variableC2Ev,__ZN4rhea14simplex_solverC2Ev,b2,b2,b2,b2,b2,b2,b2,__Z11solverSolveRN4rhea14simplex_solverE,b2,b2
,b2,__Z4testv,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal14raw_destructorIN4rhea8variableEEEvPT_,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal14raw_destructorIN4rhea10constraintEEEvPT_,b2,b2,b2,__ZN10emscripten8internal14raw_destructorIN4rhea17linear_expressionEEEvPT_,b2,b2,b2,__ZN10emscripten8internal14raw_destructorIN4rhea15linear_equationEEEvPT_
,b2,b2,b2,__ZN10emscripten8internal14raw_destructorIN4rhea17linear_inequalityEEEvPT_,b2,b2,b2,__ZN10emscripten8internal14raw_destructorIN4rhea14simplex_solverEEEvPT_,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN4rhea8strength8requiredEv
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal14raw_destructorINSt3__16vectorIdNS2_9allocatorIdEEEEEEvPT_,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN4rhea6detail16flat_map_compareIdNSt3__14lessINS_8variableEEEEC2Ev,b2,b2,b2,__emval_decref__wrapper,b2,b2,b2
,b2,b2,b2,__ZN4rhea11edit_misuseC2Ev,b2,b2,b2,b2,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_vii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK4rhea18objective_variable9to_stringEv,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK4rhea14slack_variable9to_stringEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK4rhea14dummy_variable9to_stringEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK4rhea12pod_variableIdE9to_stringEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,__ZNK4rhea23edit_or_stay_constraint10expressionEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK4rhea17linear_constraint10expressionEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK4rhea17abstract_variable9to_stringEv
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt13runtime_errorC2EPKc
,b3,b3,b3,b3,__ZNSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEEC2ERKS7_,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_,__ZNSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEE24__emplace_back_slow_pathIJS2_EEEvDpOT_,b3,b3,b3,b3,b3,b3,__ZN4rhea14simplex_solver8optimizeERKNS_8variableE,b3,b3,b3,b3,b3,__ZNSt3__14listIN4rhea10constraintENS_9allocatorIS2_EEEC2ERKS5_,b3,b3
,b3,b3,b3,b3,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_,b3,b3,b3,__ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEE9push_backEOS1_,b3,b3,b3,b3,__ZNSt3__114__split_bufferINS_4pairIN4rhea8variableEdEERNS_9allocatorIS4_EEE9push_backEOS4_,b3,b3,b3,b3,b3,b3,b3,b3,__Z18createConstraintEqRN4rhea15linear_equationE,b3,__Z20createConstraintIneqRN4rhea17linear_inequalityE,__Z19solverAddConstraintRN4rhea14simplex_solverERNS_10constraintE,b3,b3,__ZNSt3__16vectorIdNS_9allocatorIdEEE8allocateEj
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__Z13solverAddStayRN4rhea14simplex_solverERNS_8variableE,b3,__Z16solverAddEditVarRN4rhea14simplex_solverERNS_8variableE,b3,b3,b3,__ZN10emscripten8internal15FunctionInvokerIPFvRN4rhea14simplex_solverEEvS4_JEE6invokeEPS6_PS3_,b3,b3,b3,__ZNSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEE8allocateEj,b3,b3,__ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE6rehashEj,b3,b3,__ZN4rhea17linear_expressionC2ERKS0_,b3,b3
,b3,b3,b3,__ZN4rhea8relationC2ENS0_6comp_tE,b3,b3,__ZN4rhea10constraintC2INS_15stay_constraintEEEONSt3__110shared_ptrIT_EE,b3,__ZN4rhea10constraintC2INS_15edit_constraintEEEONSt3__110shared_ptrIT_EE,__ZNSt3__16vectorIdNS_9allocatorIdEEE9push_backERKd,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN4rhea8variableC2ERKS0_,__ZN4rhea14simplex_solverC2ERKS0_,__ZN4rhea7tableauC2ERKS0_,__ZNSt3__18functionIFvRN4rhea14simplex_solverEEEC2ERKS5_,__ZNSt3__18functionIFvRKN4rhea8variableERNS1_14simplex_solverEEEC2ERKS8_,__ZNSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEEC2ERKS5_,__ZNSt3__113unordered_mapIN4rhea10constraintENS_13unordered_setINS1_8variableENS_4hashIS4_EENS_8equal_toIS4_EENS_9allocatorIS4_EEEENS5_IS2_EENS7_IS2_EENS9_INS_4pairIKS2_SB_EEEEEC2ERKSI_,__ZNSt3__113unordered_mapIN4rhea10constraintENS1_8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEC2ERKSD_,__ZNSt3__113unordered_mapIN4rhea8variableENS1_10constraintENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEC2ERKSD_,__ZNSt3__14listIN4rhea14simplex_solver9edit_infoENS_9allocatorIS3_EEEC2ERKS6_,__ZNSt3__15dequeIjNS_9allocatorIjEEEC2ERKS3_,__ZNSt3__113unordered_mapIN4rhea8variableENS1_17linear_expressionENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEC2ERKSD_,__ZNSt3__113unordered_setIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEC2ERKS9_,__ZNSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEE8allocateEj,b3,__ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEE6rehashEj,b3,__ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS2_8variableEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE6rehashEj,b3,__ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE6rehashEj
,b3,__ZNSt3__14listIN4rhea14simplex_solver9edit_infoENS_9allocatorIS3_EEE9push_backERKS3_,b3,b3,__ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEE10push_frontERKS1_,__ZN4rhea14simplex_solver9edit_infoC2ERKS1_,b3,b3,__ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEE6rehashEj,b3,__ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE6rehashEj,b3,b3,b3,b3,__ZN4rhea17linear_inequalityC2ERKS0_,b3,b3,b3,__ZN4rhea15linear_equationC2ERKS0_,b3,__ZN4rhea17linear_expressionC2EOS0_,b3,b3,__ZNKSt3__16vectorIdNS_9allocatorIdEEE17__annotate_shrinkEj,b3,b3,b3,__ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE,b3
,__ZN4rhea13too_difficultC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,b3,b3,b3,b3,b3,_abort_message,b3,b3,__ZNSt3__118__libcpp_refstringC2EPKc,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_ii = [b4,b4,b4,__ZN4rhea14simplex_solver5solveEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNK4rhea17abstract_variable8is_floatEv,__ZNK4rhea17abstract_variable5is_fdEv,__ZNK4rhea17abstract_variable8is_dummyEv,__ZNK4rhea17abstract_variable11is_externalEv,__ZNK4rhea18objective_variable12is_pivotableEv,__ZNK4rhea18objective_variable13is_restrictedEv,b4,__ZNK4rhea17abstract_variable9int_valueEv,b4,b4,b4,b4,b4
,__ZNK4rhea13row_not_found4whatEv,b4,b4,b4,b4,b4,__ZNK4rhea14slack_variable11is_externalEv,__ZNK4rhea14slack_variable12is_pivotableEv,__ZNK4rhea14slack_variable13is_restrictedEv,b4,b4,b4,b4,b4,b4,__ZNK4rhea14dummy_variable8is_dummyEv,__ZNK4rhea14dummy_variable11is_externalEv,__ZNK4rhea14dummy_variable12is_pivotableEv,__ZNK4rhea14dummy_variable13is_restrictedEv,b4,b4,b4,__ZNK4rhea16required_failure4whatEv,b4,__ZNK4rhea20constraint_not_found4whatEv,b4,b4,__ZNK4rhea14internal_error4whatEv,b4,b4
,b4,b4,b4,b4,b4,__ZNK4rhea14float_variable8is_floatEv,__ZNK4rhea12pod_variableIdE8is_dummyEv,__ZNK4rhea12pod_variableIdE11is_externalEv,__ZNK4rhea12pod_variableIdE12is_pivotableEv,__ZNK4rhea12pod_variableIdE13is_restrictedEv,b4,__ZNK4rhea14float_variable9int_valueEv,b4,b4,b4,__ZNK4rhea8strength11is_requiredEv,b4,b4,b4,__ZNK4rhea19abstract_constraint18is_edit_constraintEv,__ZNK4rhea19abstract_constraint13is_inequalityEv,__ZNK4rhea19abstract_constraint11is_requiredEv,__ZNK4rhea19abstract_constraint18is_stay_constraintEv,b4,b4,b4,__ZNK4rhea11edit_misuse4whatEv,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,__ZNK4rhea15edit_constraint18is_edit_constraintEv,__ZNK4rhea15edit_constraint12is_satisfiedEv,b4,b4,b4,b4,b4,b4,b4,__ZNK4rhea17linear_inequality13is_inequalityEv,__ZNK4rhea17linear_inequality12is_satisfiedEv,b4,b4,b4,b4,__ZNK4rhea15linear_equation12is_satisfiedEv,b4,b4,b4,__ZNK4rhea17abstract_variable12is_pivotableEv,__ZNK4rhea17abstract_variable13is_restrictedEv,b4
,b4,b4,__ZNK4rhea13too_difficult4whatEv,b4,b4,__ZNK4rhea5error4whatEv,b4,b4,b4,b4,b4,b4,__ZNK4rhea15stay_constraint18is_stay_constraintEv,__ZNK4rhea15stay_constraint12is_satisfiedEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt9bad_alloc4whatEv,b4,__ZNKSt9exception4whatEv,b4,b4
,__ZNKSt13runtime_error4whatEv,b4,b4,b4,__ZNKSt8bad_cast4whatEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,__Znwj,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__111char_traitsIcE6lengthEPKc,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10emscripten8internal13getActualTypeIN4rhea8variableEEEPKvPT_,b4,b4,__ZN10emscripten8internal7InvokerIPN4rhea8variableEJEE6invokeEPFS4_vE,__ZN10emscripten8internal12operator_newIN4rhea8variableEJdEEEPT_DpOT0_,b4,b4,b4,b4,__ZN10emscripten8internal13getActualTypeIN4rhea10constraintEEEPKvPT_,b4,__Z21constraintIsSatisfiedRN4rhea10constraintE,b4,__ZN10emscripten8internal13getActualTypeIN4rhea17linear_expressionEEEPKvPT_,b4,b4,b4,__ZN10emscripten8internal13getActualTypeIN4rhea15linear_equationEEEPKvPT_,b4
,__Z19equationIsSatisfiedRN4rhea15linear_equationE,b4,__ZN10emscripten8internal13getActualTypeIN4rhea17linear_inequalityEEEPKvPT_,b4,__Z21inequalityIsSatisfiedRN4rhea17linear_inequalityE,b4,__ZN10emscripten8internal13getActualTypeIN4rhea14simplex_solverEEEPKvPT_,b4,b4,__ZN10emscripten8internal7InvokerIPN4rhea14simplex_solverEJEE6invokeEPFS4_vE,b4,b4,b4,b4,b4,b4,b4,b4,__ZN4rhea14simplex_solver10begin_editEv,b4,__ZN4rhea14simplex_solver8end_editEv,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10emscripten8internal13getActualTypeINSt3__16vectorIdNS2_9allocatorIdEEEEEEPKvPT_,b4,b4,__ZN10emscripten8internal7InvokerIPNSt3__16vectorIdNS2_9allocatorIdEEEEJEE6invokeEPFS7_vE,b4,b4,__ZNKSt3__16vectorIdNS_9allocatorIdEEE4sizeEv,b4,b4,b4,b4,b4,__ZN10emscripten8internal7InvokerINSt3__16vectorIdNS2_9allocatorIdEEEEJEE6invokeEPFS6_vE,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10emscripten8internal18GenericBindingTypeIN4rhea10constraintEE10toWireTypeEOS3_,b4,__ZN10emscripten8internal18GenericBindingTypeIN4rhea17linear_inequalityEE10toWireTypeEOS3_,b4,__ZN10emscripten8internal18GenericBindingTypeIN4rhea8variableEE12fromWireTypeEPS3_,__ZN10emscripten8internal18GenericBindingTypeIN4rhea17linear_expressionEE12fromWireTypeEPS3_,__ZN10emscripten8internal18GenericBindingTypeIN4rhea15linear_equationEE10toWireTypeEOS3_,b4,__ZN10emscripten8internal18GenericBindingTypeIN4rhea17linear_expressionEE10toWireTypeEOS3_,b4,b4,__ZN10emscripten8internal18GenericBindingTypeINSt3__16vectorIdNS2_9allocatorIdEEEEE10toWireTypeEOS6_,b4,__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_,b4,b4,b4,b4
,b4,b4,__ZNK4rhea8relation4typeEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_viidd = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,__ZN4rhea17linear_expressionC2ERKNS_8variableEdd,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_vidii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,__Z24createExpressionConstVardNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERN4rhea8variableE,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_iiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b8,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__16vectorIdNS3_9allocatorIdEEEEjES2_S9_JjEE6invokeEPSB_PS7_j,__ZN10emscripten8internal12VectorAccessINSt3__16vectorIdNS2_9allocatorIdEEEEE3setERS6_jRKd,b8,b8,b8,b8,b8,__ZN10emscripten8internal7InvokerIN4rhea15linear_equationEJRNS2_17linear_expressionERNS2_8variableEEE6invokeEPFS3_S5_S7_EPS4_PS6_,__ZN10emscripten8internal7InvokerIN4rhea15linear_equationEJRNS2_17linear_expressionES5_EE6invokeEPFS3_S5_S5_EPS4_S9_,__ZN10emscripten8internal7InvokerIN4rhea15linear_equationEJRNS2_8variableERNS2_17linear_expressionEEE6invokeEPFS3_S5_S7_EPS4_PS6_
,__ZN10emscripten8internal7InvokerIN4rhea15linear_equationEJRNS2_8variableES5_EE6invokeEPFS3_S5_S5_EPS4_S9_,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__121__murmur2_or_cityhashIjLj32EEclEPKvj,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8];
var FUNCTION_TABLE_viiiiid = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,__ZN4rhea17linear_inequalityC2ENS_17linear_expressionENS_8relationES1_NS_8strengthEd,__ZN4rhea17linear_inequalityC2ERKNS_8variableENS_8relationENS_17linear_expressionENS_8strengthEd,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_viiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__14listIN4rhea14simplex_solver9edit_infoENS_9allocatorIS3_EEE12emplace_backIJRKNS1_8variableERKNS1_10constraintERS8_SE_RdEEEvDpOT_,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_iiid = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,__ZN10emscripten8internal7InvokerIN4rhea15linear_equationEJRNS2_8variableEdEE6invokeEPFS3_S5_dEPS4_d,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_di = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNK4rhea17abstract_variable5valueEv,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNK4rhea14float_variable5valueEv,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNK4rhea19abstract_constraint6weightEv,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNK4rhea8variable5valueEv,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNK4rhea17linear_expression8evaluateEv,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12];
var FUNCTION_TABLE_dd = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13];
var FUNCTION_TABLE_iid = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,__ZN4rhea17linear_expressionmLEd,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN10emscripten8internal7InvokerIPN4rhea8variableEJOdEE6invokeEPFS4_S5_Ed];
var FUNCTION_TABLE_iii = [b15,b15,b15,b15,b15,__ZN4rhea14simplex_solver15add_constraint_ERKNS_10constraintE,__ZN4rhea14simplex_solver18remove_constraint_ERKNS_10constraintE,b15,b15,b15,b15,b15,__ZNKSt3__119__shared_weak_count13__get_deleterERKSt9type_info,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNK4rhea10constrainteqERKS0_,__ZNK4rhea10constraintneERKS0_,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN4rhea8flat_mapINS_8variableEdNSt3__14lessIS1_EENS2_9allocatorINS2_4pairIS1_dEEEEEixERKS1_,b15
,b15,__ZNSt3__113unordered_mapIN4rhea8variableENS1_17linear_expressionENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEixERSA_,b15,b15,b15,b15,__ZN4rhea17linear_expressionpLERKS0_,__ZN4rhea17linear_expressionpLERKNSt3__14pairINS_8variableEdEE,__ZNSt3__113unordered_mapIN4rhea10constraintENS1_8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEixERSA_,__ZNSt3__113unordered_mapIN4rhea8variableENS1_10constraintENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEixERSA_,__ZNSt3__113unordered_mapIN4rhea10constraintENS_13unordered_setINS1_8variableENS_4hashIS4_EENS_8equal_toIS4_EENS_9allocatorIS4_EEEENS5_IS2_EENS7_IS2_EENS9_INS_4pairIKS2_SB_EEEEEixERSF_,b15,b15,b15,b15,__ZN4rhea14simplex_solver19try_adding_directlyERNS_17linear_expressionE,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN4rhea7tableau13remove_columnERKNS_8variableE
,b15,b15,__ZNSt3__113unordered_mapIN4rhea8variableENS_13unordered_setIS2_NS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEES5_S7_NS8_INS_4pairIKS2_SA_EEEEEixERSC_,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN10emscripten8internal15FunctionInvokerIPFbRN4rhea10constraintEEbS4_JEE6invokeEPS6_PS3_,b15,b15,b15,b15,b15,b15
,b15,__ZN10emscripten8internal15FunctionInvokerIPFbRN4rhea15linear_equationEEbS4_JEE6invokeEPS6_PS3_,b15,b15,b15,__ZN10emscripten8internal15FunctionInvokerIPFbRN4rhea17linear_inequalityEEbS4_JEE6invokeEPS6_PS3_,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN10emscripten8internal13MethodInvokerIMN4rhea14simplex_solverEFRS3_vES4_PS3_JEE6invokeERKS6_S7_,b15,b15,b15,b15,b15,b15,__ZN4rhea17linear_expressionpLERKNS_8variableE,b15,__ZN4rhea17linear_expressionmIERKNS_8variableE,b15
,b15,b15,b15,b15,b15,b15,b15,__ZN4rhea6solver14add_constraintERKNS_10constraintE,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIdNS2_9allocatorIdEEEEKFjvEjPKS6_JEE6invokeERKS8_SA_,__ZN10emscripten8internal12VectorAccessINSt3__16vectorIdNS2_9allocatorIdEEEEE3getERKS6_j,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,__ZN10emscripten8internal7InvokerIN4rhea10constraintEJRNS2_15linear_equationEEE6invokeEPFS3_S5_EPS4_,__ZN10emscripten8internal7InvokerIN4rhea10constraintEJRNS2_17linear_inequalityEEE6invokeEPFS3_S5_EPS4_,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,__ZNKSt3__14hashIN4rhea8variableEEclERKS2_,__ZNKSt3__14hashIN4rhea10constraintEEclERKS2_,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,__ZN4rhea17linear_expressionmIERKS0_,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15];
var FUNCTION_TABLE_dii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN4rhea17linear_expression11new_subjectERKNS_8variableE,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN10emscripten8internal13MethodInvokerIMN4rhea8variableEKFdvEdPKS3_JEE6invokeERKS5_S7_,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZN10emscripten8internal13MethodInvokerIMN4rhea17linear_expressionEKFdvEdPKS3_JEE6invokeERKS5_S7_,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16];
var FUNCTION_TABLE_i = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN10emscripten8internal12operator_newIN4rhea8variableEJEEEPT_DpOT0_,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,__ZN10emscripten8internal12operator_newIN4rhea14simplex_solverEJEEEPT_DpOT0_,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZN10emscripten8internal12operator_newINSt3__16vectorIdNS2_9allocatorIdEEEEJEEEPT_DpOT0_,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,___cxa_get_globals_fast,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17];
var FUNCTION_TABLE_iiiii = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,__ZN4rhea17linear_expression3addERKS0_RKNS_8variableERNS_7tableauE,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN10emscripten8internal7InvokerIN4rhea17linear_expressionEJRNS2_8variableENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEES5_EE6invokeEPFS3_S5_SC_S5_EPS4_PNS0_11BindingTypeISC_EUt_ESG_,b18,b18,b18,b18,b18
,b18,b18,__ZN10emscripten8internal7InvokerIN4rhea17linear_inequalityEJRNS2_17linear_expressionENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEES5_EE6invokeEPFS3_S5_SC_S5_EPS4_PNS0_11BindingTypeISC_EUt_ESG_,__ZN10emscripten8internal7InvokerIN4rhea17linear_inequalityEJRNS2_8variableENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERNS2_17linear_expressionEEE6invokeEPFS3_S5_SC_SE_EPS4_PNS0_11BindingTypeISC_EUt_EPSD_,__ZN10emscripten8internal7InvokerIN4rhea17linear_inequalityEJRNS2_8variableENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEES5_EE6invokeEPFS3_S5_SC_S5_EPS4_PNS0_11BindingTypeISC_EUt_ESG_,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18];
var FUNCTION_TABLE_iidii = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZN10emscripten8internal7InvokerIN4rhea17linear_expressionEJdNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEERNS2_8variableEEE6invokeEPFS3_dSA_SC_EdPNS0_11BindingTypeISA_EUt_EPSB_,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19];
var FUNCTION_TABLE_viiid = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__Z24createExpressionVarConstRN4rhea8variableENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEd,b20,b20,__Z24createInequalityVarConstRN4rhea8variableENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEd,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZN10emscripten8internal15FunctionInvokerIPFvRN4rhea14simplex_solverERNS2_8variableEdEvS4_JS6_dEE6invokeEPS8_PS3_PS5_d,b20,b20,b20,b20,b20,b20,b20,__ZN4rhea15edit_constraintC2ERKNS_8variableERKNS_8strengthEd,b20,b20,b20,b20,b20,b20
,__ZN4rhea15linear_equationC2ENS_17linear_expressionERKNS_8strengthEd,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIdNS2_9allocatorIdEEEEFvjRKdEvPS6_JjS8_EE6invokeERKSA_SB_jd,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,__ZN4rhea15stay_constraintC2ERKNS_8variableENS_8strengthEd,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20];
var FUNCTION_TABLE_viii = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,___cxa_throw__wrapper,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__112__hash_tableIN4rhea8variableENS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_,__ZN4rhea7tableau19note_added_variableERKNS_8variableES3_,b21,b21,b21,b21,b21,__ZN4rhea14simplex_solver28add_with_artificial_variableERNS_17linear_expressionE,b21,b21,b21,b21,b21,__ZN4rhea7tableau14substitute_outERKNS_8variableERKNS_17linear_expressionE,__ZN4rhea7tableau7add_rowERKNS_8variableERKNS_17linear_expressionE,b21,b21,__ZN4rhea14simplex_solver5pivotERKNS_8variableES3_,b21
,__ZN4rhea7tableau10remove_rowERKNS_8variableE,b21,b21,__ZN4rhea17linear_expression14change_subjectERKNS_8variableES3_,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b21,b21,b21,__ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS5_PvEE,b21,__ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS2_8variableEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS5_PvEE,__ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS5_PvEE,__ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEE20__node_insert_uniqueEPNS_11__hash_nodeISD_PvEE,__ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEE20__node_insert_uniqueEPNS_11__hash_nodeISC_PvEE,b21,__ZN4rheaplERKNS_8variableES2_,__ZN4rheaeqENS_17linear_expressionERKNS_8variableE,__ZN4rheaeqENS_17linear_expressionERKS0_,b21,b21,b21,b21,__Z20createEquationExpVarRN4rhea17linear_expressionERNS_8variableE,b21,b21,b21,b21,b21,b21,b21
,__ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endIPKdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_,b21,b21,b21,__Z20createEquationExpExpRN4rhea17linear_expressionES1_,__Z20createEquationVarExpRN4rhea8variableERNS_17linear_expressionE,__Z20createEquationVarVarRN4rhea8variableES1_,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZN10emscripten8internal15FunctionInvokerIPFvRN4rhea14simplex_solverERNS2_10constraintEEvS4_JS6_EE6invokeEPS8_PS3_PS5_,b21,__ZN10emscripten8internal15FunctionInvokerIPFvRN4rhea14simplex_solverERNS2_8variableEEvS4_JS6_EE6invokeEPS8_PS3_PS5_,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_,b21,b21,__ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEE18__construct_at_endINS_13move_iteratorIPS1_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_,b21,b21,b21,b21
,b21,b21,__ZN4rheamiENS_17linear_expressionERKS0_,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEjRKd,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__16vectorIN4rhea8variableENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_,b21,__ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS_13unordered_setINS2_8variableENS_4hashIS5_EENS_8equal_toIS5_EENS_9allocatorIS5_EEEEEENS_22__unordered_map_hasherIS3_SD_NS6_IS3_EELb1EEENS_21__unordered_map_equalIS3_SD_NS8_IS3_EELb1EEENSA_ISD_EEE15__insert_uniqueIRKNS_4pairIKS3_SC_EEEENSN_INS_15__hash_iteratorIPNS_11__hash_nodeISD_PvEEEEbEEOT_,b21,__ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea10constraintENS2_8variableEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE15__insert_uniqueIRKNS_4pairIKS3_S4_EEEENSI_INS_15__hash_iteratorIPNS_11__hash_nodeIS5_PvEEEEbEEOT_,b21
,__ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_10constraintEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE15__insert_uniqueIRKNS_4pairIKS3_S4_EEEENSI_INS_15__hash_iteratorIPNS_11__hash_nodeIS5_PvEEEEbEEOT_,b21,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS_13unordered_setIS3_NS_4hashIS3_EENS_8equal_toIS3_EENS_9allocatorIS3_EEEEEENS_22__unordered_map_hasherIS3_SC_S6_Lb1EEENS_21__unordered_map_equalIS3_SC_S8_Lb1EEENS9_ISC_EEE15__insert_uniqueIRKNS_4pairIKS3_SB_EEEENSK_INS_15__hash_iteratorIPNS_11__hash_nodeISC_PvEEEEbEEOT_,b21,__ZNSt3__112__hash_tableINS_17__hash_value_typeIN4rhea8variableENS2_17linear_expressionEEENS_22__unordered_map_hasherIS3_S5_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_S5_NS_8equal_toIS3_EELb1EEENS_9allocatorIS5_EEE15__insert_uniqueIRKNS_4pairIKS3_S4_EEEENSI_INS_15__hash_iteratorIPNS_11__hash_nodeIS5_PvEEEEbEEOT_,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEjRKd,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21];
var FUNCTION_TABLE_v = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,___cxa_pure_virtual__wrapper,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZL25default_terminate_handlerv,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,___cxa_rethrow__wrapper,___cxa_end_catch__wrapper,b22,___cxa_bad_cast,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22];
var FUNCTION_TABLE_viid = [b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,__Z22createEquationVarConstRN4rhea8variableEd,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN10emscripten8internal13MethodInvokerIMN4rhea8variableEFvdEvPS3_JdEE6invokeERKS5_S6_d,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__Z13solverSuggestRN4rhea14simplex_solverERNS_8variableEd,b23,__Z18solverSuggestValueRN4rhea14simplex_solverERNS_8variableEd,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorIdNS2_9allocatorIdEEEEFvRKdEvPS6_JS8_EE6invokeERKSA_SB_d,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23];
var FUNCTION_TABLE_iiiid = [b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__16vectorIdNS2_9allocatorIdEEEEjRKdEbS7_JjS9_EE6invokeEPSB_PS6_jd,b24,b24,__ZN10emscripten8internal7InvokerIN4rhea17linear_expressionEJRNS2_8variableENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEdEE6invokeEPFS3_S5_SC_dEPS4_PNS0_11BindingTypeISC_EUt_Ed,b24,b24,b24,b24
,b24,b24,b24,b24,b24,__ZN10emscripten8internal7InvokerIN4rhea17linear_inequalityEJRNS2_8variableENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEdEE6invokeEPFS3_S5_SC_dEPS4_PNS0_11BindingTypeISC_EUt_Ed,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24];
var FUNCTION_TABLE_viiii = [b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b25,b25,b25,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b25,b25,b25,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNK4rhea14simplex_solver17build_explanationERKNS_8variableERKNS_17linear_expressionE,b25,b25,b25
,b25,b25,b25,b25,b25,b25,__ZNSt3__16vectorINS_4pairIN4rhea8variableEdEENS_9allocatorIS4_EEE6insertENS_11__wrap_iterIPKS4_EEOS4_,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,__Z22createExpressionVarVarRN4rhea8variableENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES1_,b25,b25,b25,b25,b25,__Z22createInequalityExpExpRN4rhea17linear_expressionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES1_,__Z22createInequalityVarExpRN4rhea8variableENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERNS_17linear_expressionE,__Z22createInequalityVarVarRN4rhea8variableENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES1_,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,__ZNSt3__15dequeIjNS_9allocatorIjEEE8__appendINS_16__deque_iteratorIjPKjRS6_PKS7_iLi1024EEEEEvT_SC_PNS_9enable_ifIXsr21__is_forward_iteratorISC_EE5valueEvE4typeE,__ZNSt3__114__split_bufferIPjRNS_9allocatorIS1_EEEC2EjjS4_,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25];

  return { ___cxa_can_catch: ___cxa_can_catch, _free: _free, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _memmove: _memmove, _strlen: _strlen, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, ___getTypeName: ___getTypeName, __GLOBAL__sub_I_binding_cpp: __GLOBAL__sub_I_binding_cpp, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_viiiii: dynCall_viiiii, dynCall_vid: dynCall_vid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viidd: dynCall_viidd, dynCall_vidii: dynCall_vidii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiid: dynCall_viiiiid, dynCall_viiiiii: dynCall_viiiiii, dynCall_iiid: dynCall_iiid, dynCall_di: dynCall_di, dynCall_dd: dynCall_dd, dynCall_iid: dynCall_iid, dynCall_iii: dynCall_iii, dynCall_dii: dynCall_dii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_iidii: dynCall_iidii, dynCall_viiid: dynCall_viiid, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viid: dynCall_viid, dynCall_iiiid: dynCall_iiiid, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real___GLOBAL__sub_I_binding_cpp = asm["__GLOBAL__sub_I_binding_cpp"]; asm["__GLOBAL__sub_I_binding_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_binding_cpp.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____getTypeName.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var __GLOBAL__sub_I_binding_cpp = Module["__GLOBAL__sub_I_binding_cpp"] = asm["__GLOBAL__sub_I_binding_cpp"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viidd = Module["dynCall_viidd"] = asm["dynCall_viidd"];
var dynCall_vidii = Module["dynCall_vidii"] = asm["dynCall_vidii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iiid = Module["dynCall_iiid"] = asm["dynCall_iiid"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_dd = Module["dynCall_dd"] = asm["dynCall_dd"];
var dynCall_iid = Module["dynCall_iid"] = asm["dynCall_iid"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iidii = Module["dynCall_iidii"] = asm["dynCall_iidii"];
var dynCall_viiid = Module["dynCall_viiid"] = asm["dynCall_viiid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_iiiid = Module["dynCall_iiiid"] = asm["dynCall_iiiid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }
    var request = Module['memoryInitializerRequest'];
    if (request) {
      // a network request has already been created, just use that
      if (request.response) {
        setTimeout(function() {
          applyMemoryInitializer(request.response);
        }, 0); // it's already here; but, apply it asynchronously
      } else {
        request.addEventListener('load', function() { // wait for it
          if (request.status !== 200 && request.status !== 0) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status);
          }
          if (!request.response || typeof request.response !== 'object' || !request.response.byteLength) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): ' + request.response);
          }
          applyMemoryInitializer(request.response);
        });
      }
    } else {
      // fetch it from the network ourselves
      Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {
    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



return { Module : Module, FS : FS };
